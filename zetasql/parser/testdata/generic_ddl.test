[default supported_generic_entity_types=RESERVATION,EXPLORE,SUPPORTED_ENTITY]
[default supported_generic_sub_entity_types=REPLICA,CHILD_OF_REPLICA]

CREATE {{RESERVATION|reSERVAtion|SUPPORTED_ENTITY}} myProject.myReservation
--
ALTERNATION GROUP: RESERVATION
--
CreateEntityStatement [0-42] [CREATE RESERVATIO...eservation]
  Identifier(RESERVATION) [7-18] [RESERVATION]
  PathExpression [19-42] [myProject.myReservation]
    Identifier(myProject) [19-28] [myProject]
    Identifier(myReservation) [29-42] [myReservation]
--
CREATE RESERVATION myProject.myReservation
--
ALTERNATION GROUP: reSERVAtion
--
CreateEntityStatement [0-42] [CREATE reSERVAtio...eservation]
  Identifier(reSERVAtion) [7-18] [reSERVAtion]
  PathExpression [19-42] [myProject.myReservation]
    Identifier(myProject) [19-28] [myProject]
    Identifier(myReservation) [29-42] [myReservation]
--
CREATE reSERVAtion myProject.myReservation
--
ALTERNATION GROUP: SUPPORTED_ENTITY
--
CreateEntityStatement [0-47] [CREATE SUPPORTED_...eservation]
  Identifier(SUPPORTED_ENTITY) [7-23] [SUPPORTED_ENTITY]
  PathExpression [24-47] [myProject.myReservation]
    Identifier(myProject) [24-33] [myProject]
    Identifier(myReservation) [34-47] [myReservation]
--
CREATE SUPPORTED_ENTITY myProject.myReservation
==

# Generic CREATE with all optional clauses
CREATE OR REPLACE RESERVATION IF NOT EXISTS myProject.myReservation
OPTIONS(a=b, c=d)
AS JSON '{"key": "value"}';
--
CreateEntityStatement(is_or_replace, is_if_not_exists) [0-112] [CREATE OR..."value"}']
  Identifier(RESERVATION) [18-29] [RESERVATION]
  PathExpression [44-67] [myProject.myReservation]
    Identifier(myProject) [44-53] [myProject]
    Identifier(myReservation) [54-67] [myReservation]
  OptionsList [75-85] [(a=b, c=d)]
    OptionsEntry [76-79] [a=b]
      Identifier(a) [76-77] [a]
      PathExpression [78-79] [b]
        Identifier(b) [78-79] [b]
    OptionsEntry [81-84] [c=d]
      Identifier(c) [81-82] [c]
      PathExpression [83-84] [d]
        Identifier(d) [83-84] [d]
  JSONLiteral('{"key": "value"}') [89-112] [JSON '{"key": "value"}']
--
CREATE OR REPLACE RESERVATION IF NOT EXISTS myProject.myReservation
OPTIONS(a = b, c = d)
AS JSON '{"key": "value"}'
==

# Generic CREATE with text literal body, instead of json
CREATE EXPLORE myProject.myExplore
OPTIONS(a=b, c=d)
AS """
explore: test_explore {

}
""";
--
CreateEntityStatement [0-90] [CREATE EXPLORE...lore {  } """]
  Identifier(EXPLORE) [7-14] [EXPLORE]
  PathExpression [15-34] [myProject.myExplore]
    Identifier(myProject) [15-24] [myProject]
    Identifier(myExplore) [25-34] [myExplore]
  OptionsList [42-52] [(a=b, c=d)]
    OptionsEntry [43-46] [a=b]
      Identifier(a) [43-44] [a]
      PathExpression [45-46] [b]
        Identifier(b) [45-46] [b]
    OptionsEntry [48-51] [c=d]
      Identifier(c) [48-49] [c]
      PathExpression [50-51] [d]
        Identifier(d) [50-51] [d]
  StringLiteral("""
explore: test_explore {

}
""") [56-90] [""" explore...explore {  } """]
--
CREATE EXPLORE myProject.myExplore
OPTIONS(a = b, c = d)
AS """
explore: test_explore {

}
"""
==

# Generic CREATE doesn't support multi-parts entity type
CREATE {{foo|RESERVATION}}.bar myProject.myReservation
--
ALTERNATION GROUP: foo
--
ERROR: foo is not a supported object type [at 1:8]
CREATE foo.bar myProject.myReservation
       ^
--
ALTERNATION GROUP: RESERVATION
--
ERROR: Syntax error: Unexpected "." [at 1:19]
CREATE RESERVATION.bar myProject.myReservation
                  ^
==

CREATE SOME_TYPE IF NOT EXISTS
--
ERROR: SOME_TYPE is not a supported object type [at 1:8]
CREATE SOME_TYPE IF NOT EXISTS
       ^
==

CREATE SOME_TYPE
--
ERROR: SOME_TYPE is not a supported object type [at 1:8]
CREATE SOME_TYPE
       ^
==

# Generic CREATE doesn't work with keywords
CREATE OPTIONS myProject.myReservation
--
ERROR: Syntax error: Expected keyword FUNCTION but got keyword OPTIONS [at 1:8]
CREATE OPTIONS myProject.myReservation
       ^
==

# Generic ALTER statement
ALTER RESERVATION myProject.myReservation SET OPTIONS (a=b)
--
AlterEntityStatement [0-59] [ALTER RESERVATION...IONS (a=b)]
  Identifier(RESERVATION) [6-17] [RESERVATION]
  PathExpression [18-41] [myProject.myReservation]
    Identifier(myProject) [18-27] [myProject]
    Identifier(myReservation) [28-41] [myReservation]
  AlterActionList [42-59] [SET OPTIONS (a=b)]
    SetOptionsAction [42-59] [SET OPTIONS (a=b)]
      OptionsList [54-59] [(a=b)]
        OptionsEntry [55-58] [a=b]
          Identifier(a) [55-56] [a]
          PathExpression [57-58] [b]
            Identifier(b) [57-58] [b]
--
ALTER RESERVATION myProject.myReservation SET OPTIONS(a = b)
==

ALTER RESERVATION myProject.myReservation SET AS JSON r'{"k\n1" : "v"}';
--
AlterEntityStatement [0-71] [ALTER RESERVATION...1" : "v"}']
  Identifier(RESERVATION) [6-17] [RESERVATION]
  PathExpression [18-41] [myProject.myReservation]
    Identifier(myProject) [18-27] [myProject]
    Identifier(myReservation) [28-41] [myReservation]
  AlterActionList [42-71] [SET AS JSON r'{"k\n1" : "v"}']
    SetAsAction [42-71] [SET AS JSON r'{"k\n1" : "v"}']
      JSONLiteral(r'{"k\n1" : "v"}') [49-71] [JSON r'{"k\n1" : "v"}']
--
ALTER RESERVATION myProject.myReservation SET AS JSON r'{"k\n1" : "v"}'
==

ALTER RESERVATION myProject.myReservation
  SET OPTIONS (a=b),
  SET AS JSON '{"key": "value"}';
--
AlterEntityStatement [0-95] [ALTER RESERVATION..."value"}']
  Identifier(RESERVATION) [6-17] [RESERVATION]
  PathExpression [18-41] [myProject.myReservation]
    Identifier(myProject) [18-27] [myProject]
    Identifier(myReservation) [28-41] [myReservation]
  AlterActionList [44-95] [SET OPTIONS..."value"}']
    SetOptionsAction [44-61] [SET OPTIONS (a=b)]
      OptionsList [56-61] [(a=b)]
        OptionsEntry [57-60] [a=b]
          Identifier(a) [57-58] [a]
          PathExpression [59-60] [b]
            Identifier(b) [59-60] [b]
    SetAsAction [65-95] [SET AS JSON '{"key": "value"}']
      JSONLiteral('{"key": "value"}') [72-95] [JSON '{"key": "value"}']
--
ALTER RESERVATION myProject.myReservation SET OPTIONS(a = b), SET AS JSON '{"key": "value"}'
==

ALTER EXPLORE myProject.myExplore SET AS "explore: test_explore { }";
--
AlterEntityStatement [0-68] [ALTER EXPLORE...t_explore { }"]
  Identifier(EXPLORE) [6-13] [EXPLORE]
  PathExpression [14-33] [myProject.myExplore]
    Identifier(myProject) [14-23] [myProject]
    Identifier(myExplore) [24-33] [myExplore]
  AlterActionList [34-68] [SET AS "explore...explore { }"]
    SetAsAction [34-68] [SET AS "explore...explore { }"]
      StringLiteral('explore: test_explore { }') [41-68] ["explore: test_explore { }"]
--
ALTER EXPLORE myProject.myExplore SET AS "explore: test_explore { }"
==

# Incomplete generic ALTER statement
ALTER RESERVATION myProject.myReservation
--
ERROR: Syntax error: Unexpected end of statement [at 1:42]
ALTER RESERVATION myProject.myReservation
                                         ^
==

ALTER UNSUPPORTED myProject.myReservation
--
ERROR: UNSUPPORTED is not a supported object type [at 1:7]
ALTER UNSUPPORTED myProject.myReservation
      ^
==

DROP RESERVATION myProject.myReservation
--
DropEntityStatement [0-40] [DROP RESERVATION...Reservation]
  Identifier(RESERVATION) [5-16] [RESERVATION]
  PathExpression [17-40] [myProject.myReservation]
    Identifier(myProject) [17-26] [myProject]
    Identifier(myReservation) [27-40] [myReservation]
--
DROP RESERVATION myProject.myReservation
==

DROP RESERVATION IF EXISTS myProject.myReservation
--
DropEntityStatement(is_if_exists) [0-50] [DROP RESERVATION...Reservation]
  Identifier(RESERVATION) [5-16] [RESERVATION]
  PathExpression [27-50] [myProject.myReservation]
    Identifier(myProject) [27-36] [myProject]
    Identifier(myReservation) [37-50] [myReservation]
--
DROP RESERVATION IF EXISTS myProject.myReservation
==

DROP RESERVATION
--
ERROR: Syntax error: Unexpected end of statement [at 1:17]
DROP RESERVATION
                ^
==

DROP RESERVATION my_res IF EXISTS;
--
ERROR: Syntax error: Expected end of input but got keyword IF [at 1:25]
DROP RESERVATION my_res IF EXISTS;
                        ^
==

DROP UNSUPPORTED myProject.myReservation
--
ERROR: UNSUPPORTED is not a supported object type [at 1:6]
DROP UNSUPPORTED myProject.myReservation
     ^
==

[supported_generic_entity_types=]

CREATE {{RESERVATION|reSERVAtion|SUPPORTED_ENTITY}} myProject.myReservation
--
ALTERNATION GROUP: RESERVATION
--
ERROR: RESERVATION is not a supported object type [at 1:8]
CREATE RESERVATION myProject.myReservation
       ^
--
ALTERNATION GROUP: reSERVAtion
--
ERROR: reSERVAtion is not a supported object type [at 1:8]
CREATE reSERVAtion myProject.myReservation
       ^
--
ALTERNATION GROUP: SUPPORTED_ENTITY
--
ERROR: SUPPORTED_ENTITY is not a supported object type [at 1:8]
CREATE SUPPORTED_ENTITY myProject.myReservation
       ^
==

# Variant of the above test that features a missing path_expression.
[supported_generic_entity_types=]

CREATE {{RESERVATION|reSERVAtion|SUPPORTED_ENTITY}}
--
ALTERNATION GROUP: RESERVATION
--
ERROR: RESERVATION is not a supported object type [at 1:8]
CREATE RESERVATION
       ^
--
ALTERNATION GROUP: reSERVAtion
--
ERROR: reSERVAtion is not a supported object type [at 1:8]
CREATE reSERVAtion
       ^
--
ALTERNATION GROUP: SUPPORTED_ENTITY
--
ERROR: SUPPORTED_ENTITY is not a supported object type [at 1:8]
CREATE SUPPORTED_ENTITY
       ^
==

# Unless the ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL flag is set genericALTER
# ALTER statements must generate a parser error when missing a path expression.
[supported_generic_entity_types=PROJECT,ORGANIZATION]

ALTER {{PROJECT|ORGANIZATION}} SET OPTIONS (a=b)
--
ALTERNATION GROUP: PROJECT
--
ERROR: Syntax error: Unexpected keyword SET [at 1:15]
ALTER PROJECT SET OPTIONS (a=b)
              ^
--
ALTERNATION GROUP: ORGANIZATION
--
ERROR: Syntax error: Unexpected keyword SET [at 1:20]
ALTER ORGANIZATION SET OPTIONS (a=b)
                   ^
==

# When ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL flag is set generic ALTER
# statements should parse even without a path expression.
[supported_generic_entity_types=PROJECT,ORGANIZATION]
[language_features=ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL]

ALTER {{PROJECT|ORGANIZATION}} SET OPTIONS (a=b)
--
ALTERNATION GROUP: PROJECT
--
AlterEntityStatement [0-31] [ALTER PROJECT...OPTIONS (a=b)]
  Identifier(PROJECT) [6-13] [PROJECT]
  AlterActionList [14-31] [SET OPTIONS (a=b)]
    SetOptionsAction [14-31] [SET OPTIONS (a=b)]
      OptionsList [26-31] [(a=b)]
        OptionsEntry [27-30] [a=b]
          Identifier(a) [27-28] [a]
          PathExpression [29-30] [b]
            Identifier(b) [29-30] [b]
--
ALTER PROJECT SET OPTIONS(a = b)
--
ALTERNATION GROUP: ORGANIZATION
--
AlterEntityStatement [0-36] [ALTER ORGANIZATIO...IONS (a=b)]
  Identifier(ORGANIZATION) [6-18] [ORGANIZATION]
  AlterActionList [19-36] [SET OPTIONS (a=b)]
    SetOptionsAction [19-36] [SET OPTIONS (a=b)]
      OptionsList [31-36] [(a=b)]
        OptionsEntry [32-35] [a=b]
          Identifier(a) [32-33] [a]
          PathExpression [34-35] [b]
            Identifier(b) [34-35] [b]
--
ALTER ORGANIZATION SET OPTIONS(a = b)

==

# We also need to verify that non-reserved word alter_actions parse correctly.
[supported_generic_entity_types=PROJECT,ORGANIZATION]
[language_features=ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL]

ALTER {{PROJECT|ORGANIZATION}} DROP CONSTRAINT foo
--
ALTERNATION GROUP: PROJECT
--
AlterEntityStatement [0-33] [ALTER PROJECT...CONSTRAINT foo]
  Identifier(PROJECT) [6-13] [PROJECT]
  AlterActionList [14-33] [DROP CONSTRAINT foo]
    DropConstraintAction [14-33] [DROP CONSTRAINT foo]
      Identifier(foo) [30-33] [foo]
--
ALTER PROJECT DROP CONSTRAINT foo
--
ALTERNATION GROUP: ORGANIZATION
--
AlterEntityStatement [0-38] [ALTER ORGANIZATIO...TRAINT foo]
  Identifier(ORGANIZATION) [6-18] [ORGANIZATION]
  AlterActionList [19-38] [DROP CONSTRAINT foo]
    DropConstraintAction [19-38] [DROP CONSTRAINT foo]
      Identifier(foo) [35-38] [foo]
--
ALTER ORGANIZATION DROP CONSTRAINT foo

==

# Ambiguity testing; ADD is the name of the project.
[supported_generic_entity_types=PROJECT]
[language_features=ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL]

ALTER PROJECT ADD DROP CONSTRAINT foo
--
AlterEntityStatement [0-37] [ALTER PROJECT...CONSTRAINT foo]
  Identifier(PROJECT) [6-13] [PROJECT]
  PathExpression [14-17] [ADD]
    Identifier(ADD) [14-17] [ADD]
  AlterActionList [18-37] [DROP CONSTRAINT foo]
    DropConstraintAction [18-37] [DROP CONSTRAINT foo]
      Identifier(foo) [34-37] [foo]
--
ALTER PROJECT ADD DROP CONSTRAINT foo
==

# Disable the REPLICA sub_entity_type for ADD sub_entity_type.

[supported_generic_sub_entity_types=]

ALTER SCHEMA schema_name
ADD REPLICA replica_name
OPTIONS (a=b)
--
ERROR: REPLICA is not a supported nested object type [at 2:5]
ADD REPLICA replica_name
    ^
==

# Disable the REPLICA sub_entity_type for ALTER sub_entity_type.
[supported_generic_sub_entity_types=]

ALTER SCHEMA schema_name
ALTER REPLICA replica_name
SET OPTIONS (a=b)
--
ERROR: REPLICA is not a supported nested object type [at 2:7]
ALTER REPLICA replica_name
      ^
==

# Disable the REPLICA sub_entity_type for DROP sub_entity_type.
[supported_generic_sub_entity_types=]

ALTER SCHEMA schema_name
DROP REPLICA replica_name
--
ERROR: REPLICA is not a supported nested object type [at 2:6]
DROP REPLICA replica_name
     ^
==

ALTER SCHEMA schema_name
ADD REPLICA {{IF NOT EXISTS|}} replica_name
OPTIONS (a=b)
--
ALTERNATION GROUP: IF NOT EXISTS
--
AlterSchemaStatement [0-77] [ALTER SCHEMA...OPTIONS (a=b)]
  PathExpression [13-24] [schema_name]
    Identifier(schema_name) [13-24] [schema_name]
  AlterActionList [25-77] [ADD REPLICA...OPTIONS (a=b)]
    AddSubEntityAction(is_if_not_exists) [25-77] [ADD REPLICA...OPTIONS (a=b)]
      Identifier(REPLICA) [29-36] [REPLICA]
      Identifier(replica_name) [51-63] [replica_name]
      OptionsList [72-77] [(a=b)]
        OptionsEntry [73-76] [a=b]
          Identifier(a) [73-74] [a]
          PathExpression [75-76] [b]
            Identifier(b) [75-76] [b]
--
ALTER SCHEMA schema_name ADD REPLICA IF NOT EXISTS replica_name OPTIONS(a = b)
--
ALTERNATION GROUP: <empty>
--
AlterSchemaStatement [0-64] [ALTER SCHEMA...OPTIONS (a=b)]
  PathExpression [13-24] [schema_name]
    Identifier(schema_name) [13-24] [schema_name]
  AlterActionList [25-64] [ADD REPLICA...OPTIONS (a=b)]
    AddSubEntityAction [25-64] [ADD REPLICA...OPTIONS (a=b)]
      Identifier(REPLICA) [29-36] [REPLICA]
      Identifier(replica_name) [38-50] [replica_name]
      OptionsList [59-64] [(a=b)]
        OptionsEntry [60-63] [a=b]
          Identifier(a) [60-61] [a]
          PathExpression [62-63] [b]
            Identifier(b) [62-63] [b]
--
ALTER SCHEMA schema_name ADD REPLICA replica_name OPTIONS(a = b)
==

# Multiple nested ADD actions.
ALTER SCHEMA schema_name
ADD REPLICA replica_name1 OPTIONS (a=b),
ADD REPLICA replica_name2 OPTIONS (c=d)
--
AlterSchemaStatement [0-105] [ALTER SCHEMA...OPTIONS (c=d)]
  PathExpression [13-24] [schema_name]
    Identifier(schema_name) [13-24] [schema_name]
  AlterActionList [25-105] [ADD REPLICA...OPTIONS (c=d)]
    AddSubEntityAction [25-64] [ADD REPLICA...OPTIONS (a=b)]
      Identifier(REPLICA) [29-36] [REPLICA]
      Identifier(replica_name1) [37-50] [replica_name1]
      OptionsList [59-64] [(a=b)]
        OptionsEntry [60-63] [a=b]
          Identifier(a) [60-61] [a]
          PathExpression [62-63] [b]
            Identifier(b) [62-63] [b]
    AddSubEntityAction [66-105] [ADD REPLICA...OPTIONS (c=d)]
      Identifier(REPLICA) [70-77] [REPLICA]
      Identifier(replica_name2) [78-91] [replica_name2]
      OptionsList [100-105] [(c=d)]
        OptionsEntry [101-104] [c=d]
          Identifier(c) [101-102] [c]
          PathExpression [103-104] [d]
            Identifier(d) [103-104] [d]
--
ALTER SCHEMA schema_name ADD REPLICA replica_name1 OPTIONS(a = b), ADD REPLICA replica_name2 OPTIONS(c =
    d)
==

ALTER SCHEMA schema_name
DROP REPLICA {{IF EXISTS|}} replica_name
--
ALTERNATION GROUP: IF EXISTS
--
AlterSchemaStatement [0-60] [ALTER SCHEMA...replica_name]
  PathExpression [13-24] [schema_name]
    Identifier(schema_name) [13-24] [schema_name]
  AlterActionList [25-60] [DROP REPLICA...replica_name]
    DropSubEntityAction(is_if_exists) [25-60] [DROP REPLICA...replica_name]
      Identifier(REPLICA) [30-37] [REPLICA]
      Identifier(replica_name) [48-60] [replica_name]
--
ALTER SCHEMA schema_name DROP REPLICA IF EXISTS replica_name
--
ALTERNATION GROUP: <empty>
--
AlterSchemaStatement [0-51] [ALTER SCHEMA...replica_name]
  PathExpression [13-24] [schema_name]
    Identifier(schema_name) [13-24] [schema_name]
  AlterActionList [25-51] [DROP REPLICA  replica_name]
    DropSubEntityAction [25-51] [DROP REPLICA  replica_name]
      Identifier(REPLICA) [30-37] [REPLICA]
      Identifier(replica_name) [39-51] [replica_name]
--
ALTER SCHEMA schema_name DROP REPLICA replica_name
==

# Multiple nested DROP actions.
ALTER SCHEMA schema_name
DROP REPLICA replica_name1,
DROP REPLICA replica_name2
--
AlterSchemaStatement [0-79] [ALTER SCHEMA...replica_name2]
  PathExpression [13-24] [schema_name]
    Identifier(schema_name) [13-24] [schema_name]
  AlterActionList [25-79] [DROP REPLICA...replica_name2]
    DropSubEntityAction [25-51] [DROP REPLICA replica_name1]
      Identifier(REPLICA) [30-37] [REPLICA]
      Identifier(replica_name1) [38-51] [replica_name1]
    DropSubEntityAction [53-79] [DROP REPLICA replica_name2]
      Identifier(REPLICA) [58-65] [REPLICA]
      Identifier(replica_name2) [66-79] [replica_name2]
--
ALTER SCHEMA schema_name DROP REPLICA replica_name1, DROP REPLICA replica_name2
==

ALTER SCHEMA schema_name
ALTER REPLICA {{IF EXISTS|}} replica_name
SET OPTIONS (a=b)
--
ALTERNATION GROUP: IF EXISTS
--
AlterSchemaStatement [0-79] [ALTER SCHEMA...OPTIONS (a=b)]
  PathExpression [13-24] [schema_name]
    Identifier(schema_name) [13-24] [schema_name]
  AlterActionList [25-79] [ALTER REPLICA...OPTIONS (a=b)]
    AlterSubEntityAction(is_if_exists) [25-79] [ALTER REPLICA...OPTIONS (a=b)]
      Identifier(REPLICA) [31-38] [REPLICA]
      Identifier(replica_name) [49-61] [replica_name]
      SetOptionsAction [62-79] [SET OPTIONS (a=b)]
        OptionsList [74-79] [(a=b)]
          OptionsEntry [75-78] [a=b]
            Identifier(a) [75-76] [a]
            PathExpression [77-78] [b]
              Identifier(b) [77-78] [b]
--
ALTER SCHEMA schema_name ALTER REPLICA IF EXISTS replica_name SET OPTIONS(a = b)
--
ALTERNATION GROUP: <empty>
--
AlterSchemaStatement [0-70] [ALTER SCHEMA...OPTIONS (a=b)]
  PathExpression [13-24] [schema_name]
    Identifier(schema_name) [13-24] [schema_name]
  AlterActionList [25-70] [ALTER REPLICA...OPTIONS (a=b)]
    AlterSubEntityAction [25-70] [ALTER REPLICA...OPTIONS (a=b)]
      Identifier(REPLICA) [31-38] [REPLICA]
      Identifier(replica_name) [40-52] [replica_name]
      SetOptionsAction [53-70] [SET OPTIONS (a=b)]
        OptionsList [65-70] [(a=b)]
          OptionsEntry [66-69] [a=b]
            Identifier(a) [66-67] [a]
            PathExpression [68-69] [b]
              Identifier(b) [68-69] [b]
--
ALTER SCHEMA schema_name ALTER REPLICA replica_name SET OPTIONS(a = b)
==

# Multiple nested ALTER actions.
ALTER SCHEMA schema_name
ALTER REPLICA replica_name1 SET OPTIONS (a=b),
ALTER REPLICA replica_name2 SET OPTIONS (c=d)
--
AlterSchemaStatement [0-117] [ALTER SCHEMA...OPTIONS (c=d)]
  PathExpression [13-24] [schema_name]
    Identifier(schema_name) [13-24] [schema_name]
  AlterActionList [25-117] [ALTER REPLICA...OPTIONS (c=d)]
    AlterSubEntityAction [25-70] [ALTER REPLICA...OPTIONS (a=b)]
      Identifier(REPLICA) [31-38] [REPLICA]
      Identifier(replica_name1) [39-52] [replica_name1]
      SetOptionsAction [53-70] [SET OPTIONS (a=b)]
        OptionsList [65-70] [(a=b)]
          OptionsEntry [66-69] [a=b]
            Identifier(a) [66-67] [a]
            PathExpression [68-69] [b]
              Identifier(b) [68-69] [b]
    AlterSubEntityAction [72-117] [ALTER REPLICA...OPTIONS (c=d)]
      Identifier(REPLICA) [78-85] [REPLICA]
      Identifier(replica_name2) [86-99] [replica_name2]
      SetOptionsAction [100-117] [SET OPTIONS (c=d)]
        OptionsList [112-117] [(c=d)]
          OptionsEntry [113-116] [c=d]
            Identifier(c) [113-114] [c]
            PathExpression [115-116] [d]
              Identifier(d) [115-116] [d]
--
ALTER SCHEMA schema_name ALTER REPLICA replica_name1 SET OPTIONS(a = b), ALTER REPLICA replica_name2 SET OPTIONS(c =
    d)
==

# Multiple doubly nested ADD actions. Since sub_entity alter statements
# only support one action (either SET OPTIONS or ADD/ALTER/DROP of a child),
# doubly nested actions need to be qualified from the root.

ALTER SCHEMA schema_name
ALTER REPLICA replica_name1 ADD CHILD_OF_REPLICA child_1 OPTIONS (a=b),
ALTER REPLICA replica_name1 ADD CHILD_OF_REPLICA child_2 OPTIONS (c=d)
--
AlterSchemaStatement [0-167] [ALTER SCHEMA...OPTIONS (c=d)]
  PathExpression [13-24] [schema_name]
    Identifier(schema_name) [13-24] [schema_name]
  AlterActionList [25-167] [ALTER REPLICA...OPTIONS (c=d)]
    AlterSubEntityAction [25-95] [ALTER REPLICA...OPTIONS (a=b)]
      Identifier(REPLICA) [31-38] [REPLICA]
      Identifier(replica_name1) [39-52] [replica_name1]
      AddSubEntityAction [53-95] [ADD CHILD_OF_REPL...IONS (a=b)]
        Identifier(CHILD_OF_REPLICA) [57-73] [CHILD_OF_REPLICA]
        Identifier(child_1) [74-81] [child_1]
        OptionsList [90-95] [(a=b)]
          OptionsEntry [91-94] [a=b]
            Identifier(a) [91-92] [a]
            PathExpression [93-94] [b]
              Identifier(b) [93-94] [b]
    AlterSubEntityAction [97-167] [ALTER REPLICA...OPTIONS (c=d)]
      Identifier(REPLICA) [103-110] [REPLICA]
      Identifier(replica_name1) [111-124] [replica_name1]
      AddSubEntityAction [125-167] [ADD CHILD_OF_REPL...IONS (c=d)]
        Identifier(CHILD_OF_REPLICA) [129-145] [CHILD_OF_REPLICA]
        Identifier(child_2) [146-153] [child_2]
        OptionsList [162-167] [(c=d)]
          OptionsEntry [163-166] [c=d]
            Identifier(c) [163-164] [c]
            PathExpression [165-166] [d]
              Identifier(d) [165-166] [d]
--
ALTER SCHEMA schema_name ALTER REPLICA replica_name1 ADD CHILD_OF_REPLICA child_1 OPTIONS(a = b), ALTER REPLICA replica_name1 ADD CHILD_OF_REPLICA child_2 OPTIONS(c =
    d)
==

# Attempting to both SET OPTIONS on a sub_entity and ADD a CHILD_OF_REPLICA
# is invalid. Only the top level ALTER statement supports multiple actions.

ALTER SCHEMA schema_name
ALTER REPLICA replica_name1 SET OPTIONS(a=b)
ADD CHILD_OF_REPLICA child_1 OPTIONS (c=d)
--
ERROR: Syntax error: Expected end of input but got keyword ADD [at 3:1]
ADD CHILD_OF_REPLICA child_1 OPTIONS (c=d)
^
