set a=3
--
SingleAssignment [0-7] [set a=3]
  Identifier(a) [4-5] [a]
  IntLiteral(3) [6-7] [3]
--
SET a = 3
==

set a = (((a + 1) + 1) + 1)
--
SingleAssignment [0-27] [set a = (((a + 1) + 1) + 1)]
  Identifier(a) [4-5] [a]
  BinaryExpression(+) [9-26] [((a + 1) + 1) + 1]
    BinaryExpression(+) [10-21] [(a + 1) + 1]
      BinaryExpression(+) [11-16] [a + 1]
        PathExpression [11-12] [a]
          Identifier(a) [11-12] [a]
        IntLiteral(1) [15-16] [1]
      IntLiteral(1) [20-21] [1]
    IntLiteral(1) [25-26] [1]
--
SET a = (((a + 1) + 1) + 1)
==

set a=(SELECT x from T WHERE y=100);
--
SingleAssignment [0-35] [set a=(SELECT...WHERE y=100)]
  Identifier(a) [4-5] [a]
  ExpressionSubquery [6-35] [(SELECT x from T WHERE y=100)]
    Query [7-34] [SELECT x from T WHERE y=100]
      Select [7-34] [SELECT x from T WHERE y=100]
        SelectList [14-15] [x]
          SelectColumn [14-15] [x]
            PathExpression [14-15] [x]
              Identifier(x) [14-15] [x]
        FromClause [16-22] [from T]
          TablePathExpression [21-22] [T]
            PathExpression [21-22] [T]
              Identifier(T) [21-22] [T]
        WhereClause [23-34] [WHERE y=100]
          BinaryExpression(=) [29-34] [y=100]
            PathExpression [29-30] [y]
              Identifier(y) [29-30] [y]
            IntLiteral(100) [31-34] [100]
--
SET a = (
  SELECT
    x
  FROM
    T
  WHERE
    y = 100
)
==

set set=set
--
ERROR: Syntax error: Unexpected keyword SET [at 1:5]
set set=set
    ^
==

# Equals sign in expression, in addition to separator token
set a = b = c;
--
SingleAssignment [0-13] [set a = b = c]
  Identifier(a) [4-5] [a]
  BinaryExpression(=) [8-13] [b = c]
    PathExpression [8-9] [b]
      Identifier(b) [8-9] [b]
    PathExpression [12-13] [c]
      Identifier(c) [12-13] [c]
--
SET a = b = c
==

# Struct assignment (one field)
SET (a) = y;
--
AssignmentFromStruct [0-11] [SET (a) = y]
  IdentifierList [5-6] [a]
    Identifier(a) [5-6] [a]
  PathExpression [10-11] [y]
    Identifier(y) [10-11] [y]
--
SET(a) = y
==

# Struct assignment (multiple fields)
SET (a,b) = y;
--
AssignmentFromStruct [0-13] [SET (a,b) = y]
  IdentifierList [5-8] [a,b]
    Identifier(a) [5-6] [a]
    Identifier(b) [7-8] [b]
  PathExpression [12-13] [y]
    Identifier(y) [12-13] [y]
--
SET(a, b) = y
==

# Struct assignment to struct expression
SET (a,b) = (1 + 3, 'foo');
--
AssignmentFromStruct [0-26] [SET (a,b) = (1 + 3, 'foo')]
  IdentifierList [5-8] [a,b]
    Identifier(a) [5-6] [a]
    Identifier(b) [7-8] [b]
  StructConstructorWithParens [12-26] [(1 + 3, 'foo')]
    BinaryExpression(+) [13-18] [1 + 3]
      IntLiteral(1) [13-14] [1]
      IntLiteral(3) [17-18] [3]
    StringLiteral('foo') [20-25] ['foo']
--
SET(a, b) = (1 + 3, 'foo')
==

# Struct assignment (empty)
SET () = y;
--
ERROR: Parenthesized SET statement requires a variable list [at 1:6]
SET () = y;
     ^
==

# Error cases
set;
--
ERROR: Syntax error: Unexpected ";" [at 1:4]
set;
   ^
==

set x;
--
ERROR: Syntax error: Expected "," or "=" but got ";" [at 1:6]
set x;
     ^
==

set x =;
--
ERROR: Syntax error: Unexpected ";" [at 1:8]
set x =;
       ^
==

# Struct assignment (missing equals sign)
SET (a, b) y;
--
ERROR: Syntax error: Expected "=" but got identifier "y" [at 1:12]
SET (a, b) y;
           ^
==

# Struct assignment (missing both left and right parentheses)
SET a,b = (4, 5);
--
ERROR: Using SET with multiple variables requires parentheses around the variable list [at 1:5]
SET a,b = (4, 5);
    ^
==

# Struct assignment (missing left parenthesis)
SET a, b) = y;
--
ERROR: Syntax error: Expected "," or "=" but got ")" [at 1:9]
SET a, b) = y;
        ^
==

# Struct assignment (missing right parenthesis)
SET (a, b = y;
--
ERROR: Syntax error: Expected ")" or "," but got "=" [at 1:11]
SET (a, b = y;
          ^
==

# Struct assignment (missing equals sign and expression)
SET (a, b);
--
ERROR: Syntax error: Expected "=" but got ";" [at 1:11]
SET (a, b);
          ^
==

# Struct assignment (missing expression)
SET (a, b) = ;
--
ERROR: Syntax error: Unexpected ";" [at 1:14]
SET (a, b) = ;
             ^
==

# Dangling comma in variable list
SET (a,) = z;
--
ERROR: Syntax error: Unexpected ")" [at 1:8]
SET (a,) = z;
       ^
==

# Expressions in variable list
SET (a, 1) = (3, 4);
--
ERROR: Syntax error: Unexpected integer literal "1" [at 1:9]
SET (a, 1) = (3, 4);
        ^
==

# Expressions in variable list
SET (a + 1, 2) = (3, 4);
--
ERROR: Syntax error: Expected ")" or "," but got "+" [at 1:8]
SET (a + 1, 2) = (3, 4);
       ^
==

# Query Parameters

# Base case - set a parameter to an integer literal.
SET {{@|@@}}value = 1
--
ALTERNATION GROUP: @
--
ParameterAssignment [0-14] [SET @value = 1]
  ParameterExpr [4-10] [@value]
    Identifier(value) [5-10] [value]
  IntLiteral(1) [13-14] [1]
--
SET @value = 1
--
ALTERNATION GROUP: @@
--
SystemVariableAssignment [0-15] [SET @@value = 1]
  SystemVariableExpr [4-11] [@@value]
    PathExpression [6-11] [value]
      Identifier(value) [6-11] [value]
  IntLiteral(1) [14-15] [1]
--
SET @@value = 1
==

# Base case 2 - set a parameter to a string literal.
SET {{@|@@}}value="something"
--
ALTERNATION GROUP: @
--
ParameterAssignment [0-22] [SET @value="something"]
  ParameterExpr [4-10] [@value]
    Identifier(value) [5-10] [value]
  StringLiteral("something") [11-22] ["something"]
--
SET @value = "something"
--
ALTERNATION GROUP: @@
--
SystemVariableAssignment [0-23] [SET @@value="something"]
  SystemVariableExpr [4-11] [@@value]
    PathExpression [6-11] [value]
      Identifier(value) [6-11] [value]
  StringLiteral("something") [12-23] ["something"]
--
SET @@value = "something"
==

# Use a parameter name that is a reserved keyword.
SET {{@|@@}}AND="something"
--
ALTERNATION GROUP: @
--
ParameterAssignment [0-20] [SET @AND="something"]
  ParameterExpr [4-8] [@AND]
    Identifier("AND") [5-8] [AND]
  StringLiteral("something") [9-20] ["something"]
--
SET @"AND" = "something"
--
ALTERNATION GROUP: @@
--
SystemVariableAssignment [0-21] [SET @@AND="something"]
  SystemVariableExpr [4-9] [@@AND]
    PathExpression [6-9] [AND]
      Identifier("AND") [6-9] [AND]
  StringLiteral("something") [10-21] ["something"]
--
SET @@"AND" = "something"
==

# Use a parameter name that is an non-reserved keyword.
SET {{@|@@}}ABORT="something"
--
ALTERNATION GROUP: @
--
ParameterAssignment [0-22] [SET @ABORT="something"]
  ParameterExpr [4-10] [@ABORT]
    Identifier(ABORT) [5-10] [ABORT]
  StringLiteral("something") [11-22] ["something"]
--
SET @ABORT = "something"
--
ALTERNATION GROUP: @@
--
SystemVariableAssignment [0-23] [SET @@ABORT="something"]
  SystemVariableExpr [4-11] [@@ABORT]
    PathExpression [6-11] [ABORT]
      Identifier(ABORT) [6-11] [ABORT]
  StringLiteral("something") [12-23] ["something"]
--
SET @@ABORT = "something"
==

# Set a parameter to a simple expression
SET {{@|@@}}VAL=1 + 1
--
ALTERNATION GROUP: @
--
ParameterAssignment [0-14] [SET @VAL=1 + 1]
  ParameterExpr [4-8] [@VAL]
    Identifier(VAL) [5-8] [VAL]
  BinaryExpression(+) [9-14] [1 + 1]
    IntLiteral(1) [9-10] [1]
    IntLiteral(1) [13-14] [1]
--
SET @VAL = 1 + 1
--
ALTERNATION GROUP: @@
--
SystemVariableAssignment [0-15] [SET @@VAL=1 + 1]
  SystemVariableExpr [4-9] [@@VAL]
    PathExpression [6-9] [VAL]
      Identifier(VAL) [6-9] [VAL]
  BinaryExpression(+) [10-15] [1 + 1]
    IntLiteral(1) [10-11] [1]
    IntLiteral(1) [14-15] [1]
--
SET @@VAL = 1 + 1
==

# Set a parameter to an expression containing a function
SET {{@|@@}}VAL = CURRENT_TIMESTAMP() + 100
--
ALTERNATION GROUP: @
--
ParameterAssignment [0-36] [SET @VAL =...TIMESTAMP() + 100]
  ParameterExpr [4-8] [@VAL]
    Identifier(VAL) [5-8] [VAL]
  BinaryExpression(+) [11-36] [CURRENT_TIMESTAMP() + 100]
    FunctionCall [11-30] [CURRENT_TIMESTAMP()]
      PathExpression [11-28] [CURRENT_TIMESTAMP]
        Identifier("CURRENT_TIMESTAMP") [11-28] [CURRENT_TIMESTAMP]
    IntLiteral(100) [33-36] [100]
--
SET @VAL = "CURRENT_TIMESTAMP"() + 100
--
ALTERNATION GROUP: @@
--
SystemVariableAssignment [0-37] [SET @@VAL..._TIMESTAMP() + 100]
  SystemVariableExpr [4-9] [@@VAL]
    PathExpression [6-9] [VAL]
      Identifier(VAL) [6-9] [VAL]
  BinaryExpression(+) [12-37] [CURRENT_TIMESTAMP() + 100]
    FunctionCall [12-31] [CURRENT_TIMESTAMP()]
      PathExpression [12-29] [CURRENT_TIMESTAMP]
        Identifier("CURRENT_TIMESTAMP") [12-29] [CURRENT_TIMESTAMP]
    IntLiteral(100) [34-37] [100]
--
SET @@VAL = "CURRENT_TIMESTAMP"() + 100
==

# Set a parameter to an expression with a SELECT statment
SET {{@|@@}}VAL = (SELECT * FROM t)
--
ALTERNATION GROUP: @
--
ParameterAssignment [0-28] [SET @VAL = (SELECT * FROM t)]
  ParameterExpr [4-8] [@VAL]
    Identifier(VAL) [5-8] [VAL]
  ExpressionSubquery [11-28] [(SELECT * FROM t)]
    Query [12-27] [SELECT * FROM t]
      Select [12-27] [SELECT * FROM t]
        SelectList [19-20] [*]
          SelectColumn [19-20] [*]
            Star(*) [19-20] [*]
        FromClause [21-27] [FROM t]
          TablePathExpression [26-27] [t]
            PathExpression [26-27] [t]
              Identifier(t) [26-27] [t]
--
SET @VAL = (
  SELECT
    *
  FROM
    t
)
--
ALTERNATION GROUP: @@
--
SystemVariableAssignment [0-29] [SET @@VAL = (SELECT * FROM t)]
  SystemVariableExpr [4-9] [@@VAL]
    PathExpression [6-9] [VAL]
      Identifier(VAL) [6-9] [VAL]
  ExpressionSubquery [12-29] [(SELECT * FROM t)]
    Query [13-28] [SELECT * FROM t]
      Select [13-28] [SELECT * FROM t]
        SelectList [20-21] [*]
          SelectColumn [20-21] [*]
            Star(*) [20-21] [*]
        FromClause [22-28] [FROM t]
          TablePathExpression [27-28] [t]
            PathExpression [27-28] [t]
              Identifier(t) [27-28] [t]
--
SET @@VAL = (
  SELECT
    *
  FROM
    t
)
==

# Error cases

# Does not work for setting a parameter to an invalid expression.
SET {{@|@@}}VAL = SELECT * FROM t
--
ALTERNATION GROUP: @
--
ERROR: Syntax error: Unexpected keyword SELECT [at 1:12]
SET @VAL = SELECT * FROM t
           ^
--
ALTERNATION GROUP: @@
--
ERROR: Syntax error: Unexpected keyword SELECT [at 1:13]
SET @@VAL = SELECT * FROM t
            ^
==

set {{@|@@}};
--
ALTERNATION GROUP: @
--
ERROR: Syntax error: Unexpected ";" [at 1:6]
set @;
     ^
--
ALTERNATION GROUP: @@
--
ERROR: Syntax error: Unexpected ";" [at 1:7]
set @@;
      ^
==

set {{@|@@}}x;
--
ALTERNATION GROUP: @
--
ERROR: Syntax error: Expected "=" but got ";" [at 1:7]
set @x;
      ^
--
ALTERNATION GROUP: @@
--
ERROR: Syntax error: Expected "=" but got ";" [at 1:8]
set @@x;
       ^
==

set {{@|@@}}x =;
--
ALTERNATION GROUP: @
--
ERROR: Syntax error: Unexpected ";" [at 1:9]
set @x =;
        ^
--
ALTERNATION GROUP: @@
--
ERROR: Syntax error: Unexpected ";" [at 1:10]
set @@x =;
         ^
==

# Does not work for unnamed query parameters.
set ? = 1;
--
ERROR: Syntax error: Unexpected "?" [at 1:5]
set ? = 1;
    ^

==

SET @@map_system_variable["proto_map_key"] = 78;
--

ERROR: Syntax error: Expected "=" but got "[" [at 1:26]
SET @@map_system_variable["proto_map_key"] = 78;
                         ^

==

SET map_variable["proto_map_key"] = 78;
--

ERROR: Syntax error: Expected "," or "=" but got "[" [at 1:17]
SET map_variable["proto_map_key"] = 78;
                ^

==

SET a.b = 3;
--
ERROR: Syntax error: Expected "," or "=" but got "." [at 1:6]
SET a.b = 3;
     ^
==

SET x.proto_field.(extension_field).int32_field = 7;
--
ERROR: Syntax error: Expected "," or "=" but got "." [at 1:6]
SET x.proto_field.(extension_field).int32_field = 7;
     ^
==

SET @@x.proto_field.(extension_field).int32_field = 7;
--
ERROR: Syntax error: Unexpected "(" [at 1:21]
SET @@x.proto_field.(extension_field).int32_field = 7;
                    ^
