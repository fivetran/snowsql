# MODULE related tests, including:
#   IMPORT statement
#   MODULE statement

# Module with various length path names.
import module foo
--
ImportStatement [0-17] [import module foo]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
--
IMPORT MODULE foo
==

import module foo.bar
--
ImportStatement [0-21] [import module foo.bar]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
--
IMPORT MODULE foo.bar
==

import module foo.bar.baz
--
ImportStatement [0-25] [import module foo.bar.baz]
  PathExpression [14-25] [foo.bar.baz]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
    Identifier(baz) [22-25] [baz]
--
IMPORT MODULE foo.bar.baz
==

# Module with alias
import module foo.bar as alias
--
ImportStatement [0-30] [import module foo.bar as alias]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
  Alias [22-30] [as alias]
    Identifier(alias) [25-30] [alias]
--
IMPORT MODULE foo.bar AS alias
==

import module foo.bar as "bar.baz"
--
ImportStatement [0-34] [import module..."bar.baz"]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
  Alias [22-34] [as "bar.baz"]
    Identifier("bar.baz") [25-34] ["bar.baz"]
--
IMPORT MODULE foo.bar AS "bar.baz"
==

# aliases require 'as'
import module foo bar;
--
ERROR: Syntax error: Expected end of input but got identifier "bar" [at 1:19]
import module foo bar;
                  ^
==

# missing module alias
import module foo as;
--
ERROR: Syntax error: Unexpected ";" [at 1:21]
import module foo as;
                    ^
==

# Module with options
import module foo OPTIONS (a=1);
--
ImportStatement [0-31] [import module...OPTIONS (a=1)]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
  OptionsList [26-31] [(a=1)]
    OptionsEntry [27-30] [a=1]
      Identifier(a) [27-28] [a]
      IntLiteral(1) [29-30] [1]
--
IMPORT MODULE foo OPTIONS(a = 1)
==

# Alternations with all the clauses, to ensure that we capture every
# combination of clauses.
import module {{|a.}}foo {{|as foo}} {{|OPTIONS (a=1)}};
--
ALTERNATION GROUP: <empty>
--
ImportStatement [0-17] [import module foo]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
--
IMPORT MODULE foo
--
ALTERNATION GROUP: OPTIONS (a=1)
--
ImportStatement [0-32] [import module...OPTIONS (a=1)]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
  OptionsList [27-32] [(a=1)]
    OptionsEntry [28-31] [a=1]
      Identifier(a) [28-29] [a]
      IntLiteral(1) [30-31] [1]
--
IMPORT MODULE foo OPTIONS(a = 1)
--
ALTERNATION GROUP: as foo,
--
ImportStatement [0-24] [import module foo as foo]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
  Alias [18-24] [as foo]
    Identifier(foo) [21-24] [foo]
--
IMPORT MODULE foo AS foo
--
ALTERNATION GROUP: as foo,OPTIONS (a=1)
--
ImportStatement [0-38] [import module...OPTIONS (a=1)]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
  Alias [18-24] [as foo]
    Identifier(foo) [21-24] [foo]
  OptionsList [33-38] [(a=1)]
    OptionsEntry [34-37] [a=1]
      Identifier(a) [34-35] [a]
      IntLiteral(1) [36-37] [1]
--
IMPORT MODULE foo AS foo OPTIONS(a = 1)
--
ALTERNATION GROUP: a.,,
--
ImportStatement [0-19] [import module a.foo]
  PathExpression [14-19] [a.foo]
    Identifier(a) [14-15] [a]
    Identifier(foo) [16-19] [foo]
--
IMPORT MODULE a.foo
--
ALTERNATION GROUP: a.,,OPTIONS (a=1)
--
ImportStatement [0-34] [import module...OPTIONS (a=1)]
  PathExpression [14-19] [a.foo]
    Identifier(a) [14-15] [a]
    Identifier(foo) [16-19] [foo]
  OptionsList [29-34] [(a=1)]
    OptionsEntry [30-33] [a=1]
      Identifier(a) [30-31] [a]
      IntLiteral(1) [32-33] [1]
--
IMPORT MODULE a.foo OPTIONS(a = 1)
--
ALTERNATION GROUP: a.,as foo,
--
ImportStatement [0-26] [import module a.foo as foo]
  PathExpression [14-19] [a.foo]
    Identifier(a) [14-15] [a]
    Identifier(foo) [16-19] [foo]
  Alias [20-26] [as foo]
    Identifier(foo) [23-26] [foo]
--
IMPORT MODULE a.foo AS foo
--
ALTERNATION GROUP: a.,as foo,OPTIONS (a=1)
--
ImportStatement [0-40] [import module...OPTIONS (a=1)]
  PathExpression [14-19] [a.foo]
    Identifier(a) [14-15] [a]
    Identifier(foo) [16-19] [foo]
  Alias [20-26] [as foo]
    Identifier(foo) [23-26] [foo]
  OptionsList [35-40] [(a=1)]
    OptionsEntry [36-39] [a=1]
      Identifier(a) [36-37] [a]
      IntLiteral(1) [38-39] [1]
--
IMPORT MODULE a.foo AS foo OPTIONS(a = 1)
==

# The alias must be an identifier, not a path
import module foo.bar.baz as foo.baz;
--
ERROR: Syntax error: Expected end of input but got "." [at 1:33]
import module foo.bar.baz as foo.baz;
                                ^
==

# The module name is a reserved keyword.
import module select;
--
ERROR: Syntax error: Unexpected keyword SELECT [at 1:15]
import module select;
              ^
==

# The module name is an unreserved keyword.
import module module;
--
ImportStatement [0-20] [import module module]
  PathExpression [14-20] [module]
    Identifier(module) [14-20] [module]
--
IMPORT MODULE module
==

# The module name is a reserved keyword that can be used in general path
# expressions
import module all;
--
ERROR: Syntax error: Unexpected keyword ALL [at 1:15]
import module all;
              ^
==

import module module.all;
--
ImportStatement [0-24] [import module module.all]
  PathExpression [14-24] [module.all]
    Identifier(module) [14-20] [module]
    Identifier("all") [21-24] [all]
--
IMPORT MODULE module."all"
==

# Importing anything except MODULE does not work.
# Import reserved keyword.
import select foo;
--
ERROR: Syntax error: Expected keyword MODULE or keyword PROTO but got keyword SELECT [at 1:8]
import select foo;
       ^
==

# Import non-reserved keyword.
import table foo;
--
ERROR: Syntax error: Expected keyword MODULE or keyword PROTO but got keyword TABLE [at 1:8]
import table foo;
       ^
==

# Import identifier
import non_keyword foo;
--
ERROR: Syntax error: Expected keyword MODULE or keyword PROTO but got identifier "non_keyword" [at 1:8]
import non_keyword foo;
       ^
==

# import path expression
import a.b foo;
--
ERROR: Syntax error: Expected keyword MODULE or keyword PROTO but got identifier "a" [at 1:8]
import a.b foo;
       ^
==

# import path expression
import module.b foo;
--
ERROR: Syntax error: Unexpected "." [at 1:14]
import module.b foo;
             ^
==

# import path expression
import a.module foo;
--
ERROR: Syntax error: Expected keyword MODULE or keyword PROTO but got identifier "a" [at 1:8]
import a.module foo;
       ^
==

# Import literal
import 123 foo;
--
ERROR: Syntax error: Expected keyword MODULE or keyword PROTO but got integer literal "123" [at 1:8]
import 123 foo;
       ^
==

# Import literal
import '123' foo;
--
ERROR: Syntax error: Expected keyword MODULE or keyword PROTO but got string literal '123' [at 1:8]
import '123' foo;
       ^
==

import module foo as 'bar';
--
ERROR: Syntax error: Unexpected string literal 'bar' [at 1:22]
import module foo as 'bar';
                     ^
==

import module foo as select 1;
--
ERROR: Syntax error: Unexpected keyword SELECT [at 1:22]
import module foo as select 1;
                     ^
==

# Reserved keywords and those allowed in generalized identifiers
# are invalid as aliases.
import module foo as STRUCT;
--
ERROR: Syntax error: Unexpected keyword STRUCT [at 1:22]
import module foo as STRUCT;
                     ^
==

import module foo as ARRAY;
--
ERROR: Syntax error: Unexpected keyword ARRAY [at 1:22]
import module foo as ARRAY;
                     ^
==

import module foo as PROTO;
--
ERROR: Syntax error: Unexpected keyword PROTO [at 1:22]
import module foo as PROTO;
                     ^
==

import module foo as ALL;
--
ERROR: Syntax error: Unexpected keyword ALL [at 1:22]
import module foo as ALL;
                     ^
==

# Unreserved keywords as aliases parse ok.
import module foo as TABLE;
--
ImportStatement [0-26] [import module foo as TABLE]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
  Alias [18-26] [as TABLE]
    Identifier(TABLE) [21-26] [TABLE]
--
IMPORT MODULE foo AS TABLE
==

# Type names are just identifiers, so they parse ok.
import module foo as string
--
ImportStatement [0-27] [import module foo as string]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
  Alias [18-27] [as string]
    Identifier(string) [21-27] [string]
--
IMPORT MODULE foo AS string
==

import module foo as INT64
--
ImportStatement [0-26] [import module foo as INT64]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
  Alias [18-26] [as INT64]
    Identifier(INT64) [21-26] [INT64]
--
IMPORT MODULE foo AS INT64
==

# Non-supported clause.
import or replace module foo;
--
ERROR: Syntax error: Expected keyword MODULE or keyword PROTO but got keyword OR [at 1:8]
import or replace module foo;
       ^
==

import if not exists module foo;
--
ERROR: Syntax error: Expected keyword MODULE or keyword PROTO but got keyword IF [at 1:8]
import if not exists module foo;
       ^
==

import module foo if not exists;
--
ERROR: Syntax error: Expected end of input but got keyword IF [at 1:19]
import module foo if not exists;
                  ^
==

# Extra stuff off the end is not allowed.
import module foo as bar with
--
ERROR: Syntax error: Expected end of input but got keyword WITH [at 1:26]
import module foo as bar with
                         ^
==

import module foo as bar select
--
ERROR: Syntax error: Expected end of input but got keyword SELECT [at 1:26]
import module foo as bar select
                         ^
==

import module foo as bar 123
--
ERROR: Syntax error: Expected end of input but got integer literal "123" [at 1:26]
import module foo as bar 123
                         ^
==

module foo;
--
ModuleStatement [0-10] [module foo]
  PathExpression [7-10] [foo]
    Identifier(foo) [7-10] [foo]
--
MODULE foo
==

module foo.bar.baz;
--
ModuleStatement [0-18] [module foo.bar.baz]
  PathExpression [7-18] [foo.bar.baz]
    Identifier(foo) [7-10] [foo]
    Identifier(bar) [11-14] [bar]
    Identifier(baz) [15-18] [baz]
--
MODULE foo.bar.baz
==

module foo.bar OPTIONS (a=1);
--
ModuleStatement [0-28] [module foo.bar OPTIONS (a=1)]
  PathExpression [7-14] [foo.bar]
    Identifier(foo) [7-10] [foo]
    Identifier(bar) [11-14] [bar]
  OptionsList [23-28] [(a=1)]
    OptionsEntry [24-27] [a=1]
      Identifier(a) [24-25] [a]
      IntLiteral(1) [26-27] [1]
--
MODULE foo.bar OPTIONS(a = 1)
==

module foo.bar OPTIONS (a=1, b='b', c=3.0);
--
ModuleStatement [0-42] [module foo...b', c=3.0)]
  PathExpression [7-14] [foo.bar]
    Identifier(foo) [7-10] [foo]
    Identifier(bar) [11-14] [bar]
  OptionsList [23-42] [(a=1, b='b', c=3.0)]
    OptionsEntry [24-27] [a=1]
      Identifier(a) [24-25] [a]
      IntLiteral(1) [26-27] [1]
    OptionsEntry [29-34] [b='b']
      Identifier(b) [29-30] [b]
      StringLiteral('b') [31-34] ['b']
    OptionsEntry [36-41] [c=3.0]
      Identifier(c) [36-37] [c]
      FloatLiteral(3.0) [38-41] [3.0]
--
MODULE foo.bar OPTIONS(a = 1, b = 'b', c = 3.0)
==

# Unreserved keywords as modules names is ok.
module import
--
ModuleStatement [0-13] [module import]
  PathExpression [7-13] [import]
    Identifier(import) [7-13] [import]
--
MODULE import
==

module module
--
ModuleStatement [0-13] [module module]
  PathExpression [7-13] [module]
    Identifier(module) [7-13] [module]
--
MODULE module
==

module options
--
ModuleStatement [0-14] [module options]
  PathExpression [7-14] [options]
    Identifier(options) [7-14] [options]
--
MODULE options
==

module import.module.options options(a=1);
--
ModuleStatement [0-41] [module import...options(a=1)]
  PathExpression [7-28] [import.module.options]
    Identifier(import) [7-13] [import]
    Identifier(module) [14-20] [module]
    Identifier(options) [21-28] [options]
  OptionsList [36-41] [(a=1)]
    OptionsEntry [37-40] [a=1]
      Identifier(a) [37-38] [a]
      IntLiteral(1) [39-40] [1]
--
MODULE import.module.options OPTIONS(a = 1)
==

# Reserved keywords like "all" are ok if they can be used inside identifiers,
# but they have to be back-ticked if they start the path expression.
module all;
--
ERROR: Syntax error: Unexpected keyword ALL [at 1:8]
module all;
       ^
==

module module.all;
--
ModuleStatement [0-17] [module module.all]
  PathExpression [7-17] [module.all]
    Identifier(module) [7-13] [module]
    Identifier("all") [14-17] [all]
--
MODULE module."all"
==

module "all";
--
ModuleStatement [0-12] [module "all"]
  PathExpression [7-12] ["all"]
    Identifier("all") [7-12] ["all"]
--
MODULE "all"
==

module module."all";
--
ModuleStatement [0-19] [module module."all"]
  PathExpression [7-19] [module."all"]
    Identifier(module) [7-13] [module]
    Identifier("all") [14-19] ["all"]
--
MODULE module."all"
==

# Other reserved keywords are not ok.
module select;
--
ERROR: Syntax error: Unexpected keyword SELECT [at 1:8]
module select;
       ^
==

# More negative tests.
module import foo;
--
ERROR: Syntax error: Expected end of input but got identifier "foo" [at 1:15]
module import foo;
              ^
==

module foo.bar options;
--
ERROR: Syntax error: Expected "(" but got ";" [at 1:23]
module foo.bar options;
                      ^
==

module foo.bar options('abc');
--
ERROR: Syntax error: Unexpected string literal 'abc' [at 1:24]
module foo.bar options('abc');
                       ^
==

module foo if not exists;
--
ERROR: Syntax error: Expected end of input but got keyword IF [at 1:12]
module foo if not exists;
           ^
==

module table foo;
--
ERROR: Syntax error: Expected end of input but got identifier "foo" [at 1:14]
module table foo;
             ^
==

create module foo;
--
ERROR: Syntax error: Expected keyword FUNCTION but got keyword MODULE [at 1:8]
create module foo;
       ^
==

create or replace module foo;
--
ERROR: Syntax error: Expected keyword FUNCTION but got keyword MODULE [at 1:19]
create or replace module foo;
                  ^
==

# Invalid statement due to expecting path expression but successfully parsed
import module 'file.proto';
--
ImportStatement [0-26] [import module 'file.proto']
  StringLiteral('file.proto') [14-26] ['file.proto']
--
IMPORT MODULE 'file.proto'
==

# The parser supports IMPORT MODULE with INTO, but the statements fail
# in the analyzer.
IMPORT MODULE name.path INTO a;
--
ImportStatement [0-30] [IMPORT MODULE name.path INTO a]
  PathExpression [14-23] [name.path]
    Identifier(name) [14-18] [name]
    Identifier(path) [19-23] [path]
  IntoAlias [24-30] [INTO a]
    Identifier(a) [29-30] [a]
--
IMPORT MODULE name.path INTO a
==

IMPORT MODULE 'name/path' INTO a;
--
ImportStatement [0-32] [IMPORT MODULE...path' INTO a]
  StringLiteral('name/path') [14-25] ['name/path']
  IntoAlias [26-32] [INTO a]
    Identifier(a) [31-32] [a]
--
IMPORT MODULE 'name/path' INTO a
