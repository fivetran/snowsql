update T
set x=y
--
UpdateStatement [0-16] [update T set x=y]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-16] [x=y]
    UpdateItem [13-16] [x=y]
      UpdateSetValue [13-16] [x=y]
        PathExpression [13-14] [x]
          Identifier(x) [13-14] [x]
        PathExpression [15-16] [y]
          Identifier(y) [15-16] [y]
--
UPDATE T
SET
  x = y
==

# The resolver will fail on this because WITH OFFSET is not allowed in
# top-level UPDATE statements, but it does parse.
update T with offset AS offset_idx set x = y
--
UpdateStatement [0-44] [update T with...set x = y]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  WithOffset [9-34] [with offset AS offset_idx]
    Alias [21-34] [AS offset_idx]
      Identifier(offset_idx) [24-34] [offset_idx]
  UpdateItemList [39-44] [x = y]
    UpdateItem [39-44] [x = y]
      UpdateSetValue [39-44] [x = y]
        PathExpression [39-40] [x]
          Identifier(x) [39-40] [x]
        PathExpression [43-44] [y]
          Identifier(y) [43-44] [y]
--
UPDATE T WITH OFFSET AS offset_idx
SET
  x = y
==

# The resolver will fail on this because the target involves a generalized
# field access, but it does parse.
update T.(a.b).c set x = y
--
UpdateStatement [0-26] [update T.(a.b).c set x = y]
  DotIdentifier [7-16] [T.(a.b).c]
    DotGeneralizedField [7-14] [T.(a.b)]
      PathExpression [7-8] [T]
        Identifier(T) [7-8] [T]
      PathExpression [10-13] [a.b]
        Identifier(a) [10-11] [a]
        Identifier(b) [12-13] [b]
    Identifier(c) [15-16] [c]
  UpdateItemList [21-26] [x = y]
    UpdateItem [21-26] [x = y]
      UpdateSetValue [21-26] [x = y]
        PathExpression [21-22] [x]
          Identifier(x) [21-22] [x]
        PathExpression [25-26] [y]
          Identifier(y) [25-26] [y]
--
UPDATE T.(a.b).c
SET
  x = y
==

# The resolver will fail on this because the target involves [], but it does
# parse.
update T.a[0].b set x = y
--
UpdateStatement [0-25] [update T.a[0].b set x = y]
  DotIdentifier [7-15] [T.a[0].b]
    ArrayElement [7-13] [T.a[0]]
      PathExpression [7-10] [T.a]
        Identifier(T) [7-8] [T]
        Identifier(a) [9-10] [a]
      Location [10-11] [[]
      IntLiteral(0) [11-12] [0]
    Identifier(b) [14-15] [b]
  UpdateItemList [20-25] [x = y]
    UpdateItem [20-25] [x = y]
      UpdateSetValue [20-25] [x = y]
        PathExpression [20-21] [x]
          Identifier(x) [20-21] [x]
        PathExpression [24-25] [y]
          Identifier(y) [24-25] [y]
--
UPDATE T.a[0].b
SET
  x = y
==

update T
set id.(path.to.extension) = 5
--
UpdateStatement [0-39] [update T set...extension) = 5]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-39] [id.(path.to.extension) = 5]
    UpdateItem [13-39] [id.(path.to.extension) = 5]
      UpdateSetValue [13-39] [id.(path.to.extension) = 5]
        DotGeneralizedField [13-35] [id.(path.to.extension)]
          PathExpression [13-15] [id]
            Identifier(id) [13-15] [id]
          PathExpression [17-34] [path.to.extension]
            Identifier(path) [17-21] [path]
            Identifier(`to`) [22-24] [to]
            Identifier(extension) [25-34] [extension]
        IntLiteral(5) [38-39] [5]
--
UPDATE T
SET
  id.(path.`to`.extension) = 5
==

update T
set id.(path.to.extension) = DEFAULT
--
UpdateStatement [0-45] [update T set...= DEFAULT]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-45] [id.(path.to...= DEFAULT]
    UpdateItem [13-45] [id.(path.to...= DEFAULT]
      UpdateSetValue [13-45] [id.(path.to...= DEFAULT]
        DotGeneralizedField [13-35] [id.(path.to.extension)]
          PathExpression [13-15] [id]
            Identifier(id) [13-15] [id]
          PathExpression [17-34] [path.to.extension]
            Identifier(path) [17-21] [path]
            Identifier(`to`) [22-24] [to]
            Identifier(extension) [25-34] [extension]
        DefaultLiteral [38-45] [DEFAULT]
--
UPDATE T
SET
  id.(path.`to`.extension) = DEFAULT
==

update T
set id[0] = DEFAULT
--
UpdateStatement [0-28] [update T set id[0] = DEFAULT]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-28] [id[0] = DEFAULT]
    UpdateItem [13-28] [id[0] = DEFAULT]
      UpdateSetValue [13-28] [id[0] = DEFAULT]
        ArrayElement [13-18] [id[0]]
          PathExpression [13-15] [id]
            Identifier(id) [13-15] [id]
          Location [15-16] [[]
          IntLiteral(0) [16-17] [0]
        DefaultLiteral [21-28] [DEFAULT]
--
UPDATE T
SET
  id[0] = DEFAULT
==

update T
set id1.id2.(path.to.extension) = 5
--
UpdateStatement [0-44] [update T set...extension) = 5]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-44] [id1.id2.(path...extension) = 5]
    UpdateItem [13-44] [id1.id2.(path...extension) = 5]
      UpdateSetValue [13-44] [id1.id2.(path...extension) = 5]
        DotGeneralizedField [13-40] [id1.id2.(path.to.extension)]
          PathExpression [13-20] [id1.id2]
            Identifier(id1) [13-16] [id1]
            Identifier(id2) [17-20] [id2]
          PathExpression [22-39] [path.to.extension]
            Identifier(path) [22-26] [path]
            Identifier(`to`) [27-29] [to]
            Identifier(extension) [30-39] [extension]
        IntLiteral(5) [43-44] [5]
--
UPDATE T
SET
  id1.id2.(path.`to`.extension) = 5
==

update T
set id1.(id2).(id3) = 5
--
UpdateStatement [0-32] [update T set....(id3) = 5]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-32] [id1.(id2).(id3) = 5]
    UpdateItem [13-32] [id1.(id2).(id3) = 5]
      UpdateSetValue [13-32] [id1.(id2).(id3) = 5]
        DotGeneralizedField [13-28] [id1.(id2).(id3)]
          DotGeneralizedField [13-22] [id1.(id2)]
            PathExpression [13-16] [id1]
              Identifier(id1) [13-16] [id1]
            PathExpression [18-21] [id2]
              Identifier(id2) [18-21] [id2]
          PathExpression [24-27] [id3]
            Identifier(id3) [24-27] [id3]
        IntLiteral(5) [31-32] [5]
--
UPDATE T
SET
  id1.(id2).(id3) = 5
==

update T
set id1.(a.b.c).(d.e.f).id2.(g.h.i).id3.id4 = 5
--
UpdateStatement [0-56] [update T set...id3.id4 = 5]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-56] [id1.(a.b.c...id3.id4 = 5]
    UpdateItem [13-56] [id1.(a.b.c...id3.id4 = 5]
      UpdateSetValue [13-56] [id1.(a.b.c...id3.id4 = 5]
        DotIdentifier [13-52] [id1.(a.b.c...i).id3.id4]
          DotIdentifier [13-48] [id1.(a.b.c...g.h.i).id3]
            DotGeneralizedField [13-44] [id1.(a.b.c...id2.(g.h.i)]
              DotIdentifier [13-36] [id1.(a.b.c).(d.e.f).id2]
                DotGeneralizedField [13-32] [id1.(a.b.c).(d.e.f)]
                  DotGeneralizedField [13-24] [id1.(a.b.c)]
                    PathExpression [13-16] [id1]
                      Identifier(id1) [13-16] [id1]
                    PathExpression [18-23] [a.b.c]
                      Identifier(a) [18-19] [a]
                      Identifier(b) [20-21] [b]
                      Identifier(c) [22-23] [c]
                  PathExpression [26-31] [d.e.f]
                    Identifier(d) [26-27] [d]
                    Identifier(e) [28-29] [e]
                    Identifier(f) [30-31] [f]
                Identifier(id2) [33-36] [id2]
              PathExpression [38-43] [g.h.i]
                Identifier(g) [38-39] [g]
                Identifier(h) [40-41] [h]
                Identifier(i) [42-43] [i]
            Identifier(id3) [45-48] [id3]
          Identifier(id4) [49-52] [id4]
        IntLiteral(5) [55-56] [5]
--
UPDATE T
SET
  id1.(a.b.c).(d.e.f).id2.(g.h.i).id3.id4 = 5
==

update T set id1[0] = 5
--
UpdateStatement [0-23] [update T set id1[0] = 5]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-23] [id1[0] = 5]
    UpdateItem [13-23] [id1[0] = 5]
      UpdateSetValue [13-23] [id1[0] = 5]
        ArrayElement [13-19] [id1[0]]
          PathExpression [13-16] [id1]
            Identifier(id1) [13-16] [id1]
          Location [16-17] [[]
          IntLiteral(0) [17-18] [0]
        IntLiteral(5) [22-23] [5]
--
UPDATE T
SET
  id1[0] = 5
==

update T set id1[0].(a.b.c).id1.(d.e.f)[1].id3 = 5
--
UpdateStatement [0-50] [update T set...1].id3 = 5]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-50] [id1[0].(a....1].id3 = 5]
    UpdateItem [13-50] [id1[0].(a....1].id3 = 5]
      UpdateSetValue [13-50] [id1[0].(a....1].id3 = 5]
        DotIdentifier [13-46] [id1[0].(a.....f)[1].id3]
          ArrayElement [13-42] [id1[0].(a.b.c).id1.(d.e.f)[1]]
            DotGeneralizedField [13-39] [id1[0].(a.b.c).id1.(d.e.f)]
              DotIdentifier [13-31] [id1[0].(a.b.c).id1]
                DotGeneralizedField [13-27] [id1[0].(a.b.c)]
                  ArrayElement [13-19] [id1[0]]
                    PathExpression [13-16] [id1]
                      Identifier(id1) [13-16] [id1]
                    Location [16-17] [[]
                    IntLiteral(0) [17-18] [0]
                  PathExpression [21-26] [a.b.c]
                    Identifier(a) [21-22] [a]
                    Identifier(b) [23-24] [b]
                    Identifier(c) [25-26] [c]
                Identifier(id1) [28-31] [id1]
              PathExpression [33-38] [d.e.f]
                Identifier(d) [33-34] [d]
                Identifier(e) [35-36] [e]
                Identifier(f) [37-38] [f]
            Location [39-40] [[]
            IntLiteral(1) [40-41] [1]
          Identifier(id3) [43-46] [id3]
        IntLiteral(5) [49-50] [5]
--
UPDATE T
SET
  id1[0].(a.b.c).id1.(d.e.f)[1].id3 = 5
==

# This parses, but in practice it will never resolve because ZetaSQL does not
# support arrays of arrays.
update T set id1[0][1] = 5
--
UpdateStatement [0-26] [update T set id1[0][1] = 5]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-26] [id1[0][1] = 5]
    UpdateItem [13-26] [id1[0][1] = 5]
      UpdateSetValue [13-26] [id1[0][1] = 5]
        ArrayElement [13-22] [id1[0][1]]
          ArrayElement [13-19] [id1[0]]
            PathExpression [13-16] [id1]
              Identifier(id1) [13-16] [id1]
            Location [16-17] [[]
            IntLiteral(0) [17-18] [0]
          Location [19-20] [[]
          IntLiteral(1) [20-21] [1]
        IntLiteral(5) [25-26] [5]
--
UPDATE T
SET
  id1[0][1] = 5
==

# We don't support parsing generalized paths that begin with a parenthesized
# component because it creates ambiguity in the grammar with nested INSERTS.
update T
set (a.b.c) = 5
--
ERROR: Syntax error: Expected keyword DELETE or keyword INSERT or keyword UPDATE but got identifier "a" [at 2:6]
set (a.b.c) = 5
     ^
==

update T
set (a.b.c)[0] = 5
--
ERROR: Syntax error: Expected keyword DELETE or keyword INSERT or keyword UPDATE but got identifier "a" [at 2:6]
set (a.b.c)[0] = 5
     ^
==

update T
set (a.b.c).d = 5
--
ERROR: Syntax error: Expected keyword DELETE or keyword INSERT or keyword UPDATE but got identifier "a" [at 2:6]
set (a.b.c).d = 5
     ^
==

update T
set (a.b.c).d[0] = 5
--
ERROR: Syntax error: Expected keyword DELETE or keyword INSERT or keyword UPDATE but got identifier "a" [at 2:6]
set (a.b.c).d[0] = 5
     ^
==

update T
--
ERROR: Syntax error: Unexpected end of statement [at 1:9]
update T
        ^
==

update c.T
set x=y, a.b.c=1+(select count(*) from t2)
where zzz+yyy=55
assert_rows_modified @row_count
--
UpdateStatement [0-102] [update c.T...@row_count]
  PathExpression [7-10] [c.T]
    Identifier(c) [7-8] [c]
    Identifier(T) [9-10] [T]
  UpdateItemList [15-53] [x=y, a.b.c...) from t2)]
    UpdateItem [15-18] [x=y]
      UpdateSetValue [15-18] [x=y]
        PathExpression [15-16] [x]
          Identifier(x) [15-16] [x]
        PathExpression [17-18] [y]
          Identifier(y) [17-18] [y]
    UpdateItem [20-53] [a.b.c=1+(select...) from t2)]
      UpdateSetValue [20-53] [a.b.c=1+(select...) from t2)]
        PathExpression [20-25] [a.b.c]
          Identifier(a) [20-21] [a]
          Identifier(b) [22-23] [b]
          Identifier(c) [24-25] [c]
        BinaryExpression(+) [26-53] [1+(select count(*) from t2)]
          IntLiteral(1) [26-27] [1]
          ExpressionSubquery [28-53] [(select count(*) from t2)]
            Query [29-52] [select count(*) from t2]
              Select [29-52] [select count(*) from t2]
                SelectList [36-44] [count(*)]
                  SelectColumn [36-44] [count(*)]
                    FunctionCall [36-44] [count(*)]
                      PathExpression [36-41] [count]
                        Identifier(count) [36-41] [count]
                      Star(*) [42-43] [*]
                FromClause [45-52] [from t2]
                  TablePathExpression [50-52] [t2]
                    PathExpression [50-52] [t2]
                      Identifier(t2) [50-52] [t2]
  BinaryExpression(=) [60-70] [zzz+yyy=55]
    BinaryExpression(+) [60-67] [zzz+yyy]
      PathExpression [60-63] [zzz]
        Identifier(zzz) [60-63] [zzz]
      PathExpression [64-67] [yyy]
        Identifier(yyy) [64-67] [yyy]
    IntLiteral(55) [68-70] [55]
  AssertRowsModified [71-102] [assert_rows_modif...@row_count]
    ParameterExpr [92-102] [@row_count]
      Identifier(row_count) [93-102] [row_count]
--
UPDATE c.T
SET
  x = y,
  a.b.c = 1 + (
    SELECT
      count(*)
    FROM
      t2
  )
WHERE
  zzz + yyy = 55
ASSERT_ROWS_MODIFIED @row_count
==

update T
where true
set x=y
--
ERROR: Syntax error: Unexpected keyword WHERE [at 2:1]
where true
^
==

update T
set x=null, y=default, z=z
--
UpdateStatement [0-35] [update T set...default, z=z]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-35] [x=null, y=default, z=z]
    UpdateItem [13-19] [x=null]
      UpdateSetValue [13-19] [x=null]
        PathExpression [13-14] [x]
          Identifier(x) [13-14] [x]
        NullLiteral(null) [15-19] [null]
    UpdateItem [21-30] [y=default]
      UpdateSetValue [21-30] [y=default]
        PathExpression [21-22] [y]
          Identifier(y) [21-22] [y]
        DefaultLiteral [23-30] [default]
    UpdateItem [32-35] [z=z]
      UpdateSetValue [32-35] [z=z]
        PathExpression [32-33] [z]
          Identifier(z) [32-33] [z]
        PathExpression [34-35] [z]
          Identifier(z) [34-35] [z]
--
UPDATE T
SET
  x = null,
  y = DEFAULT,
  z = z
==

update T
set x=default+1
--

ERROR: Syntax error: Expected end of input but got "+" [at 2:14]
set x=default+1
             ^
==

update T
set default=y
--
ERROR: Syntax error: Unexpected keyword DEFAULT [at 2:5]
set default=y
    ^
==

update T
where true
--
ERROR: Syntax error: Unexpected keyword WHERE [at 2:1]
where true
^
==

update T
set
where true
--
ERROR: Syntax error: Unexpected keyword WHERE [at 3:1]
where true
^
==

update T
set a=1
set b=2
--
ERROR: Syntax error: Expected end of input but got keyword SET [at 3:1]
set b=2
^
==

update T
set a=1,
set b=2
--
ERROR: Syntax error: Unexpected keyword SET [at 3:1]
set b=2
^
==

# Missing table name.  SET is a reserved keyword.
update set x=y
--
ERROR: Syntax error: Unexpected keyword SET [at 1:8]
update set x=y
       ^
==

# SET is a reserved keyword and cannot be used as a table name.
update Set
SET x=y
--
ERROR: Syntax error: Unexpected keyword SET [at 1:8]
update Set
       ^
==

# SET is a reserved keyword and cannot be used as a table alias.
update T SET
SET x=y
--
ERROR: Syntax error: Unexpected keyword SET [at 2:1]
SET x=y
^
==

# SET is a reserved keyword and cannot be used as an identifier.
update T SET set = 5
--
ERROR: Syntax error: Unexpected keyword SET [at 1:14]
update T SET set = 5
             ^
==

[no_test_get_parse_tokens]
[language_features={{|V_1_3_ALLOW_DASHES_IN_TABLE_NAME}}]
update a-100.b.c
set x=y
--
ALTERNATION GROUP: <empty>
--
ERROR: Syntax error: Table name contains '-' character. It needs to be quoted: `a-100.b.c` [at 1:8]
update a-100.b.c
       ^
--
ALTERNATION GROUP: V_1_3_ALLOW_DASHES_IN_TABLE_NAME
--
UpdateStatement [0-24] [update a-100.b.c set x=y]
  PathExpression [7-16] [a-100.b.c]
    Identifier(`a-100`) [7-14] [a-100.b]
    Identifier(b) [7-14] [a-100.b]
    Identifier(c) [15-16] [c]
  UpdateItemList [21-24] [x=y]
    UpdateItem [21-24] [x=y]
      UpdateSetValue [21-24] [x=y]
        PathExpression [21-22] [x]
          Identifier(x) [21-22] [x]
        PathExpression [23-24] [y]
          Identifier(y) [23-24] [y]
--
UPDATE `a-100`.b.c
SET
  x = y
==

# Update statement with a table alias.
UPDATE T {{AS|}} a SET a.x=1
--
ALTERNATION GROUP: AS
--
UpdateStatement [0-23] [UPDATE T AS a SET a.x=1]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  Alias [9-13] [AS a]
    Identifier(a) [12-13] [a]
  UpdateItemList [18-23] [a.x=1]
    UpdateItem [18-23] [a.x=1]
      UpdateSetValue [18-23] [a.x=1]
        PathExpression [18-21] [a.x]
          Identifier(a) [18-19] [a]
          Identifier(x) [20-21] [x]
        IntLiteral(1) [22-23] [1]
--
UPDATE T AS a
SET
  a.x = 1
--
ALTERNATION GROUP: <empty>
--
UpdateStatement [0-21] [UPDATE T  a SET a.x=1]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  Alias [10-11] [a]
    Identifier(a) [10-11] [a]
  UpdateItemList [16-21] [a.x=1]
    UpdateItem [16-21] [a.x=1]
      UpdateSetValue [16-21] [a.x=1]
        PathExpression [16-19] [a.x]
          Identifier(a) [16-17] [a]
          Identifier(x) [18-19] [x]
        IntLiteral(1) [20-21] [1]
--
UPDATE T AS a
SET
  a.x = 1
==

# Nested DML statements.
update T
set x=y,
    (delete x),
    (insert y.z values (5)),
    (update a set b=c),
    z=default
--
UpdateStatement [0-100] [update T set...z=default]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-100] [x=y,     (...z=default]
    UpdateItem [13-16] [x=y]
      UpdateSetValue [13-16] [x=y]
        PathExpression [13-14] [x]
          Identifier(x) [13-14] [x]
        PathExpression [15-16] [y]
          Identifier(y) [15-16] [y]
    UpdateItem [22-32] [(delete x)]
      DeleteStatement [23-31] [delete x]
        PathExpression [30-31] [x]
          Identifier(x) [30-31] [x]
    UpdateItem [38-61] [(insert y.z values (5))]
      InsertStatement [39-60] [insert y.z values (5)]
        PathExpression [46-49] [y.z]
          Identifier(y) [46-47] [y]
          Identifier(z) [48-49] [z]
        InsertValuesRowList [50-60] [values (5)]
          InsertValuesRow [57-60] [(5)]
            IntLiteral(5) [58-59] [5]
    UpdateItem [67-85] [(update a set b=c)]
      UpdateStatement [68-84] [update a set b=c]
        PathExpression [75-76] [a]
          Identifier(a) [75-76] [a]
        UpdateItemList [81-84] [b=c]
          UpdateItem [81-84] [b=c]
            UpdateSetValue [81-84] [b=c]
              PathExpression [81-82] [b]
                Identifier(b) [81-82] [b]
              PathExpression [83-84] [c]
                Identifier(c) [83-84] [c]
    UpdateItem [91-100] [z=default]
      UpdateSetValue [91-100] [z=default]
        PathExpression [91-92] [z]
          Identifier(z) [91-92] [z]
        DefaultLiteral [93-100] [default]
--
UPDATE T
SET
  x = y,
  (
    DELETE x
  ),
  (
    INSERT INTO y.z
    VALUES
      (5)
  ),
  (
    UPDATE a
    SET
      b = c
  ),
  z = DEFAULT
==

# Nested DML statements with generalized path targets.
update T
set (delete a.(b.c)),
    (insert d.(e.f) values (5)),
    (update a.(b.c) set d = 10)
--
UpdateStatement [0-95] [update T set...set d = 10)]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-95] [(delete a....set d = 10)]
    UpdateItem [13-29] [(delete a.(b.c))]
      DeleteStatement [14-28] [delete a.(b.c)]
        DotGeneralizedField [21-28] [a.(b.c)]
          PathExpression [21-22] [a]
            Identifier(a) [21-22] [a]
          PathExpression [24-27] [b.c]
            Identifier(b) [24-25] [b]
            Identifier(c) [26-27] [c]
    UpdateItem [35-62] [(insert d.(e.f) values (5))]
      InsertStatement [36-61] [insert d.(e.f) values (5)]
        DotGeneralizedField [43-50] [d.(e.f)]
          PathExpression [43-44] [d]
            Identifier(d) [43-44] [d]
          PathExpression [46-49] [e.f]
            Identifier(e) [46-47] [e]
            Identifier(f) [48-49] [f]
        InsertValuesRowList [51-61] [values (5)]
          InsertValuesRow [58-61] [(5)]
            IntLiteral(5) [59-60] [5]
    UpdateItem [68-95] [(update a.(b.c) set d = 10)]
      UpdateStatement [69-94] [update a.(b.c) set d = 10]
        DotGeneralizedField [76-83] [a.(b.c)]
          PathExpression [76-77] [a]
            Identifier(a) [76-77] [a]
          PathExpression [79-82] [b.c]
            Identifier(b) [79-80] [b]
            Identifier(c) [81-82] [c]
        UpdateItemList [88-94] [d = 10]
          UpdateItem [88-94] [d = 10]
            UpdateSetValue [88-94] [d = 10]
              PathExpression [88-89] [d]
                Identifier(d) [88-89] [d]
              IntLiteral(10) [92-94] [10]
--
UPDATE T
SET
  (
    DELETE a.(b.c)
  ),
  (
    INSERT INTO d.(e.f)
    VALUES
      (5)
  ),
  (
    UPDATE a.(b.c)
    SET
      d = 10
  )
==

# Another set of nested DML statements with generalized path targets, this time
# with a generalized field access in the middle.
update T
set (delete a.(b.c).x),
    (insert d.(e.f).y values (5)),
    (update a.(b.c).x set d = 10)
--
UpdateStatement [0-101] [update T set...set d = 10)]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-101] [(delete a....set d = 10)]
    UpdateItem [13-31] [(delete a.(b.c).x)]
      DeleteStatement [14-30] [delete a.(b.c).x]
        DotIdentifier [21-30] [a.(b.c).x]
          DotGeneralizedField [21-28] [a.(b.c)]
            PathExpression [21-22] [a]
              Identifier(a) [21-22] [a]
            PathExpression [24-27] [b.c]
              Identifier(b) [24-25] [b]
              Identifier(c) [26-27] [c]
          Identifier(x) [29-30] [x]
    UpdateItem [37-66] [(insert d.(e.f).y values (5))]
      InsertStatement [38-65] [insert d.(e.f).y values (5)]
        DotIdentifier [45-54] [d.(e.f).y]
          DotGeneralizedField [45-52] [d.(e.f)]
            PathExpression [45-46] [d]
              Identifier(d) [45-46] [d]
            PathExpression [48-51] [e.f]
              Identifier(e) [48-49] [e]
              Identifier(f) [50-51] [f]
          Identifier(y) [53-54] [y]
        InsertValuesRowList [55-65] [values (5)]
          InsertValuesRow [62-65] [(5)]
            IntLiteral(5) [63-64] [5]
    UpdateItem [72-101] [(update a.(b.c).x set d = 10)]
      UpdateStatement [73-100] [update a.(b.c).x set d = 10]
        DotIdentifier [80-89] [a.(b.c).x]
          DotGeneralizedField [80-87] [a.(b.c)]
            PathExpression [80-81] [a]
              Identifier(a) [80-81] [a]
            PathExpression [83-86] [b.c]
              Identifier(b) [83-84] [b]
              Identifier(c) [85-86] [c]
          Identifier(x) [88-89] [x]
        UpdateItemList [94-100] [d = 10]
          UpdateItem [94-100] [d = 10]
            UpdateSetValue [94-100] [d = 10]
              PathExpression [94-95] [d]
                Identifier(d) [94-95] [d]
              IntLiteral(10) [98-100] [10]
--
UPDATE T
SET
  (
    DELETE a.(b.c).x
  ),
  (
    INSERT INTO d.(e.f).y
    VALUES
      (5)
  ),
  (
    UPDATE a.(b.c).x
    SET
      d = 10
  )
==

# Nested DML statements with generalized path targets involving array element
# modifications. These parse but the resolver doesn't allow array element
# modifications in the targets of nested DML statements.
update T
set (delete a.(b.c)[0].d),
    (insert d.(e.f)[1] values (5)),
    (update a[2].(b.c) set d = 10)
--
UpdateStatement [0-106] [update T set...set d = 10)]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-106] [(delete a....set d = 10)]
    UpdateItem [13-34] [(delete a.(b.c)[0].d)]
      DeleteStatement [14-33] [delete a.(b.c)[0].d]
        DotIdentifier [21-33] [a.(b.c)[0].d]
          ArrayElement [21-31] [a.(b.c)[0]]
            DotGeneralizedField [21-28] [a.(b.c)]
              PathExpression [21-22] [a]
                Identifier(a) [21-22] [a]
              PathExpression [24-27] [b.c]
                Identifier(b) [24-25] [b]
                Identifier(c) [26-27] [c]
            Location [28-29] [[]
            IntLiteral(0) [29-30] [0]
          Identifier(d) [32-33] [d]
    UpdateItem [40-70] [(insert d.(e.f)[1] values (5))]
      InsertStatement [41-69] [insert d.(e.f)[1] values (5)]
        ArrayElement [48-58] [d.(e.f)[1]]
          DotGeneralizedField [48-55] [d.(e.f)]
            PathExpression [48-49] [d]
              Identifier(d) [48-49] [d]
            PathExpression [51-54] [e.f]
              Identifier(e) [51-52] [e]
              Identifier(f) [53-54] [f]
          Location [55-56] [[]
          IntLiteral(1) [56-57] [1]
        InsertValuesRowList [59-69] [values (5)]
          InsertValuesRow [66-69] [(5)]
            IntLiteral(5) [67-68] [5]
    UpdateItem [76-106] [(update a[2].(b.c) set d = 10)]
      UpdateStatement [77-105] [update a[2].(b.c) set d = 10]
        DotGeneralizedField [84-94] [a[2].(b.c)]
          ArrayElement [84-88] [a[2]]
            PathExpression [84-85] [a]
              Identifier(a) [84-85] [a]
            Location [85-86] [[]
            IntLiteral(2) [86-87] [2]
          PathExpression [90-93] [b.c]
            Identifier(b) [90-91] [b]
            Identifier(c) [92-93] [c]
        UpdateItemList [99-105] [d = 10]
          UpdateItem [99-105] [d = 10]
            UpdateSetValue [99-105] [d = 10]
              PathExpression [99-100] [d]
                Identifier(d) [99-100] [d]
              IntLiteral(10) [103-105] [10]
--
UPDATE T
SET
  (
    DELETE a.(b.c)[0].d
  ),
  (
    INSERT INTO d.(e.f)[1]
    VALUES
      (5)
  ),
  (
    UPDATE a[2].(b.c)
    SET
      d = 10
  )
==

# Nested DML statement with alias.
update T {{AS|}} a
set a.x=y,
    (delete a.x {{AS|}} na where na.x=1),
    (update a.x {{AS|}} na set na.x=1),
    (insert a.x values (5))
--
ALTERNATION GROUP: AS,AS,AS
--
UpdateStatement [0-124] [update T AS...values (5))]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  Alias [9-13] [AS a]
    Identifier(a) [12-13] [a]
  UpdateItemList [18-124] [a.x=y,...values (5))]
    UpdateItem [18-23] [a.x=y]
      UpdateSetValue [18-23] [a.x=y]
        PathExpression [18-21] [a.x]
          Identifier(a) [18-19] [a]
          Identifier(x) [20-21] [x]
        PathExpression [22-23] [y]
          Identifier(y) [22-23] [y]
    UpdateItem [29-60] [(delete a....where na.x=1)]
      DeleteStatement [30-59] [delete a.x AS na where na.x=1]
        PathExpression [37-40] [a.x]
          Identifier(a) [37-38] [a]
          Identifier(x) [39-40] [x]
        Alias [41-46] [AS na]
          Identifier(na) [44-46] [na]
        BinaryExpression(=) [53-59] [na.x=1]
          PathExpression [53-57] [na.x]
            Identifier(na) [53-55] [na]
            Identifier(x) [56-57] [x]
          IntLiteral(1) [58-59] [1]
    UpdateItem [66-95] [(update a.x AS na set na.x=1)]
      UpdateStatement [67-94] [update a.x AS na set na.x=1]
        PathExpression [74-77] [a.x]
          Identifier(a) [74-75] [a]
          Identifier(x) [76-77] [x]
        Alias [78-83] [AS na]
          Identifier(na) [81-83] [na]
        UpdateItemList [88-94] [na.x=1]
          UpdateItem [88-94] [na.x=1]
            UpdateSetValue [88-94] [na.x=1]
              PathExpression [88-92] [na.x]
                Identifier(na) [88-90] [na]
                Identifier(x) [91-92] [x]
              IntLiteral(1) [93-94] [1]
    UpdateItem [101-124] [(insert a.x values (5))]
      InsertStatement [102-123] [insert a.x values (5)]
        PathExpression [109-112] [a.x]
          Identifier(a) [109-110] [a]
          Identifier(x) [111-112] [x]
        InsertValuesRowList [113-123] [values (5)]
          InsertValuesRow [120-123] [(5)]
            IntLiteral(5) [121-122] [5]
--
UPDATE T AS a
SET
  a.x = y,
  (
    DELETE a.x AS na
    WHERE
      na.x = 1
  ),
  (
    UPDATE a.x AS na
    SET
      na.x = 1
  ),
  (
    INSERT INTO a.x
    VALUES
      (5)
  )
--
ALTERNATION GROUP: AS,AS,
--
UpdateStatement [0-122] [update T AS...values (5))]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  Alias [9-13] [AS a]
    Identifier(a) [12-13] [a]
  UpdateItemList [18-122] [a.x=y,...values (5))]
    UpdateItem [18-23] [a.x=y]
      UpdateSetValue [18-23] [a.x=y]
        PathExpression [18-21] [a.x]
          Identifier(a) [18-19] [a]
          Identifier(x) [20-21] [x]
        PathExpression [22-23] [y]
          Identifier(y) [22-23] [y]
    UpdateItem [29-60] [(delete a....where na.x=1)]
      DeleteStatement [30-59] [delete a.x AS na where na.x=1]
        PathExpression [37-40] [a.x]
          Identifier(a) [37-38] [a]
          Identifier(x) [39-40] [x]
        Alias [41-46] [AS na]
          Identifier(na) [44-46] [na]
        BinaryExpression(=) [53-59] [na.x=1]
          PathExpression [53-57] [na.x]
            Identifier(na) [53-55] [na]
            Identifier(x) [56-57] [x]
          IntLiteral(1) [58-59] [1]
    UpdateItem [66-93] [(update a.x  na set na.x=1)]
      UpdateStatement [67-92] [update a.x  na set na.x=1]
        PathExpression [74-77] [a.x]
          Identifier(a) [74-75] [a]
          Identifier(x) [76-77] [x]
        Alias [79-81] [na]
          Identifier(na) [79-81] [na]
        UpdateItemList [86-92] [na.x=1]
          UpdateItem [86-92] [na.x=1]
            UpdateSetValue [86-92] [na.x=1]
              PathExpression [86-90] [na.x]
                Identifier(na) [86-88] [na]
                Identifier(x) [89-90] [x]
              IntLiteral(1) [91-92] [1]
    UpdateItem [99-122] [(insert a.x values (5))]
      InsertStatement [100-121] [insert a.x values (5)]
        PathExpression [107-110] [a.x]
          Identifier(a) [107-108] [a]
          Identifier(x) [109-110] [x]
        InsertValuesRowList [111-121] [values (5)]
          InsertValuesRow [118-121] [(5)]
            IntLiteral(5) [119-120] [5]
--
UPDATE T AS a
SET
  a.x = y,
  (
    DELETE a.x AS na
    WHERE
      na.x = 1
  ),
  (
    UPDATE a.x AS na
    SET
      na.x = 1
  ),
  (
    INSERT INTO a.x
    VALUES
      (5)
  )
--
ALTERNATION GROUP: AS,,AS
--
UpdateStatement [0-122] [update T AS...values (5))]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  Alias [9-13] [AS a]
    Identifier(a) [12-13] [a]
  UpdateItemList [18-122] [a.x=y,...values (5))]
    UpdateItem [18-23] [a.x=y]
      UpdateSetValue [18-23] [a.x=y]
        PathExpression [18-21] [a.x]
          Identifier(a) [18-19] [a]
          Identifier(x) [20-21] [x]
        PathExpression [22-23] [y]
          Identifier(y) [22-23] [y]
    UpdateItem [29-58] [(delete a.x  na where na.x=1)]
      DeleteStatement [30-57] [delete a.x  na where na.x=1]
        PathExpression [37-40] [a.x]
          Identifier(a) [37-38] [a]
          Identifier(x) [39-40] [x]
        Alias [42-44] [na]
          Identifier(na) [42-44] [na]
        BinaryExpression(=) [51-57] [na.x=1]
          PathExpression [51-55] [na.x]
            Identifier(na) [51-53] [na]
            Identifier(x) [54-55] [x]
          IntLiteral(1) [56-57] [1]
    UpdateItem [64-93] [(update a.x AS na set na.x=1)]
      UpdateStatement [65-92] [update a.x AS na set na.x=1]
        PathExpression [72-75] [a.x]
          Identifier(a) [72-73] [a]
          Identifier(x) [74-75] [x]
        Alias [76-81] [AS na]
          Identifier(na) [79-81] [na]
        UpdateItemList [86-92] [na.x=1]
          UpdateItem [86-92] [na.x=1]
            UpdateSetValue [86-92] [na.x=1]
              PathExpression [86-90] [na.x]
                Identifier(na) [86-88] [na]
                Identifier(x) [89-90] [x]
              IntLiteral(1) [91-92] [1]
    UpdateItem [99-122] [(insert a.x values (5))]
      InsertStatement [100-121] [insert a.x values (5)]
        PathExpression [107-110] [a.x]
          Identifier(a) [107-108] [a]
          Identifier(x) [109-110] [x]
        InsertValuesRowList [111-121] [values (5)]
          InsertValuesRow [118-121] [(5)]
            IntLiteral(5) [119-120] [5]
--
UPDATE T AS a
SET
  a.x = y,
  (
    DELETE a.x AS na
    WHERE
      na.x = 1
  ),
  (
    UPDATE a.x AS na
    SET
      na.x = 1
  ),
  (
    INSERT INTO a.x
    VALUES
      (5)
  )
--
ALTERNATION GROUP: AS,,
--
UpdateStatement [0-120] [update T AS...values (5))]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  Alias [9-13] [AS a]
    Identifier(a) [12-13] [a]
  UpdateItemList [18-120] [a.x=y,...values (5))]
    UpdateItem [18-23] [a.x=y]
      UpdateSetValue [18-23] [a.x=y]
        PathExpression [18-21] [a.x]
          Identifier(a) [18-19] [a]
          Identifier(x) [20-21] [x]
        PathExpression [22-23] [y]
          Identifier(y) [22-23] [y]
    UpdateItem [29-58] [(delete a.x  na where na.x=1)]
      DeleteStatement [30-57] [delete a.x  na where na.x=1]
        PathExpression [37-40] [a.x]
          Identifier(a) [37-38] [a]
          Identifier(x) [39-40] [x]
        Alias [42-44] [na]
          Identifier(na) [42-44] [na]
        BinaryExpression(=) [51-57] [na.x=1]
          PathExpression [51-55] [na.x]
            Identifier(na) [51-53] [na]
            Identifier(x) [54-55] [x]
          IntLiteral(1) [56-57] [1]
    UpdateItem [64-91] [(update a.x  na set na.x=1)]
      UpdateStatement [65-90] [update a.x  na set na.x=1]
        PathExpression [72-75] [a.x]
          Identifier(a) [72-73] [a]
          Identifier(x) [74-75] [x]
        Alias [77-79] [na]
          Identifier(na) [77-79] [na]
        UpdateItemList [84-90] [na.x=1]
          UpdateItem [84-90] [na.x=1]
            UpdateSetValue [84-90] [na.x=1]
              PathExpression [84-88] [na.x]
                Identifier(na) [84-86] [na]
                Identifier(x) [87-88] [x]
              IntLiteral(1) [89-90] [1]
    UpdateItem [97-120] [(insert a.x values (5))]
      InsertStatement [98-119] [insert a.x values (5)]
        PathExpression [105-108] [a.x]
          Identifier(a) [105-106] [a]
          Identifier(x) [107-108] [x]
        InsertValuesRowList [109-119] [values (5)]
          InsertValuesRow [116-119] [(5)]
            IntLiteral(5) [117-118] [5]
--
UPDATE T AS a
SET
  a.x = y,
  (
    DELETE a.x AS na
    WHERE
      na.x = 1
  ),
  (
    UPDATE a.x AS na
    SET
      na.x = 1
  ),
  (
    INSERT INTO a.x
    VALUES
      (5)
  )
--
ALTERNATION GROUP: AS,AS
--
UpdateStatement [0-122] [update T...values (5))]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  Alias [10-11] [a]
    Identifier(a) [10-11] [a]
  UpdateItemList [16-122] [a.x=y,...values (5))]
    UpdateItem [16-21] [a.x=y]
      UpdateSetValue [16-21] [a.x=y]
        PathExpression [16-19] [a.x]
          Identifier(a) [16-17] [a]
          Identifier(x) [18-19] [x]
        PathExpression [20-21] [y]
          Identifier(y) [20-21] [y]
    UpdateItem [27-58] [(delete a....where na.x=1)]
      DeleteStatement [28-57] [delete a.x AS na where na.x=1]
        PathExpression [35-38] [a.x]
          Identifier(a) [35-36] [a]
          Identifier(x) [37-38] [x]
        Alias [39-44] [AS na]
          Identifier(na) [42-44] [na]
        BinaryExpression(=) [51-57] [na.x=1]
          PathExpression [51-55] [na.x]
            Identifier(na) [51-53] [na]
            Identifier(x) [54-55] [x]
          IntLiteral(1) [56-57] [1]
    UpdateItem [64-93] [(update a.x AS na set na.x=1)]
      UpdateStatement [65-92] [update a.x AS na set na.x=1]
        PathExpression [72-75] [a.x]
          Identifier(a) [72-73] [a]
          Identifier(x) [74-75] [x]
        Alias [76-81] [AS na]
          Identifier(na) [79-81] [na]
        UpdateItemList [86-92] [na.x=1]
          UpdateItem [86-92] [na.x=1]
            UpdateSetValue [86-92] [na.x=1]
              PathExpression [86-90] [na.x]
                Identifier(na) [86-88] [na]
                Identifier(x) [89-90] [x]
              IntLiteral(1) [91-92] [1]
    UpdateItem [99-122] [(insert a.x values (5))]
      InsertStatement [100-121] [insert a.x values (5)]
        PathExpression [107-110] [a.x]
          Identifier(a) [107-108] [a]
          Identifier(x) [109-110] [x]
        InsertValuesRowList [111-121] [values (5)]
          InsertValuesRow [118-121] [(5)]
            IntLiteral(5) [119-120] [5]
--
UPDATE T AS a
SET
  a.x = y,
  (
    DELETE a.x AS na
    WHERE
      na.x = 1
  ),
  (
    UPDATE a.x AS na
    SET
      na.x = 1
  ),
  (
    INSERT INTO a.x
    VALUES
      (5)
  )
--
ALTERNATION GROUP: AS,
--
UpdateStatement [0-120] [update T...values (5))]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  Alias [10-11] [a]
    Identifier(a) [10-11] [a]
  UpdateItemList [16-120] [a.x=y,...values (5))]
    UpdateItem [16-21] [a.x=y]
      UpdateSetValue [16-21] [a.x=y]
        PathExpression [16-19] [a.x]
          Identifier(a) [16-17] [a]
          Identifier(x) [18-19] [x]
        PathExpression [20-21] [y]
          Identifier(y) [20-21] [y]
    UpdateItem [27-58] [(delete a....where na.x=1)]
      DeleteStatement [28-57] [delete a.x AS na where na.x=1]
        PathExpression [35-38] [a.x]
          Identifier(a) [35-36] [a]
          Identifier(x) [37-38] [x]
        Alias [39-44] [AS na]
          Identifier(na) [42-44] [na]
        BinaryExpression(=) [51-57] [na.x=1]
          PathExpression [51-55] [na.x]
            Identifier(na) [51-53] [na]
            Identifier(x) [54-55] [x]
          IntLiteral(1) [56-57] [1]
    UpdateItem [64-91] [(update a.x  na set na.x=1)]
      UpdateStatement [65-90] [update a.x  na set na.x=1]
        PathExpression [72-75] [a.x]
          Identifier(a) [72-73] [a]
          Identifier(x) [74-75] [x]
        Alias [77-79] [na]
          Identifier(na) [77-79] [na]
        UpdateItemList [84-90] [na.x=1]
          UpdateItem [84-90] [na.x=1]
            UpdateSetValue [84-90] [na.x=1]
              PathExpression [84-88] [na.x]
                Identifier(na) [84-86] [na]
                Identifier(x) [87-88] [x]
              IntLiteral(1) [89-90] [1]
    UpdateItem [97-120] [(insert a.x values (5))]
      InsertStatement [98-119] [insert a.x values (5)]
        PathExpression [105-108] [a.x]
          Identifier(a) [105-106] [a]
          Identifier(x) [107-108] [x]
        InsertValuesRowList [109-119] [values (5)]
          InsertValuesRow [116-119] [(5)]
            IntLiteral(5) [117-118] [5]
--
UPDATE T AS a
SET
  a.x = y,
  (
    DELETE a.x AS na
    WHERE
      na.x = 1
  ),
  (
    UPDATE a.x AS na
    SET
      na.x = 1
  ),
  (
    INSERT INTO a.x
    VALUES
      (5)
  )
--
ALTERNATION GROUP: AS
--
UpdateStatement [0-120] [update T...values (5))]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  Alias [10-11] [a]
    Identifier(a) [10-11] [a]
  UpdateItemList [16-120] [a.x=y,...values (5))]
    UpdateItem [16-21] [a.x=y]
      UpdateSetValue [16-21] [a.x=y]
        PathExpression [16-19] [a.x]
          Identifier(a) [16-17] [a]
          Identifier(x) [18-19] [x]
        PathExpression [20-21] [y]
          Identifier(y) [20-21] [y]
    UpdateItem [27-56] [(delete a.x  na where na.x=1)]
      DeleteStatement [28-55] [delete a.x  na where na.x=1]
        PathExpression [35-38] [a.x]
          Identifier(a) [35-36] [a]
          Identifier(x) [37-38] [x]
        Alias [40-42] [na]
          Identifier(na) [40-42] [na]
        BinaryExpression(=) [49-55] [na.x=1]
          PathExpression [49-53] [na.x]
            Identifier(na) [49-51] [na]
            Identifier(x) [52-53] [x]
          IntLiteral(1) [54-55] [1]
    UpdateItem [62-91] [(update a.x AS na set na.x=1)]
      UpdateStatement [63-90] [update a.x AS na set na.x=1]
        PathExpression [70-73] [a.x]
          Identifier(a) [70-71] [a]
          Identifier(x) [72-73] [x]
        Alias [74-79] [AS na]
          Identifier(na) [77-79] [na]
        UpdateItemList [84-90] [na.x=1]
          UpdateItem [84-90] [na.x=1]
            UpdateSetValue [84-90] [na.x=1]
              PathExpression [84-88] [na.x]
                Identifier(na) [84-86] [na]
                Identifier(x) [87-88] [x]
              IntLiteral(1) [89-90] [1]
    UpdateItem [97-120] [(insert a.x values (5))]
      InsertStatement [98-119] [insert a.x values (5)]
        PathExpression [105-108] [a.x]
          Identifier(a) [105-106] [a]
          Identifier(x) [107-108] [x]
        InsertValuesRowList [109-119] [values (5)]
          InsertValuesRow [116-119] [(5)]
            IntLiteral(5) [117-118] [5]
--
UPDATE T AS a
SET
  a.x = y,
  (
    DELETE a.x AS na
    WHERE
      na.x = 1
  ),
  (
    UPDATE a.x AS na
    SET
      na.x = 1
  ),
  (
    INSERT INTO a.x
    VALUES
      (5)
  )
--
ALTERNATION GROUP: <empty>
--
UpdateStatement [0-118] [update T...values (5))]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  Alias [10-11] [a]
    Identifier(a) [10-11] [a]
  UpdateItemList [16-118] [a.x=y,...values (5))]
    UpdateItem [16-21] [a.x=y]
      UpdateSetValue [16-21] [a.x=y]
        PathExpression [16-19] [a.x]
          Identifier(a) [16-17] [a]
          Identifier(x) [18-19] [x]
        PathExpression [20-21] [y]
          Identifier(y) [20-21] [y]
    UpdateItem [27-56] [(delete a.x  na where na.x=1)]
      DeleteStatement [28-55] [delete a.x  na where na.x=1]
        PathExpression [35-38] [a.x]
          Identifier(a) [35-36] [a]
          Identifier(x) [37-38] [x]
        Alias [40-42] [na]
          Identifier(na) [40-42] [na]
        BinaryExpression(=) [49-55] [na.x=1]
          PathExpression [49-53] [na.x]
            Identifier(na) [49-51] [na]
            Identifier(x) [52-53] [x]
          IntLiteral(1) [54-55] [1]
    UpdateItem [62-89] [(update a.x  na set na.x=1)]
      UpdateStatement [63-88] [update a.x  na set na.x=1]
        PathExpression [70-73] [a.x]
          Identifier(a) [70-71] [a]
          Identifier(x) [72-73] [x]
        Alias [75-77] [na]
          Identifier(na) [75-77] [na]
        UpdateItemList [82-88] [na.x=1]
          UpdateItem [82-88] [na.x=1]
            UpdateSetValue [82-88] [na.x=1]
              PathExpression [82-86] [na.x]
                Identifier(na) [82-84] [na]
                Identifier(x) [85-86] [x]
              IntLiteral(1) [87-88] [1]
    UpdateItem [95-118] [(insert a.x values (5))]
      InsertStatement [96-117] [insert a.x values (5)]
        PathExpression [103-106] [a.x]
          Identifier(a) [103-104] [a]
          Identifier(x) [105-106] [x]
        InsertValuesRowList [107-117] [values (5)]
          InsertValuesRow [114-117] [(5)]
            IntLiteral(5) [115-116] [5]
--
UPDATE T AS a
SET
  a.x = y,
  (
    DELETE a.x AS na
    WHERE
      na.x = 1
  ),
  (
    UPDATE a.x AS na
    SET
      na.x = 1
  ),
  (
    INSERT INTO a.x
    VALUES
      (5)
  )
==

# Nested insert statemnent does not support table alias.
update T a
set (insert a.x {{AS|}} na values (5))
--
ALTERNATION GROUP: AS
--
ERROR: Syntax error: Expecting VALUES list or query [at 2:16]
set (insert a.x AS na values (5))
               ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Syntax error: INSERT target cannot have an alias [at 2:18]
set (insert a.x  na values (5))
                 ^
==

# Nested update with offset.
update T set
  (update a with offset {{|as}} {{|offset_idx|foo}}
   set x = y
   where offset_idx = 0)
where true
--
ALTERNATION GROUP: <empty>
--
UpdateStatement [0-87] [update T set...where true]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [15-76] [(update a...offset_idx = 0)]
    UpdateItem [15-76] [(update a...offset_idx = 0)]
      UpdateStatement [16-75] [update a with...offset_idx = 0]
        PathExpression [23-24] [a]
          Identifier(a) [23-24] [a]
        WithOffset [25-36] [with offset]
        UpdateItemList [46-51] [x = y]
          UpdateItem [46-51] [x = y]
            UpdateSetValue [46-51] [x = y]
              PathExpression [46-47] [x]
                Identifier(x) [46-47] [x]
              PathExpression [50-51] [y]
                Identifier(y) [50-51] [y]
        BinaryExpression(=) [61-75] [offset_idx = 0]
          PathExpression [61-71] [offset_idx]
            Identifier(offset_idx) [61-71] [offset_idx]
          IntLiteral(0) [74-75] [0]
  BooleanLiteral(true) [83-87] [true]
--
UPDATE T
SET
  (
    UPDATE a WITH OFFSET
    SET
      x = y
    WHERE
      offset_idx = 0
  )
WHERE
  true
--
ALTERNATION GROUP: offset_idx
--
UpdateStatement [0-97] [update T set...where true]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [15-86] [(update a...offset_idx = 0)]
    UpdateItem [15-86] [(update a...offset_idx = 0)]
      UpdateStatement [16-85] [update a with...offset_idx = 0]
        PathExpression [23-24] [a]
          Identifier(a) [23-24] [a]
        WithOffset [25-48] [with offset  offset_idx]
          Alias [38-48] [offset_idx]
            Identifier(offset_idx) [38-48] [offset_idx]
        UpdateItemList [56-61] [x = y]
          UpdateItem [56-61] [x = y]
            UpdateSetValue [56-61] [x = y]
              PathExpression [56-57] [x]
                Identifier(x) [56-57] [x]
              PathExpression [60-61] [y]
                Identifier(y) [60-61] [y]
        BinaryExpression(=) [71-85] [offset_idx = 0]
          PathExpression [71-81] [offset_idx]
            Identifier(offset_idx) [71-81] [offset_idx]
          IntLiteral(0) [84-85] [0]
  BooleanLiteral(true) [93-97] [true]
--
UPDATE T
SET
  (
    UPDATE a WITH OFFSET AS offset_idx
    SET
      x = y
    WHERE
      offset_idx = 0
  )
WHERE
  true
--
ALTERNATION GROUP: foo
--
UpdateStatement [0-90] [update T set...where true]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [15-79] [(update a...offset_idx = 0)]
    UpdateItem [15-79] [(update a...offset_idx = 0)]
      UpdateStatement [16-78] [update a with...offset_idx = 0]
        PathExpression [23-24] [a]
          Identifier(a) [23-24] [a]
        WithOffset [25-41] [with offset  foo]
          Alias [38-41] [foo]
            Identifier(foo) [38-41] [foo]
        UpdateItemList [49-54] [x = y]
          UpdateItem [49-54] [x = y]
            UpdateSetValue [49-54] [x = y]
              PathExpression [49-50] [x]
                Identifier(x) [49-50] [x]
              PathExpression [53-54] [y]
                Identifier(y) [53-54] [y]
        BinaryExpression(=) [64-78] [offset_idx = 0]
          PathExpression [64-74] [offset_idx]
            Identifier(offset_idx) [64-74] [offset_idx]
          IntLiteral(0) [77-78] [0]
  BooleanLiteral(true) [86-90] [true]
--
UPDATE T
SET
  (
    UPDATE a WITH OFFSET AS foo
    SET
      x = y
    WHERE
      offset_idx = 0
  )
WHERE
  true
--
ALTERNATION GROUP: as,
--
ERROR: Syntax error: Unexpected keyword SET [at 3:4]
   set x = y
   ^
--
ALTERNATION GROUP: as,offset_idx
--
UpdateStatement [0-99] [update T set...where true]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [15-88] [(update a...offset_idx = 0)]
    UpdateItem [15-88] [(update a...offset_idx = 0)]
      UpdateStatement [16-87] [update a with...offset_idx = 0]
        PathExpression [23-24] [a]
          Identifier(a) [23-24] [a]
        WithOffset [25-50] [with offset as offset_idx]
          Alias [37-50] [as offset_idx]
            Identifier(offset_idx) [40-50] [offset_idx]
        UpdateItemList [58-63] [x = y]
          UpdateItem [58-63] [x = y]
            UpdateSetValue [58-63] [x = y]
              PathExpression [58-59] [x]
                Identifier(x) [58-59] [x]
              PathExpression [62-63] [y]
                Identifier(y) [62-63] [y]
        BinaryExpression(=) [73-87] [offset_idx = 0]
          PathExpression [73-83] [offset_idx]
            Identifier(offset_idx) [73-83] [offset_idx]
          IntLiteral(0) [86-87] [0]
  BooleanLiteral(true) [95-99] [true]
--
UPDATE T
SET
  (
    UPDATE a WITH OFFSET AS offset_idx
    SET
      x = y
    WHERE
      offset_idx = 0
  )
WHERE
  true
--
ALTERNATION GROUP: as,foo
--
UpdateStatement [0-92] [update T set...where true]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [15-81] [(update a...offset_idx = 0)]
    UpdateItem [15-81] [(update a...offset_idx = 0)]
      UpdateStatement [16-80] [update a with...offset_idx = 0]
        PathExpression [23-24] [a]
          Identifier(a) [23-24] [a]
        WithOffset [25-43] [with offset as foo]
          Alias [37-43] [as foo]
            Identifier(foo) [40-43] [foo]
        UpdateItemList [51-56] [x = y]
          UpdateItem [51-56] [x = y]
            UpdateSetValue [51-56] [x = y]
              PathExpression [51-52] [x]
                Identifier(x) [51-52] [x]
              PathExpression [55-56] [y]
                Identifier(y) [55-56] [y]
        BinaryExpression(=) [66-80] [offset_idx = 0]
          PathExpression [66-76] [offset_idx]
            Identifier(offset_idx) [66-76] [offset_idx]
          IntLiteral(0) [79-80] [0]
  BooleanLiteral(true) [88-92] [true]
--
UPDATE T
SET
  (
    UPDATE a WITH OFFSET AS foo
    SET
      x = y
    WHERE
      offset_idx = 0
  )
WHERE
  true
==

# Nested delete with offset.
update T set
  (delete a with offset {{|as}} {{|offset_idx|foo}} where true)
where true
--
ALTERNATION GROUP: <empty>
--
UpdateStatement [0-61] [update T set...where true]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [15-50] [(delete a...where true)]
    UpdateItem [15-50] [(delete a...where true)]
      DeleteStatement [16-49] [delete a with...where true]
        PathExpression [23-24] [a]
          Identifier(a) [23-24] [a]
        WithOffset [25-36] [with offset]
        BooleanLiteral(true) [45-49] [true]
  BooleanLiteral(true) [57-61] [true]
--
UPDATE T
SET
  (
    DELETE a WITH OFFSET
    WHERE
      true
  )
WHERE
  true
--
ALTERNATION GROUP: offset_idx
--
UpdateStatement [0-71] [update T set...where true]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [15-60] [(delete a...where true)]
    UpdateItem [15-60] [(delete a...where true)]
      DeleteStatement [16-59] [delete a with...where true]
        PathExpression [23-24] [a]
          Identifier(a) [23-24] [a]
        WithOffset [25-48] [with offset  offset_idx]
          Alias [38-48] [offset_idx]
            Identifier(offset_idx) [38-48] [offset_idx]
        BooleanLiteral(true) [55-59] [true]
  BooleanLiteral(true) [67-71] [true]
--
UPDATE T
SET
  (
    DELETE a WITH OFFSET AS offset_idx
    WHERE
      true
  )
WHERE
  true
--
ALTERNATION GROUP: foo
--
UpdateStatement [0-64] [update T set...where true]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [15-53] [(delete a...where true)]
    UpdateItem [15-53] [(delete a...where true)]
      DeleteStatement [16-52] [delete a with...where true]
        PathExpression [23-24] [a]
          Identifier(a) [23-24] [a]
        WithOffset [25-41] [with offset  foo]
          Alias [38-41] [foo]
            Identifier(foo) [38-41] [foo]
        BooleanLiteral(true) [48-52] [true]
  BooleanLiteral(true) [60-64] [true]
--
UPDATE T
SET
  (
    DELETE a WITH OFFSET AS foo
    WHERE
      true
  )
WHERE
  true
--
ALTERNATION GROUP: as,
--
ERROR: Syntax error: Unexpected keyword WHERE [at 2:29]
  (delete a with offset as  where true)
                            ^
--
ALTERNATION GROUP: as,offset_idx
--
UpdateStatement [0-73] [update T set...where true]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [15-62] [(delete a...where true)]
    UpdateItem [15-62] [(delete a...where true)]
      DeleteStatement [16-61] [delete a with...where true]
        PathExpression [23-24] [a]
          Identifier(a) [23-24] [a]
        WithOffset [25-50] [with offset as offset_idx]
          Alias [37-50] [as offset_idx]
            Identifier(offset_idx) [40-50] [offset_idx]
        BooleanLiteral(true) [57-61] [true]
  BooleanLiteral(true) [69-73] [true]
--
UPDATE T
SET
  (
    DELETE a WITH OFFSET AS offset_idx
    WHERE
      true
  )
WHERE
  true
--
ALTERNATION GROUP: as,foo
--
UpdateStatement [0-66] [update T set...where true]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [15-55] [(delete a...where true)]
    UpdateItem [15-55] [(delete a...where true)]
      DeleteStatement [16-54] [delete a with...where true]
        PathExpression [23-24] [a]
          Identifier(a) [23-24] [a]
        WithOffset [25-43] [with offset as foo]
          Alias [37-43] [as foo]
            Identifier(foo) [40-43] [foo]
        BooleanLiteral(true) [50-54] [true]
  BooleanLiteral(true) [62-66] [true]
--
UPDATE T
SET
  (
    DELETE a WITH OFFSET AS foo
    WHERE
      true
  )
WHERE
  true
==

# Multiple levels of nested UPDATEs.
update T
set (update c1.c2
     set (update c3
          set (delete from c4
               where false
               assert_rows_modified 5)
          where true
          assert_rows_modified 4)
     where false
     assert_rows_modified 3)
where true
assert_rows_modified 2
--
UpdateStatement [0-277] [update T set...rows_modified 2]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-243] [(update c1..._rows_modified 3)]
    UpdateItem [13-243] [(update c1..._rows_modified 3)]
      UpdateStatement [14-242] [update c1....t_rows_modified 3]
        PathExpression [21-26] [c1.c2]
          Identifier(c1) [21-23] [c1]
          Identifier(c2) [24-26] [c2]
        UpdateItemList [36-197] [(update c3..._rows_modified 4)]
          UpdateItem [36-197] [(update c3..._rows_modified 4)]
            UpdateStatement [37-196] [update c3...rt_rows_modified 4]
              PathExpression [44-46] [c3]
                Identifier(c3) [44-46] [c3]
              UpdateItemList [61-142] [(delete from...ows_modified 5)]
                UpdateItem [61-142] [(delete from...ows_modified 5)]
                  DeleteStatement [62-141] [delete from..._rows_modified 5]
                    PathExpression [74-76] [c4]
                      Identifier(c4) [74-76] [c4]
                    BooleanLiteral(false) [98-103] [false]
                    AssertRowsModified [119-141] [assert_rows_modified 5]
                      IntLiteral(5) [140-141] [5]
              BooleanLiteral(true) [159-163] [true]
              AssertRowsModified [174-196] [assert_rows_modified 4]
                IntLiteral(4) [195-196] [4]
        BooleanLiteral(false) [209-214] [false]
        AssertRowsModified [220-242] [assert_rows_modified 3]
          IntLiteral(3) [241-242] [3]
  BooleanLiteral(true) [250-254] [true]
  AssertRowsModified [255-277] [assert_rows_modified 2]
    IntLiteral(2) [276-277] [2]
--
UPDATE T
SET
  (
    UPDATE c1.c2
    SET
      (
        UPDATE c3
        SET
          (
            DELETE c4
            WHERE
              false
            ASSERT_ROWS_MODIFIED 5
          )
        WHERE
          true
        ASSERT_ROWS_MODIFIED 4
      )
    WHERE
      false
    ASSERT_ROWS_MODIFIED 3
  )
WHERE
  true
ASSERT_ROWS_MODIFIED 2
==

@{c=d} update t1
       set (       delete from t2),
           (@{e=f} delete from t3)
--
ERROR: Syntax error: Expected keyword DELETE or keyword INSERT or keyword UPDATE but got "@" [at 3:13]
           (@{e=f} delete from t3)
            ^
==

UPDATE T
SET x = T1.y
FROM T1
WHERE T.a = T1.b
--
UpdateStatement [0-46] [UPDATE T SET...T.a = T1.b]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-21] [x = T1.y]
    UpdateItem [13-21] [x = T1.y]
      UpdateSetValue [13-21] [x = T1.y]
        PathExpression [13-14] [x]
          Identifier(x) [13-14] [x]
        PathExpression [17-21] [T1.y]
          Identifier(T1) [17-19] [T1]
          Identifier(y) [20-21] [y]
  FromClause [22-29] [FROM T1]
    TablePathExpression [27-29] [T1]
      PathExpression [27-29] [T1]
        Identifier(T1) [27-29] [T1]
  BinaryExpression(=) [36-46] [T.a = T1.b]
    PathExpression [36-39] [T.a]
      Identifier(T) [36-37] [T]
      Identifier(a) [38-39] [a]
    PathExpression [42-46] [T1.b]
      Identifier(T1) [42-44] [T1]
      Identifier(b) [45-46] [b]
--
UPDATE T
SET
  x = T1.y
FROM
  T1
WHERE
  T.a = T1.b
==

UPDATE T
SET x = T2.c
FROM T1 JOIN T2 ON T1.x = T2.y
WHERE T.a < T1.b
--
UpdateStatement [0-69] [UPDATE T SET...T.a < T1.b]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-21] [x = T2.c]
    UpdateItem [13-21] [x = T2.c]
      UpdateSetValue [13-21] [x = T2.c]
        PathExpression [13-14] [x]
          Identifier(x) [13-14] [x]
        PathExpression [17-21] [T2.c]
          Identifier(T2) [17-19] [T2]
          Identifier(c) [20-21] [c]
  FromClause [22-52] [FROM T1 JOIN T2 ON T1.x = T2.y]
    Join [27-52] [T1 JOIN T2 ON T1.x = T2.y]
      TablePathExpression [27-29] [T1]
        PathExpression [27-29] [T1]
          Identifier(T1) [27-29] [T1]
      Location [30-34] [JOIN]
      TablePathExpression [35-37] [T2]
        PathExpression [35-37] [T2]
          Identifier(T2) [35-37] [T2]
      OnClause [38-52] [ON T1.x = T2.y]
        BinaryExpression(=) [41-52] [T1.x = T2.y]
          PathExpression [41-45] [T1.x]
            Identifier(T1) [41-43] [T1]
            Identifier(x) [44-45] [x]
          PathExpression [48-52] [T2.y]
            Identifier(T2) [48-50] [T2]
            Identifier(y) [51-52] [y]
  BinaryExpression(<) [59-69] [T.a < T1.b]
    PathExpression [59-62] [T.a]
      Identifier(T) [59-60] [T]
      Identifier(a) [61-62] [a]
    PathExpression [65-69] [T1.b]
      Identifier(T1) [65-67] [T1]
      Identifier(b) [68-69] [b]
--
UPDATE T
SET
  x = T2.c
FROM
  T1
  JOIN
  T2
  ON T1.x = T2.y
WHERE
  T.a < T1.b
==

UPDATE T
SET x = T2.c
FROM T1, T2
WHERE T.a < T1.b
--
UpdateStatement [0-50] [UPDATE T SET...T.a < T1.b]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-21] [x = T2.c]
    UpdateItem [13-21] [x = T2.c]
      UpdateSetValue [13-21] [x = T2.c]
        PathExpression [13-14] [x]
          Identifier(x) [13-14] [x]
        PathExpression [17-21] [T2.c]
          Identifier(T2) [17-19] [T2]
          Identifier(c) [20-21] [c]
  FromClause [22-33] [FROM T1, T2]
    Join(COMMA) [27-33] [T1, T2]
      TablePathExpression [27-29] [T1]
        PathExpression [27-29] [T1]
          Identifier(T1) [27-29] [T1]
      Location [29-30] [,]
      TablePathExpression [31-33] [T2]
        PathExpression [31-33] [T2]
          Identifier(T2) [31-33] [T2]
  BinaryExpression(<) [40-50] [T.a < T1.b]
    PathExpression [40-43] [T.a]
      Identifier(T) [40-41] [T]
      Identifier(a) [42-43] [a]
    PathExpression [46-50] [T1.b]
      Identifier(T1) [46-48] [T1]
      Identifier(b) [49-50] [b]
--
UPDATE T
SET
  x = T2.c
FROM
  T1,
  T2
WHERE
  T.a < T1.b
==

UPDATE T SET x = 1
FROM (T1 JOIN T2) JOIN T3
WHERE true
--
UpdateStatement [0-55] [UPDATE T SET...WHERE true]
  PathExpression [7-8] [T]
    Identifier(T) [7-8] [T]
  UpdateItemList [13-18] [x = 1]
    UpdateItem [13-18] [x = 1]
      UpdateSetValue [13-18] [x = 1]
        PathExpression [13-14] [x]
          Identifier(x) [13-14] [x]
        IntLiteral(1) [17-18] [1]
  FromClause [19-44] [FROM (T1 JOIN T2) JOIN T3]
    Join [24-44] [(T1 JOIN T2) JOIN T3]
      ParenthesizedJoin [24-36] [(T1 JOIN T2)]
        Join [25-35] [T1 JOIN T2]
          TablePathExpression [25-27] [T1]
            PathExpression [25-27] [T1]
              Identifier(T1) [25-27] [T1]
          Location [28-32] [JOIN]
          TablePathExpression [33-35] [T2]
            PathExpression [33-35] [T2]
              Identifier(T2) [33-35] [T2]
      Location [37-41] [JOIN]
      TablePathExpression [42-44] [T3]
        PathExpression [42-44] [T3]
          Identifier(T3) [42-44] [T3]
  BooleanLiteral(true) [51-55] [true]
--
UPDATE T
SET
  x = 1
FROM
  (
    T1
    JOIN
    T2
  )
  JOIN
  T3
WHERE
  true

==

UPDATE TestTable SET
  KitchenSink.int32_val = 1,
  (INSERT {{|OR REPLACE|OR IGNORE|OR UPDATE}} KitchenSink.repeated_int64_val
   VALUES (1), (1 + 2), ((select 1))
   ASSERT_ROWS_MODIFIED 1)
WHERE true
ASSERT_ROWS_MODIFIED 1
--
ALTERNATION GROUP: <empty>
--
UpdateStatement [0-189] [UPDATE TestTable..._MODIFIED 1]
  PathExpression [7-16] [TestTable]
    Identifier(TestTable) [7-16] [TestTable]
  UpdateItemList [23-155] [KitchenSink...ROWS_MODIFIED 1)]
    UpdateItem [23-48] [KitchenSink.int32_val = 1]
      UpdateSetValue [23-48] [KitchenSink.int32_val = 1]
        PathExpression [23-44] [KitchenSink.int32_val]
          Identifier(KitchenSink) [23-34] [KitchenSink]
          Identifier(int32_val) [35-44] [int32_val]
        IntLiteral(1) [47-48] [1]
    UpdateItem [52-155] [(INSERT  KitchenS...ODIFIED 1)]
      InsertStatement [53-154] [INSERT  KitchenSi...MODIFIED 1]
        PathExpression [61-91] [KitchenSink.repeated_int64_val]
          Identifier(KitchenSink) [61-72] [KitchenSink]
          Identifier(repeated_int64_val) [73-91] [repeated_int64_val]
        InsertValuesRowList [95-128] [VALUES (1)...select 1))]
          InsertValuesRow [102-105] [(1)]
            IntLiteral(1) [103-104] [1]
          InsertValuesRow [107-114] [(1 + 2)]
            BinaryExpression(+) [108-113] [1 + 2]
              IntLiteral(1) [108-109] [1]
              IntLiteral(2) [112-113] [2]
          InsertValuesRow [116-128] [((select 1))]
            ExpressionSubquery [117-127] [(select 1)]
              Query [118-126] [select 1]
                Select [118-126] [select 1]
                  SelectList [125-126] [1]
                    SelectColumn [125-126] [1]
                      IntLiteral(1) [125-126] [1]
        AssertRowsModified [132-154] [ASSERT_ROWS_MODIFIED 1]
          IntLiteral(1) [153-154] [1]
  BooleanLiteral(true) [162-166] [true]
  AssertRowsModified [167-189] [ASSERT_ROWS_MODIFIED 1]
    IntLiteral(1) [188-189] [1]
--
UPDATE TestTable
SET
  KitchenSink.int32_val = 1,
  (
    INSERT INTO KitchenSink.repeated_int64_val
    VALUES
      (1),
      (1 + 2),
      ((
          SELECT
            1
        ))
    ASSERT_ROWS_MODIFIED 1
  )
WHERE
  true
ASSERT_ROWS_MODIFIED 1
--
ALTERNATION GROUP: OR REPLACE
--
UpdateStatement [0-199] [UPDATE TestTable..._MODIFIED 1]
  PathExpression [7-16] [TestTable]
    Identifier(TestTable) [7-16] [TestTable]
  UpdateItemList [23-165] [KitchenSink...ROWS_MODIFIED 1)]
    UpdateItem [23-48] [KitchenSink.int32_val = 1]
      UpdateSetValue [23-48] [KitchenSink.int32_val = 1]
        PathExpression [23-44] [KitchenSink.int32_val]
          Identifier(KitchenSink) [23-34] [KitchenSink]
          Identifier(int32_val) [35-44] [int32_val]
        IntLiteral(1) [47-48] [1]
    UpdateItem [52-165] [(INSERT OR..._ROWS_MODIFIED 1)]
      InsertStatement(insert_mode=REPLACE) [53-164] [INSERT OR...RT_ROWS_MODIFIED 1]
        PathExpression [71-101] [KitchenSink.repeated_int64_val]
          Identifier(KitchenSink) [71-82] [KitchenSink]
          Identifier(repeated_int64_val) [83-101] [repeated_int64_val]
        InsertValuesRowList [105-138] [VALUES (1)...select 1))]
          InsertValuesRow [112-115] [(1)]
            IntLiteral(1) [113-114] [1]
          InsertValuesRow [117-124] [(1 + 2)]
            BinaryExpression(+) [118-123] [1 + 2]
              IntLiteral(1) [118-119] [1]
              IntLiteral(2) [122-123] [2]
          InsertValuesRow [126-138] [((select 1))]
            ExpressionSubquery [127-137] [(select 1)]
              Query [128-136] [select 1]
                Select [128-136] [select 1]
                  SelectList [135-136] [1]
                    SelectColumn [135-136] [1]
                      IntLiteral(1) [135-136] [1]
        AssertRowsModified [142-164] [ASSERT_ROWS_MODIFIED 1]
          IntLiteral(1) [163-164] [1]
  BooleanLiteral(true) [172-176] [true]
  AssertRowsModified [177-199] [ASSERT_ROWS_MODIFIED 1]
    IntLiteral(1) [198-199] [1]
--
UPDATE TestTable
SET
  KitchenSink.int32_val = 1,
  (
    INSERT OR REPLACE INTO KitchenSink.repeated_int64_val
    VALUES
      (1),
      (1 + 2),
      ((
          SELECT
            1
        ))
    ASSERT_ROWS_MODIFIED 1
  )
WHERE
  true
ASSERT_ROWS_MODIFIED 1
--
ALTERNATION GROUP: OR IGNORE
--
UpdateStatement [0-198] [UPDATE TestTable..._MODIFIED 1]
  PathExpression [7-16] [TestTable]
    Identifier(TestTable) [7-16] [TestTable]
  UpdateItemList [23-164] [KitchenSink...ROWS_MODIFIED 1)]
    UpdateItem [23-48] [KitchenSink.int32_val = 1]
      UpdateSetValue [23-48] [KitchenSink.int32_val = 1]
        PathExpression [23-44] [KitchenSink.int32_val]
          Identifier(KitchenSink) [23-34] [KitchenSink]
          Identifier(int32_val) [35-44] [int32_val]
        IntLiteral(1) [47-48] [1]
    UpdateItem [52-164] [(INSERT OR..._ROWS_MODIFIED 1)]
      InsertStatement(insert_mode=IGNORE) [53-163] [INSERT OR...RT_ROWS_MODIFIED 1]
        PathExpression [70-100] [KitchenSink.repeated_int64_val]
          Identifier(KitchenSink) [70-81] [KitchenSink]
          Identifier(repeated_int64_val) [82-100] [repeated_int64_val]
        InsertValuesRowList [104-137] [VALUES (1)...select 1))]
          InsertValuesRow [111-114] [(1)]
            IntLiteral(1) [112-113] [1]
          InsertValuesRow [116-123] [(1 + 2)]
            BinaryExpression(+) [117-122] [1 + 2]
              IntLiteral(1) [117-118] [1]
              IntLiteral(2) [121-122] [2]
          InsertValuesRow [125-137] [((select 1))]
            ExpressionSubquery [126-136] [(select 1)]
              Query [127-135] [select 1]
                Select [127-135] [select 1]
                  SelectList [134-135] [1]
                    SelectColumn [134-135] [1]
                      IntLiteral(1) [134-135] [1]
        AssertRowsModified [141-163] [ASSERT_ROWS_MODIFIED 1]
          IntLiteral(1) [162-163] [1]
  BooleanLiteral(true) [171-175] [true]
  AssertRowsModified [176-198] [ASSERT_ROWS_MODIFIED 1]
    IntLiteral(1) [197-198] [1]
--
UPDATE TestTable
SET
  KitchenSink.int32_val = 1,
  (
    INSERT OR IGNORE INTO KitchenSink.repeated_int64_val
    VALUES
      (1),
      (1 + 2),
      ((
          SELECT
            1
        ))
    ASSERT_ROWS_MODIFIED 1
  )
WHERE
  true
ASSERT_ROWS_MODIFIED 1
--
ALTERNATION GROUP: OR UPDATE
--
UpdateStatement [0-198] [UPDATE TestTable..._MODIFIED 1]
  PathExpression [7-16] [TestTable]
    Identifier(TestTable) [7-16] [TestTable]
  UpdateItemList [23-164] [KitchenSink...ROWS_MODIFIED 1)]
    UpdateItem [23-48] [KitchenSink.int32_val = 1]
      UpdateSetValue [23-48] [KitchenSink.int32_val = 1]
        PathExpression [23-44] [KitchenSink.int32_val]
          Identifier(KitchenSink) [23-34] [KitchenSink]
          Identifier(int32_val) [35-44] [int32_val]
        IntLiteral(1) [47-48] [1]
    UpdateItem [52-164] [(INSERT OR..._ROWS_MODIFIED 1)]
      InsertStatement(insert_mode=UPDATE) [53-163] [INSERT OR...RT_ROWS_MODIFIED 1]
        PathExpression [70-100] [KitchenSink.repeated_int64_val]
          Identifier(KitchenSink) [70-81] [KitchenSink]
          Identifier(repeated_int64_val) [82-100] [repeated_int64_val]
        InsertValuesRowList [104-137] [VALUES (1)...select 1))]
          InsertValuesRow [111-114] [(1)]
            IntLiteral(1) [112-113] [1]
          InsertValuesRow [116-123] [(1 + 2)]
            BinaryExpression(+) [117-122] [1 + 2]
              IntLiteral(1) [117-118] [1]
              IntLiteral(2) [121-122] [2]
          InsertValuesRow [125-137] [((select 1))]
            ExpressionSubquery [126-136] [(select 1)]
              Query [127-135] [select 1]
                Select [127-135] [select 1]
                  SelectList [134-135] [1]
                    SelectColumn [134-135] [1]
                      IntLiteral(1) [134-135] [1]
        AssertRowsModified [141-163] [ASSERT_ROWS_MODIFIED 1]
          IntLiteral(1) [162-163] [1]
  BooleanLiteral(true) [171-175] [true]
  AssertRowsModified [176-198] [ASSERT_ROWS_MODIFIED 1]
    IntLiteral(1) [197-198] [1]
--
UPDATE TestTable
SET
  KitchenSink.int32_val = 1,
  (
    INSERT OR UPDATE INTO KitchenSink.repeated_int64_val
    VALUES
      (1),
      (1 + 2),
      ((
          SELECT
            1
        ))
    ASSERT_ROWS_MODIFIED 1
  )
WHERE
  true
ASSERT_ROWS_MODIFIED 1
