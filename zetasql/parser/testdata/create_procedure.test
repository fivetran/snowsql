# valid minimum statement
[default language_features=NON_SQL_PROCEDURE]
CREATE PROCEDURE procedure_name()
BEGIN
END;
--
CreateProcedureStatement [0-43] [CREATE PROCEDURE...BEGIN END]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-33] [()]
  Script [34-43] [BEGIN END]
    StatementList [34-43] [BEGIN END]
      BeginEndBlock [34-43] [BEGIN END]
        StatementList [39-39] []
--
CREATE PROCEDURE procedure_name()
BEGIN
END
==

# valid mininum statement with all optional clause
CREATE OR REPLACE TEMP PROCEDURE IF NOT EXISTS procedure_name()
OPTIONS()
BEGIN
END;
--
CreateProcedureStatement(is_temp, is_or_replace, is_if_not_exists) [0-83] [CREATE OR...BEGIN END]
  PathExpression [47-61] [procedure_name]
    Identifier(procedure_name) [47-61] [procedure_name]
  FunctionParameters [61-63] [()]
  OptionsList [71-73] [()]
  Script [74-83] [BEGIN END]
    StatementList [74-83] [BEGIN END]
      BeginEndBlock [74-83] [BEGIN END]
        StatementList [79-79] []
--
CREATE OR REPLACE TEMP PROCEDURE IF NOT EXISTS procedure_name()
OPTIONS
  ()
BEGIN
END
==

# valid statement with options
CREATE PROCEDURE procedure_name()
OPTIONS(a=1, b="2")
BEGIN
END;
--
CreateProcedureStatement [0-63] [CREATE PROCEDURE...BEGIN END]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-33] [()]
  OptionsList [41-53] [(a=1, b="2")]
    OptionsEntry [42-45] [a=1]
      Identifier(a) [42-43] [a]
      IntLiteral(1) [44-45] [1]
    OptionsEntry [47-52] [b="2"]
      Identifier(b) [47-48] [b]
      StringLiteral("2") [49-52] ["2"]
  Script [54-63] [BEGIN END]
    StatementList [54-63] [BEGIN END]
      BeginEndBlock [54-63] [BEGIN END]
        StatementList [59-59] []
--
CREATE PROCEDURE procedure_name()
OPTIONS
  (a = 1, b = "2")
BEGIN
END
==

# valid statement with multiple arguments
CREATE PROCEDURE procedure_name(
  param_a string,
  param_b int32,
  param_c numeric,
  param_d table<int32, int32>,
  param_e ANY TYPE,
  OUT param_f ANY TYPE,
  param_g ANY TABLE,
  INOUT param_h ANY TABLE
  )
BEGIN
END;
--
CreateProcedureStatement [0-222] [CREATE PROCEDURE...BEGIN END]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-212] [(   param_a...TABLE   )]
    FunctionParameter [32-49] [param_a string]
      Identifier(param_a) [35-42] [param_a]
      SimpleType [43-49] [string]
        PathExpression [43-49] [string]
          Identifier(string) [43-49] [string]
    FunctionParameter [50-66] [param_b int32]
      Identifier(param_b) [53-60] [param_b]
      SimpleType [61-66] [int32]
        PathExpression [61-66] [int32]
          Identifier(int32) [61-66] [int32]
    FunctionParameter [67-85] [param_c numeric]
      Identifier(param_c) [70-77] [param_c]
      SimpleType [78-85] [numeric]
        PathExpression [78-85] [numeric]
          Identifier(numeric) [78-85] [numeric]
    FunctionParameter [86-116] [param_d table<int32, int32>]
      Identifier(param_d) [89-96] [param_d]
      TVFSchema [97-116] [table<int32, int32>]
        TVFSchemaColumn [103-108] [int32]
          SimpleType [103-108] [int32]
            PathExpression [103-108] [int32]
              Identifier(int32) [103-108] [int32]
        TVFSchemaColumn [110-115] [int32]
          SimpleType [110-115] [int32]
            PathExpression [110-115] [int32]
              Identifier(int32) [110-115] [int32]
    FunctionParameter [117-136] [param_e ANY TYPE]
      Identifier(param_e) [120-127] [param_e]
      TemplatedParameterType [128-136] [ANY TYPE]
    FunctionParameter(mode=OUT) [140-160] [OUT param_f ANY TYPE]
      Identifier(param_f) [144-151] [param_f]
      TemplatedParameterType [152-160] [ANY TYPE]
    FunctionParameter [161-181] [param_g ANY TABLE]
      Identifier(param_g) [164-171] [param_g]
      TemplatedParameterType [172-181] [ANY TABLE]
    FunctionParameter(mode=INOUT) [185-208] [INOUT param_h ANY TABLE]
      Identifier(param_h) [191-198] [param_h]
      TemplatedParameterType [199-208] [ANY TABLE]
  Script [213-222] [BEGIN END]
    StatementList [213-222] [BEGIN END]
      BeginEndBlock [213-222] [BEGIN END]
        StatementList [218-218] []
--
CREATE PROCEDURE procedure_name(param_a string, param_b int32, param_c numeric, param_d TABLE< int32,
int32 >, param_e ANY TYPE, OUT param_f ANY TYPE, param_g ANY TABLE, INOUT param_h ANY TABLE)
BEGIN
END
==

# valid statement with procedure body
CREATE PROCEDURE procedure_name(OUT param_a string)
BEGIN
  DECLARE a int32;
  SET a = 1;
  SET param_a = "test";
END;
--
CreateProcedureStatement [0-117] [CREATE PROCEDURE...test"; END]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-51] [(OUT param_a string)]
    FunctionParameter(mode=OUT) [32-50] [OUT param_a string]
      Identifier(param_a) [36-43] [param_a]
      SimpleType [44-50] [string]
        PathExpression [44-50] [string]
          Identifier(string) [44-50] [string]
  Script [52-117] [BEGIN   DECLARE...test"; END]
    StatementList [52-117] [BEGIN   DECLARE...test"; END]
      BeginEndBlock [52-117] [BEGIN   DECLARE...test"; END]
        StatementList [60-114] [DECLARE a...= "test";]
          VariableDeclaration [60-75] [DECLARE a int32]
            IdentifierList [68-69] [a]
              Identifier(a) [68-69] [a]
            SimpleType [70-75] [int32]
              PathExpression [70-75] [int32]
                Identifier(int32) [70-75] [int32]
          SingleAssignment [79-88] [SET a = 1]
            Identifier(a) [83-84] [a]
            IntLiteral(1) [87-88] [1]
          SingleAssignment [92-112] [SET param_a = "test"]
            Identifier(param_a) [96-103] [param_a]
            StringLiteral("test") [106-112] ["test"]
--
CREATE PROCEDURE procedure_name(OUT param_a string)
BEGIN
  DECLARE a int32 ;
  SET a = 1 ;
  SET param_a = "test" ;
END
==

# valid parameter with empty mode and backtick-quoted parameter name
CREATE PROCEDURE procedure_name ("OUT" int32)
BEGIN
END;
--
CreateProcedureStatement [0-55] [CREATE PROCEDURE...BEGIN END]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [32-45] [("OUT" int32)]
    FunctionParameter [33-44] ["OUT" int32]
      Identifier("OUT") [33-38] ["OUT"]
      SimpleType [39-44] [int32]
        PathExpression [39-44] [int32]
          Identifier(int32) [39-44] [int32]
  Script [46-55] [BEGIN END]
    StatementList [46-55] [BEGIN END]
      BeginEndBlock [46-55] [BEGIN END]
        StatementList [51-51] []
--
CREATE PROCEDURE procedure_name("OUT" int32)
BEGIN
END
==

# valid parameter with mode and "OUT" as parameter name
CREATE PROCEDURE procedure_name (OUT OUT int32)
BEGIN
END;
--
CreateProcedureStatement [0-57] [CREATE PROCEDURE...BEGIN END]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [32-47] [(OUT OUT int32)]
    FunctionParameter(mode=OUT) [33-46] [OUT OUT int32]
      Identifier("OUT") [37-40] [OUT]
      SimpleType [41-46] [int32]
        PathExpression [41-46] [int32]
          Identifier(int32) [41-46] [int32]
  Script [48-57] [BEGIN END]
    StatementList [48-57] [BEGIN END]
      BeginEndBlock [48-57] [BEGIN END]
        StatementList [53-53] []
--
CREATE PROCEDURE procedure_name(OUT "OUT" int32)
BEGIN
END
==

# valid parameter with IN/OUT/INOUT and empty mode
CREATE PROCEDURE procedure_name ({{IN|OUT|INOUT|}} param_a int32)
BEGIN
END;
--
ALTERNATION GROUP: IN
--
CreateProcedureStatement [0-60] [CREATE PROCEDURE...BEGIN END]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [32-50] [(IN param_a int32)]
    FunctionParameter(mode=IN) [33-49] [IN param_a int32]
      Identifier(param_a) [36-43] [param_a]
      SimpleType [44-49] [int32]
        PathExpression [44-49] [int32]
          Identifier(int32) [44-49] [int32]
  Script [51-60] [BEGIN END]
    StatementList [51-60] [BEGIN END]
      BeginEndBlock [51-60] [BEGIN END]
        StatementList [56-56] []
--
CREATE PROCEDURE procedure_name(IN param_a int32)
BEGIN
END
--
ALTERNATION GROUP: OUT
--
CreateProcedureStatement [0-61] [CREATE PROCEDURE...BEGIN END]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [32-51] [(OUT param_a int32)]
    FunctionParameter(mode=OUT) [33-50] [OUT param_a int32]
      Identifier(param_a) [37-44] [param_a]
      SimpleType [45-50] [int32]
        PathExpression [45-50] [int32]
          Identifier(int32) [45-50] [int32]
  Script [52-61] [BEGIN END]
    StatementList [52-61] [BEGIN END]
      BeginEndBlock [52-61] [BEGIN END]
        StatementList [57-57] []
--
CREATE PROCEDURE procedure_name(OUT param_a int32)
BEGIN
END
--
ALTERNATION GROUP: INOUT
--
CreateProcedureStatement [0-63] [CREATE PROCEDURE...BEGIN END]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [32-53] [(INOUT param_a int32)]
    FunctionParameter(mode=INOUT) [33-52] [INOUT param_a int32]
      Identifier(param_a) [39-46] [param_a]
      SimpleType [47-52] [int32]
        PathExpression [47-52] [int32]
          Identifier(int32) [47-52] [int32]
  Script [54-63] [BEGIN END]
    StatementList [54-63] [BEGIN END]
      BeginEndBlock [54-63] [BEGIN END]
        StatementList [59-59] []
--
CREATE PROCEDURE procedure_name(INOUT param_a int32)
BEGIN
END
--
ALTERNATION GROUP: <empty>
--
CreateProcedureStatement [0-58] [CREATE PROCEDURE...BEGIN END]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [32-48] [( param_a int32)]
    FunctionParameter [33-47] [param_a int32]
      Identifier(param_a) [34-41] [param_a]
      SimpleType [42-47] [int32]
        PathExpression [42-47] [int32]
          Identifier(int32) [42-47] [int32]
  Script [49-58] [BEGIN END]
    StatementList [49-58] [BEGIN END]
      BeginEndBlock [49-58] [BEGIN END]
        StatementList [54-54] []
--
CREATE PROCEDURE procedure_name(param_a int32)
BEGIN
END
==

# Procedure name being OUT
CREATE PROCEDURE OUT(param_1 INT32)
BEGIN
END;
--
CreateProcedureStatement [0-45] [CREATE PROCEDURE...BEGIN END]
  PathExpression [17-20] [OUT]
    Identifier("OUT") [17-20] [OUT]
  FunctionParameters [20-35] [(param_1 INT32)]
    FunctionParameter [21-34] [param_1 INT32]
      Identifier(param_1) [21-28] [param_1]
      SimpleType [29-34] [INT32]
        PathExpression [29-34] [INT32]
          Identifier(INT32) [29-34] [INT32]
  Script [36-45] [BEGIN END]
    StatementList [36-45] [BEGIN END]
      BeginEndBlock [36-45] [BEGIN END]
        StatementList [41-41] []
--
CREATE PROCEDURE "OUT"(param_1 INT32)
BEGIN
END
==

# procedure with return statement
CREATE PROCEDURE procedure_name (param_a int32)
BEGIN
  IF param_a > 0 THEN
    RETURN;
  END IF;
END;
--
CreateProcedureStatement [0-101] [CREATE PROCEDURE...END IF; END]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [32-47] [(param_a int32)]
    FunctionParameter [33-46] [param_a int32]
      Identifier(param_a) [33-40] [param_a]
      SimpleType [41-46] [int32]
        PathExpression [41-46] [int32]
          Identifier(int32) [41-46] [int32]
  Script [48-101] [BEGIN   IF...END IF; END]
    StatementList [48-101] [BEGIN   IF...END IF; END]
      BeginEndBlock [48-101] [BEGIN   IF...END IF; END]
        StatementList [56-98] [IF param_a...END IF;]
          IfStatement [56-96] [IF param_a...;   END IF]
            BinaryExpression(>) [59-70] [param_a > 0]
              PathExpression [59-66] [param_a]
                Identifier(param_a) [59-66] [param_a]
              IntLiteral(0) [69-70] [0]
            StatementList [80-90] [RETURN;]
              ReturnStatement [80-86] [RETURN]
--
CREATE PROCEDURE procedure_name(param_a int32)
BEGIN
  IF param_a > 0 THEN
    RETURN ;
  END IF ;
END
==

# invalid statement missing procedure name
CREATE PROCEDURE ;
--
ERROR: Syntax error: Unexpected ";" [at 1:18]
CREATE PROCEDURE ;
                 ^
==

# invalid statement missing argument list
CREATE PROCEDURE procedure_name;
--
ERROR: Syntax error: Expected "(" or "." but got ";" [at 1:32]
CREATE PROCEDURE procedure_name;
                               ^
==

# invalid statement missing body
CREATE PROCEDURE procedure_name();
--
ERROR: Syntax error: Expected keyword BEGIN or keyword LANGUAGE but got ";" [at 1:34]
CREATE PROCEDURE procedure_name();
                                 ^
==

# invalid statement body is not valid
CREATE PROCEDURE procedure_name()
BEGIN
SELEC 1;
END;
--
ERROR: Syntax error: Expected keyword END but got identifier "SELEC" [at 3:1]
SELEC 1;
^
==

# invalid statement missing parameter name
CREATE PROCEDURE procedure_name(OUT)
BEGIN
END;
--
ERROR: Syntax error: Unexpected ")" [at 1:36]
CREATE PROCEDURE procedure_name(OUT)
                                   ^
==

# invalid statement missing type
CREATE PROCEDURE procedure_name(param_name_without_type)
BEGIN
END;
--
ERROR: Syntax error: Unexpected end of parameter. Parameters should be in the format [<parameter mode>] <parameter name> <type>. If IN/OUT/INOUT is intended to be the name of a parameter, it must be escaped with backticks [at 1:56]
CREATE PROCEDURE procedure_name(param_name_without_type)
                                                       ^

==

# invalid statement missing END
CREATE PROCEDURE procedure_name()
BEGIN
--
ERROR: Syntax error: Expected keyword END but got end of statement [at 2:6]
BEGIN
     ^
==

# valid parameter, no body
CREATE PROCEDURE procedure_name( OUT param int32 );
--
ERROR: Syntax error: Expected keyword BEGIN or keyword LANGUAGE but got ";" [at 1:51]
CREATE PROCEDURE procedure_name( OUT param int32 );
                                                  ^
==

# invalid parameter missing parameter name
CREATE PROCEDURE procedure_name( OUT int32 ) BEGIN END;
--
ERROR: Syntax error: Unexpected end of parameter. Parameters should be in the format [<parameter mode>] <parameter name> <type>. If IN/OUT/INOUT is intended to be the name of a parameter, it must be escaped with backticks [at 1:44]
CREATE PROCEDURE procedure_name( OUT int32 ) BEGIN END;
                                           ^
==

# invalid parameter missing parameter name
CREATE PROCEDURE procedure_name(OUT int32, param_a int32 ) BEGIN END;
--
ERROR: Syntax error: Unexpected end of parameter. Parameters should be in the format [<parameter mode>] <parameter name> <type>. If IN/OUT/INOUT is intended to be the name of a parameter, it must be escaped with backticks [at 1:42]
CREATE PROCEDURE procedure_name(OUT int32, param_a int32 ) BEGIN END;
                                         ^
==

# invalid parameter missing parameter name
CREATE PROCEDURE procedure_name(OUT TABLE<int32>) BEGIN END;
--
ERROR: Syntax error: Unexpected "<" [at 1:42]
CREATE PROCEDURE procedure_name(OUT TABLE<int32>) BEGIN END;
                                         ^
==

# Script with multiple CREATE PROCEDURE statements
[mode=script]
CREATE PROCEDURE procedure_name()
BEGIN
  SELECT 1;
END;

CREATE PROCEDURE procedure_name()
BEGIN
  SELECT 1;
END;
--
Script [0-115] [CREATE PROCEDURE...ECT 1; END;]
  StatementList [0-115] [CREATE PROCEDURE...ECT 1; END;]
    CreateProcedureStatement [0-55] [CREATE PROCEDURE...LECT 1; END]
      PathExpression [17-31] [procedure_name]
        Identifier(procedure_name) [17-31] [procedure_name]
      FunctionParameters [31-33] [()]
      Script [34-55] [BEGIN   SELECT 1; END]
        StatementList [34-55] [BEGIN   SELECT 1; END]
          BeginEndBlock [34-55] [BEGIN   SELECT 1; END]
            StatementList [42-52] [SELECT 1;]
              QueryStatement [42-50] [SELECT 1]
                Query [42-50] [SELECT 1]
                  Select [42-50] [SELECT 1]
                    SelectList [49-50] [1]
                      SelectColumn [49-50] [1]
                        IntLiteral(1) [49-50] [1]
    CreateProcedureStatement [58-113] [CREATE PROCEDURE...LECT 1; END]
      PathExpression [75-89] [procedure_name]
        Identifier(procedure_name) [75-89] [procedure_name]
      FunctionParameters [89-91] [()]
      Script [92-113] [BEGIN   SELECT 1; END]
        StatementList [92-113] [BEGIN   SELECT 1; END]
          BeginEndBlock [92-113] [BEGIN   SELECT 1; END]
            StatementList [100-110] [SELECT 1;]
              QueryStatement [100-108] [SELECT 1]
                Query [100-108] [SELECT 1]
                  Select [100-108] [SELECT 1]
                    SelectList [107-108] [1]
                      SelectColumn [107-108] [1]
                        IntLiteral(1) [107-108] [1]
--
CREATE PROCEDURE procedure_name()
BEGIN
  SELECT
    1
  ;
END
;
CREATE PROCEDURE procedure_name()
BEGIN
  SELECT
    1
  ;
END
;
==

CREATE PROCEDURE procedure_name()
BEGIN
  DECLARE ABC INTERVAL;
END;
--
CreateProcedureStatement [0-67] [CREATE PROCEDURE...TERVAL; END]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-33] [()]
  Script [34-67] [BEGIN   DECLARE...NTERVAL; END]
    StatementList [34-67] [BEGIN   DECLARE...NTERVAL; END]
      BeginEndBlock [34-67] [BEGIN   DECLARE...NTERVAL; END]
        StatementList [42-64] [DECLARE ABC INTERVAL;]
          VariableDeclaration [42-62] [DECLARE ABC INTERVAL]
            IdentifierList [50-53] [ABC]
              Identifier(ABC) [50-53] [ABC]
            SimpleType [54-62] [INTERVAL]
              PathExpression [54-62] [INTERVAL]
                Identifier("INTERVAL") [54-62] [INTERVAL]
--
CREATE PROCEDURE procedure_name()
BEGIN
  DECLARE ABC INTERVAL ;
END
==

# Valid procedure with the connection and language as clause
CREATE PROCEDURE procedure_name(
  param_a int32,
  OUT param_b string,
  INOUT param_c ANY TYPE)
WITH CONNECTION connection_id
OPTIONS(a = b, c = d)
LANGUAGE PYTHON AS "python code"
--
CreateProcedureStatement [0-182] [CREATE PROCEDURE...ython code"]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-97] [(   param_a...ANY TYPE)]
    FunctionParameter [32-48] [param_a int32]
      Identifier(param_a) [35-42] [param_a]
      SimpleType [43-48] [int32]
        PathExpression [43-48] [int32]
          Identifier(int32) [43-48] [int32]
    FunctionParameter(mode=OUT) [52-70] [OUT param_b string]
      Identifier(param_b) [56-63] [param_b]
      SimpleType [64-70] [string]
        PathExpression [64-70] [string]
          Identifier(string) [64-70] [string]
    FunctionParameter(mode=INOUT) [74-96] [INOUT param_c ANY TYPE]
      Identifier(param_c) [80-87] [param_c]
      TemplatedParameterType [88-96] [ANY TYPE]
  OptionsList [135-149] [(a = b, c = d)]
    OptionsEntry [136-141] [a = b]
      Identifier(a) [136-137] [a]
      PathExpression [140-141] [b]
        Identifier(b) [140-141] [b]
    OptionsEntry [143-148] [c = d]
      Identifier(c) [143-144] [c]
      PathExpression [147-148] [d]
        Identifier(d) [147-148] [d]
  WithConnectionClause [98-127] [WITH CONNECTION connection_id]
    ConnectionClause [103-127] [CONNECTION connection_id]
      PathExpression [114-127] [connection_id]
        Identifier(connection_id) [114-127] [connection_id]
  Identifier(PYTHON) [159-165] [PYTHON]
  StringLiteral("python code") [169-182] ["python code"]
--
CREATE PROCEDURE procedure_name(param_a int32, OUT param_b string, INOUT param_c ANY TYPE)
WITH CONNECTION connection_id OPTIONS
  (a = b, c = d)
LANGUAGE PYTHON AS "python code"
==

# Valid procedure with the connection and language as clause and empty options
CREATE PROCEDURE procedure_name(
  param_a int32,
  OUT param_b string,
  INOUT param_c ANY TYPE)
WITH CONNECTION connection_id
OPTIONS()
LANGUAGE PYTHON AS "python code"
--
CreateProcedureStatement [0-170] [CREATE PROCEDURE...ython code"]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-97] [(   param_a...ANY TYPE)]
    FunctionParameter [32-48] [param_a int32]
      Identifier(param_a) [35-42] [param_a]
      SimpleType [43-48] [int32]
        PathExpression [43-48] [int32]
          Identifier(int32) [43-48] [int32]
    FunctionParameter(mode=OUT) [52-70] [OUT param_b string]
      Identifier(param_b) [56-63] [param_b]
      SimpleType [64-70] [string]
        PathExpression [64-70] [string]
          Identifier(string) [64-70] [string]
    FunctionParameter(mode=INOUT) [74-96] [INOUT param_c ANY TYPE]
      Identifier(param_c) [80-87] [param_c]
      TemplatedParameterType [88-96] [ANY TYPE]
  OptionsList [135-137] [()]
  WithConnectionClause [98-127] [WITH CONNECTION connection_id]
    ConnectionClause [103-127] [CONNECTION connection_id]
      PathExpression [114-127] [connection_id]
        Identifier(connection_id) [114-127] [connection_id]
  Identifier(PYTHON) [147-153] [PYTHON]
  StringLiteral("python code") [157-170] ["python code"]
--
CREATE PROCEDURE procedure_name(param_a int32, OUT param_b string, INOUT param_c ANY TYPE)
WITH CONNECTION connection_id OPTIONS
  ()
LANGUAGE PYTHON AS "python code"
==

# Valid procedure with the language as clause
CREATE PROCEDURE procedure_name(
  param_a int32,
  OUT param_b string,
  INOUT param_c ANY TYPE)
OPTIONS(a = b, c = d)
LANGUAGE PYTHON AS "python code"
--
CreateProcedureStatement [0-152] [CREATE PROCEDURE...ython code"]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-97] [(   param_a...ANY TYPE)]
    FunctionParameter [32-48] [param_a int32]
      Identifier(param_a) [35-42] [param_a]
      SimpleType [43-48] [int32]
        PathExpression [43-48] [int32]
          Identifier(int32) [43-48] [int32]
    FunctionParameter(mode=OUT) [52-70] [OUT param_b string]
      Identifier(param_b) [56-63] [param_b]
      SimpleType [64-70] [string]
        PathExpression [64-70] [string]
          Identifier(string) [64-70] [string]
    FunctionParameter(mode=INOUT) [74-96] [INOUT param_c ANY TYPE]
      Identifier(param_c) [80-87] [param_c]
      TemplatedParameterType [88-96] [ANY TYPE]
  OptionsList [105-119] [(a = b, c = d)]
    OptionsEntry [106-111] [a = b]
      Identifier(a) [106-107] [a]
      PathExpression [110-111] [b]
        Identifier(b) [110-111] [b]
    OptionsEntry [113-118] [c = d]
      Identifier(c) [113-114] [c]
      PathExpression [117-118] [d]
        Identifier(d) [117-118] [d]
  Identifier(PYTHON) [129-135] [PYTHON]
  StringLiteral("python code") [139-152] ["python code"]
--
CREATE PROCEDURE procedure_name(param_a int32, OUT param_b string, INOUT param_c ANY TYPE)
OPTIONS
  (a = b, c = d)
LANGUAGE PYTHON AS "python code"
==

# Valid procedure with the language clause
CREATE PROCEDURE procedure_name(
  param_a int32,
  OUT param_b string,
  INOUT param_c ANY TYPE)
OPTIONS(a = b, c = d)
LANGUAGE PYTHON
--
CreateProcedureStatement [0-135] [CREATE PROCEDURE...UAGE PYTHON]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-97] [(   param_a...ANY TYPE)]
    FunctionParameter [32-48] [param_a int32]
      Identifier(param_a) [35-42] [param_a]
      SimpleType [43-48] [int32]
        PathExpression [43-48] [int32]
          Identifier(int32) [43-48] [int32]
    FunctionParameter(mode=OUT) [52-70] [OUT param_b string]
      Identifier(param_b) [56-63] [param_b]
      SimpleType [64-70] [string]
        PathExpression [64-70] [string]
          Identifier(string) [64-70] [string]
    FunctionParameter(mode=INOUT) [74-96] [INOUT param_c ANY TYPE]
      Identifier(param_c) [80-87] [param_c]
      TemplatedParameterType [88-96] [ANY TYPE]
  OptionsList [105-119] [(a = b, c = d)]
    OptionsEntry [106-111] [a = b]
      Identifier(a) [106-107] [a]
      PathExpression [110-111] [b]
        Identifier(b) [110-111] [b]
    OptionsEntry [113-118] [c = d]
      Identifier(c) [113-114] [c]
      PathExpression [117-118] [d]
        Identifier(d) [117-118] [d]
  Identifier(PYTHON) [129-135] [PYTHON]
--
CREATE PROCEDURE procedure_name(param_a int32, OUT param_b string, INOUT param_c ANY TYPE)
OPTIONS
  (a = b, c = d)
LANGUAGE PYTHON
==

# Invalid procedure with AS clause but without the language clause
CREATE PROCEDURE procedure_name()
AS "python code"
--
ERROR: Syntax error: Expected keyword BEGIN or keyword LANGUAGE but got keyword AS [at 2:1]
AS "python code"
^
==

# Invalid procedure with both BEGIN END statements and the language clause
CREATE PROCEDURE procedure_name()
BEGIN END LANGUAGE PYTHON
--
ERROR: Syntax error: Expected end of input but got keyword LANGUAGE [at 2:11]
BEGIN END LANGUAGE PYTHON
          ^
==

# Invalid procedure missing connection id
CREATE PROCEDURE procedure_name(
  param_a int32,
  OUT param_b string,
  INOUT param_c ANY TYPE)
WITH CONNECTION
--
ERROR: Syntax error: Unexpected end of statement [at 5:16]
WITH CONNECTION
               ^
==

# Valid Python procedure with the external security clause
CREATE PROCEDURE procedure_name()
EXTERNAL SECURITY {{INVOKER|DEFINER|TURNIP|}}
OPTIONS(a = b)
LANGUAGE PYTHON
--
ALTERNATION GROUP: INVOKER
--
CreateProcedureStatement(EXTERNAL SECURITY INVOKER) [0-90] [CREATE PROCEDURE...UAGE PYTHON]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-33] [()]
  OptionsList [67-74] [(a = b)]
    OptionsEntry [68-73] [a = b]
      Identifier(a) [68-69] [a]
      PathExpression [72-73] [b]
        Identifier(b) [72-73] [b]
  Identifier(PYTHON) [84-90] [PYTHON]
--
CREATE PROCEDURE procedure_name()
EXTERNAL SECURITY INVOKER OPTIONS
  (a = b)
LANGUAGE PYTHON
--
ALTERNATION GROUP: DEFINER
--
CreateProcedureStatement(EXTERNAL SECURITY DEFINER) [0-90] [CREATE PROCEDURE...UAGE PYTHON]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-33] [()]
  OptionsList [67-74] [(a = b)]
    OptionsEntry [68-73] [a = b]
      Identifier(a) [68-69] [a]
      PathExpression [72-73] [b]
        Identifier(b) [72-73] [b]
  Identifier(PYTHON) [84-90] [PYTHON]
--
CREATE PROCEDURE procedure_name()
EXTERNAL SECURITY DEFINER OPTIONS
  (a = b)
LANGUAGE PYTHON
--
ALTERNATION GROUP: TURNIP
--
ERROR: Syntax error: Expected keyword DEFINER or keyword INVOKER but got identifier "TURNIP" [at 2:19]
EXTERNAL SECURITY TURNIP
                  ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Syntax error: Expected keyword DEFINER or keyword INVOKER but got keyword OPTIONS [at 3:1]
OPTIONS(a = b)
^
==

# Valid Python procedure with the external security clause and connection clause
CREATE PROCEDURE procedure_name()
EXTERNAL SECURITY {{INVOKER|DEFINER|TURNIP|}}
WITH CONNECTION connection_id
OPTIONS(a = b)
LANGUAGE PYTHON
--
ALTERNATION GROUP: INVOKER
--
CreateProcedureStatement(EXTERNAL SECURITY INVOKER) [0-120] [CREATE PROCEDURE...UAGE PYTHON]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-33] [()]
  OptionsList [97-104] [(a = b)]
    OptionsEntry [98-103] [a = b]
      Identifier(a) [98-99] [a]
      PathExpression [102-103] [b]
        Identifier(b) [102-103] [b]
  WithConnectionClause [60-89] [WITH CONNECTION connection_id]
    ConnectionClause [65-89] [CONNECTION connection_id]
      PathExpression [76-89] [connection_id]
        Identifier(connection_id) [76-89] [connection_id]
  Identifier(PYTHON) [114-120] [PYTHON]
--
CREATE PROCEDURE procedure_name()
EXTERNAL SECURITY INVOKER WITH CONNECTION connection_id OPTIONS
  (a = b)
LANGUAGE PYTHON
--
ALTERNATION GROUP: DEFINER
--
CreateProcedureStatement(EXTERNAL SECURITY DEFINER) [0-120] [CREATE PROCEDURE...UAGE PYTHON]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-33] [()]
  OptionsList [97-104] [(a = b)]
    OptionsEntry [98-103] [a = b]
      Identifier(a) [98-99] [a]
      PathExpression [102-103] [b]
        Identifier(b) [102-103] [b]
  WithConnectionClause [60-89] [WITH CONNECTION connection_id]
    ConnectionClause [65-89] [CONNECTION connection_id]
      PathExpression [76-89] [connection_id]
        Identifier(connection_id) [76-89] [connection_id]
  Identifier(PYTHON) [114-120] [PYTHON]
--
CREATE PROCEDURE procedure_name()
EXTERNAL SECURITY DEFINER WITH CONNECTION connection_id OPTIONS
  (a = b)
LANGUAGE PYTHON
--
ALTERNATION GROUP: TURNIP
--
ERROR: Syntax error: Expected keyword DEFINER or keyword INVOKER but got identifier "TURNIP" [at 2:19]
EXTERNAL SECURITY TURNIP
                  ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Syntax error: Expected keyword DEFINER or keyword INVOKER but got keyword WITH [at 3:1]
WITH CONNECTION connection_id
^
==

# Valid Python procedure with the external security clause and the language
CREATE PROCEDURE procedure_name()
EXTERNAL SECURITY INVOKER
LANGUAGE PYTHON
--
CreateProcedureStatement(EXTERNAL SECURITY INVOKER) [0-75] [CREATE PROCEDURE...UAGE PYTHON]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-33] [()]
  Identifier(PYTHON) [69-75] [PYTHON]
--
CREATE PROCEDURE procedure_name()
EXTERNAL SECURITY INVOKER LANGUAGE PYTHON
==

# Function type argument will fail in the analyzer.
CREATE PROCEDURE procedure_name(
  param_a FUNCTION<INT64 -> INT64>)
BEGIN
  SELECT 1;
END;
--
CreateProcedureStatement [0-90] [CREATE PROCEDURE...LECT 1; END]
  PathExpression [17-31] [procedure_name]
    Identifier(procedure_name) [17-31] [procedure_name]
  FunctionParameters [31-68] [(   param_a...-> INT64>)]
    FunctionParameter [32-67] [param_a FUNCTION...-> INT64>]
      Identifier(param_a) [35-42] [param_a]
      FunctionType [43-67] [FUNCTION<INT64 -> INT64>]
        FunctionTypeArgList [52-57] [INT64]
          SimpleType [52-57] [INT64]
            PathExpression [52-57] [INT64]
              Identifier(INT64) [52-57] [INT64]
        SimpleType [61-66] [INT64]
          PathExpression [61-66] [INT64]
            Identifier(INT64) [61-66] [INT64]
  Script [69-90] [BEGIN   SELECT 1; END]
    StatementList [69-90] [BEGIN   SELECT 1; END]
      BeginEndBlock [69-90] [BEGIN   SELECT 1; END]
        StatementList [77-87] [SELECT 1;]
          QueryStatement [77-85] [SELECT 1]
            Query [77-85] [SELECT 1]
              Select [77-85] [SELECT 1]
                SelectList [84-85] [1]
                  SelectColumn [84-85] [1]
                    IntLiteral(1) [84-85] [1]
--
CREATE PROCEDURE procedure_name(param_a FUNCTION<(INT64) -> INT64 >)
BEGIN
  SELECT
    1
  ;
END
