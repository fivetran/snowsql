# Missing function name.
DROP FUNCTION ;
--
ERROR: Syntax error: Unexpected ";" [at 1:15]
DROP FUNCTION ;
              ^
==

# Drop all overloads; no parameter list.
DROP FUNCTION foo
--
DropFunctionStatement [0-17] [DROP FUNCTION foo]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
--
DROP FUNCTION foo
==

DROP FUNCTION IF EXISTS foo
--
DropFunctionStatement(is_if_exists) [0-27] [DROP FUNCTION IF EXISTS foo]
  PathExpression [24-27] [foo]
    Identifier(foo) [24-27] [foo]
--
DROP FUNCTION IF EXISTS foo
==

# Drop no-parameter version.
DROP FUNCTION foo()
--
DropFunctionStatement [0-19] [DROP FUNCTION foo()]
  PathExpression [14-17] [foo]
    Identifier(foo) [14-17] [foo]
  FunctionParameters [17-19] [()]
--
DROP FUNCTION foo()
==

# Drop all overloads; no parameter list.
DROP FUNCTION foo.bar
--
DropFunctionStatement [0-21] [DROP FUNCTION foo.bar]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
--
DROP FUNCTION foo.bar
==

# Drop no-parameter version.
DROP FUNCTION foo.bar()
--
DropFunctionStatement [0-23] [DROP FUNCTION foo.bar()]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
  FunctionParameters [21-23] [()]
--
DROP FUNCTION foo.bar()
==

# Drop no-parameter version + if exists.
DROP FUNCTION IF EXISTS foo()
--
DropFunctionStatement(is_if_exists) [0-29] [DROP FUNCTION IF EXISTS foo()]
  PathExpression [24-27] [foo]
    Identifier(foo) [24-27] [foo]
  FunctionParameters [27-29] [()]
--
DROP FUNCTION IF EXISTS foo()
==

# Drop function with single parameter as unnamed type.
DROP FUNCTION foo.bar(int32)
--
DropFunctionStatement [0-28] [DROP FUNCTION foo.bar(int32)]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
  FunctionParameters [21-28] [(int32)]
    FunctionParameter [22-27] [int32]
      SimpleType [22-27] [int32]
        PathExpression [22-27] [int32]
          Identifier(int32) [22-27] [int32]
--
DROP FUNCTION foo.bar(int32)
==

# Drop function with single parameter as named type.
DROP FUNCTION foo.bar(a int32)
--
DropFunctionStatement [0-30] [DROP FUNCTION foo.bar(a int32)]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
  FunctionParameters [21-30] [(a int32)]
    FunctionParameter [22-29] [a int32]
      Identifier(a) [22-23] [a]
      SimpleType [24-29] [int32]
        PathExpression [24-29] [int32]
          Identifier(int32) [24-29] [int32]
--
DROP FUNCTION foo.bar(a int32)
==

# Drop function with parameters as unnamed types.
DROP FUNCTION foo.bar(int32, struct<a string, b boolean>)
--
DropFunctionStatement [0-57] [DROP FUNCTION...boolean>)]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
  FunctionParameters [21-57] [(int32, struct...boolean>)]
    FunctionParameter [22-27] [int32]
      SimpleType [22-27] [int32]
        PathExpression [22-27] [int32]
          Identifier(int32) [22-27] [int32]
    FunctionParameter [29-56] [struct<a string, b boolean>]
      StructType [29-56] [struct<a string, b boolean>]
        StructField [36-44] [a string]
          Identifier(a) [36-37] [a]
          SimpleType [38-44] [string]
            PathExpression [38-44] [string]
              Identifier(string) [38-44] [string]
        StructField [46-55] [b boolean]
          Identifier(b) [46-47] [b]
          SimpleType [48-55] [boolean]
            PathExpression [48-55] [boolean]
              Identifier(boolean) [48-55] [boolean]
--
DROP FUNCTION foo.bar(int32, STRUCT< a string, b boolean >)
==

# Drop function with a mix of parameters as named and unnamed types.
DROP FUNCTION foo.bar(int32, str struct<a string, b boolean>)
--
DropFunctionStatement [0-61] [DROP FUNCTION...boolean>)]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
  FunctionParameters [21-61] [(int32, str...boolean>)]
    FunctionParameter [22-27] [int32]
      SimpleType [22-27] [int32]
        PathExpression [22-27] [int32]
          Identifier(int32) [22-27] [int32]
    FunctionParameter [29-60] [str struct...b boolean>]
      Identifier(str) [29-32] [str]
      StructType [33-60] [struct<a string, b boolean>]
        StructField [40-48] [a string]
          Identifier(a) [40-41] [a]
          SimpleType [42-48] [string]
            PathExpression [42-48] [string]
              Identifier(string) [42-48] [string]
        StructField [50-59] [b boolean]
          Identifier(b) [50-51] [b]
          SimpleType [52-59] [boolean]
            PathExpression [52-59] [boolean]
              Identifier(boolean) [52-59] [boolean]
--
DROP FUNCTION foo.bar(int32, str STRUCT< a string, b boolean >)
==

# Drop function with parameters as named types.
DROP FUNCTION foo.bar(a int32, the_struct struct<a string, b boolean>)
--
DropFunctionStatement [0-70] [DROP FUNCTION...boolean>)]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
  FunctionParameters [21-70] [(a int32,...boolean>)]
    FunctionParameter [22-29] [a int32]
      Identifier(a) [22-23] [a]
      SimpleType [24-29] [int32]
        PathExpression [24-29] [int32]
          Identifier(int32) [24-29] [int32]
    FunctionParameter [31-69] [the_struct...b boolean>]
      Identifier(the_struct) [31-41] [the_struct]
      StructType [42-69] [struct<a string, b boolean>]
        StructField [49-57] [a string]
          Identifier(a) [49-50] [a]
          SimpleType [51-57] [string]
            PathExpression [51-57] [string]
              Identifier(string) [51-57] [string]
        StructField [59-68] [b boolean]
          Identifier(b) [59-60] [b]
          SimpleType [61-68] [boolean]
            PathExpression [61-68] [boolean]
              Identifier(boolean) [61-68] [boolean]
--
DROP FUNCTION foo.bar(a int32, the_struct STRUCT< a string, b boolean >)
==

# NOT AGGREGATE is accepted on arguments, but has no effect.
DROP FUNCTION myfunc(string NOT AGGREGATE, s string, int32,
    i int32 NOT AGGREGATE)
--
DropFunctionStatement [0-86] [DROP FUNCTION...AGGREGATE)]
  PathExpression [14-20] [myfunc]
    Identifier(myfunc) [14-20] [myfunc]
  FunctionParameters [20-86] [(string NOT...AGGREGATE)]
    FunctionParameter(is_not_aggregate=true) [21-41] [string NOT AGGREGATE]
      SimpleType [21-27] [string]
        PathExpression [21-27] [string]
          Identifier(string) [21-27] [string]
    FunctionParameter [43-51] [s string]
      Identifier(s) [43-44] [s]
      SimpleType [45-51] [string]
        PathExpression [45-51] [string]
          Identifier(string) [45-51] [string]
    FunctionParameter [53-58] [int32]
      SimpleType [53-58] [int32]
        PathExpression [53-58] [int32]
          Identifier(int32) [53-58] [int32]
    FunctionParameter(is_not_aggregate=true) [64-85] [i int32 NOT AGGREGATE]
      Identifier(i) [64-65] [i]
      SimpleType [66-71] [int32]
        PathExpression [66-71] [int32]
          Identifier(int32) [66-71] [int32]
--
DROP FUNCTION myfunc(string NOT AGGREGATE, s string, int32, i int32 NOT AGGREGATE)
==

# Drop function with a parameter alias.
DROP FUNCTION foo.bar(int32 as x)
--
DropFunctionStatement [0-33] [DROP FUNCTION...int32 as x)]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
  FunctionParameters [21-33] [(int32 as x)]
    FunctionParameter [22-32] [int32 as x]
      SimpleType [22-27] [int32]
        PathExpression [22-27] [int32]
          Identifier(int32) [22-27] [int32]
      Alias [28-32] [as x]
        Identifier(x) [31-32] [x]
--
DROP FUNCTION foo.bar(int32 AS x)
==

# Same test as the previous, but without the AS before the alias name.
# Note that the AS is required before the alias, so ideally this should
# be an error, but the parameter is interpreted as name=int32 and type=x.
DROP FUNCTION foo.bar(int32 x)
--
DropFunctionStatement [0-30] [DROP FUNCTION foo.bar(int32 x)]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
  FunctionParameters [21-30] [(int32 x)]
    FunctionParameter [22-29] [int32 x]
      Identifier(int32) [22-27] [int32]
      SimpleType [28-29] [x]
        PathExpression [28-29] [x]
          Identifier(x) [28-29] [x]
--
DROP FUNCTION foo.bar(int32 x)
==

# Drop function with single parameter as named type, with alias.
DROP FUNCTION foo.bar(a int32 as x)
--
DropFunctionStatement [0-35] [DROP FUNCTION...int32 as x)]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
  FunctionParameters [21-35] [(a int32 as x)]
    FunctionParameter [22-34] [a int32 as x]
      Identifier(a) [22-23] [a]
      SimpleType [24-29] [int32]
        PathExpression [24-29] [int32]
          Identifier(int32) [24-29] [int32]
      Alias [30-34] [as x]
        Identifier(x) [33-34] [x]
--
DROP FUNCTION foo.bar(a int32 AS x)
==

# The alias has to be BEFORE the NOT AGGREGATE specifier.
DROP FUNCTION foo.bar(a int32 as x NOT AGGREGATE)
--
DropFunctionStatement [0-49] [DROP FUNCTION...AGGREGATE)]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
  FunctionParameters [21-49] [(a int32 as x NOT AGGREGATE)]
    FunctionParameter(is_not_aggregate=true) [22-48] [a int32 as x NOT AGGREGATE]
      Identifier(a) [22-23] [a]
      SimpleType [24-29] [int32]
        PathExpression [24-29] [int32]
          Identifier(int32) [24-29] [int32]
      Alias [30-34] [as x]
        Identifier(x) [33-34] [x]
--
DROP FUNCTION foo.bar(a int32 AS x NOT AGGREGATE)
==

# Same test as the previous, but reversing the order of NOT AGGREGATE
# and AS alias.  This one fails since the AS alias applies to the type.
DROP FUNCTION foo.bar(a int32 NOT AGGREGATE as x)
--
ERROR: Syntax error: Expected ")" or "," but got keyword AS [at 1:45]
DROP FUNCTION foo.bar(a int32 NOT AGGREGATE as x)
                                            ^
==

# Function parameters not supported in drop procedure
drop procedure foo(string) ;
--
ERROR: Syntax error: Parameters are only supported for DROP FUNCTION [at 1:19]
drop procedure foo(string) ;
                  ^
==

# Missing function name.
DROP TABLE FUNCTION ;
--
ERROR: Syntax error: Unexpected ";" [at 1:21]
DROP TABLE FUNCTION ;
                    ^
==

# Drop table function; (no parameter list as expected).
DROP TABLE FUNCTION foo
--
DropTableFunctionStatement [0-23] [DROP TABLE FUNCTION foo]
  PathExpression [20-23] [foo]
    Identifier(foo) [20-23] [foo]
--
DROP TABLE FUNCTION foo
==

DROP TABLE FUNCTION IF EXISTS foo
--
DropTableFunctionStatement(is_if_exists) [0-33] [DROP TABLE...EXISTS foo]
  PathExpression [30-33] [foo]
    Identifier(foo) [30-33] [foo]
--
DROP TABLE FUNCTION IF EXISTS foo
==

# Drop table function; (no parameter list as expected).
DROP TABLE FUNCTION foo.bar
--
DropTableFunctionStatement [0-27] [DROP TABLE FUNCTION foo.bar]
  PathExpression [20-27] [foo.bar]
    Identifier(foo) [20-23] [foo]
    Identifier(bar) [24-27] [bar]
--
DROP TABLE FUNCTION foo.bar
==

# Drop table function parameter not supported.
DROP TABLE FUNCTION foo()
--
ERROR: Syntax error: Parameters are not supported for DROP TABLE FUNCTION because table functions don't support overloading [at 1:24]
DROP TABLE FUNCTION foo()
                       ^
==

# Drop table function parameter not supported. Path expression version.
DROP TABLE FUNCTION foo.bar()
--
ERROR: Syntax error: Parameters are not supported for DROP TABLE FUNCTION because table functions don't support overloading [at 1:28]
DROP TABLE FUNCTION foo.bar()
                           ^
==

# Drop table function parameter not supported. If exists version.
DROP TABLE FUNCTION IF EXISTS foo()
--
ERROR: Syntax error: Parameters are not supported for DROP TABLE FUNCTION because table functions don't support overloading [at 1:34]
DROP TABLE FUNCTION IF EXISTS foo()
                                 ^
==

# Drop table function parameter not supported. Populated parameter version.
DROP TABLE FUNCTION foo.bar(int64)
--
ERROR: Syntax error: Parameters are not supported for DROP TABLE FUNCTION because table functions don't support overloading [at 1:28]
DROP TABLE FUNCTION foo.bar(int64)
                           ^
==

# There isn't a separate statement for DROP AGGREGATE FUNCTION.
DROP AGGREGATE FUNCTION myfunc(string);
--
ERROR: DROP AGGREGATE FUNCTION is not supported, use DROP FUNCTION [at 1:6]
DROP AGGREGATE FUNCTION myfunc(string);
     ^
==

[no_test_get_parse_tokens]
[language_features=V_1_3_ALLOW_DASHES_IN_TABLE_NAME]
DROP {{|TABLE}} FUNCTION foo-bar-123;
--
ALTERNATION GROUP: <empty>
--
ERROR: Syntax error: Expected end of input but got "-" [at 1:19]
DROP  FUNCTION foo-bar-123;
                  ^
--
ALTERNATION GROUP: TABLE
--
DropTableFunctionStatement [0-31] [DROP TABLE...foo-bar-123]
  PathExpression [20-31] [foo-bar-123]
    Identifier("foo-bar-123") [20-31] [foo-bar-123]
--
DROP TABLE FUNCTION "foo-bar-123"
==

[no_test_get_parse_tokens]
[language_features=V_1_3_ALLOW_DASHES_IN_TABLE_NAME]
DROP {{|TABLE}} FUNCTION foo-bar-123.baz;
--
ALTERNATION GROUP: <empty>
--
ERROR: Syntax error: Expected end of input but got "-" [at 1:19]
DROP  FUNCTION foo-bar-123.baz;
                  ^
--
ALTERNATION GROUP: TABLE
--
DropTableFunctionStatement [0-35] [DROP TABLE...bar-123.baz]
  PathExpression [20-35] [foo-bar-123.baz]
    Identifier("foo-bar-123") [20-35] [foo-bar-123.baz]
    Identifier(baz) [20-35] [foo-bar-123.baz]
--
DROP TABLE FUNCTION "foo-bar-123".baz
==

[no_test_get_parse_tokens]
[language_features=V_1_3_ALLOW_DASHES_IN_TABLE_NAME]
DROP {{|TABLE}} FUNCTION foo-bar-123.baz(string);
--
ALTERNATION GROUP: <empty>
--
ERROR: Syntax error: Expected end of input but got "-" [at 1:19]
DROP  FUNCTION foo-bar-123.baz(string);
                  ^
--
ALTERNATION GROUP: TABLE
--
ERROR: Syntax error: Parameters are not supported for DROP TABLE FUNCTION because table functions don't support overloading [at 1:36]
DROP TABLE FUNCTION foo-bar-123.baz(string);
                                   ^
==

# DROP FUNCTION statements also work for table-valued functions.
drop function foo.bar(string, table<int32, bool>);
--
DropFunctionStatement [0-49] [drop function...int32, bool>)]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
  FunctionParameters [21-49] [(string, table<int32, bool>)]
    FunctionParameter [22-28] [string]
      SimpleType [22-28] [string]
        PathExpression [22-28] [string]
          Identifier(string) [22-28] [string]
    FunctionParameter [30-48] [table<int32, bool>]
      TVFSchema [30-48] [table<int32, bool>]
        TVFSchemaColumn [36-41] [int32]
          SimpleType [36-41] [int32]
            PathExpression [36-41] [int32]
              Identifier(int32) [36-41] [int32]
        TVFSchemaColumn [43-47] [bool]
          SimpleType [43-47] [bool]
            PathExpression [43-47] [bool]
              Identifier(bool) [43-47] [bool]
--
DROP FUNCTION foo.bar(string, TABLE< int32, bool >)
==

# DROP FUNCTION statements also work for table-valued functions.
drop function foo.bar(a string, b table<x int32, y bool>) ;
--
DropFunctionStatement [0-57] [drop function..., y bool>)]
  PathExpression [14-21] [foo.bar]
    Identifier(foo) [14-17] [foo]
    Identifier(bar) [18-21] [bar]
  FunctionParameters [21-57] [(a string,..., y bool>)]
    FunctionParameter [22-30] [a string]
      Identifier(a) [22-23] [a]
      SimpleType [24-30] [string]
        PathExpression [24-30] [string]
          Identifier(string) [24-30] [string]
    FunctionParameter [32-56] [b table<x int32, y bool>]
      Identifier(b) [32-33] [b]
      TVFSchema [34-56] [table<x int32, y bool>]
        TVFSchemaColumn [40-47] [x int32]
          Identifier(x) [40-41] [x]
          SimpleType [42-47] [int32]
            PathExpression [42-47] [int32]
              Identifier(int32) [42-47] [int32]
        TVFSchemaColumn [49-55] [y bool]
          Identifier(y) [49-50] [y]
          SimpleType [51-55] [bool]
            PathExpression [51-55] [bool]
              Identifier(bool) [51-55] [bool]
--
DROP FUNCTION foo.bar(a string, b TABLE< x int32, y bool >)
==

# It is possible to drop a function named 'function'.
drop function function
--
DropFunctionStatement [0-22] [drop function function]
  PathExpression [14-22] [function]
    Identifier("function") [14-22] [function]
--
DROP FUNCTION "function"
