# TODO: Remove this after parse locations have been manually
# verified as correct.
[default no_show_parse_location_text]
select 1, [1], ARRAY[1], ARRAY<int32>[1]
--
QueryStatement [0-40]
  Query [0-40]
    Select [0-40]
      SelectList [7-40]
        SelectColumn [7-8]
          IntLiteral(1) [7-8]
        SelectColumn [10-13]
          ArrayConstructor [10-13]
            IntLiteral(1) [11-12]
        SelectColumn [15-23]
          ArrayConstructor [15-23]
            IntLiteral(1) [21-22]
        SelectColumn [25-40]
          ArrayConstructor [25-40]
            ArrayType [25-37]
              SimpleType [31-36]
                PathExpression [31-36]
                  Identifier(int32) [31-36]
            IntLiteral(1) [38-39]
--
SELECT
  1,
  ARRAY[1],
  ARRAY[1],
  ARRAY< int32 >[1]
==

select [x, f(x), x + f(x), (select x)]
--
QueryStatement [0-38]
  Query [0-38]
    Select [0-38]
      SelectList [7-38]
        SelectColumn [7-38]
          ArrayConstructor [7-38]
            PathExpression [8-9]
              Identifier(x) [8-9]
            FunctionCall [11-15]
              PathExpression [11-12]
                Identifier(f) [11-12]
              PathExpression [13-14]
                Identifier(x) [13-14]
            BinaryExpression(+) [17-25]
              PathExpression [17-18]
                Identifier(x) [17-18]
              FunctionCall [21-25]
                PathExpression [21-22]
                  Identifier(f) [21-22]
                PathExpression [23-24]
                  Identifier(x) [23-24]
            ExpressionSubquery [27-37]
              Query [28-36]
                Select [28-36]
                  SelectList [35-36]
                    SelectColumn [35-36]
                      PathExpression [35-36]
                        Identifier(x) [35-36]
--
SELECT
  ARRAY[x, f(x), x + f(x), (
    SELECT
      x
  )]
==

select [1, 2, 3], ARRAY[1, 2, 3], ARRAY<int32>[1, 2, 3]
--
QueryStatement [0-55]
  Query [0-55]
    Select [0-55]
      SelectList [7-55]
        SelectColumn [7-16]
          ArrayConstructor [7-16]
            IntLiteral(1) [8-9]
            IntLiteral(2) [11-12]
            IntLiteral(3) [14-15]
        SelectColumn [18-32]
          ArrayConstructor [18-32]
            IntLiteral(1) [24-25]
            IntLiteral(2) [27-28]
            IntLiteral(3) [30-31]
        SelectColumn [34-55]
          ArrayConstructor [34-55]
            ArrayType [34-46]
              SimpleType [40-45]
                PathExpression [40-45]
                  Identifier(int32) [40-45]
            IntLiteral(1) [47-48]
            IntLiteral(2) [50-51]
            IntLiteral(3) [53-54]
--
SELECT
  ARRAY[1, 2, 3],
  ARRAY[1, 2, 3],
  ARRAY< int32 >[1, 2, 3]
==

select "a", 3, ["a", 3], ARRAY<string> [3, "a"]
--
QueryStatement [0-47]
  Query [0-47]
    Select [0-47]
      SelectList [7-47]
        SelectColumn [7-10]
          StringLiteral("a") [7-10]
        SelectColumn [12-13]
          IntLiteral(3) [12-13]
        SelectColumn [15-23]
          ArrayConstructor [15-23]
            StringLiteral("a") [16-19]
            IntLiteral(3) [21-22]
        SelectColumn [25-47]
          ArrayConstructor [25-47]
            ArrayType [25-38]
              SimpleType [31-37]
                PathExpression [31-37]
                  Identifier(string) [31-37]
            IntLiteral(3) [40-41]
            StringLiteral("a") [43-46]
--
SELECT
  "a",
  3,
  ARRAY["a", 3],
  ARRAY< string >[3, "a"]
==

select [], ARRAY[], ARRAY<int32>[]
--
QueryStatement [0-34]
  Query [0-34]
    Select [0-34]
      SelectList [7-34]
        SelectColumn [7-9]
          ArrayConstructor [7-9]
        SelectColumn [11-18]
          ArrayConstructor [11-18]
        SelectColumn [20-34]
          ArrayConstructor [20-34]
            ArrayType [20-32]
              SimpleType [26-31]
                PathExpression [26-31]
                  Identifier(int32) [26-31]
--
SELECT
  ARRAY[],
  ARRAY[],
  ARRAY< int32 >[]
==

# JavaCC's location is one earlier because it uses LOOKAHEAD(2) in the
# primary_expression() production. At that point, ] is not among the allowed
# *second* tokens after [, so it rejects the input at the [. Bison doesn't apply
# such lookahead, so it errors out when it fails to see a proper expression
# after the [.
select [][]
--
ERROR: Syntax error: Unexpected "]" [at 1:11]
select [][]
          ^
==

select [][1]
--
QueryStatement [0-12]
  Query [0-12]
    Select [0-12]
      SelectList [7-12]
        SelectColumn [7-12]
          ArrayElement [7-12]
            ArrayConstructor [7-9]
            Location [9-10]
            IntLiteral(1) [10-11]
--
SELECT
  ARRAY[][1]
==

select (1, 2, 3)
--
QueryStatement [0-16]
  Query [0-16]
    Select [0-16]
      SelectList [7-16]
        SelectColumn [7-16]
          StructConstructorWithParens [7-16]
            IntLiteral(1) [8-9]
            IntLiteral(2) [11-12]
            IntLiteral(3) [14-15]
--
SELECT
  (1, 2, 3)
==

select ARRAY(1, 2, 3)
--
ERROR: Syntax error: Expected "(" or keyword SELECT or keyword WITH but got integer literal "1" [at 1:14]
select ARRAY(1, 2, 3)
             ^
==

select ARRAY<int32>(1, 2, 3)
--
ERROR: Syntax error: Expected "[" but got "(" [at 1:20]
select ARRAY<int32>(1, 2, 3)
                   ^
==

select ARRAY(int32)[1, 2, 3]
--
ERROR: Syntax error: Expected "(" or keyword SELECT or keyword WITH but got identifier "int32" [at 1:14]
select ARRAY(int32)[1, 2, 3]
             ^
==

select ARRAY(int32)(1, 2, 3)
--
ERROR: Syntax error: Expected "(" or keyword SELECT or keyword WITH but got identifier "int32" [at 1:14]
select ARRAY(int32)(1, 2, 3)
             ^
==

# Identified as a function call.
select ArrayOfInt32(1, 2, 3)
--
QueryStatement [0-28]
  Query [0-28]
    Select [0-28]
      SelectList [7-28]
        SelectColumn [7-28]
          FunctionCall [7-28]
            PathExpression [7-19]
              Identifier(ArrayOfInt32) [7-19]
            IntLiteral(1) [20-21]
            IntLiteral(2) [23-24]
            IntLiteral(3) [26-27]
--
SELECT
  ArrayOfInt32(1, 2, 3)
==

select ArrayOfInt32[1, 2, 3]
--
ERROR: Syntax error: Unexpected "," [at 1:22]
select ArrayOfInt32[1, 2, 3]
                     ^
==

select ARRAY[ARRAY(select 1), ARRAY[1, f(2), 1.0], 1 + ARRAY[1]]
--
QueryStatement [0-64]
  Query [0-64]
    Select [0-64]
      SelectList [7-64]
        SelectColumn [7-64]
          ArrayConstructor [7-64]
            ExpressionSubquery(modifier=ARRAY) [13-28]
              Query [19-27]
                Select [19-27]
                  SelectList [26-27]
                    SelectColumn [26-27]
                      IntLiteral(1) [26-27]
            ArrayConstructor [30-49]
              IntLiteral(1) [36-37]
              FunctionCall [39-43]
                PathExpression [39-40]
                  Identifier(f) [39-40]
                IntLiteral(2) [41-42]
              FloatLiteral(1.0) [45-48]
            BinaryExpression(+) [51-63]
              IntLiteral(1) [51-52]
              ArrayConstructor [55-63]
                IntLiteral(1) [61-62]
--
SELECT
  ARRAY[ARRAY(
    SELECT
      1
  ), ARRAY[1, f(2), 1.0], 1 + ARRAY[1]]
==

select ARRAY[1, 2, 3][0], [1][0]
--
QueryStatement [0-32]
  Query [0-32]
    Select [0-32]
      SelectList [7-32]
        SelectColumn [7-24]
          ArrayElement [7-24]
            ArrayConstructor [7-21]
              IntLiteral(1) [13-14]
              IntLiteral(2) [16-17]
              IntLiteral(3) [19-20]
            Location [21-22]
            IntLiteral(0) [22-23]
        SelectColumn [26-32]
          ArrayElement [26-32]
            ArrayConstructor [26-29]
              IntLiteral(1) [27-28]
            Location [29-30]
            IntLiteral(0) [30-31]
--
SELECT
  ARRAY[1, 2, 3][0],
  ARRAY[1][0]
==

# Generalized identifier called upon an array. This parses, but doesn't make
# sense. The tokenizer allows it because my_array[offset(1)].1 does make sense.
select [1].1
--
QueryStatement [0-12]
  Query [0-12]
    Select [0-12]
      SelectList [7-12]
        SelectColumn [7-12]
          DotIdentifier [7-12]
            ArrayConstructor [7-10]
              IntLiteral(1) [8-9]
            Identifier("1") [11-12]
--
SELECT
  ARRAY[1].`1`
==

select [1].a[1]
--
QueryStatement [0-15]
  Query [0-15]
    Select [0-15]
      SelectList [7-15]
        SelectColumn [7-15]
          ArrayElement [7-15]
            DotIdentifier [7-12]
              ArrayConstructor [7-10]
                IntLiteral(1) [8-9]
              Identifier(a) [11-12]
            Location [12-13]
            IntLiteral(1) [13-14]
--
SELECT
  ARRAY[1].a[1]
==

select a[default_offset(b+c)]
--
QueryStatement [0-29]
  Query [0-29]
    Select [0-29]
      SelectList [7-29]
        SelectColumn [7-29]
          ArrayElement [7-29]
            PathExpression [7-8]
              Identifier(a) [7-8]
            Location [8-9]
            FunctionCall [9-28]
              PathExpression [9-23]
                Identifier(default_offset) [9-23]
              BinaryExpression(+) [24-27]
                PathExpression [24-25]
                  Identifier(b) [24-25]
                PathExpression [26-27]
                  Identifier(c) [26-27]
--
SELECT
  a[default_offset(b + c)]
==

select a[ordinal(b+c)]
--
QueryStatement [0-22]
  Query [0-22]
    Select [0-22]
      SelectList [7-22]
        SelectColumn [7-22]
          ArrayElement [7-22]
            PathExpression [7-8]
              Identifier(a) [7-8]
            Location [8-9]
            FunctionCall [9-21]
              PathExpression [9-16]
                Identifier(ordinal) [9-16]
              BinaryExpression(+) [17-20]
                PathExpression [17-18]
                  Identifier(b) [17-18]
                PathExpression [19-20]
                  Identifier(c) [19-20]
--
SELECT
  a[ordinal(b + c)]
==

select a[safe_offset(b)], a[safe_ordinal(b+1)]
--
QueryStatement [0-46]
  Query [0-46]
    Select [0-46]
      SelectList [7-46]
        SelectColumn [7-24]
          ArrayElement [7-24]
            PathExpression [7-8]
              Identifier(a) [7-8]
            Location [8-9]
            FunctionCall [9-23]
              PathExpression [9-20]
                Identifier(safe_offset) [9-20]
              PathExpression [21-22]
                Identifier(b) [21-22]
        SelectColumn [26-46]
          ArrayElement [26-46]
            PathExpression [26-27]
              Identifier(a) [26-27]
            Location [27-28]
            FunctionCall [28-45]
              PathExpression [28-40]
                Identifier(safe_ordinal) [28-40]
              BinaryExpression(+) [41-44]
                PathExpression [41-42]
                  Identifier(b) [41-42]
                IntLiteral(1) [43-44]
--
SELECT
  a[safe_offset(b)],
  a[safe_ordinal(b + 1)]
==

# There is nothing special about OFFSET or ORDINAL as identifiers here.
select a[default_offset], a[ordinal], a[`default_offset`], a[ordinal(ordinal)]
--
QueryStatement [0-78]
  Query [0-78]
    Select [0-78]
      SelectList [7-78]
        SelectColumn [7-24]
          ArrayElement [7-24]
            PathExpression [7-8]
              Identifier(a) [7-8]
            Location [8-9]
            PathExpression [9-23]
              Identifier(default_offset) [9-23]
        SelectColumn [26-36]
          ArrayElement [26-36]
            PathExpression [26-27]
              Identifier(a) [26-27]
            Location [27-28]
            PathExpression [28-35]
              Identifier(ordinal) [28-35]
        SelectColumn [38-57]
          ArrayElement [38-57]
            PathExpression [38-39]
              Identifier(a) [38-39]
            Location [39-40]
            PathExpression [40-56]
              Identifier(default_offset) [40-56]
        SelectColumn [59-78]
          ArrayElement [59-78]
            PathExpression [59-60]
              Identifier(a) [59-60]
            Location [60-61]
            FunctionCall [61-77]
              PathExpression [61-68]
                Identifier(ordinal) [61-68]
              PathExpression [69-76]
                Identifier(ordinal) [69-76]
--
SELECT
  a[default_offset],
  a[ordinal],
  a[default_offset],
  a[ordinal(ordinal)]
==

select 1
from a.b[offset(2)]
--
ERROR: Syntax error: Array element access is not allowed in the FROM clause without UNNEST; Use UNNEST(<expression>) [at 2:9]
from a.b[offset(2)]
        ^
==

select 1
from a[offset(c.d)]
--
ERROR: Syntax error: Array element access is not allowed in the FROM clause without UNNEST; Use UNNEST(<expression>) [at 2:7]
from a[offset(c.d)]
      ^
==

select 1
from unnest(a)[offset(1)]
--
ERROR: Syntax error: Array element access is not allowed in the FROM clause without UNNEST; Use UNNEST(<expression>) [at 2:15]
from unnest(a)[offset(1)]
              ^
==

select f(a), a.b[1 + 2 * (3 + 4)], 3
--
QueryStatement [0-36]
  Query [0-36]
    Select [0-36]
      SelectList [7-36]
        SelectColumn [7-11]
          FunctionCall [7-11]
            PathExpression [7-8]
              Identifier(f) [7-8]
            PathExpression [9-10]
              Identifier(a) [9-10]
        SelectColumn [13-33]
          ArrayElement [13-33]
            PathExpression [13-16]
              Identifier(a) [13-14]
              Identifier(b) [15-16]
            Location [16-17]
            BinaryExpression(+) [17-32]
              IntLiteral(1) [17-18]
              BinaryExpression(*) [21-32]
                IntLiteral(2) [21-22]
                BinaryExpression(+) [26-31]
                  IntLiteral(3) [26-27]
                  IntLiteral(4) [30-31]
        SelectColumn [35-36]
          IntLiteral(3) [35-36]
--
SELECT
  f(a),
  a.b[1 + 2 * (3 + 4)],
  3
==

select a[-1], a['x'], a[NULL]
--
QueryStatement [0-29]
  Query [0-29]
    Select [0-29]
      SelectList [7-29]
        SelectColumn [7-12]
          ArrayElement [7-12]
            PathExpression [7-8]
              Identifier(a) [7-8]
            Location [8-9]
            UnaryExpression(-) [9-11]
              IntLiteral(1) [10-11]
        SelectColumn [14-20]
          ArrayElement [14-20]
            PathExpression [14-15]
              Identifier(a) [14-15]
            Location [15-16]
            StringLiteral('x') [16-19]
        SelectColumn [22-29]
          ArrayElement [22-29]
            PathExpression [22-23]
              Identifier(a) [22-23]
            Location [23-24]
            NullLiteral(NULL) [24-28]
--
SELECT
  a[-1],
  a['x'],
  a[NULL]
==

select f(a).b[f(c)]
--
QueryStatement [0-19]
  Query [0-19]
    Select [0-19]
      SelectList [7-19]
        SelectColumn [7-19]
          ArrayElement [7-19]
            DotIdentifier [7-13]
              FunctionCall [7-11]
                PathExpression [7-8]
                  Identifier(f) [7-8]
                PathExpression [9-10]
                  Identifier(a) [9-10]
              Identifier(b) [12-13]
            Location [13-14]
            FunctionCall [14-18]
              PathExpression [14-15]
                Identifier(f) [14-15]
              PathExpression [16-17]
                Identifier(c) [16-17]
--
SELECT
  f(a).b[f(c)]
==

select a + b2 * b[2] + c1 * c2
--
QueryStatement [0-30]
  Query [0-30]
    Select [0-30]
      SelectList [7-30]
        SelectColumn [7-30]
          BinaryExpression(+) [7-30]
            BinaryExpression(+) [7-20]
              PathExpression [7-8]
                Identifier(a) [7-8]
              BinaryExpression(*) [11-20]
                PathExpression [11-13]
                  Identifier(b2) [11-13]
                ArrayElement [16-20]
                  PathExpression [16-17]
                    Identifier(b) [16-17]
                  Location [17-18]
                  IntLiteral(2) [18-19]
            BinaryExpression(*) [23-30]
              PathExpression [23-25]
                Identifier(c1) [23-25]
              PathExpression [28-30]
                Identifier(c2) [28-30]
--
SELECT
  a + b2 * b[2] + c1 * c2
==

select arr[1] + arr[2]
--
QueryStatement [0-22]
  Query [0-22]
    Select [0-22]
      SelectList [7-22]
        SelectColumn [7-22]
          BinaryExpression(+) [7-22]
            ArrayElement [7-13]
              PathExpression [7-10]
                Identifier(arr) [7-10]
              Location [10-11]
              IntLiteral(1) [11-12]
            ArrayElement [16-22]
              PathExpression [16-19]
                Identifier(arr) [16-19]
              Location [19-20]
              IntLiteral(2) [20-21]
--
SELECT
  arr[1] + arr[2]
==

select a[b.c[d]];
--
QueryStatement [0-16]
  Query [0-16]
    Select [0-16]
      SelectList [7-16]
        SelectColumn [7-16]
          ArrayElement [7-16]
            PathExpression [7-8]
              Identifier(a) [7-8]
            Location [8-9]
            ArrayElement [9-15]
              PathExpression [9-12]
                Identifier(b) [9-10]
                Identifier(c) [11-12]
              Location [12-13]
              PathExpression [13-14]
                Identifier(d) [13-14]
--
SELECT
  a[b.c[d]]
==

select a[1] + a[1 + f(2)]
--
QueryStatement [0-25]
  Query [0-25]
    Select [0-25]
      SelectList [7-25]
        SelectColumn [7-25]
          BinaryExpression(+) [7-25]
            ArrayElement [7-11]
              PathExpression [7-8]
                Identifier(a) [7-8]
              Location [8-9]
              IntLiteral(1) [9-10]
            ArrayElement [14-25]
              PathExpression [14-15]
                Identifier(a) [14-15]
              Location [15-16]
              BinaryExpression(+) [16-24]
                IntLiteral(1) [16-17]
                FunctionCall [20-24]
                  PathExpression [20-21]
                    Identifier(f) [20-21]
                  IntLiteral(2) [22-23]
--
SELECT
  a[1] + a[1 + f(2)]
==

select (a+b)[c]
--
QueryStatement [0-15]
  Query [0-15]
    Select [0-15]
      SelectList [7-15]
        SelectColumn [7-15]
          ArrayElement [7-15]
            BinaryExpression(+) [8-11]
              PathExpression [8-9]
                Identifier(a) [8-9]
              PathExpression [10-11]
                Identifier(b) [10-11]
            Location [12-13]
            PathExpression [13-14]
              Identifier(c) [13-14]
--
SELECT
  (a + b)[c]
==

select a[b].c[d].e[f]
--
QueryStatement [0-21]
  Query [0-21]
    Select [0-21]
      SelectList [7-21]
        SelectColumn [7-21]
          ArrayElement [7-21]
            DotIdentifier [7-18]
              ArrayElement [7-16]
                DotIdentifier [7-13]
                  ArrayElement [7-11]
                    PathExpression [7-8]
                      Identifier(a) [7-8]
                    Location [8-9]
                    PathExpression [9-10]
                      Identifier(b) [9-10]
                  Identifier(c) [12-13]
                Location [13-14]
                PathExpression [14-15]
                  Identifier(d) [14-15]
              Identifier(e) [17-18]
            Location [18-19]
            PathExpression [19-20]
              Identifier(f) [19-20]
--
SELECT
  a[b].c[d].e[f]
==

# Same thing with parentheses.
select (((a)[b]).c[d]).e[(f)]
--
QueryStatement [0-29]
  Query [0-29]
    Select [0-29]
      SelectList [7-29]
        SelectColumn [7-29]
          ArrayElement [7-29]
            DotIdentifier [7-24]
              ArrayElement [8-21]
                DotIdentifier [8-18]
                  ArrayElement [9-15]
                    PathExpression [10-11]
                      Identifier(a) [10-11]
                    Location [12-13]
                    PathExpression [13-14]
                      Identifier(b) [13-14]
                  Identifier(c) [17-18]
                Location [18-19]
                PathExpression [19-20]
                  Identifier(d) [19-20]
              Identifier(e) [23-24]
            Location [24-25]
            PathExpression [26-27]
              Identifier(f) [26-27]
--
SELECT
  (((a)[b]).c[d]).e[(f)]
==

# Nested array accesses will parse but won't be valid because nested arrays
# are not supported in ZetaSQL.
select a[b][c]
--
QueryStatement [0-14]
  Query [0-14]
    Select [0-14]
      SelectList [7-14]
        SelectColumn [7-14]
          ArrayElement [7-14]
            ArrayElement [7-11]
              PathExpression [7-8]
                Identifier(a) [7-8]
              Location [8-9]
              PathExpression [9-10]
                Identifier(b) [9-10]
            Location [11-12]
            PathExpression [12-13]
              Identifier(c) [12-13]
--
SELECT
  a[b][c]
==

select a[b[c[d]]]
--
QueryStatement [0-17]
  Query [0-17]
    Select [0-17]
      SelectList [7-17]
        SelectColumn [7-17]
          ArrayElement [7-17]
            PathExpression [7-8]
              Identifier(a) [7-8]
            Location [8-9]
            ArrayElement [9-16]
              PathExpression [9-10]
                Identifier(b) [9-10]
              Location [10-11]
              ArrayElement [11-15]
                PathExpression [11-12]
                  Identifier(c) [11-12]
                Location [12-13]
                PathExpression [13-14]
                  Identifier(d) [13-14]
--
SELECT
  a[b[c[d]]]
==

select function()[5]
--
QueryStatement [0-20]
  Query [0-20]
    Select [0-20]
      SelectList [7-20]
        SelectColumn [7-20]
          ArrayElement [7-20]
            FunctionCall [7-17]
              PathExpression [7-15]
                Identifier("function") [7-15]
            Location [17-18]
            IntLiteral(5) [18-19]
--
SELECT
  `function`()[5]
==

select 5[6];
--
QueryStatement [0-11]
  Query [0-11]
    Select [0-11]
      SelectList [7-11]
        SelectColumn [7-11]
          ArrayElement [7-11]
            IntLiteral(5) [7-8]
            Location [8-9]
            IntLiteral(6) [9-10]
--
SELECT
  5[6]
==

select NULL[NULL[NULL]]
--
QueryStatement [0-23]
  Query [0-23]
    Select [0-23]
      SelectList [7-23]
        SelectColumn [7-23]
          ArrayElement [7-23]
            NullLiteral(NULL) [7-11]
            Location [11-12]
            ArrayElement [12-22]
              NullLiteral(NULL) [12-16]
              Location [16-17]
              NullLiteral(NULL) [17-21]
--
SELECT
  NULL[NULL[NULL]]
