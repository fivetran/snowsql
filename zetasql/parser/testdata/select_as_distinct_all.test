# Tests for everything that can directly follow SELECT, including DISTINCT,
# ALL, AS STRUCT, AS VALUE, and AS <proto>.
select
  # ALL here means opposite of DISTINCT
  ALL
    # Regular column
    x,
    # 'all' as suffix for column name
    y.all,
    # 'all' in the middle of path expression
    z.all.good,
    # quoted identifier `all`
    `all`,
    # Only prefix needs to be quoted
    `all`.all,
    # all (no pun) magic suffixes together
    x.123.all.y.2daysago.all
from x.all;
--
QueryStatement [0-366] [select   #...from x.all]
  Query [0-366] [select   #...from x.all]
    Select [0-366] [select   #...from x.all]
      SelectList [78-355] [x,     # '...2daysago.all]
        SelectColumn [78-79] [x]
          PathExpression [78-79] [x]
            Identifier(x) [78-79] [x]
        SelectColumn [123-128] [y.all]
          PathExpression [123-128] [y.all]
            Identifier(y) [123-124] [y]
            Identifier("all") [125-128] [all]
        SelectColumn [179-189] [z.all.good]
          PathExpression [179-189] [z.all.good]
            Identifier(z) [179-180] [z]
            Identifier("all") [181-184] [all]
            Identifier(good) [185-189] [good]
        SelectColumn [225-230] [`all`]
          PathExpression [225-230] [`all`]
            Identifier("all") [225-230] [`all`]
        SelectColumn [273-282] [`all`.all]
          PathExpression [273-282] [`all`.all]
            Identifier("all") [273-278] [`all`]
            Identifier("all") [279-282] [all]
        SelectColumn [331-355] [x.123.all.y.2daysago.all]
          PathExpression [331-355] [x.123.all.y.2daysago.all]
            Identifier(x) [331-332] [x]
            Identifier("123") [333-336] [123]
            Identifier("all") [337-340] [all]
            Identifier(y) [341-342] [y]
            Identifier("2daysago") [343-351] [2daysago]
            Identifier("all") [352-355] [all]
      FromClause [356-366] [from x.all]
        TablePathExpression [361-366] [x.all]
          PathExpression [361-366] [x.all]
            Identifier(x) [361-362] [x]
            Identifier("all") [363-366] [all]
--
SELECT
  x,
  y.`all`,
  z.`all`.good,
  `all`,
  `all`.`all`,
  x.`123`.`all`.y.`2daysago`.`all`
FROM
  x.`all`
==

select all from t;
--
ERROR: Syntax error: SELECT list must not be empty [at 1:12]
select all from t;
           ^
==

select 1, all from t;
--
ERROR: Syntax error: Expected end of input but got keyword ALL [at 1:11]
select 1, all from t;
          ^
==

select as struct 1, 2;
--
QueryStatement [0-21] [select as struct 1, 2]
  Query [0-21] [select as struct 1, 2]
    Select [0-21] [select as struct 1, 2]
      SelectAs(as_mode=STRUCT) [7-16] [as struct]
      SelectList [17-21] [1, 2]
        SelectColumn [17-18] [1]
          IntLiteral(1) [17-18] [1]
        SelectColumn [20-21] [2]
          IntLiteral(2) [20-21] [2]
--
SELECT AS STRUCT
  1,
  2
==

select as struct 'abc' from T;
--
QueryStatement [0-29] [select as struct 'abc' from T]
  Query [0-29] [select as struct 'abc' from T]
    Select [0-29] [select as struct 'abc' from T]
      SelectAs(as_mode=STRUCT) [7-16] [as struct]
      SelectList [17-22] ['abc']
        SelectColumn [17-22] ['abc']
          StringLiteral('abc') [17-22] ['abc']
      FromClause [23-29] [from T]
        TablePathExpression [28-29] [T]
          PathExpression [28-29] [T]
            Identifier(T) [28-29] [T]
--
SELECT AS STRUCT
  'abc'
FROM
  T
==

select as MyProto 1,2,3;
--
QueryStatement [0-23] [select as MyProto 1,2,3]
  Query [0-23] [select as MyProto 1,2,3]
    Select [0-23] [select as MyProto 1,2,3]
      SelectAs [7-17] [as MyProto]
        PathExpression [10-17] [MyProto]
          Identifier(MyProto) [10-17] [MyProto]
      SelectList [18-23] [1,2,3]
        SelectColumn [18-19] [1]
          IntLiteral(1) [18-19] [1]
        SelectColumn [20-21] [2]
          IntLiteral(2) [20-21] [2]
        SelectColumn [22-23] [3]
          IntLiteral(3) [22-23] [3]
--
SELECT AS MyProto
  1,
  2,
  3
==

select as catalog.catalog.MyProto a,b from T
--
QueryStatement [0-44] [select as...a,b from T]
  Query [0-44] [select as...a,b from T]
    Select [0-44] [select as...a,b from T]
      SelectAs [7-33] [as catalog.catalog.MyProto]
        PathExpression [10-33] [catalog.catalog.MyProto]
          Identifier(catalog) [10-17] [catalog]
          Identifier(catalog) [18-25] [catalog]
          Identifier(MyProto) [26-33] [MyProto]
      SelectList [34-37] [a,b]
        SelectColumn [34-35] [a]
          PathExpression [34-35] [a]
            Identifier(a) [34-35] [a]
        SelectColumn [36-37] [b]
          PathExpression [36-37] [b]
            Identifier(b) [36-37] [b]
      FromClause [38-44] [from T]
        TablePathExpression [43-44] [T]
          PathExpression [43-44] [T]
            Identifier(T) [43-44] [T]
--
SELECT AS catalog.catalog.MyProto
  a,
  b
FROM
  T
==

# SELECT AS does not support extensions
select as MyProto T.foo as (path.to.extension) from Table
--
ERROR: Syntax error: Unexpected "(" [at 1:28]
select as MyProto T.foo as (path.to.extension) from Table
                           ^
==

select 1, (select as struct 123), array(select as struct 4, 5)
from (select as struct * from T1),
     (select as struct z from y),
     (select as a.b.c q from y)
--
QueryStatement [0-163] [select 1,...q from y)]
  Query [0-163] [select 1,...q from y)]
    Select [0-163] [select 1,...q from y)]
      SelectList [7-62] [1, (select...struct 4, 5)]
        SelectColumn [7-8] [1]
          IntLiteral(1) [7-8] [1]
        SelectColumn [10-32] [(select as struct 123)]
          ExpressionSubquery [10-32] [(select as struct 123)]
            Query [11-31] [select as struct 123]
              Select [11-31] [select as struct 123]
                SelectAs(as_mode=STRUCT) [18-27] [as struct]
                SelectList [28-31] [123]
                  SelectColumn [28-31] [123]
                    IntLiteral(123) [28-31] [123]
        SelectColumn [34-62] [array(select as struct 4, 5)]
          ExpressionSubquery(modifier=ARRAY) [34-62] [array(select as struct 4, 5)]
            Query [40-61] [select as struct 4, 5]
              Select [40-61] [select as struct 4, 5]
                SelectAs(as_mode=STRUCT) [47-56] [as struct]
                SelectList [57-61] [4, 5]
                  SelectColumn [57-58] [4]
                    IntLiteral(4) [57-58] [4]
                  SelectColumn [60-61] [5]
                    IntLiteral(5) [60-61] [5]
      FromClause [63-163] [from (select...q from y)]
        Join(COMMA) [68-163] [(select as...q from y)]
          Join(COMMA) [68-130] [(select as...z from y)]
            TableSubquery [68-96] [(select as struct * from T1)]
              Query [69-95] [select as struct * from T1]
                Select [69-95] [select as struct * from T1]
                  SelectAs(as_mode=STRUCT) [76-85] [as struct]
                  SelectList [86-87] [*]
                    SelectColumn [86-87] [*]
                      Star(*) [86-87] [*]
                  FromClause [88-95] [from T1]
                    TablePathExpression [93-95] [T1]
                      PathExpression [93-95] [T1]
                        Identifier(T1) [93-95] [T1]
            Location [96-97] [,]
            TableSubquery [103-130] [(select as struct z from y)]
              Query [104-129] [select as struct z from y]
                Select [104-129] [select as struct z from y]
                  SelectAs(as_mode=STRUCT) [111-120] [as struct]
                  SelectList [121-122] [z]
                    SelectColumn [121-122] [z]
                      PathExpression [121-122] [z]
                        Identifier(z) [121-122] [z]
                  FromClause [123-129] [from y]
                    TablePathExpression [128-129] [y]
                      PathExpression [128-129] [y]
                        Identifier(y) [128-129] [y]
          Location [130-131] [,]
          TableSubquery [137-163] [(select as a.b.c q from y)]
            Query [138-162] [select as a.b.c q from y]
              Select [138-162] [select as a.b.c q from y]
                SelectAs [145-153] [as a.b.c]
                  PathExpression [148-153] [a.b.c]
                    Identifier(a) [148-149] [a]
                    Identifier(b) [150-151] [b]
                    Identifier(c) [152-153] [c]
                SelectList [154-155] [q]
                  SelectColumn [154-155] [q]
                    PathExpression [154-155] [q]
                      Identifier(q) [154-155] [q]
                FromClause [156-162] [from y]
                  TablePathExpression [161-162] [y]
                    PathExpression [161-162] [y]
                      Identifier(y) [161-162] [y]
--
SELECT
  1,
  (
    SELECT AS STRUCT
      123
  ),
  ARRAY(
    SELECT AS STRUCT
      4,
      5
  )
FROM
  (
    SELECT AS STRUCT
      *
    FROM
      T1
  ),
  (
    SELECT AS STRUCT
      z
    FROM
      y
  ),
  (
    SELECT AS a.b.c
      q
    FROM
      y
  )
==

select as struct 5 as five
--
QueryStatement [0-26] [select as struct 5 as five]
  Query [0-26] [select as struct 5 as five]
    Select [0-26] [select as struct 5 as five]
      SelectAs(as_mode=STRUCT) [7-16] [as struct]
      SelectList [17-26] [5 as five]
        SelectColumn [17-26] [5 as five]
          IntLiteral(5) [17-18] [5]
          Alias [19-26] [as five]
            Identifier(five) [22-26] [five]
--
SELECT AS STRUCT
  5 AS five
==

select as myproto 5 as myproto
--
QueryStatement [0-30] [select as myproto 5 as myproto]
  Query [0-30] [select as myproto 5 as myproto]
    Select [0-30] [select as myproto 5 as myproto]
      SelectAs [7-17] [as myproto]
        PathExpression [10-17] [myproto]
          Identifier(myproto) [10-17] [myproto]
      SelectList [18-30] [5 as myproto]
        SelectColumn [18-30] [5 as myproto]
          IntLiteral(5) [18-19] [5]
          Alias [20-30] [as myproto]
            Identifier(myproto) [23-30] [myproto]
--
SELECT AS myproto
  5 AS myproto
==

select as struct
--
ERROR: Syntax error: Unexpected end of statement [at 1:17]
select as struct
                ^
==

select struct
--
ERROR: Syntax error: Expected "(" or "<" but got end of statement [at 1:14]
select struct
             ^
==

select 5 as struct
--
ERROR: Syntax error: Unexpected keyword STRUCT [at 1:13]
select 5 as struct
            ^
==

select as 5
--
ERROR: Syntax error: Unexpected integer literal "5" [at 1:11]
select as 5
          ^
==

select as MyProto
--
ERROR: Syntax error: Unexpected end of statement [at 1:18]
select as MyProto
                 ^
==

select as MyProto, 5
--
ERROR: Syntax error: Unexpected "," [at 1:18]
select as MyProto, 5
                 ^
==

select distinct as struct a1, a2 from Table1
--
QueryStatement [0-44] [select distinct...from Table1]
  Query [0-44] [select distinct...from Table1]
    Select(distinct=true) [0-44] [select distinct...from Table1]
      SelectAs(as_mode=STRUCT) [16-25] [as struct]
      SelectList [26-32] [a1, a2]
        SelectColumn [26-28] [a1]
          PathExpression [26-28] [a1]
            Identifier(a1) [26-28] [a1]
        SelectColumn [30-32] [a2]
          PathExpression [30-32] [a2]
            Identifier(a2) [30-32] [a2]
      FromClause [33-44] [from Table1]
        TablePathExpression [38-44] [Table1]
          PathExpression [38-44] [Table1]
            Identifier(Table1) [38-44] [Table1]
--
SELECT DISTINCT AS STRUCT
  a1,
  a2
FROM
  Table1
==

select as struct distinct a1, a2 from Table
--
ERROR: Syntax error: Unexpected keyword DISTINCT [at 1:18]
select as struct distinct a1, a2 from Table
                 ^
==

select distinct * from Table1
--
QueryStatement [0-29] [select distinct * from Table1]
  Query [0-29] [select distinct * from Table1]
    Select(distinct=true) [0-29] [select distinct * from Table1]
      SelectList [16-17] [*]
        SelectColumn [16-17] [*]
          Star(*) [16-17] [*]
      FromClause [18-29] [from Table1]
        TablePathExpression [23-29] [Table1]
          PathExpression [23-29] [Table1]
            Identifier(Table1) [23-29] [Table1]
--
SELECT DISTINCT
  *
FROM
  Table1
==

select distinct (select distinct * from Table1)
--
QueryStatement [0-47] [select distinct...from Table1)]
  Query [0-47] [select distinct...from Table1)]
    Select(distinct=true) [0-47] [select distinct...from Table1)]
      SelectList [16-47] [(select distinct...rom Table1)]
        SelectColumn [16-47] [(select distinct...rom Table1)]
          ExpressionSubquery [16-47] [(select distinct...rom Table1)]
            Query [17-46] [select distinct * from Table1]
              Select(distinct=true) [17-46] [select distinct * from Table1]
                SelectList [33-34] [*]
                  SelectColumn [33-34] [*]
                    Star(*) [33-34] [*]
                FromClause [35-46] [from Table1]
                  TablePathExpression [40-46] [Table1]
                    PathExpression [40-46] [Table1]
                      Identifier(Table1) [40-46] [Table1]
--
SELECT DISTINCT
  (
    SELECT DISTINCT
      *
    FROM
      Table1
  )
==

select all 5
--
QueryStatement [0-12] [select all 5]
  Query [0-12] [select all 5]
    Select [0-12] [select all 5]
      SelectList [11-12] [5]
        SelectColumn [11-12] [5]
          IntLiteral(5) [11-12] [5]
--
SELECT
  5
==

select all * from (select all a,b from t)
--
QueryStatement [0-41] [select all...,b from t)]
  Query [0-41] [select all...,b from t)]
    Select [0-41] [select all...,b from t)]
      SelectList [11-12] [*]
        SelectColumn [11-12] [*]
          Star(*) [11-12] [*]
      FromClause [13-41] [from (select all a,b from t)]
        TableSubquery [18-41] [(select all a,b from t)]
          Query [19-40] [select all a,b from t]
            Select [19-40] [select all a,b from t]
              SelectList [30-33] [a,b]
                SelectColumn [30-31] [a]
                  PathExpression [30-31] [a]
                    Identifier(a) [30-31] [a]
                SelectColumn [32-33] [b]
                  PathExpression [32-33] [b]
                    Identifier(b) [32-33] [b]
              FromClause [34-40] [from t]
                TablePathExpression [39-40] [t]
                  PathExpression [39-40] [t]
                    Identifier(t) [39-40] [t]
--
SELECT
  *
FROM
  (
    SELECT
      a,
      b
    FROM
      t
  )
==

select all as struct 1,2
--
QueryStatement [0-24] [select all as struct 1,2]
  Query [0-24] [select all as struct 1,2]
    Select [0-24] [select all as struct 1,2]
      SelectAs(as_mode=STRUCT) [11-20] [as struct]
      SelectList [21-24] [1,2]
        SelectColumn [21-22] [1]
          IntLiteral(1) [21-22] [1]
        SelectColumn [23-24] [2]
          IntLiteral(2) [23-24] [2]
--
SELECT AS STRUCT
  1,
  2
==

select as struct all 1,2
--
ERROR: Syntax error: Unexpected keyword ALL [at 1:18]
select as struct all 1,2
                 ^
==

select as value 5
--
QueryStatement [0-17] [select as value 5]
  Query [0-17] [select as value 5]
    Select [0-17] [select as value 5]
      SelectAs(as_mode=VALUE) [7-15] [as value]
      SelectList [16-17] [5]
        SelectColumn [16-17] [5]
          IntLiteral(5) [16-17] [5]
--
SELECT AS VALUE
  5
==

# TODO: The unparse result here is wrong. VALUE is used as an
# identifier and not as a keyword and should be unparsed with backquotes so
# that it does not get treated as a keyword here.
[no_test_unparse][no_test_get_parse_tokens]
select as `value` 5
--
QueryStatement [0-19] [select as `value` 5]
  Query [0-19] [select as `value` 5]
    Select [0-19] [select as `value` 5]
      SelectAs [7-17] [as `value`]
        PathExpression [10-17] [`value`]
          Identifier(value) [10-17] [`value`]
      SelectList [18-19] [5]
        SelectColumn [18-19] [5]
          IntLiteral(5) [18-19] [5]
==

select as value x, y, z
--
QueryStatement [0-23] [select as value x, y, z]
  Query [0-23] [select as value x, y, z]
    Select [0-23] [select as value x, y, z]
      SelectAs(as_mode=VALUE) [7-15] [as value]
      SelectList [16-23] [x, y, z]
        SelectColumn [16-17] [x]
          PathExpression [16-17] [x]
            Identifier(x) [16-17] [x]
        SelectColumn [19-20] [y]
          PathExpression [19-20] [y]
            Identifier(y) [19-20] [y]
        SelectColumn [22-23] [z]
          PathExpression [22-23] [z]
            Identifier(z) [22-23] [z]
--
SELECT AS VALUE
  x,
  y,
  z
==

select as value value as values
--
QueryStatement [0-31] [select as...as values]
  Query [0-31] [select as...as values]
    Select [0-31] [select as...as values]
      SelectAs(as_mode=VALUE) [7-15] [as value]
      SelectList [16-31] [value as values]
        SelectColumn [16-31] [value as values]
          PathExpression [16-21] [value]
            Identifier(value) [16-21] [value]
          Alias [22-31] [as values]
            Identifier(values) [25-31] [values]
--
SELECT AS VALUE
  value AS values
==

select as value *
--
QueryStatement [0-17] [select as value *]
  Query [0-17] [select as value *]
    Select [0-17] [select as value *]
      SelectAs(as_mode=VALUE) [7-15] [as value]
      SelectList [16-17] [*]
        SelectColumn [16-17] [*]
          Star(*) [16-17] [*]
--
SELECT AS VALUE
  *
==

select (select as value 1), (select as struct value)
--
QueryStatement [0-52] [select (select...struct value)]
  Query [0-52] [select (select...struct value)]
    Select [0-52] [select (select...struct value)]
      SelectList [7-52] [(select as...struct value)]
        SelectColumn [7-26] [(select as value 1)]
          ExpressionSubquery [7-26] [(select as value 1)]
            Query [8-25] [select as value 1]
              Select [8-25] [select as value 1]
                SelectAs(as_mode=VALUE) [15-23] [as value]
                SelectList [24-25] [1]
                  SelectColumn [24-25] [1]
                    IntLiteral(1) [24-25] [1]
        SelectColumn [28-52] [(select as struct value)]
          ExpressionSubquery [28-52] [(select as struct value)]
            Query [29-51] [select as struct value]
              Select [29-51] [select as struct value]
                SelectAs(as_mode=STRUCT) [36-45] [as struct]
                SelectList [46-51] [value]
                  SelectColumn [46-51] [value]
                    PathExpression [46-51] [value]
                      Identifier(value) [46-51] [value]
--
SELECT
  (
    SELECT AS VALUE
      1
  ),
  (
    SELECT AS STRUCT
      value
  )
==

select distinct as value v1
--
QueryStatement [0-27] [select distinct as value v1]
  Query [0-27] [select distinct as value v1]
    Select(distinct=true) [0-27] [select distinct as value v1]
      SelectAs(as_mode=VALUE) [16-24] [as value]
      SelectList [25-27] [v1]
        SelectColumn [25-27] [v1]
          PathExpression [25-27] [v1]
            Identifier(v1) [25-27] [v1]
--
SELECT DISTINCT AS VALUE
  v1
==

select all distinct x from Table
--
ERROR: Syntax error: Unexpected keyword DISTINCT [at 1:12]
select all distinct x from Table
           ^
==

select distinct all x from Table
--
ERROR: Syntax error: Unexpected keyword ALL [at 1:17]
select distinct all x from Table
                ^
==

select distinct distinct * from Table
--
ERROR: Syntax error: Unexpected keyword DISTINCT [at 1:17]
select distinct distinct * from Table
                ^
==

select 1, (select distinct * from Table1)
--
QueryStatement [0-41] [select 1,...from Table1)]
  Query [0-41] [select 1,...from Table1)]
    Select [0-41] [select 1,...from Table1)]
      SelectList [7-41] [1, (select...from Table1)]
        SelectColumn [7-8] [1]
          IntLiteral(1) [7-8] [1]
        SelectColumn [10-41] [(select distinct...rom Table1)]
          ExpressionSubquery [10-41] [(select distinct...rom Table1)]
            Query [11-40] [select distinct * from Table1]
              Select(distinct=true) [11-40] [select distinct * from Table1]
                SelectList [27-28] [*]
                  SelectColumn [27-28] [*]
                    Star(*) [27-28] [*]
                FromClause [29-40] [from Table1]
                  TablePathExpression [34-40] [Table1]
                    PathExpression [34-40] [Table1]
                      Identifier(Table1) [34-40] [Table1]
--
SELECT
  1,
  (
    SELECT DISTINCT
      *
    FROM
      Table1
  )
