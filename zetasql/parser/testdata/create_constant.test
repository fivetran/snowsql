create constant foo = 5;
--
CreateConstantStatement [0-23] [create constant foo = 5]
  PathExpression [16-19] [foo]
    Identifier(foo) [16-19] [foo]
  IntLiteral(5) [22-23] [5]
--
CREATE CONSTANT foo = 5
==

create constant a.b.c = 'str';
--
CreateConstantStatement [0-29] [create constant a.b.c = 'str']
  PathExpression [16-21] [a.b.c]
    Identifier(a) [16-17] [a]
    Identifier(b) [18-19] [b]
    Identifier(c) [20-21] [c]
  StringLiteral('str') [24-29] ['str']
--
CREATE CONSTANT a.b.c = 'str'
==

# When back-ticking this identifier the round tripping through parse tokens
# fails, because the resulting SQL does *not* contain the backticks and
# therefore that SQL is actually valid and parses ok (even though the
# original SQL did not parse ok).
[no_test_get_parse_tokens]
create "constant" a.b.c = 'str';
--
ERROR: "constant" is not a supported object type [at 1:8]
create "constant" a.b.c = 'str';
       ^
==

create constant d.e = a + b;
--
CreateConstantStatement [0-27] [create constant d.e = a + b]
  PathExpression [16-19] [d.e]
    Identifier(d) [16-17] [d]
    Identifier(e) [18-19] [e]
  BinaryExpression(+) [22-27] [a + b]
    PathExpression [22-23] [a]
      Identifier(a) [22-23] [a]
    PathExpression [26-27] [b]
      Identifier(b) [26-27] [b]
--
CREATE CONSTANT d.e = a + b
==

create constant d.e = @param;
--
CreateConstantStatement [0-28] [create constant d.e = @param]
  PathExpression [16-19] [d.e]
    Identifier(d) [16-17] [d]
    Identifier(e) [18-19] [e]
  ParameterExpr [22-28] [@param]
    Identifier(param) [23-28] [param]
--
CREATE CONSTANT d.e = @param
==

create constant d.e = @@sysvar;
--
CreateConstantStatement [0-30] [create constant d.e = @@sysvar]
  PathExpression [16-19] [d.e]
    Identifier(d) [16-17] [d]
    Identifier(e) [18-19] [e]
  SystemVariableExpr [22-30] [@@sysvar]
    PathExpression [24-30] [sysvar]
      Identifier(sysvar) [24-30] [sysvar]
--
CREATE CONSTANT d.e = @@sysvar
==

create constant d.e = NULL;
--
CreateConstantStatement [0-26] [create constant d.e = NULL]
  PathExpression [16-19] [d.e]
    Identifier(d) [16-17] [d]
    Identifier(e) [18-19] [e]
  NullLiteral(NULL) [22-26] [NULL]
--
CREATE CONSTANT d.e = NULL
==

create constant @@sysvar = 4;
--
ERROR: Syntax error: Unexpected "@@" [at 1:17]
create constant @@sysvar = 4;
                ^
==

create constant d.e = NULL;
--
CreateConstantStatement [0-26] [create constant d.e = NULL]
  PathExpression [16-19] [d.e]
    Identifier(d) [16-17] [d]
    Identifier(e) [18-19] [e]
  NullLiteral(NULL) [22-26] [NULL]
--
CREATE CONSTANT d.e = NULL
==

create constant d.e = cast(NULL as STRING);
--
CreateConstantStatement [0-42] [create constant...as STRING)]
  PathExpression [16-19] [d.e]
    Identifier(d) [16-17] [d]
    Identifier(e) [18-19] [e]
  CastExpression [22-42] [cast(NULL as STRING)]
    NullLiteral(NULL) [27-31] [NULL]
    SimpleType [35-41] [STRING]
      PathExpression [35-41] [STRING]
        Identifier(STRING) [35-41] [STRING]
--
CREATE CONSTANT d.e = CAST(NULL AS STRING)
==

create constant a = (select 1 from foo);
--
CreateConstantStatement [0-39] [create constant...from foo)]
  PathExpression [16-17] [a]
    Identifier(a) [16-17] [a]
  ExpressionSubquery [20-39] [(select 1 from foo)]
    Query [21-38] [select 1 from foo]
      Select [21-38] [select 1 from foo]
        SelectList [28-29] [1]
          SelectColumn [28-29] [1]
            IntLiteral(1) [28-29] [1]
        FromClause [30-38] [from foo]
          TablePathExpression [35-38] [foo]
            PathExpression [35-38] [foo]
              Identifier(foo) [35-38] [foo]
--
CREATE CONSTANT a = (
  SELECT
    1
  FROM
    foo
)
==

create {{temp|temporary|public|private}} constant a = 0;
--
ALTERNATION GROUP: temp
--
CreateConstantStatement(is_temp) [0-26] [create temp constant a = 0]
  PathExpression [21-22] [a]
    Identifier(a) [21-22] [a]
  IntLiteral(0) [25-26] [0]
--
CREATE TEMP CONSTANT a = 0
--
ALTERNATION GROUP: temporary
--
CreateConstantStatement(is_temp) [0-31] [create temporary...stant a = 0]
  PathExpression [26-27] [a]
    Identifier(a) [26-27] [a]
  IntLiteral(0) [30-31] [0]
--
CREATE TEMP CONSTANT a = 0
--
ALTERNATION GROUP: public
--
CreateConstantStatement(is_public) [0-28] [create public constant a = 0]
  PathExpression [23-24] [a]
    Identifier(a) [23-24] [a]
  IntLiteral(0) [27-28] [0]
--
CREATE PUBLIC CONSTANT a = 0
--
ALTERNATION GROUP: private
--
CreateConstantStatement(is_private) [0-29] [create private constant a = 0]
  PathExpression [24-25] [a]
    Identifier(a) [24-25] [a]
  IntLiteral(0) [28-29] [0]
--
CREATE PRIVATE CONSTANT a = 0
==

create or replace constant constant = 1;
--
CreateConstantStatement(is_or_replace) [0-39] [create or...constant = 1]
  PathExpression [27-35] [constant]
    Identifier(constant) [27-35] [constant]
  IntLiteral(1) [38-39] [1]
--
CREATE OR REPLACE CONSTANT constant = 1
==

create constant if not exists foo = 1;
--
CreateConstantStatement(is_if_not_exists) [0-37] [create constant...ists foo = 1]
  PathExpression [30-33] [foo]
    Identifier(foo) [30-33] [foo]
  IntLiteral(1) [36-37] [1]
--
CREATE CONSTANT IF NOT EXISTS foo = 1
==

# Test all combinations of the modifiers.  They all parse ok, although
# OR REPLACE and IF NOT EXISTS are semantically exclusive.
create {{|or replace}} {{temp|temporary|public|private}}
constant {{|if not exists}} a = 0;
--
ALTERNATION GROUP: temp,
--
CreateConstantStatement(is_temp) [0-28] [create  temp constant  a = 0]
  PathExpression [23-24] [a]
    Identifier(a) [23-24] [a]
  IntLiteral(0) [27-28] [0]
--
CREATE TEMP CONSTANT a = 0
--
ALTERNATION GROUP: temp,if not exists
--
CreateConstantStatement(is_temp, is_if_not_exists) [0-41] [create  temp...exists a = 0]
  PathExpression [36-37] [a]
    Identifier(a) [36-37] [a]
  IntLiteral(0) [40-41] [0]
--
CREATE TEMP CONSTANT IF NOT EXISTS a = 0
--
ALTERNATION GROUP: temporary,
--
CreateConstantStatement(is_temp) [0-33] [create  temporary...ant  a = 0]
  PathExpression [28-29] [a]
    Identifier(a) [28-29] [a]
  IntLiteral(0) [32-33] [0]
--
CREATE TEMP CONSTANT a = 0
--
ALTERNATION GROUP: temporary,if not exists
--
CreateConstantStatement(is_temp, is_if_not_exists) [0-46] [create  temporary...ists a = 0]
  PathExpression [41-42] [a]
    Identifier(a) [41-42] [a]
  IntLiteral(0) [45-46] [0]
--
CREATE TEMP CONSTANT IF NOT EXISTS a = 0
--
ALTERNATION GROUP: public,
--
CreateConstantStatement(is_public) [0-30] [create  public constant  a = 0]
  PathExpression [25-26] [a]
    Identifier(a) [25-26] [a]
  IntLiteral(0) [29-30] [0]
--
CREATE PUBLIC CONSTANT a = 0
--
ALTERNATION GROUP: public,if not exists
--
CreateConstantStatement(is_public, is_if_not_exists) [0-43] [create  public...exists a = 0]
  PathExpression [38-39] [a]
    Identifier(a) [38-39] [a]
  IntLiteral(0) [42-43] [0]
--
CREATE PUBLIC CONSTANT IF NOT EXISTS a = 0
--
ALTERNATION GROUP: private,
--
CreateConstantStatement(is_private) [0-31] [create  private...stant  a = 0]
  PathExpression [26-27] [a]
    Identifier(a) [26-27] [a]
  IntLiteral(0) [30-31] [0]
--
CREATE PRIVATE CONSTANT a = 0
--
ALTERNATION GROUP: private,if not exists
--
CreateConstantStatement(is_private, is_if_not_exists) [0-44] [create  private...exists a = 0]
  PathExpression [39-40] [a]
    Identifier(a) [39-40] [a]
  IntLiteral(0) [43-44] [0]
--
CREATE PRIVATE CONSTANT IF NOT EXISTS a = 0
--
ALTERNATION GROUP: or replace,temp,
--
CreateConstantStatement(is_temp, is_or_replace) [0-38] [create or...constant  a = 0]
  PathExpression [33-34] [a]
    Identifier(a) [33-34] [a]
  IntLiteral(0) [37-38] [0]
--
CREATE OR REPLACE TEMP CONSTANT a = 0
--
ALTERNATION GROUP: or replace,temp,if not exists
--
CreateConstantStatement(is_temp, is_or_replace, is_if_not_exists) [0-51] [create or...exists a = 0]
  PathExpression [46-47] [a]
    Identifier(a) [46-47] [a]
  IntLiteral(0) [50-51] [0]
--
CREATE OR REPLACE TEMP CONSTANT IF NOT EXISTS a = 0
--
ALTERNATION GROUP: or replace,temporary,
--
CreateConstantStatement(is_temp, is_or_replace) [0-43] [create or...constant  a = 0]
  PathExpression [38-39] [a]
    Identifier(a) [38-39] [a]
  IntLiteral(0) [42-43] [0]
--
CREATE OR REPLACE TEMP CONSTANT a = 0
--
ALTERNATION GROUP: or replace,temporary,if not exists
--
CreateConstantStatement(is_temp, is_or_replace, is_if_not_exists) [0-56] [create or...exists a = 0]
  PathExpression [51-52] [a]
    Identifier(a) [51-52] [a]
  IntLiteral(0) [55-56] [0]
--
CREATE OR REPLACE TEMP CONSTANT IF NOT EXISTS a = 0
--
ALTERNATION GROUP: or replace,public,
--
CreateConstantStatement(is_public, is_or_replace) [0-40] [create or...constant  a = 0]
  PathExpression [35-36] [a]
    Identifier(a) [35-36] [a]
  IntLiteral(0) [39-40] [0]
--
CREATE OR REPLACE PUBLIC CONSTANT a = 0
--
ALTERNATION GROUP: or replace,public,if not exists
--
CreateConstantStatement(is_public, is_or_replace, is_if_not_exists) [0-53] [create or...exists a = 0]
  PathExpression [48-49] [a]
    Identifier(a) [48-49] [a]
  IntLiteral(0) [52-53] [0]
--
CREATE OR REPLACE PUBLIC CONSTANT IF NOT EXISTS a = 0
--
ALTERNATION GROUP: or replace,private,
--
CreateConstantStatement(is_private, is_or_replace) [0-41] [create or...constant  a = 0]
  PathExpression [36-37] [a]
    Identifier(a) [36-37] [a]
  IntLiteral(0) [40-41] [0]
--
CREATE OR REPLACE PRIVATE CONSTANT a = 0
--
ALTERNATION GROUP: or replace,private,if not exists
--
CreateConstantStatement(is_private, is_or_replace, is_if_not_exists) [0-54] [create or...exists a = 0]
  PathExpression [49-50] [a]
    Identifier(a) [49-50] [a]
  IntLiteral(0) [53-54] [0]
--
CREATE OR REPLACE PRIVATE CONSTANT IF NOT EXISTS a = 0
==

create constant function = 5;
--
CreateConstantStatement [0-28] [create constant function = 5]
  PathExpression [16-24] [function]
    Identifier("function") [16-24] [function]
  IntLiteral(5) [27-28] [5]
--
CREATE CONSTANT "function" = 5
==

create constant table = 'a';
--
CreateConstantStatement [0-27] [create constant table = 'a']
  PathExpression [16-21] [table]
    Identifier(table) [16-21] [table]
  StringLiteral('a') [24-27] ['a']
--
CREATE CONSTANT table = 'a'
==

create constant;
--
ERROR: Syntax error: Unexpected ";" [at 1:16]
create constant;
               ^
==

create constant foo;
--
ERROR: Syntax error: Expected "." or "=" but got ";" [at 1:20]
create constant foo;
                   ^
==

create constant foo =;
--
ERROR: Syntax error: Unexpected ";" [at 1:22]
create constant foo =;
                     ^
==

create constant = 42;
--
ERROR: Syntax error: Unexpected "=" [at 1:17]
create constant = 42;
                ^
==

create constant a 5;
--
ERROR: Syntax error: Expected "." or "=" but got integer literal "5" [at 1:19]
create constant a 5;
                  ^
==

create constant a as 5;
--
ERROR: Syntax error: Expected "." or "=" but got keyword AS [at 1:19]
create constant a as 5;
                  ^
==

create constant * = 5;
--
ERROR: Syntax error: Unexpected "*" [at 1:17]
create constant * = 5;
                ^
==

# Cannot create a constant without backticks whose name could be interpreted as
# a system variable.
create constant @@a = 1;
--
ERROR: Syntax error: Unexpected "@@" [at 1:17]
create constant @@a = 1;
                ^

==

# Can create a constant whose name could be interpreted as a system variable.
create constant "@@a" = 1;
--
CreateConstantStatement [0-25] [create constant "@@a" = 1]
  PathExpression [16-21] ["@@a"]
    Identifier("@@a") [16-21] ["@@a"]
  IntLiteral(1) [24-25] [1]
--
CREATE CONSTANT "@@a" = 1
