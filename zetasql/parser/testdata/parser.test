[default language_features=V_1_3_BRACED_PROTO_CONSTRUCTORS]
select 1;
--
QueryStatement [0-8] [select 1]
  Query [0-8] [select 1]
    Select [0-8] [select 1]
      SelectList [7-8] [1]
        SelectColumn [7-8] [1]
          IntLiteral(1) [7-8] [1]
--
SELECT
  1
==

select 1; # NBSP
--
QueryStatement [0-9] [select 1]
  Query [0-9] [select 1]
    Select [0-9] [select 1]
      SelectList [8-9] [1]
        SelectColumn [8-9] [1]
          IntLiteral(1) [8-9] [1]
--
SELECT
  1
==

# Incorrect query with NBSP inside
select    -
--
ERROR: Syntax error: Unexpected end of statement [at 1:12]
select    -
           ^
==

select
# full line comment
/* block
   comment */
\-- full line comment
1# partial line comment
+-- partial line comment
2/*partial line block comment*/+3;
--
QueryStatement [0-153] [select # full...comment*/+3]
  Query [0-153] [select # full...comment*/+3]
    Select [0-153] [select # full...comment*/+3]
      SelectList [71-153] [1# partial...comment*/+3]
        SelectColumn [71-153] [1# partial...comment*/+3]
          BinaryExpression(+) [71-153] [1# partial...comment*/+3]
            BinaryExpression(+) [71-121] [1# partial...comment 2]
              IntLiteral(1) [71-72] [1]
              IntLiteral(2) [120-121] [2]
            IntLiteral(3) [152-153] [3]
--
SELECT
  1 + 2 + 3
==

select /* incorrect
block
 */ comment */ 1
--
ERROR: Syntax error: Unexpected "/" [at 3:14]
 */ comment */ 1
             ^
==

select /* block comment */
/* contiguous block comment */ 1
--
QueryStatement [0-59] [select /*...comment */ 1]
  Query [0-59] [select /*...comment */ 1]
    Select [0-59] [select /*...comment */ 1]
      SelectList [58-59] [1]
        SelectColumn [58-59] [1]
          IntLiteral(1) [58-59] [1]
--
SELECT
  1
==

# This is an empty input. (The test framework strips off #-comments.)
--
ERROR: Syntax error: Unexpected end of statement [at 1:1]

^
==

\-- Comment without query. Should give an error in the parser.
--
ERROR: Syntax error: Unexpected end of statement [at 2:1]

^
==

\# Comment without query.
--
ERROR: Syntax error: Unexpected end of statement [at 2:1]

^
==

/* Another comment without query */
--
ERROR: Syntax error: Unexpected end of statement [at 1:36]
/* Another comment without query */
                                   ^
==

select /* unclosed block comment
--
ERROR: Syntax error: Unclosed comment [at 1:8]
select /* unclosed block comment
       ^
==

select--comment
\--comment
1 -- comment
+--
2--comment
--
QueryStatement [0-44] [select--comment...omment +-- 2]
  Query [0-44] [select--comment...omment +-- 2]
    Select [0-44] [select--comment...omment +-- 2]
      SelectList [26-44] [1 -- comment +-- 2]
        SelectColumn [26-44] [1 -- comment +-- 2]
          BinaryExpression(+) [26-44] [1 -- comment +-- 2]
            IntLiteral(1) [26-27] [1]
            IntLiteral(2) [43-44] [2]
--
SELECT
  1 + 2
==

# "--" with no space.
select --
5
--
QueryStatement [0-11] [select -- 5]
  Query [0-11] [select -- 5]
    Select [0-11] [select -- 5]
      SelectList [10-11] [5]
        SelectColumn [10-11] [5]
          IntLiteral(5) [10-11] [5]
--
SELECT
  5
==

# "-- " with a space.
select -- 
5
--
QueryStatement [0-12] [select --  5]
  Query [0-12] [select --  5]
    Select [0-12] [select --  5]
      SelectList [11-12] [5]
        SelectColumn [11-12] [5]
          IntLiteral(5) [11-12] [5]
--
SELECT
  5
==

select --1
--
ERROR: Syntax error: Unexpected end of statement [at 2:1]

^
==

select -- 1
--
ERROR: Syntax error: Unexpected end of statement [at 2:1]

^
==

select ---1
--
ERROR: Syntax error: Unexpected end of statement [at 2:1]

^
==

select --- 1
2
--
QueryStatement [0-14] [select --- 1 2]
  Query [0-14] [select --- 1 2]
    Select [0-14] [select --- 1 2]
      SelectList [13-14] [2]
        SelectColumn [13-14] [2]
          IntLiteral(2) [13-14] [2]
--
SELECT
  2
==

select - - 1
--
QueryStatement [0-12] [select - - 1]
  Query [0-12] [select - - 1]
    Select [0-12] [select - - 1]
      SelectList [7-12] [- - 1]
        SelectColumn [7-12] [- - 1]
          UnaryExpression(-) [7-12] [- - 1]
            UnaryExpression(-) [9-12] [- 1]
              IntLiteral(1) [11-12] [1]
--
SELECT
  - -1
==

select - - - - - - - 1
--
QueryStatement [0-22] [select - - - - - - - 1]
  Query [0-22] [select - - - - - - - 1]
    Select [0-22] [select - - - - - - - 1]
      SelectList [7-22] [- - - - - - - 1]
        SelectColumn [7-22] [- - - - - - - 1]
          UnaryExpression(-) [7-22] [- - - - - - - 1]
            UnaryExpression(-) [9-22] [- - - - - - 1]
              UnaryExpression(-) [11-22] [- - - - - 1]
                UnaryExpression(-) [13-22] [- - - - 1]
                  UnaryExpression(-) [15-22] [- - - 1]
                    UnaryExpression(-) [17-22] [- - 1]
                      UnaryExpression(-) [19-22] [- 1]
                        IntLiteral(1) [21-22] [1]
--
SELECT
  - - - - - - -1
==

# No comments inside strings.
select "abc -- def",
       "abc # def",
       "abc /* def */ ghi"
--
QueryStatement [0-67] [select "abc...def */ ghi"]
  Query [0-67] [select "abc...def */ ghi"]
    Select [0-67] [select "abc...def */ ghi"]
      SelectList [7-67] ["abc -- def...def */ ghi"]
        SelectColumn [7-19] ["abc -- def"]
          StringLiteral("abc -- def") [7-19] ["abc -- def"]
        SelectColumn [28-39] ["abc # def"]
          StringLiteral("abc # def") [28-39] ["abc # def"]
        SelectColumn [48-67] ["abc /* def */ ghi"]
          StringLiteral("abc /* def */ ghi") [48-67] ["abc /* def */ ghi"]
--
SELECT
  "abc -- def",
  "abc # def",
  "abc /* def */ ghi"
==

select /* no nested comments # -- /* */ 1;
--
QueryStatement [0-41] [select /*...-- /* */ 1]
  Query [0-41] [select /*...-- /* */ 1]
    Select [0-41] [select /*...-- /* */ 1]
      SelectList [40-41] [1]
        SelectColumn [40-41] [1]
          IntLiteral(1) [40-41] [1]
--
SELECT
  1
==

select f1, f2 from T
--
QueryStatement [0-20] [select f1, f2 from T]
  Query [0-20] [select f1, f2 from T]
    Select [0-20] [select f1, f2 from T]
      SelectList [7-13] [f1, f2]
        SelectColumn [7-9] [f1]
          PathExpression [7-9] [f1]
            Identifier(f1) [7-9] [f1]
        SelectColumn [11-13] [f2]
          PathExpression [11-13] [f2]
            Identifier(f2) [11-13] [f2]
      FromClause [14-20] [from T]
        TablePathExpression [19-20] [T]
          PathExpression [19-20] [T]
            Identifier(T) [19-20] [T]
--
SELECT
  f1,
  f2
FROM
  T
==

explain select 1;
--
ExplainStatement [0-16] [explain select 1]
  QueryStatement [8-16] [select 1]
    Query [8-16] [select 1]
      Select [8-16] [select 1]
        SelectList [15-16] [1]
          SelectColumn [15-16] [1]
            IntLiteral(1) [15-16] [1]
--
EXPLAIN
SELECT
  1
==

# This parses but will give an analysis error.
EXPLAIN EXPLAIN SELECT 1;
--
ExplainStatement [0-24] [EXPLAIN EXPLAIN SELECT 1]
  ExplainStatement [8-24] [EXPLAIN SELECT 1]
    QueryStatement [16-24] [SELECT 1]
      Query [16-24] [SELECT 1]
        Select [16-24] [SELECT 1]
          SelectList [23-24] [1]
            SelectColumn [23-24] [1]
              IntLiteral(1) [23-24] [1]
--
EXPLAIN EXPLAIN
SELECT
  1
==

# You cannot explain a script statement, even inside of a script.
[mode=script]
EXPLAIN IF TRUE THEN SELECT 3; END IF;
--
ERROR: Syntax error: Unexpected keyword IF [at 1:9]
EXPLAIN IF TRUE THEN SELECT 3; END IF;
        ^
==

SELECT * FROM (EXPLAIN SELECT 1);
--
ERROR: Syntax error: Expected keyword JOIN but got keyword SELECT [at 1:24]
SELECT * FROM (EXPLAIN SELECT 1);
                       ^
==

select f1, `f 2` from T where b;
--
QueryStatement [0-31] [select f1,...T where b]
  Query [0-31] [select f1,...T where b]
    Select [0-31] [select f1,...T where b]
      SelectList [7-16] [f1, `f 2`]
        SelectColumn [7-9] [f1]
          PathExpression [7-9] [f1]
            Identifier(f1) [7-9] [f1]
        SelectColumn [11-16] [`f 2`]
          PathExpression [11-16] [`f 2`]
            Identifier("f 2") [11-16] [`f 2`]
      FromClause [17-23] [from T]
        TablePathExpression [22-23] [T]
          PathExpression [22-23] [T]
            Identifier(T) [22-23] [T]
      WhereClause [24-31] [where b]
        PathExpression [30-31] [b]
          Identifier(b) [30-31] [b]
--
SELECT
  f1,
  `f 2`
FROM
  T
WHERE
  b
==

select f1, f2 from (select 1 f1, "b" f2);
--
QueryStatement [0-40] [select f1,...f1, "b" f2)]
  Query [0-40] [select f1,...f1, "b" f2)]
    Select [0-40] [select f1,...f1, "b" f2)]
      SelectList [7-13] [f1, f2]
        SelectColumn [7-9] [f1]
          PathExpression [7-9] [f1]
            Identifier(f1) [7-9] [f1]
        SelectColumn [11-13] [f2]
          PathExpression [11-13] [f2]
            Identifier(f2) [11-13] [f2]
      FromClause [14-40] [from (select 1 f1, "b" f2)]
        TableSubquery [19-40] [(select 1 f1, "b" f2)]
          Query [20-39] [select 1 f1, "b" f2]
            Select [20-39] [select 1 f1, "b" f2]
              SelectList [27-39] [1 f1, "b" f2]
                SelectColumn [27-31] [1 f1]
                  IntLiteral(1) [27-28] [1]
                  Alias [29-31] [f1]
                    Identifier(f1) [29-31] [f1]
                SelectColumn [33-39] ["b" f2]
                  StringLiteral("b") [33-36] ["b"]
                  Alias [37-39] [f2]
                    Identifier(f2) [37-39] [f2]
--
SELECT
  f1,
  f2
FROM
  (
    SELECT
      1 AS f1,
      "b" AS f2
  )
==

select f1 from (select 1 f1) AS subquery_alias_1, (select 1 f1) subquery_alias_2
--
QueryStatement [0-80] [select f1...subquery_alias_2]
  Query [0-80] [select f1...subquery_alias_2]
    Select [0-80] [select f1...subquery_alias_2]
      SelectList [7-9] [f1]
        SelectColumn [7-9] [f1]
          PathExpression [7-9] [f1]
            Identifier(f1) [7-9] [f1]
      FromClause [10-80] [from (select...ubquery_alias_2]
        Join(COMMA) [15-80] [(select 1...subquery_alias_2]
          TableSubquery [15-48] [(select 1...subquery_alias_1]
            Query [16-27] [select 1 f1]
              Select [16-27] [select 1 f1]
                SelectList [23-27] [1 f1]
                  SelectColumn [23-27] [1 f1]
                    IntLiteral(1) [23-24] [1]
                    Alias [25-27] [f1]
                      Identifier(f1) [25-27] [f1]
            Alias [29-48] [AS subquery_alias_1]
              Identifier(subquery_alias_1) [32-48] [subquery_alias_1]
          Location [48-49] [,]
          TableSubquery [50-80] [(select 1 f1) subquery_alias_2]
            Query [51-62] [select 1 f1]
              Select [51-62] [select 1 f1]
                SelectList [58-62] [1 f1]
                  SelectColumn [58-62] [1 f1]
                    IntLiteral(1) [58-59] [1]
                    Alias [60-62] [f1]
                      Identifier(f1) [60-62] [f1]
            Alias [64-80] [subquery_alias_2]
              Identifier(subquery_alias_2) [64-80] [subquery_alias_2]
--
SELECT
  f1
FROM
  (
    SELECT
      1 AS f1
  ) AS subquery_alias_1,
  (
    SELECT
      1 AS f1
  ) AS subquery_alias_2
==

select hll_count.extract(hll_count.merge(foo)) from bar;
--
QueryStatement [0-55] [select hll_count...) from bar]
  Query [0-55] [select hll_count...) from bar]
    Select [0-55] [select hll_count...) from bar]
      SelectList [7-46] [hll_count....merge(foo))]
        SelectColumn [7-46] [hll_count....merge(foo))]
          FunctionCall [7-46] [hll_count....merge(foo))]
            PathExpression [7-24] [hll_count.extract]
              Identifier(hll_count) [7-16] [hll_count]
              Identifier("extract") [17-24] [extract]
            FunctionCall [25-45] [hll_count.merge(foo)]
              PathExpression [25-40] [hll_count.merge]
                Identifier(hll_count) [25-34] [hll_count]
                Identifier("merge") [35-40] [merge]
              PathExpression [41-44] [foo]
                Identifier(foo) [41-44] [foo]
      FromClause [47-55] [from bar]
        TablePathExpression [52-55] [bar]
          PathExpression [52-55] [bar]
            Identifier(bar) [52-55] [bar]
--
SELECT
  hll_count.`extract`(hll_count.`merge`(foo))
FROM
  bar
==

select d3a_count.extract(d3a_count.merge(foo)) from bar;
--
QueryStatement [0-55] [select d3a_count...) from bar]
  Query [0-55] [select d3a_count...) from bar]
    Select [0-55] [select d3a_count...) from bar]
      SelectList [7-46] [d3a_count....merge(foo))]
        SelectColumn [7-46] [d3a_count....merge(foo))]
          FunctionCall [7-46] [d3a_count....merge(foo))]
            PathExpression [7-24] [d3a_count.extract]
              Identifier(d3a_count) [7-16] [d3a_count]
              Identifier("extract") [17-24] [extract]
            FunctionCall [25-45] [d3a_count.merge(foo)]
              PathExpression [25-40] [d3a_count.merge]
                Identifier(d3a_count) [25-34] [d3a_count]
                Identifier("merge") [35-40] [merge]
              PathExpression [41-44] [foo]
                Identifier(foo) [41-44] [foo]
      FromClause [47-55] [from bar]
        TablePathExpression [52-55] [bar]
          PathExpression [52-55] [bar]
            Identifier(bar) [52-55] [bar]
--
SELECT
  d3a_count.`extract`(d3a_count.`merge`(foo))
FROM
  bar
==

select a AND b from T;
--
QueryStatement [0-21] [select a AND b from T]
  Query [0-21] [select a AND b from T]
    Select [0-21] [select a AND b from T]
      SelectList [7-14] [a AND b]
        SelectColumn [7-14] [a AND b]
          AndExpr [7-14] [a AND b]
            PathExpression [7-8] [a]
              Identifier(a) [7-8] [a]
            PathExpression [13-14] [b]
              Identifier(b) [13-14] [b]
      FromClause [15-21] [from T]
        TablePathExpression [20-21] [T]
          PathExpression [20-21] [T]
            Identifier(T) [20-21] [T]
--
SELECT
  a AND b
FROM
  T
==



select f(x + y) from A;
--
QueryStatement [0-22] [select f(x + y) from A]
  Query [0-22] [select f(x + y) from A]
    Select [0-22] [select f(x + y) from A]
      SelectList [7-15] [f(x + y)]
        SelectColumn [7-15] [f(x + y)]
          FunctionCall [7-15] [f(x + y)]
            PathExpression [7-8] [f]
              Identifier(f) [7-8] [f]
            BinaryExpression(+) [9-14] [x + y]
              PathExpression [9-10] [x]
                Identifier(x) [9-10] [x]
              PathExpression [13-14] [y]
                Identifier(y) [13-14] [y]
      FromClause [16-22] [from A]
        TablePathExpression [21-22] [A]
          PathExpression [21-22] [A]
            Identifier(A) [21-22] [A]
--
SELECT
  f(x + y)
FROM
  A
==

select count(abc.def), count(*), anon_count(*, 0, 1) from T;
--
QueryStatement [0-59] [select count...1) from T]
  Query [0-59] [select count...1) from T]
    Select [0-59] [select count...1) from T]
      SelectList [7-52] [count(abc....on_count(*, 0, 1)]
        SelectColumn [7-21] [count(abc.def)]
          FunctionCall [7-21] [count(abc.def)]
            PathExpression [7-12] [count]
              Identifier(count) [7-12] [count]
            PathExpression [13-20] [abc.def]
              Identifier(abc) [13-16] [abc]
              Identifier(def) [17-20] [def]
        SelectColumn [23-31] [count(*)]
          FunctionCall [23-31] [count(*)]
            PathExpression [23-28] [count]
              Identifier(count) [23-28] [count]
            Star(*) [29-30] [*]
        SelectColumn [33-52] [anon_count(*, 0, 1)]
          FunctionCall [33-52] [anon_count(*, 0, 1)]
            PathExpression [33-43] [anon_count]
              Identifier(anon_count) [33-43] [anon_count]
            Star(*) [44-45] [*]
            IntLiteral(0) [47-48] [0]
            IntLiteral(1) [50-51] [1]
      FromClause [53-59] [from T]
        TablePathExpression [58-59] [T]
          PathExpression [58-59] [T]
            Identifier(T) [58-59] [T]
--
SELECT
  count(abc.def),
  count(*),
  anon_count(*, 0, 1)
FROM
  T
==

select a.b.f(x.y) from T;
--
QueryStatement [0-24] [select a.b.f(x.y) from T]
  Query [0-24] [select a.b.f(x.y) from T]
    Select [0-24] [select a.b.f(x.y) from T]
      SelectList [7-17] [a.b.f(x.y)]
        SelectColumn [7-17] [a.b.f(x.y)]
          FunctionCall [7-17] [a.b.f(x.y)]
            PathExpression [7-12] [a.b.f]
              Identifier(a) [7-8] [a]
              Identifier(b) [9-10] [b]
              Identifier(f) [11-12] [f]
            PathExpression [13-16] [x.y]
              Identifier(x) [13-14] [x]
              Identifier(y) [15-16] [y]
      FromClause [18-24] [from T]
        TablePathExpression [23-24] [T]
          PathExpression [23-24] [T]
            Identifier(T) [23-24] [T]
--
SELECT
  a.b.f(x.y)
FROM
  T
==

select *, a.b.f(x.y) from T;
--
QueryStatement [0-27] [select *, a.b.f(x.y) from T]
  Query [0-27] [select *, a.b.f(x.y) from T]
    Select [0-27] [select *, a.b.f(x.y) from T]
      SelectList [7-20] [*, a.b.f(x.y)]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
        SelectColumn [10-20] [a.b.f(x.y)]
          FunctionCall [10-20] [a.b.f(x.y)]
            PathExpression [10-15] [a.b.f]
              Identifier(a) [10-11] [a]
              Identifier(b) [12-13] [b]
              Identifier(f) [14-15] [f]
            PathExpression [16-19] [x.y]
              Identifier(x) [16-17] [x]
              Identifier(y) [18-19] [y]
      FromClause [21-27] [from T]
        TablePathExpression [26-27] [T]
          PathExpression [26-27] [T]
            Identifier(T) [26-27] [T]
--
SELECT
  *,
  a.b.f(x.y)
FROM
  T
==

select f(g(x)), f(1), h() AS foo from T;
--
QueryStatement [0-39] [select f(g...foo from T]
  Query [0-39] [select f(g...foo from T]
    Select [0-39] [select f(g...foo from T]
      SelectList [7-32] [f(g(x)), f(1), h() AS foo]
        SelectColumn [7-14] [f(g(x))]
          FunctionCall [7-14] [f(g(x))]
            PathExpression [7-8] [f]
              Identifier(f) [7-8] [f]
            FunctionCall [9-13] [g(x)]
              PathExpression [9-10] [g]
                Identifier(g) [9-10] [g]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
        SelectColumn [16-20] [f(1)]
          FunctionCall [16-20] [f(1)]
            PathExpression [16-17] [f]
              Identifier(f) [16-17] [f]
            IntLiteral(1) [18-19] [1]
        SelectColumn [22-32] [h() AS foo]
          FunctionCall [22-25] [h()]
            PathExpression [22-23] [h]
              Identifier(h) [22-23] [h]
          Alias [26-32] [AS foo]
            Identifier(foo) [29-32] [foo]
      FromClause [33-39] [from T]
        TablePathExpression [38-39] [T]
          PathExpression [38-39] [T]
            Identifier(T) [38-39] [T]
--
SELECT
  f(g(x)),
  f(1),
  h() AS foo
FROM
  T
==

# Parenthesized path expressions are not allowed here.
select foo AS (path.expression) from T
--
ERROR: Syntax error: Unexpected "(" [at 1:15]
select foo AS (path.expression) from T
              ^
==

# Parenthesized path expressions are not allowed here (even though this one does
# not have a dot).
select foo AS (path) from T
--
ERROR: Syntax error: Unexpected "(" [at 1:15]
select foo AS (path) from T
              ^
==

select f(1, x, "a", true, g(y)) AS bar from T;
--
QueryStatement [0-45] [select f(1...bar from T]
  Query [0-45] [select f(1...bar from T]
    Select [0-45] [select f(1...bar from T]
      SelectList [7-38] [f(1, x, "a...y)) AS bar]
        SelectColumn [7-38] [f(1, x, "a...y)) AS bar]
          FunctionCall [7-31] [f(1, x, "a", true, g(y))]
            PathExpression [7-8] [f]
              Identifier(f) [7-8] [f]
            IntLiteral(1) [9-10] [1]
            PathExpression [12-13] [x]
              Identifier(x) [12-13] [x]
            StringLiteral("a") [15-18] ["a"]
            BooleanLiteral(true) [20-24] [true]
            FunctionCall [26-30] [g(y)]
              PathExpression [26-27] [g]
                Identifier(g) [26-27] [g]
              PathExpression [28-29] [y]
                Identifier(y) [28-29] [y]
          Alias [32-38] [AS bar]
            Identifier(bar) [35-38] [bar]
      FromClause [39-45] [from T]
        TablePathExpression [44-45] [T]
          PathExpression [44-45] [T]
            Identifier(T) [44-45] [T]
--
SELECT
  f(1, x, "a", true, g(y)) AS bar
FROM
  T
==

select -1, +2, NOT a from T;
--
QueryStatement [0-27] [select -1, +2, NOT a from T]
  Query [0-27] [select -1, +2, NOT a from T]
    Select [0-27] [select -1, +2, NOT a from T]
      SelectList [7-20] [-1, +2, NOT a]
        SelectColumn [7-9] [-1]
          UnaryExpression(-) [7-9] [-1]
            IntLiteral(1) [8-9] [1]
        SelectColumn [11-13] [+2]
          UnaryExpression(+) [11-13] [+2]
            IntLiteral(2) [12-13] [2]
        SelectColumn [15-20] [NOT a]
          UnaryExpression(NOT) [15-20] [NOT a]
            PathExpression [19-20] [a]
              Identifier(a) [19-20] [a]
      FromClause [21-27] [from T]
        TablePathExpression [26-27] [T]
          PathExpression [26-27] [T]
            Identifier(T) [26-27] [T]
--
SELECT
  -1,
  +2,
  NOT a
FROM
  T
==

select 1 as `This is an\\n\\talias on a new line.`
--
QueryStatement [0-50] [select 1 as...new line.`]
  Query [0-50] [select 1 as...new line.`]
    Select [0-50] [select 1 as...new line.`]
      SelectList [7-50] [1 as `This...new line.`]
        SelectColumn [7-50] [1 as `This...new line.`]
          IntLiteral(1) [7-8] [1]
          Alias [9-50] [as `This is...new line.`]
            Identifier("This is an\\n\\talias on a new line.") [12-50] [`This is an...new line.`]
--
SELECT
  1 AS `This is an\\n\\talias on a new line.`
==

# NOTE: Backslashes are being unescaped by the test framework.
select 1 as `\\t`, 2 as `\\n`, 3 as `\\010`, 4 as `\\xafh`, 5 as `\\u00045678`,
       6 as `\\U00045678`, '\\x53' as `\\x54`;
--
QueryStatement [0-125] [select 1 as...as `\\x54`]
  Query [0-125] [select 1 as...as `\\x54`]
    Select [0-125] [select 1 as...as `\\x54`]
      SelectList [7-125] [1 as `\\t`...as `\\x54`]
        SelectColumn [7-17] [1 as `\\t`]
          IntLiteral(1) [7-8] [1]
          Alias [9-17] [as `\\t`]
            Identifier("\\t") [12-17] [`\\t`]
        SelectColumn [19-29] [2 as `\\n`]
          IntLiteral(2) [19-20] [2]
          Alias [21-29] [as `\\n`]
            Identifier("\\n") [24-29] [`\\n`]
        SelectColumn [31-43] [3 as `\\010`]
          IntLiteral(3) [31-32] [3]
          Alias [33-43] [as `\\010`]
            Identifier("\\010") [36-43] [`\\010`]
        SelectColumn [45-58] [4 as `\\xafh`]
          IntLiteral(4) [45-46] [4]
          Alias [47-58] [as `\\xafh`]
            Identifier("\\xafh") [50-58] [`\\xafh`]
        SelectColumn [60-78] [5 as `\\u00045678`]
          IntLiteral(5) [60-61] [5]
          Alias [62-78] [as `\\u00045678`]
            Identifier("\\u00045678") [65-78] [`\\u00045678`]
        SelectColumn [87-105] [6 as `\\U00045678`]
          IntLiteral(6) [87-88] [6]
          Alias [89-105] [as `\\U00045678`]
            Identifier("\\U00045678") [92-105] [`\\U00045678`]
        SelectColumn [107-125] ['\\x53' as `\\x54`]
          StringLiteral('\\x53') [107-114] ['\\x53']
          Alias [115-125] [as `\\x54`]
            Identifier("\\x54") [118-125] [`\\x54`]
--
SELECT
  1 AS `\\t`,
  2 AS `\\n`,
  3 AS `\\010`,
  4 AS `\\xafh`,
  5 AS `\\u00045678`,
  6 AS `\\U00045678`,
  '\\x53' AS `\\x54`
==

select '\\u1235' as `\\u1234`, "\\U00012346" as `\\U00012345`;
--
QueryStatement [0-61] [select '\\...U00012345`]
  Query [0-61] [select '\\...U00012345`]
    Select [0-61] [select '\\...U00012345`]
      SelectList [7-61] ['\\u1235'...U00012345`]
        SelectColumn [7-29] ['\\u1235' as `\\u1234`]
          StringLiteral('\\u1235') [7-16] ['\\u1235']
          Alias [17-29] [as `\\u1234`]
            Identifier("\\u1234") [20-29] [`\\u1234`]
        SelectColumn [31-61] ["\\U00012346" as `\\U00012345`]
          StringLiteral("\\U00012346") [31-44] ["\\U00012346"]
          Alias [45-61] [as `\\U00012345`]
            Identifier("\\U00012345") [48-61] [`\\U00012345`]
--
SELECT
  '\\u1235' AS `\\u1234`,
  "\\U00012346" AS `\\U00012345`
==

SELECT fake_alias_function(1 as example_alias)
--
QueryStatement [0-46] [SELECT fake_alias...ple_alias)]
  Query [0-46] [SELECT fake_alias...ple_alias)]
    Select [0-46] [SELECT fake_alias...ple_alias)]
      SelectList [7-46] [fake_alias_functi...ple_alias)]
        SelectColumn [7-46] [fake_alias_functi...ple_alias)]
          FunctionCall [7-46] [fake_alias_functi...ple_alias)]
            PathExpression [7-26] [fake_alias_function]
              Identifier(fake_alias_function) [7-26] [fake_alias_function]
            ExpressionWithAlias [27-45] [1 as example_alias]
              IntLiteral(1) [27-28] [1]
              Alias [29-45] [as example_alias]
                Identifier(example_alias) [32-45] [example_alias]
--
SELECT
  fake_alias_function(1 AS example_alias)
==

SELECT fake_cast(1 as zetasql_test__.KitchenSinkPB)
--
ERROR: Syntax error: Expected ")" but got "." [at 1:37]
SELECT fake_cast(1 as zetasql_test__.KitchenSinkPB)
                                    ^
==

SELECT safe.cast(1 as int32)
--
QueryStatement [0-28] [SELECT safe.cast(1 as int32)]
  Query [0-28] [SELECT safe.cast(1 as int32)]
    Select [0-28] [SELECT safe.cast(1 as int32)]
      SelectList [7-28] [safe.cast(1 as int32)]
        SelectColumn [7-28] [safe.cast(1 as int32)]
          FunctionCall [7-28] [safe.cast(1 as int32)]
            PathExpression [7-16] [safe.cast]
              Identifier(safe) [7-11] [safe]
              Identifier("cast") [12-16] [cast]
            ExpressionWithAlias [17-27] [1 as int32]
              IntLiteral(1) [17-18] [1]
              Alias [19-27] [as int32]
                Identifier(int32) [22-27] [int32]
--
SELECT
  safe.`cast`(1 AS int32)
==

select {{safe_cast|cast}}("1" as int32);
--
ALTERNATION GROUP: safe_cast
--
QueryStatement [0-30] [select safe_cast("1" as int32)]
  Query [0-30] [select safe_cast("1" as int32)]
    Select [0-30] [select safe_cast("1" as int32)]
      SelectList [7-30] [safe_cast("1" as int32)]
        SelectColumn [7-30] [safe_cast("1" as int32)]
          FunctionCall [7-30] [safe_cast("1" as int32)]
            PathExpression [7-16] [safe_cast]
              Identifier(safe_cast) [7-16] [safe_cast]
            ExpressionWithAlias [17-29] ["1" as int32]
              StringLiteral("1") [17-20] ["1"]
              Alias [21-29] [as int32]
                Identifier(int32) [24-29] [int32]
--
SELECT
  safe_cast("1" AS int32)
--
ALTERNATION GROUP: cast
--
QueryStatement [0-25] [select cast("1" as int32)]
  Query [0-25] [select cast("1" as int32)]
    Select [0-25] [select cast("1" as int32)]
      SelectList [7-25] [cast("1" as int32)]
        SelectColumn [7-25] [cast("1" as int32)]
          CastExpression [7-25] [cast("1" as int32)]
            StringLiteral("1") [12-15] ["1"]
            SimpleType [19-24] [int32]
              PathExpression [19-24] [int32]
                Identifier(int32) [19-24] [int32]
--
SELECT
  CAST("1" AS int32)
==

select cast(x as string(10));
--
QueryStatement [0-28] [select cast(x as string(10))]
  Query [0-28] [select cast(x as string(10))]
    Select [0-28] [select cast(x as string(10))]
      SelectList [7-28] [cast(x as string(10))]
        SelectColumn [7-28] [cast(x as string(10))]
          CastExpression [7-28] [cast(x as string(10))]
            PathExpression [12-13] [x]
              Identifier(x) [12-13] [x]
            SimpleType [17-27] [string(10)]
              PathExpression [17-23] [string]
                Identifier(string) [17-23] [string]
              TypeParameterList [23-26] [(10]
                IntLiteral(10) [24-26] [10]
--
SELECT
  CAST(x AS string(10))
==

select cast(x as string collate 'und:ci');
--
QueryStatement [0-41] [select cast...'und:ci')]
  Query [0-41] [select cast...'und:ci')]
    Select [0-41] [select cast...'und:ci')]
      SelectList [7-41] [cast(x as...'und:ci')]
        SelectColumn [7-41] [cast(x as...'und:ci')]
          CastExpression [7-41] [cast(x as...'und:ci')]
            PathExpression [12-13] [x]
              Identifier(x) [12-13] [x]
            SimpleType [17-40] [string collate 'und:ci']
              PathExpression [17-23] [string]
                Identifier(string) [17-23] [string]
              Collate [24-40] [collate 'und:ci']
                StringLiteral('und:ci') [32-40] ['und:ci']
--
SELECT
  CAST(x AS string COLLATE 'und:ci')
==

select cast(x as double collate 'und:ci');
--
QueryStatement [0-41] [select cast...'und:ci')]
  Query [0-41] [select cast...'und:ci')]
    Select [0-41] [select cast...'und:ci')]
      SelectList [7-41] [cast(x as...'und:ci')]
        SelectColumn [7-41] [cast(x as...'und:ci')]
          CastExpression [7-41] [cast(x as...'und:ci')]
            PathExpression [12-13] [x]
              Identifier(x) [12-13] [x]
            SimpleType [17-40] [double collate 'und:ci']
              PathExpression [17-23] [double]
                Identifier(double) [17-23] [double]
              Collate [24-40] [collate 'und:ci']
                StringLiteral('und:ci') [32-40] ['und:ci']
--
SELECT
  CAST(x AS double COLLATE 'und:ci')
==

select cast(x as struct<x string collate 'und:ci'>);
--
QueryStatement [0-51] [select cast...'und:ci'>)]
  Query [0-51] [select cast...'und:ci'>)]
    Select [0-51] [select cast...'und:ci'>)]
      SelectList [7-51] [cast(x as...'und:ci'>)]
        SelectColumn [7-51] [cast(x as...'und:ci'>)]
          CastExpression [7-51] [cast(x as...'und:ci'>)]
            PathExpression [12-13] [x]
              Identifier(x) [12-13] [x]
            StructType [17-50] [struct<x string...'und:ci'>]
              StructField [24-49] [x string collate 'und:ci']
                Identifier(x) [24-25] [x]
                SimpleType [26-49] [string collate 'und:ci']
                  PathExpression [26-32] [string]
                    Identifier(string) [26-32] [string]
                  Collate [33-49] [collate 'und:ci']
                    StringLiteral('und:ci') [41-49] ['und:ci']
--
SELECT
  CAST(x AS STRUCT< x string COLLATE 'und:ci' >)
==

select cast(x as struct<x string> collate 'und:ci');
--
QueryStatement [0-51] [select cast...'und:ci')]
  Query [0-51] [select cast...'und:ci')]
    Select [0-51] [select cast...'und:ci')]
      SelectList [7-51] [cast(x as...'und:ci')]
        SelectColumn [7-51] [cast(x as...'und:ci')]
          CastExpression [7-51] [cast(x as...'und:ci')]
            PathExpression [12-13] [x]
              Identifier(x) [12-13] [x]
            StructType [17-50] [struct<x string...ate 'und:ci']
              StructField [24-32] [x string]
                Identifier(x) [24-25] [x]
                SimpleType [26-32] [string]
                  PathExpression [26-32] [string]
                    Identifier(string) [26-32] [string]
              Collate [34-50] [collate 'und:ci']
                StringLiteral('und:ci') [42-50] ['und:ci']
--
SELECT
  CAST(x AS STRUCT< x string > COLLATE 'und:ci')
==

select cast(x as array<string collate 'und:ci'>);
--
QueryStatement [0-48] [select cast...'und:ci'>)]
  Query [0-48] [select cast...'und:ci'>)]
    Select [0-48] [select cast...'und:ci'>)]
      SelectList [7-48] [cast(x as...'und:ci'>)]
        SelectColumn [7-48] [cast(x as...'und:ci'>)]
          CastExpression [7-48] [cast(x as...'und:ci'>)]
            PathExpression [12-13] [x]
              Identifier(x) [12-13] [x]
            ArrayType [17-47] [array<string collate 'und:ci'>]
              SimpleType [23-46] [string collate 'und:ci']
                PathExpression [23-29] [string]
                  Identifier(string) [23-29] [string]
                Collate [30-46] [collate 'und:ci']
                  StringLiteral('und:ci') [38-46] ['und:ci']
--
SELECT
  CAST(x AS ARRAY< string COLLATE 'und:ci' >)
==

select cast(x as array<string> collate 'und:ci');
--
QueryStatement [0-48] [select cast...'und:ci')]
  Query [0-48] [select cast...'und:ci')]
    Select [0-48] [select cast...'und:ci')]
      SelectList [7-48] [cast(x as...'und:ci')]
        SelectColumn [7-48] [cast(x as...'und:ci')]
          CastExpression [7-48] [cast(x as...'und:ci')]
            PathExpression [12-13] [x]
              Identifier(x) [12-13] [x]
            ArrayType [17-47] [array<string> collate 'und:ci']
              SimpleType [23-29] [string]
                PathExpression [23-29] [string]
                  Identifier(string) [23-29] [string]
              Collate [31-47] [collate 'und:ci']
                StringLiteral('und:ci') [39-47] ['und:ci']
--
SELECT
  CAST(x AS ARRAY< string > COLLATE 'und:ci')
==

select {{cast|try_cast}}(`date` as date) from A;
--
ALTERNATION GROUP: cast
--
QueryStatement [0-34] [select cast...date) from A]
  Query [0-34] [select cast...date) from A]
    Select [0-34] [select cast...date) from A]
      SelectList [7-27] [cast(`date` as date)]
        SelectColumn [7-27] [cast(`date` as date)]
          CastExpression [7-27] [cast(`date` as date)]
            PathExpression [12-18] [`date`]
              Identifier(date) [12-18] [`date`]
            SimpleType [22-26] [date]
              PathExpression [22-26] [date]
                Identifier(date) [22-26] [date]
      FromClause [28-34] [from A]
        TablePathExpression [33-34] [A]
          PathExpression [33-34] [A]
            Identifier(A) [33-34] [A]
--
SELECT
  CAST(date AS date)
FROM
  A
--
ALTERNATION GROUP: try_cast
--
QueryStatement [0-38] [select try_cast...date) from A]
  Query [0-38] [select try_cast...date) from A]
    Select [0-38] [select try_cast...date) from A]
      SelectList [7-31] [try_cast(`date` as date)]
        SelectColumn [7-31] [try_cast(`date` as date)]
          CastExpression(return_null_on_error=true) [7-31] [try_cast(`date` as date)]
            PathExpression [16-22] [`date`]
              Identifier(date) [16-22] [`date`]
            SimpleType [26-30] [date]
              PathExpression [26-30] [date]
                Identifier(date) [26-30] [date]
      FromClause [32-38] [from A]
        TablePathExpression [37-38] [A]
          PathExpression [37-38] [A]
            Identifier(A) [37-38] [A]
--
SELECT
  TRY_CAST(date AS date)
FROM
  A
==

select {{cast|try_cast}}([1,2,3] as array<string>)
--

ALTERNATION GROUP: cast
--
QueryStatement [0-37] [select cast...array<string>)]
  Query [0-37] [select cast...array<string>)]
    Select [0-37] [select cast...array<string>)]
      SelectList [7-37] [cast([1,2,3] as array<string>)]
        SelectColumn [7-37] [cast([1,2,3] as array<string>)]
          CastExpression [7-37] [cast([1,2,3] as array<string>)]
            ArrayConstructor [12-19] [[1,2,3]]
              IntLiteral(1) [13-14] [1]
              IntLiteral(2) [15-16] [2]
              IntLiteral(3) [17-18] [3]
            ArrayType [23-36] [array<string>]
              SimpleType [29-35] [string]
                PathExpression [29-35] [string]
                  Identifier(string) [29-35] [string]
--
SELECT
  CAST(ARRAY[1, 2, 3] AS ARRAY< string >)
--
ALTERNATION GROUP: try_cast
--
QueryStatement [0-41] [select try_cast...ray<string>)]
  Query [0-41] [select try_cast...ray<string>)]
    Select [0-41] [select try_cast...ray<string>)]
      SelectList [7-41] [try_cast([...array<string>)]
        SelectColumn [7-41] [try_cast([...array<string>)]
          CastExpression(return_null_on_error=true) [7-41] [try_cast([...array<string>)]
            ArrayConstructor [16-23] [[1,2,3]]
              IntLiteral(1) [17-18] [1]
              IntLiteral(2) [19-20] [2]
              IntLiteral(3) [21-22] [3]
            ArrayType [27-40] [array<string>]
              SimpleType [33-39] [string]
                PathExpression [33-39] [string]
                  Identifier(string) [33-39] [string]
--
SELECT
  TRY_CAST(ARRAY[1, 2, 3] AS ARRAY< string >)
==

select cast("1" as int32), cast(1 as string),
       cast(t as TimeStamp_Millis),
       cast(u as TimeStamp_Micros),
       cast(v as TimeStamp_seconds),
       cast(w as TimeStamp_nanos),
       cast(x as `mypackage.myproto`),
       cast(y as `mypackage.myenum`) from T;
--
QueryStatement [0-272] [select cast...myenum`) from T]
  Query [0-272] [select cast...myenum`) from T]
    Select [0-272] [select cast...myenum`) from T]
      SelectList [7-265] [cast("1" as...package.myenum`)]
        SelectColumn [7-25] [cast("1" as int32)]
          CastExpression [7-25] [cast("1" as int32)]
            StringLiteral("1") [12-15] ["1"]
            SimpleType [19-24] [int32]
              PathExpression [19-24] [int32]
                Identifier(int32) [19-24] [int32]
        SelectColumn [27-44] [cast(1 as string)]
          CastExpression [27-44] [cast(1 as string)]
            IntLiteral(1) [32-33] [1]
            SimpleType [37-43] [string]
              PathExpression [37-43] [string]
                Identifier(string) [37-43] [string]
        SelectColumn [53-80] [cast(t as TimeStamp_Millis)]
          CastExpression [53-80] [cast(t as TimeStamp_Millis)]
            PathExpression [58-59] [t]
              Identifier(t) [58-59] [t]
            SimpleType [63-79] [TimeStamp_Millis]
              PathExpression [63-79] [TimeStamp_Millis]
                Identifier(TimeStamp_Millis) [63-79] [TimeStamp_Millis]
        SelectColumn [89-116] [cast(u as TimeStamp_Micros)]
          CastExpression [89-116] [cast(u as TimeStamp_Micros)]
            PathExpression [94-95] [u]
              Identifier(u) [94-95] [u]
            SimpleType [99-115] [TimeStamp_Micros]
              PathExpression [99-115] [TimeStamp_Micros]
                Identifier(TimeStamp_Micros) [99-115] [TimeStamp_Micros]
        SelectColumn [125-153] [cast(v as TimeStamp_seconds)]
          CastExpression [125-153] [cast(v as TimeStamp_seconds)]
            PathExpression [130-131] [v]
              Identifier(v) [130-131] [v]
            SimpleType [135-152] [TimeStamp_seconds]
              PathExpression [135-152] [TimeStamp_seconds]
                Identifier(TimeStamp_seconds) [135-152] [TimeStamp_seconds]
        SelectColumn [162-188] [cast(w as TimeStamp_nanos)]
          CastExpression [162-188] [cast(w as TimeStamp_nanos)]
            PathExpression [167-168] [w]
              Identifier(w) [167-168] [w]
            SimpleType [172-187] [TimeStamp_nanos]
              PathExpression [172-187] [TimeStamp_nanos]
                Identifier(TimeStamp_nanos) [172-187] [TimeStamp_nanos]
        SelectColumn [197-227] [cast(x as `mypackage.myproto`)]
          CastExpression [197-227] [cast(x as `mypackage.myproto`)]
            PathExpression [202-203] [x]
              Identifier(x) [202-203] [x]
            SimpleType [207-226] [`mypackage.myproto`]
              PathExpression [207-226] [`mypackage.myproto`]
                Identifier("mypackage.myproto") [207-226] [`mypackage.myproto`]
        SelectColumn [236-265] [cast(y as `mypackage.myenum`)]
          CastExpression [236-265] [cast(y as `mypackage.myenum`)]
            PathExpression [241-242] [y]
              Identifier(y) [241-242] [y]
            SimpleType [246-264] [`mypackage.myenum`]
              PathExpression [246-264] [`mypackage.myenum`]
                Identifier("mypackage.myenum") [246-264] [`mypackage.myenum`]
      FromClause [266-272] [from T]
        TablePathExpression [271-272] [T]
          PathExpression [271-272] [T]
            Identifier(T) [271-272] [T]
--
SELECT
  CAST("1" AS int32),
  CAST(1 AS string),
  CAST(t AS TimeStamp_Millis),
  CAST(u AS TimeStamp_Micros),
  CAST(v AS TimeStamp_seconds),
  CAST(w AS TimeStamp_nanos),
  CAST(x AS `mypackage.myproto`),
  CAST(y AS `mypackage.myenum`)
FROM
  T
==

select try_cast("1" as int32),
       try_cast(1 as string),
       try_cast(t as TimeStamp_Millis),
       try_cast(u as TimeStamp_Micros),
       try_cast(v as TimeStamp_seconds),
       try_cast(w as TimeStamp_nanos),
       try_cast(x as `mypackage.myproto`),
       try_cast(y as `mypackage.myenum`) from T;
--

QueryStatement [0-311] [select try_cast...num`) from T]
  Query [0-311] [select try_cast...num`) from T]
    Select [0-311] [select try_cast...num`) from T]
      SelectList [7-304] [try_cast("...ypackage.myenum`)]
        SelectColumn [7-29] [try_cast("1" as int32)]
          CastExpression(return_null_on_error=true) [7-29] [try_cast("1" as int32)]
            StringLiteral("1") [16-19] ["1"]
            SimpleType [23-28] [int32]
              PathExpression [23-28] [int32]
                Identifier(int32) [23-28] [int32]
        SelectColumn [38-59] [try_cast(1 as string)]
          CastExpression(return_null_on_error=true) [38-59] [try_cast(1 as string)]
            IntLiteral(1) [47-48] [1]
            SimpleType [52-58] [string]
              PathExpression [52-58] [string]
                Identifier(string) [52-58] [string]
        SelectColumn [68-99] [try_cast(t...TimeStamp_Millis)]
          CastExpression(return_null_on_error=true) [68-99] [try_cast(t...TimeStamp_Millis)]
            PathExpression [77-78] [t]
              Identifier(t) [77-78] [t]
            SimpleType [82-98] [TimeStamp_Millis]
              PathExpression [82-98] [TimeStamp_Millis]
                Identifier(TimeStamp_Millis) [82-98] [TimeStamp_Millis]
        SelectColumn [108-139] [try_cast(u...TimeStamp_Micros)]
          CastExpression(return_null_on_error=true) [108-139] [try_cast(u...TimeStamp_Micros)]
            PathExpression [117-118] [u]
              Identifier(u) [117-118] [u]
            SimpleType [122-138] [TimeStamp_Micros]
              PathExpression [122-138] [TimeStamp_Micros]
                Identifier(TimeStamp_Micros) [122-138] [TimeStamp_Micros]
        SelectColumn [148-180] [try_cast(v...imeStamp_seconds)]
          CastExpression(return_null_on_error=true) [148-180] [try_cast(v...imeStamp_seconds)]
            PathExpression [157-158] [v]
              Identifier(v) [157-158] [v]
            SimpleType [162-179] [TimeStamp_seconds]
              PathExpression [162-179] [TimeStamp_seconds]
                Identifier(TimeStamp_seconds) [162-179] [TimeStamp_seconds]
        SelectColumn [189-219] [try_cast(w as TimeStamp_nanos)]
          CastExpression(return_null_on_error=true) [189-219] [try_cast(w as TimeStamp_nanos)]
            PathExpression [198-199] [w]
              Identifier(w) [198-199] [w]
            SimpleType [203-218] [TimeStamp_nanos]
              PathExpression [203-218] [TimeStamp_nanos]
                Identifier(TimeStamp_nanos) [203-218] [TimeStamp_nanos]
        SelectColumn [228-262] [try_cast(x....myproto`)]
          CastExpression(return_null_on_error=true) [228-262] [try_cast(x....myproto`)]
            PathExpression [237-238] [x]
              Identifier(x) [237-238] [x]
            SimpleType [242-261] [`mypackage.myproto`]
              PathExpression [242-261] [`mypackage.myproto`]
                Identifier("mypackage.myproto") [242-261] [`mypackage.myproto`]
        SelectColumn [271-304] [try_cast(y...ypackage.myenum`)]
          CastExpression(return_null_on_error=true) [271-304] [try_cast(y...ypackage.myenum`)]
            PathExpression [280-281] [y]
              Identifier(y) [280-281] [y]
            SimpleType [285-303] [`mypackage.myenum`]
              PathExpression [285-303] [`mypackage.myenum`]
                Identifier("mypackage.myenum") [285-303] [`mypackage.myenum`]
      FromClause [305-311] [from T]
        TablePathExpression [310-311] [T]
          PathExpression [310-311] [T]
            Identifier(T) [310-311] [T]
--
SELECT
  TRY_CAST("1" AS int32),
  TRY_CAST(1 AS string),
  TRY_CAST(t AS TimeStamp_Millis),
  TRY_CAST(u AS TimeStamp_Micros),
  TRY_CAST(v AS TimeStamp_seconds),
  TRY_CAST(w AS TimeStamp_nanos),
  TRY_CAST(x AS `mypackage.myproto`),
  TRY_CAST(y AS `mypackage.myenum`)
FROM
  T
==

select cast(x as foo),
       cast(x as a.b),
       cast(x > 5 as timestamp_seconds),
       cast("1" as `int64`) as cast_1_as_int64,
       cast(x < 10 as b),
       cast(x as struct<x int, y double>),
       cast(x as struct<int, double>),
       cast(x as struct<x int, y double, string, bytes>)
from T;
--
QueryStatement [0-306] [select cast...bytes>) from T]
  Query [0-306] [select cast...bytes>) from T]
    Select [0-306] [select cast...bytes>) from T]
      SelectList [7-299] [cast(x as...string, bytes>)]
        SelectColumn [7-21] [cast(x as foo)]
          CastExpression [7-21] [cast(x as foo)]
            PathExpression [12-13] [x]
              Identifier(x) [12-13] [x]
            SimpleType [17-20] [foo]
              PathExpression [17-20] [foo]
                Identifier(foo) [17-20] [foo]
        SelectColumn [30-44] [cast(x as a.b)]
          CastExpression [30-44] [cast(x as a.b)]
            PathExpression [35-36] [x]
              Identifier(x) [35-36] [x]
            SimpleType [40-43] [a.b]
              PathExpression [40-43] [a.b]
                Identifier(a) [40-41] [a]
                Identifier(b) [42-43] [b]
        SelectColumn [53-85] [cast(x > 5...imestamp_seconds)]
          CastExpression [53-85] [cast(x > 5...imestamp_seconds)]
            BinaryExpression(>) [58-63] [x > 5]
              PathExpression [58-59] [x]
                Identifier(x) [58-59] [x]
              IntLiteral(5) [62-63] [5]
            SimpleType [67-84] [timestamp_seconds]
              PathExpression [67-84] [timestamp_seconds]
                Identifier(timestamp_seconds) [67-84] [timestamp_seconds]
        SelectColumn [94-133] [cast("1" as...cast_1_as_int64]
          CastExpression [94-114] [cast("1" as `int64`)]
            StringLiteral("1") [99-102] ["1"]
            SimpleType [106-113] [`int64`]
              PathExpression [106-113] [`int64`]
                Identifier(int64) [106-113] [`int64`]
          Alias [115-133] [as cast_1_as_int64]
            Identifier(cast_1_as_int64) [118-133] [cast_1_as_int64]
        SelectColumn [142-159] [cast(x < 10 as b)]
          CastExpression [142-159] [cast(x < 10 as b)]
            BinaryExpression(<) [147-153] [x < 10]
              PathExpression [147-148] [x]
                Identifier(x) [147-148] [x]
              IntLiteral(10) [151-153] [10]
            SimpleType [157-158] [b]
              PathExpression [157-158] [b]
                Identifier(b) [157-158] [b]
        SelectColumn [168-202] [cast(x as...y double>)]
          CastExpression [168-202] [cast(x as...y double>)]
            PathExpression [173-174] [x]
              Identifier(x) [173-174] [x]
            StructType [178-201] [struct<x int, y double>]
              StructField [185-190] [x int]
                Identifier(x) [185-186] [x]
                SimpleType [187-190] [int]
                  PathExpression [187-190] [int]
                    Identifier(int) [187-190] [int]
              StructField [192-200] [y double]
                Identifier(y) [192-193] [y]
                SimpleType [194-200] [double]
                  PathExpression [194-200] [double]
                    Identifier(double) [194-200] [double]
        SelectColumn [211-241] [cast(x as struct<int, double>)]
          CastExpression [211-241] [cast(x as struct<int, double>)]
            PathExpression [216-217] [x]
              Identifier(x) [216-217] [x]
            StructType [221-240] [struct<int, double>]
              StructField [228-231] [int]
                SimpleType [228-231] [int]
                  PathExpression [228-231] [int]
                    Identifier(int) [228-231] [int]
              StructField [233-239] [double]
                SimpleType [233-239] [double]
                  PathExpression [233-239] [double]
                    Identifier(double) [233-239] [double]
        SelectColumn [250-299] [cast(x as...string, bytes>)]
          CastExpression [250-299] [cast(x as...string, bytes>)]
            PathExpression [255-256] [x]
              Identifier(x) [255-256] [x]
            StructType [260-298] [struct<x int...string, bytes>]
              StructField [267-272] [x int]
                Identifier(x) [267-268] [x]
                SimpleType [269-272] [int]
                  PathExpression [269-272] [int]
                    Identifier(int) [269-272] [int]
              StructField [274-282] [y double]
                Identifier(y) [274-275] [y]
                SimpleType [276-282] [double]
                  PathExpression [276-282] [double]
                    Identifier(double) [276-282] [double]
              StructField [284-290] [string]
                SimpleType [284-290] [string]
                  PathExpression [284-290] [string]
                    Identifier(string) [284-290] [string]
              StructField [292-297] [bytes]
                SimpleType [292-297] [bytes]
                  PathExpression [292-297] [bytes]
                    Identifier(bytes) [292-297] [bytes]
      FromClause [300-306] [from T]
        TablePathExpression [305-306] [T]
          PathExpression [305-306] [T]
            Identifier(T) [305-306] [T]
--
SELECT
  CAST(x AS foo),
  CAST(x AS a.b),
  CAST(x > 5 AS timestamp_seconds),
  CAST("1" AS int64) AS cast_1_as_int64,
  CAST(x < 10 AS b),
  CAST(x AS STRUCT< x int, y double >),
  CAST(x AS STRUCT< int, double >),
  CAST(x AS STRUCT< x int, y double, string, bytes >)
FROM
  T
==

select try_cast(x as foo),
       try_cast(x as a.b),
       try_cast(x > 5 as timestamp_seconds),
       try_cast("1" as `int64`) as try_cast_1_as_int64,
       try_cast(x < 10 as b),
       try_cast(x as struct<x int, y double>),
       try_cast(x as struct<int, double>),
       try_cast(x as struct<x int, y double, string, bytes>)
from T;
--
QueryStatement [0-342] [select try_cast...tes>) from T]
  Query [0-342] [select try_cast...tes>) from T]
    Select [0-342] [select try_cast...tes>) from T]
      SelectList [7-335] [try_cast(x...string, bytes>)]
        SelectColumn [7-25] [try_cast(x as foo)]
          CastExpression(return_null_on_error=true) [7-25] [try_cast(x as foo)]
            PathExpression [16-17] [x]
              Identifier(x) [16-17] [x]
            SimpleType [21-24] [foo]
              PathExpression [21-24] [foo]
                Identifier(foo) [21-24] [foo]
        SelectColumn [34-52] [try_cast(x as a.b)]
          CastExpression(return_null_on_error=true) [34-52] [try_cast(x as a.b)]
            PathExpression [43-44] [x]
              Identifier(x) [43-44] [x]
            SimpleType [48-51] [a.b]
              PathExpression [48-51] [a.b]
                Identifier(a) [48-49] [a]
                Identifier(b) [50-51] [b]
        SelectColumn [61-97] [try_cast(x...imestamp_seconds)]
          CastExpression(return_null_on_error=true) [61-97] [try_cast(x...imestamp_seconds)]
            BinaryExpression(>) [70-75] [x > 5]
              PathExpression [70-71] [x]
                Identifier(x) [70-71] [x]
              IntLiteral(5) [74-75] [5]
            SimpleType [79-96] [timestamp_seconds]
              PathExpression [79-96] [timestamp_seconds]
                Identifier(timestamp_seconds) [79-96] [timestamp_seconds]
        SelectColumn [106-153] [try_cast("...y_cast_1_as_int64]
          CastExpression(return_null_on_error=true) [106-130] [try_cast("1" as `int64`)]
            StringLiteral("1") [115-118] ["1"]
            SimpleType [122-129] [`int64`]
              PathExpression [122-129] [`int64`]
                Identifier(int64) [122-129] [`int64`]
          Alias [131-153] [as try_cast_1_as_int64]
            Identifier(try_cast_1_as_int64) [134-153] [try_cast_1_as_int64]
        SelectColumn [162-183] [try_cast(x < 10 as b)]
          CastExpression(return_null_on_error=true) [162-183] [try_cast(x < 10 as b)]
            BinaryExpression(<) [171-177] [x < 10]
              PathExpression [171-172] [x]
                Identifier(x) [171-172] [x]
              IntLiteral(10) [175-177] [10]
            SimpleType [181-182] [b]
              PathExpression [181-182] [b]
                Identifier(b) [181-182] [b]
        SelectColumn [192-230] [try_cast(x...y double>)]
          CastExpression(return_null_on_error=true) [192-230] [try_cast(x...y double>)]
            PathExpression [201-202] [x]
              Identifier(x) [201-202] [x]
            StructType [206-229] [struct<x int, y double>]
              StructField [213-218] [x int]
                Identifier(x) [213-214] [x]
                SimpleType [215-218] [int]
                  PathExpression [215-218] [int]
                    Identifier(int) [215-218] [int]
              StructField [220-228] [y double]
                Identifier(y) [220-221] [y]
                SimpleType [222-228] [double]
                  PathExpression [222-228] [double]
                    Identifier(double) [222-228] [double]
        SelectColumn [239-273] [try_cast(x..., double>)]
          CastExpression(return_null_on_error=true) [239-273] [try_cast(x..., double>)]
            PathExpression [248-249] [x]
              Identifier(x) [248-249] [x]
            StructType [253-272] [struct<int, double>]
              StructField [260-263] [int]
                SimpleType [260-263] [int]
                  PathExpression [260-263] [int]
                    Identifier(int) [260-263] [int]
              StructField [265-271] [double]
                SimpleType [265-271] [double]
                  PathExpression [265-271] [double]
                    Identifier(double) [265-271] [double]
        SelectColumn [282-335] [try_cast(x...string, bytes>)]
          CastExpression(return_null_on_error=true) [282-335] [try_cast(x...string, bytes>)]
            PathExpression [291-292] [x]
              Identifier(x) [291-292] [x]
            StructType [296-334] [struct<x int...string, bytes>]
              StructField [303-308] [x int]
                Identifier(x) [303-304] [x]
                SimpleType [305-308] [int]
                  PathExpression [305-308] [int]
                    Identifier(int) [305-308] [int]
              StructField [310-318] [y double]
                Identifier(y) [310-311] [y]
                SimpleType [312-318] [double]
                  PathExpression [312-318] [double]
                    Identifier(double) [312-318] [double]
              StructField [320-326] [string]
                SimpleType [320-326] [string]
                  PathExpression [320-326] [string]
                    Identifier(string) [320-326] [string]
              StructField [328-333] [bytes]
                SimpleType [328-333] [bytes]
                  PathExpression [328-333] [bytes]
                    Identifier(bytes) [328-333] [bytes]
      FromClause [336-342] [from T]
        TablePathExpression [341-342] [T]
          PathExpression [341-342] [T]
            Identifier(T) [341-342] [T]
--
SELECT
  TRY_CAST(x AS foo),
  TRY_CAST(x AS a.b),
  TRY_CAST(x > 5 AS timestamp_seconds),
  TRY_CAST("1" AS int64) AS try_cast_1_as_int64,
  TRY_CAST(x < 10 AS b),
  TRY_CAST(x AS STRUCT< x int, y double >),
  TRY_CAST(x AS STRUCT< int, double >),
  TRY_CAST(x AS STRUCT< x int, y double, string, bytes >)
FROM
  T
==

select {{cast|try_cast}}(expr as string format format_string) from t;

--
ALTERNATION GROUP: cast
--
QueryStatement [0-55] [select cast...t_string) from t]
  Query [0-55] [select cast...t_string) from t]
    Select [0-55] [select cast...t_string) from t]
      SelectList [7-48] [cast(expr...format_string)]
        SelectColumn [7-48] [cast(expr...format_string)]
          CastExpression [7-48] [cast(expr...format_string)]
            PathExpression [12-16] [expr]
              Identifier(expr) [12-16] [expr]
            SimpleType [20-26] [string]
              PathExpression [20-26] [string]
                Identifier(string) [20-26] [string]
            FormatClause [27-47] [format format_string]
              PathExpression [34-47] [format_string]
                Identifier(format_string) [34-47] [format_string]
      FromClause [49-55] [from t]
        TablePathExpression [54-55] [t]
          PathExpression [54-55] [t]
            Identifier(t) [54-55] [t]
--
SELECT
  CAST(expr AS string FORMAT format_string)
FROM
  t
--
ALTERNATION GROUP: try_cast
--
QueryStatement [0-59] [select try_cast...ring) from t]
  Query [0-59] [select try_cast...ring) from t]
    Select [0-59] [select try_cast...ring) from t]
      SelectList [7-52] [try_cast(expr...format_string)]
        SelectColumn [7-52] [try_cast(expr...format_string)]
          CastExpression(return_null_on_error=true) [7-52] [try_cast(expr...format_string)]
            PathExpression [16-20] [expr]
              Identifier(expr) [16-20] [expr]
            SimpleType [24-30] [string]
              PathExpression [24-30] [string]
                Identifier(string) [24-30] [string]
            FormatClause [31-51] [format format_string]
              PathExpression [38-51] [format_string]
                Identifier(format_string) [38-51] [format_string]
      FromClause [53-59] [from t]
        TablePathExpression [58-59] [t]
          PathExpression [58-59] [t]
            Identifier(t) [58-59] [t]
--
SELECT
  TRY_CAST(expr AS string FORMAT format_string)
FROM
  t
==

select {{cast|try_cast}}('literal' as int64 format format_string) from t;
--

ALTERNATION GROUP: cast
--
QueryStatement [0-59] [select cast...t_string) from t]
  Query [0-59] [select cast...t_string) from t]
    Select [0-59] [select cast...t_string) from t]
      SelectList [7-52] [cast('literal...format_string)]
        SelectColumn [7-52] [cast('literal...format_string)]
          CastExpression [7-52] [cast('literal...format_string)]
            StringLiteral('literal') [12-21] ['literal']
            SimpleType [25-30] [int64]
              PathExpression [25-30] [int64]
                Identifier(int64) [25-30] [int64]
            FormatClause [31-51] [format format_string]
              PathExpression [38-51] [format_string]
                Identifier(format_string) [38-51] [format_string]
      FromClause [53-59] [from t]
        TablePathExpression [58-59] [t]
          PathExpression [58-59] [t]
            Identifier(t) [58-59] [t]
--
SELECT
  CAST('literal' AS int64 FORMAT format_string)
FROM
  t
--
ALTERNATION GROUP: try_cast
--
QueryStatement [0-63] [select try_cast...ring) from t]
  Query [0-63] [select try_cast...ring) from t]
    Select [0-63] [select try_cast...ring) from t]
      SelectList [7-56] [try_cast('...format_string)]
        SelectColumn [7-56] [try_cast('...format_string)]
          CastExpression(return_null_on_error=true) [7-56] [try_cast('...format_string)]
            StringLiteral('literal') [16-25] ['literal']
            SimpleType [29-34] [int64]
              PathExpression [29-34] [int64]
                Identifier(int64) [29-34] [int64]
            FormatClause [35-55] [format format_string]
              PathExpression [42-55] [format_string]
                Identifier(format_string) [42-55] [format_string]
      FromClause [57-63] [from t]
        TablePathExpression [62-63] [t]
          PathExpression [62-63] [t]
            Identifier(t) [62-63] [t]
--
SELECT
  TRY_CAST('literal' AS int64 FORMAT format_string)
FROM
  t
==

select {{cast|try_cast}}(expr AS date FORMAT format_string At tImE ZoNe hour || ':' || minute) from t;

--
ALTERNATION GROUP: cast
--
QueryStatement [0-88] [select cast...minute) from t]
  Query [0-88] [select cast...minute) from t]
    Select [0-88] [select cast...minute) from t]
      SelectList [7-81] [cast(expr...|| minute)]
        SelectColumn [7-81] [cast(expr...|| minute)]
          CastExpression [7-81] [cast(expr...|| minute)]
            PathExpression [12-16] [expr]
              Identifier(expr) [12-16] [expr]
            SimpleType [20-24] [date]
              PathExpression [20-24] [date]
                Identifier(date) [20-24] [date]
            FormatClause [25-80] [FORMAT format_str...|| minute]
              PathExpression [32-45] [format_string]
                Identifier(format_string) [32-45] [format_string]
              BinaryExpression(||) [59-80] [hour || ':' || minute]
                BinaryExpression(||) [59-70] [hour || ':']
                  PathExpression [59-63] [hour]
                    Identifier(hour) [59-63] [hour]
                  StringLiteral(':') [67-70] [':']
                PathExpression [74-80] [minute]
                  Identifier(minute) [74-80] [minute]
      FromClause [82-88] [from t]
        TablePathExpression [87-88] [t]
          PathExpression [87-88] [t]
            Identifier(t) [87-88] [t]
--
SELECT
  CAST(expr AS date FORMAT format_string AT TIME ZONE hour || ':' || minute)
FROM
  t
--
ALTERNATION GROUP: try_cast
--
QueryStatement [0-92] [select try_cast...nute) from t]
  Query [0-92] [select try_cast...nute) from t]
    Select [0-92] [select try_cast...nute) from t]
      SelectList [7-85] [try_cast(expr...|| minute)]
        SelectColumn [7-85] [try_cast(expr...|| minute)]
          CastExpression(return_null_on_error=true) [7-85] [try_cast(expr...|| minute)]
            PathExpression [16-20] [expr]
              Identifier(expr) [16-20] [expr]
            SimpleType [24-28] [date]
              PathExpression [24-28] [date]
                Identifier(date) [24-28] [date]
            FormatClause [29-84] [FORMAT format_str...|| minute]
              PathExpression [36-49] [format_string]
                Identifier(format_string) [36-49] [format_string]
              BinaryExpression(||) [63-84] [hour || ':' || minute]
                BinaryExpression(||) [63-74] [hour || ':']
                  PathExpression [63-67] [hour]
                    Identifier(hour) [63-67] [hour]
                  StringLiteral(':') [71-74] [':']
                PathExpression [78-84] [minute]
                  Identifier(minute) [78-84] [minute]
      FromClause [86-92] [from t]
        TablePathExpression [91-92] [t]
          PathExpression [91-92] [t]
            Identifier(t) [91-92] [t]
--
SELECT
  TRY_CAST(expr AS date FORMAT format_string AT TIME ZONE hour || ':' || minute)
FROM
  t
==

select count(*), anon_count(*, 0, 1), count(distinct x), sum(x),
       sum(distinct x), group_concat(distinct x, '|')
from T;
--
QueryStatement [0-125] [select count...|') from T]
  Query [0-125] [select count...|') from T]
    Select [0-125] [select count...|') from T]
      SelectList [7-118] [count(*),...distinct x, '|')]
        SelectColumn [7-15] [count(*)]
          FunctionCall [7-15] [count(*)]
            PathExpression [7-12] [count]
              Identifier(count) [7-12] [count]
            Star(*) [13-14] [*]
        SelectColumn [17-36] [anon_count(*, 0, 1)]
          FunctionCall [17-36] [anon_count(*, 0, 1)]
            PathExpression [17-27] [anon_count]
              Identifier(anon_count) [17-27] [anon_count]
            Star(*) [28-29] [*]
            IntLiteral(0) [31-32] [0]
            IntLiteral(1) [34-35] [1]
        SelectColumn [38-55] [count(distinct x)]
          FunctionCall(distinct=true) [38-55] [count(distinct x)]
            PathExpression [38-43] [count]
              Identifier(count) [38-43] [count]
            PathExpression [53-54] [x]
              Identifier(x) [53-54] [x]
        SelectColumn [57-63] [sum(x)]
          FunctionCall [57-63] [sum(x)]
            PathExpression [57-60] [sum]
              Identifier(sum) [57-60] [sum]
            PathExpression [61-62] [x]
              Identifier(x) [61-62] [x]
        SelectColumn [72-87] [sum(distinct x)]
          FunctionCall(distinct=true) [72-87] [sum(distinct x)]
            PathExpression [72-75] [sum]
              Identifier(sum) [72-75] [sum]
            PathExpression [85-86] [x]
              Identifier(x) [85-86] [x]
        SelectColumn [89-118] [group_concat(distinct x, '|')]
          FunctionCall(distinct=true) [89-118] [group_concat(distinct x, '|')]
            PathExpression [89-101] [group_concat]
              Identifier(group_concat) [89-101] [group_concat]
            PathExpression [111-112] [x]
              Identifier(x) [111-112] [x]
            StringLiteral('|') [114-117] ['|']
      FromClause [119-125] [from T]
        TablePathExpression [124-125] [T]
          PathExpression [124-125] [T]
            Identifier(T) [124-125] [T]
--
SELECT
  count(*),
  anon_count(*, 0, 1),
  count(DISTINCT x),
  sum(x),
  sum(DISTINCT x),
  group_concat(DISTINCT x, '|')
FROM
  T
==

select count(distinct);
--
QueryStatement [0-22] [select count(distinct)]
  Query [0-22] [select count(distinct)]
    Select [0-22] [select count(distinct)]
      SelectList [7-22] [count(distinct)]
        SelectColumn [7-22] [count(distinct)]
          FunctionCall(distinct=true) [7-22] [count(distinct)]
            PathExpression [7-12] [count]
              Identifier(count) [7-12] [count]
--
SELECT
  count(DISTINCT)
==

# WITH reserved word works in a path expression.
select nested1.field1, field2 from table1.with.dots
--
QueryStatement [0-51] [select nested1....with.dots]
  Query [0-51] [select nested1....with.dots]
    Select [0-51] [select nested1....with.dots]
      SelectList [7-29] [nested1.field1, field2]
        SelectColumn [7-21] [nested1.field1]
          PathExpression [7-21] [nested1.field1]
            Identifier(nested1) [7-14] [nested1]
            Identifier(field1) [15-21] [field1]
        SelectColumn [23-29] [field2]
          PathExpression [23-29] [field2]
            Identifier(field2) [23-29] [field2]
      FromClause [30-51] [from table1.with.dots]
        TablePathExpression [35-51] [table1.with.dots]
          PathExpression [35-51] [table1.with.dots]
            Identifier(table1) [35-41] [table1]
            Identifier("with") [42-46] [with]
            Identifier(dots) [47-51] [dots]
--
SELECT
  nested1.field1,
  field2
FROM
  table1.`with`.dots
==

# PROTO reserved word works in a path expression.
select nested1.proto
--
QueryStatement [0-20] [select nested1.proto]
  Query [0-20] [select nested1.proto]
    Select [0-20] [select nested1.proto]
      SelectList [7-20] [nested1.proto]
        SelectColumn [7-20] [nested1.proto]
          PathExpression [7-20] [nested1.proto]
            Identifier(nested1) [7-14] [nested1]
            Identifier("proto") [15-20] [proto]
--
SELECT
  nested1.`proto`
==

# Table name with backticks
select nested1.field1, field2 from `table.with.dots`
--
QueryStatement [0-52] [select nested1...with.dots`]
  Query [0-52] [select nested1...with.dots`]
    Select [0-52] [select nested1...with.dots`]
      SelectList [7-29] [nested1.field1, field2]
        SelectColumn [7-21] [nested1.field1]
          PathExpression [7-21] [nested1.field1]
            Identifier(nested1) [7-14] [nested1]
            Identifier(field1) [15-21] [field1]
        SelectColumn [23-29] [field2]
          PathExpression [23-29] [field2]
            Identifier(field2) [23-29] [field2]
      FromClause [30-52] [from `table.with.dots`]
        TablePathExpression [35-52] [`table.with.dots`]
          PathExpression [35-52] [`table.with.dots`]
            Identifier("table.with.dots") [35-52] [`table.with.dots`]
--
SELECT
  nested1.field1,
  field2
FROM
  `table.with.dots`
==

select f(column.field_name) like 'pattern%';
--
QueryStatement [0-43] [select f(column...'pattern%']
  Query [0-43] [select f(column...'pattern%']
    Select [0-43] [select f(column...'pattern%']
      SelectList [7-43] [f(column.field_na...'pattern%']
        SelectColumn [7-43] [f(column.field_na...'pattern%']
          BinaryExpression(LIKE) [7-43] [f(column.field_na...'pattern%']
            FunctionCall [7-27] [f(column.field_name)]
              PathExpression [7-8] [f]
                Identifier(f) [7-8] [f]
              PathExpression [9-26] [column.field_name]
                Identifier(column) [9-15] [column]
                Identifier(field_name) [16-26] [field_name]
            StringLiteral('pattern%') [33-43] ['pattern%']
--
SELECT
  f(column.field_name) LIKE 'pattern%'
==

select a NOT LIKE b;
--
QueryStatement [0-19] [select a NOT LIKE b]
  Query [0-19] [select a NOT LIKE b]
    Select [0-19] [select a NOT LIKE b]
      SelectList [7-19] [a NOT LIKE b]
        SelectColumn [7-19] [a NOT LIKE b]
          BinaryExpression(NOT LIKE) [7-19] [a NOT LIKE b]
            PathExpression [7-8] [a]
              Identifier(a) [7-8] [a]
            PathExpression [18-19] [b]
              Identifier(b) [18-19] [b]
--
SELECT
  a NOT LIKE b
==

# The Bison parser only recognizes NOT after an expression if it is for
# "NOT IN/LIKE/BETWEEN".
select a NOT <= b;
--
ERROR: Syntax error: Expected end of input but got keyword NOT [at 1:10]
select a NOT <= b;
         ^
==

select 1 IS NULL
--
QueryStatement [0-16] [select 1 IS NULL]
  Query [0-16] [select 1 IS NULL]
    Select [0-16] [select 1 IS NULL]
      SelectList [7-16] [1 IS NULL]
        SelectColumn [7-16] [1 IS NULL]
          BinaryExpression(IS) [7-16] [1 IS NULL]
            IntLiteral(1) [7-8] [1]
            NullLiteral(NULL) [12-16] [NULL]
--
SELECT
  1 IS NULL
==

select a from t where (f(a) + b[c]) IS NOT NULL
--
QueryStatement [0-47] [select a from...IS NOT NULL]
  Query [0-47] [select a from...IS NOT NULL]
    Select [0-47] [select a from...IS NOT NULL]
      SelectList [7-8] [a]
        SelectColumn [7-8] [a]
          PathExpression [7-8] [a]
            Identifier(a) [7-8] [a]
      FromClause [9-15] [from t]
        TablePathExpression [14-15] [t]
          PathExpression [14-15] [t]
            Identifier(t) [14-15] [t]
      WhereClause [16-47] [where (f(a...IS NOT NULL]
        BinaryExpression(IS NOT) [22-47] [(f(a) + b[c]) IS NOT NULL]
          BinaryExpression(+) [23-34] [f(a) + b[c]]
            FunctionCall [23-27] [f(a)]
              PathExpression [23-24] [f]
                Identifier(f) [23-24] [f]
              PathExpression [25-26] [a]
                Identifier(a) [25-26] [a]
            ArrayElement [30-34] [b[c]]
              PathExpression [30-31] [b]
                Identifier(b) [30-31] [b]
              Location [31-32] [[]
              PathExpression [32-33] [c]
                Identifier(c) [32-33] [c]
          NullLiteral(NULL) [43-47] [NULL]
--
SELECT
  a
FROM
  t
WHERE
  (f(a) + b[c]) IS NOT NULL
==

select 1 NOT IS NULL
--
ERROR: Syntax error: Expected end of input but got keyword NOT [at 1:10]
select 1 NOT IS NULL
         ^
==

select NULL IS NULL
--
QueryStatement [0-19] [select NULL IS NULL]
  Query [0-19] [select NULL IS NULL]
    Select [0-19] [select NULL IS NULL]
      SelectList [7-19] [NULL IS NULL]
        SelectColumn [7-19] [NULL IS NULL]
          BinaryExpression(IS) [7-19] [NULL IS NULL]
            NullLiteral(NULL) [7-11] [NULL]
            NullLiteral(NULL) [15-19] [NULL]
--
SELECT
  NULL IS NULL
==

select NOT NULL IS NOT NULL
--
QueryStatement [0-27] [select NOT NULL IS NOT NULL]
  Query [0-27] [select NOT NULL IS NOT NULL]
    Select [0-27] [select NOT NULL IS NOT NULL]
      SelectList [7-27] [NOT NULL IS NOT NULL]
        SelectColumn [7-27] [NOT NULL IS NOT NULL]
          UnaryExpression(NOT) [7-27] [NOT NULL IS NOT NULL]
            BinaryExpression(IS NOT) [11-27] [NULL IS NOT NULL]
              NullLiteral(NULL) [11-15] [NULL]
              NullLiteral(NULL) [23-27] [NULL]
--
SELECT
  NOT NULL IS NOT NULL
==

select NULL IS NOT NULL NULL
--
ERROR: Syntax error: Expected end of input but got keyword NULL [at 1:25]
select NULL IS NOT NULL NULL
                        ^
==

select 1 from T where TRUE IS NOT TRUE
--
QueryStatement [0-38] [select 1 from...IS NOT TRUE]
  Query [0-38] [select 1 from...IS NOT TRUE]
    Select [0-38] [select 1 from...IS NOT TRUE]
      SelectList [7-8] [1]
        SelectColumn [7-8] [1]
          IntLiteral(1) [7-8] [1]
      FromClause [9-15] [from T]
        TablePathExpression [14-15] [T]
          PathExpression [14-15] [T]
            Identifier(T) [14-15] [T]
      WhereClause [16-38] [where TRUE IS NOT TRUE]
        BinaryExpression(IS NOT) [22-38] [TRUE IS NOT TRUE]
          BooleanLiteral(TRUE) [22-26] [TRUE]
          BooleanLiteral(TRUE) [34-38] [TRUE]
--
SELECT
  1
FROM
  T
WHERE
  TRUE IS NOT TRUE
==

select 1 from T where TRUE IS NOT FALSE
--
QueryStatement [0-39] [select 1 from...NOT FALSE]
  Query [0-39] [select 1 from...NOT FALSE]
    Select [0-39] [select 1 from...NOT FALSE]
      SelectList [7-8] [1]
        SelectColumn [7-8] [1]
          IntLiteral(1) [7-8] [1]
      FromClause [9-15] [from T]
        TablePathExpression [14-15] [T]
          PathExpression [14-15] [T]
            Identifier(T) [14-15] [T]
      WhereClause [16-39] [where TRUE IS NOT FALSE]
        BinaryExpression(IS NOT) [22-39] [TRUE IS NOT FALSE]
          BooleanLiteral(TRUE) [22-26] [TRUE]
          BooleanLiteral(FALSE) [34-39] [FALSE]
--
SELECT
  1
FROM
  T
WHERE
  TRUE IS NOT FALSE
==

select FALSE from T where NULL IS TRUE
--
QueryStatement [0-38] [select FALSE...NULL IS TRUE]
  Query [0-38] [select FALSE...NULL IS TRUE]
    Select [0-38] [select FALSE...NULL IS TRUE]
      SelectList [7-12] [FALSE]
        SelectColumn [7-12] [FALSE]
          BooleanLiteral(FALSE) [7-12] [FALSE]
      FromClause [13-19] [from T]
        TablePathExpression [18-19] [T]
          PathExpression [18-19] [T]
            Identifier(T) [18-19] [T]
      WhereClause [20-38] [where NULL IS TRUE]
        BinaryExpression(IS) [26-38] [NULL IS TRUE]
          NullLiteral(NULL) [26-30] [NULL]
          BooleanLiteral(TRUE) [34-38] [TRUE]
--
SELECT
  FALSE
FROM
  T
WHERE
  NULL IS TRUE
==

select TRUE IS NULL FALSE
--
ERROR: Syntax error: Expected end of input but got keyword FALSE [at 1:21]
select TRUE IS NULL FALSE
                    ^
==

select x from T where x IS y
--
ERROR: Syntax error: Expected keyword FALSE or keyword NULL or keyword TRUE or keyword UNKNOWN but got identifier "y" [at 1:28]
select x from T where x IS y
                           ^
==

select x IS NOT 5
--
ERROR: Syntax error: Expected keyword FALSE or keyword NULL or keyword TRUE or keyword UNKNOWN but got integer literal "5" [at 1:17]
select x IS NOT 5
                ^
==

select * from Table1 where col BETWEEN value1 AND value2;
--
QueryStatement [0-56] [select * from...AND value2]
  Query [0-56] [select * from...AND value2]
    Select [0-56] [select * from...AND value2]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-20] [from Table1]
        TablePathExpression [14-20] [Table1]
          PathExpression [14-20] [Table1]
            Identifier(Table1) [14-20] [Table1]
      WhereClause [21-56] [where col...AND value2]
        BetweenExpression(BETWEEN) [27-56] [col BETWEEN value1 AND value2]
          PathExpression [27-30] [col]
            Identifier(col) [27-30] [col]
          Location [31-38] [BETWEEN]
          PathExpression [39-45] [value1]
            Identifier(value1) [39-45] [value1]
          PathExpression [50-56] [value2]
            Identifier(value2) [50-56] [value2]
--
SELECT
  *
FROM
  Table1
WHERE
  col BETWEEN value1 AND value2
==

# Unbalanced parentheses/brackets tokenizes correctly (or at least without
# crashing) but doesn't parse.
SELECT {{(|{|[|}} foo {{)|}|]}} {{)|}|]}}, foo
--
ALTERNATION GROUP: (,),)
--
ERROR: Syntax error: Expected end of input but got ")" [at 1:16]
SELECT ( foo ) ), foo
               ^
--
ALTERNATION GROUP: (,),}
--
ERROR: Syntax error: Expected end of input but got "}" [at 1:16]
SELECT ( foo ) }, foo
               ^
--
ALTERNATION GROUP: (,),]
--
ERROR: Syntax error: Expected end of input but got "]" [at 1:16]
SELECT ( foo ) ], foo
               ^
--
ALTERNATION GROUP: (,},)
--
ERROR: Syntax error: Unexpected "}" [at 1:14]
SELECT ( foo } ), foo
             ^
--
ALTERNATION GROUP: (,},}
--
ERROR: Syntax error: Unexpected "}" [at 1:14]
SELECT ( foo } }, foo
             ^
--
ALTERNATION GROUP: (,},]
--
ERROR: Syntax error: Unexpected "}" [at 1:14]
SELECT ( foo } ], foo
             ^
--
ALTERNATION GROUP: (,],)
--
ERROR: Syntax error: Unexpected "]" [at 1:14]
SELECT ( foo ] ), foo
             ^
--
ALTERNATION GROUP: (,],}
--
ERROR: Syntax error: Unexpected "]" [at 1:14]
SELECT ( foo ] }, foo
             ^
--
ALTERNATION GROUP: (,],]
--
ERROR: Syntax error: Unexpected "]" [at 1:14]
SELECT ( foo ] ], foo
             ^
--
ALTERNATION GROUP: {,),)
--
ERROR: Syntax error: Expected ":" or "{" but got ")" [at 1:14]
SELECT { foo ) ), foo
             ^
--
ALTERNATION GROUP: {,),}
--
ERROR: Syntax error: Expected ":" or "{" but got ")" [at 1:14]
SELECT { foo ) }, foo
             ^
--
ALTERNATION GROUP: {,),]
--
ERROR: Syntax error: Expected ":" or "{" but got ")" [at 1:14]
SELECT { foo ) ], foo
             ^
--
ALTERNATION GROUP: {,},)
--
ERROR: Syntax error: Expected ":" or "{" but got "}" [at 1:14]
SELECT { foo } ), foo
             ^
--
ALTERNATION GROUP: {,},}
--
ERROR: Syntax error: Expected ":" or "{" but got "}" [at 1:14]
SELECT { foo } }, foo
             ^
--
ALTERNATION GROUP: {,},]
--
ERROR: Syntax error: Expected ":" or "{" but got "}" [at 1:14]
SELECT { foo } ], foo
             ^
--
ALTERNATION GROUP: {,],)
--
ERROR: Syntax error: Expected ":" or "{" but got "]" [at 1:14]
SELECT { foo ] ), foo
             ^
--
ALTERNATION GROUP: {,],}
--
ERROR: Syntax error: Expected ":" or "{" but got "]" [at 1:14]
SELECT { foo ] }, foo
             ^
--
ALTERNATION GROUP: {,],]
--
ERROR: Syntax error: Expected ":" or "{" but got "]" [at 1:14]
SELECT { foo ] ], foo
             ^
--
ALTERNATION GROUP: [,),)
--
ERROR: Syntax error: Expected "," or "]" but got ")" [at 1:14]
SELECT [ foo ) ), foo
             ^
--
ALTERNATION GROUP: [,),}
--
ERROR: Syntax error: Expected "," or "]" but got ")" [at 1:14]
SELECT [ foo ) }, foo
             ^
--
ALTERNATION GROUP: [,),]
--
ERROR: Syntax error: Expected "," or "]" but got ")" [at 1:14]
SELECT [ foo ) ], foo
             ^
--
ALTERNATION GROUP: [,},)
--
ERROR: Syntax error: Expected "," or "]" but got "}" [at 1:14]
SELECT [ foo } ), foo
             ^
--
ALTERNATION GROUP: [,},}
--
ERROR: Syntax error: Expected "," or "]" but got "}" [at 1:14]
SELECT [ foo } }, foo
             ^
--
ALTERNATION GROUP: [,},]
--
ERROR: Syntax error: Expected "," or "]" but got "}" [at 1:14]
SELECT [ foo } ], foo
             ^
--
ALTERNATION GROUP: [,],)
--
ERROR: Syntax error: Expected end of input but got ")" [at 1:16]
SELECT [ foo ] ), foo
               ^
--
ALTERNATION GROUP: [,],}
--
ERROR: Syntax error: Expected end of input but got "}" [at 1:16]
SELECT [ foo ] }, foo
               ^
--
ALTERNATION GROUP: [,],]
--
ERROR: Syntax error: Expected end of input but got "]" [at 1:16]
SELECT [ foo ] ], foo
               ^
--
ALTERNATION GROUP: ),)
--
ERROR: Syntax error: Expected end of input but got ")" [at 1:13]
SELECT  foo ) ), foo
            ^
--
ALTERNATION GROUP: ),}
--
ERROR: Syntax error: Expected end of input but got ")" [at 1:13]
SELECT  foo ) }, foo
            ^
--
ALTERNATION GROUP: ),]
--
ERROR: Syntax error: Expected end of input but got ")" [at 1:13]
SELECT  foo ) ], foo
            ^
--
ALTERNATION GROUP: },)
--
ERROR: Syntax error: Expected end of input but got "}" [at 1:13]
SELECT  foo } ), foo
            ^
--
ALTERNATION GROUP: },}
--
ERROR: Syntax error: Expected end of input but got "}" [at 1:13]
SELECT  foo } }, foo
            ^
--
ALTERNATION GROUP: },]
--
ERROR: Syntax error: Expected end of input but got "}" [at 1:13]
SELECT  foo } ], foo
            ^
--
ALTERNATION GROUP: ],)
--
ERROR: Syntax error: Expected end of input but got "]" [at 1:13]
SELECT  foo ] ), foo
            ^
--
ALTERNATION GROUP: ],}
--
ERROR: Syntax error: Expected end of input but got "]" [at 1:13]
SELECT  foo ] }, foo
            ^
--
ALTERNATION GROUP: ],]
--
ERROR: Syntax error: Expected end of input but got "]" [at 1:13]
SELECT  foo ] ], foo
            ^
==

# Closing parentheses/brackets in the middle of a BETWEEN tokenizes correctly
# but doesn't parse.
SELECT {{(|{|[}} x BETWEEN y{{)|}|]}}, foo
--
ALTERNATION GROUP: (,)
--
ERROR: Syntax error: Unexpected ")" [at 1:21]
SELECT ( x BETWEEN y), foo
                    ^
--
ALTERNATION GROUP: (,}
--
ERROR: Syntax error: Unexpected "}" [at 1:21]
SELECT ( x BETWEEN y}, foo
                    ^
--
ALTERNATION GROUP: (,]
--
ERROR: Syntax error: Unexpected "]" [at 1:21]
SELECT ( x BETWEEN y], foo
                    ^
--
ALTERNATION GROUP: {,)
--
ERROR: Syntax error: Expected ":" or "{" but got keyword BETWEEN [at 1:12]
SELECT { x BETWEEN y), foo
           ^
--
ALTERNATION GROUP: {,}
--
ERROR: Syntax error: Expected ":" or "{" but got keyword BETWEEN [at 1:12]
SELECT { x BETWEEN y}, foo
           ^
--
ALTERNATION GROUP: {,]
--
ERROR: Syntax error: Expected ":" or "{" but got keyword BETWEEN [at 1:12]
SELECT { x BETWEEN y], foo
           ^
--
ALTERNATION GROUP: [,)
--
ERROR: Syntax error: Unexpected ")" [at 1:21]
SELECT [ x BETWEEN y), foo
                    ^
--
ALTERNATION GROUP: [,}
--
ERROR: Syntax error: Unexpected "}" [at 1:21]
SELECT [ x BETWEEN y}, foo
                    ^
--
ALTERNATION GROUP: [,]
--
ERROR: Syntax error: Unexpected "]" [at 1:21]
SELECT [ x BETWEEN y], foo
                    ^
==

select key, kv.key, kv, (kv).key from KeyValue kv;
--
QueryStatement [0-49] [select key...KeyValue kv]
  Query [0-49] [select key...KeyValue kv]
    Select [0-49] [select key...KeyValue kv]
      SelectList [7-32] [key, kv.key, kv, (kv).key]
        SelectColumn [7-10] [key]
          PathExpression [7-10] [key]
            Identifier(key) [7-10] [key]
        SelectColumn [12-18] [kv.key]
          PathExpression [12-18] [kv.key]
            Identifier(kv) [12-14] [kv]
            Identifier(key) [15-18] [key]
        SelectColumn [20-22] [kv]
          PathExpression [20-22] [kv]
            Identifier(kv) [20-22] [kv]
        SelectColumn [24-32] [(kv).key]
          DotIdentifier [24-32] [(kv).key]
            PathExpression [25-27] [kv]
              Identifier(kv) [25-27] [kv]
            Identifier(key) [29-32] [key]
      FromClause [33-49] [from KeyValue kv]
        TablePathExpression [38-49] [KeyValue kv]
          PathExpression [38-46] [KeyValue]
            Identifier(KeyValue) [38-46] [KeyValue]
          Alias [47-49] [kv]
            Identifier(kv) [47-49] [kv]
--
SELECT
  key,
  kv.key,
  kv,
  (kv).key
FROM
  KeyValue AS kv
==

# NOT IN is handled specially, but NOTIN shouldn't be.
SELECT 1 AS NOTIN;
--
QueryStatement [0-17] [SELECT 1 AS NOTIN]
  Query [0-17] [SELECT 1 AS NOTIN]
    Select [0-17] [SELECT 1 AS NOTIN]
      SelectList [7-17] [1 AS NOTIN]
        SelectColumn [7-17] [1 AS NOTIN]
          IntLiteral(1) [7-8] [1]
          Alias [9-17] [AS NOTIN]
            Identifier(NOTIN) [12-17] [NOTIN]
--
SELECT
  1 AS NOTIN
==

# NOT IN is handled specially, but NOTIN shouldn't be.
SELECT 1 NOTIN (2, 3);
--
ERROR: Syntax error: Expected end of input but got "(" [at 1:16]
SELECT 1 NOTIN (2, 3);
               ^
==

# NOT BETWEEN is handled specially, but NOTBETWEEN shouldn't be.
SELECT 1 AS NOTBETWEEN;
--
QueryStatement [0-22] [SELECT 1 AS NOTBETWEEN]
  Query [0-22] [SELECT 1 AS NOTBETWEEN]
    Select [0-22] [SELECT 1 AS NOTBETWEEN]
      SelectList [7-22] [1 AS NOTBETWEEN]
        SelectColumn [7-22] [1 AS NOTBETWEEN]
          IntLiteral(1) [7-8] [1]
          Alias [9-22] [AS NOTBETWEEN]
            Identifier(NOTBETWEEN) [12-22] [NOTBETWEEN]
--
SELECT
  1 AS NOTBETWEEN
==

# NOT BETWEEN is handled specially, but NOTBETWEEN shouldn't be.
SELECT 1 NOTBETWEEN 1 AND 2;
--
ERROR: Syntax error: Expected end of input but got integer literal "1" [at 1:21]
SELECT 1 NOTBETWEEN 1 AND 2;
                    ^
==

# NOT LIKE is handled specially, but NOTLIKE shouldn't be.
SELECT 1 AS NOTLIKE;
--
QueryStatement [0-19] [SELECT 1 AS NOTLIKE]
  Query [0-19] [SELECT 1 AS NOTLIKE]
    Select [0-19] [SELECT 1 AS NOTLIKE]
      SelectList [7-19] [1 AS NOTLIKE]
        SelectColumn [7-19] [1 AS NOTLIKE]
          IntLiteral(1) [7-8] [1]
          Alias [9-19] [AS NOTLIKE]
            Identifier(NOTLIKE) [12-19] [NOTLIKE]
--
SELECT
  1 AS NOTLIKE
==

# NOT LIKE is handled specially, but NOTLIKE shouldn't be.
SELECT 1 NOTLIKE 'abc%';
--
ERROR: Syntax error: Expected end of input but got string literal 'abc%' [at 1:18]
SELECT 1 NOTLIKE 'abc%';
                 ^
==

# <> and != are different operators at the parser level. They should be
# unparsed as themselves.
SELECT 1 <> 1, 1 != 1
--
QueryStatement [0-21] [SELECT 1 <> 1, 1 != 1]
  Query [0-21] [SELECT 1 <> 1, 1 != 1]
    Select [0-21] [SELECT 1 <> 1, 1 != 1]
      SelectList [7-21] [1 <> 1, 1 != 1]
        SelectColumn [7-13] [1 <> 1]
          BinaryExpression(<>) [7-13] [1 <> 1]
            IntLiteral(1) [7-8] [1]
            IntLiteral(1) [12-13] [1]
        SelectColumn [15-21] [1 != 1]
          BinaryExpression(!=) [15-21] [1 != 1]
            IntLiteral(1) [15-16] [1]
            IntLiteral(1) [20-21] [1]
--
SELECT
  1 <> 1,
  1 != 1
==

# Various C-style comment corner cases.
[no_test_get_parse_tokens]
/* C-style comment with {{* in the middle|/ in the middle|trailing *|trailing**}}*/
SELECT foo;
--
ALTERNATION GROUPS:
    * in the middle
    / in the middle
--
QueryStatement [42-52] [SELECT foo]
  Query [42-52] [SELECT foo]
    Select [42-52] [SELECT foo]
      SelectList [49-52] [foo]
        SelectColumn [49-52] [foo]
          PathExpression [49-52] [foo]
            Identifier(foo) [49-52] [foo]
--
SELECT
  foo
--
ALTERNATION GROUPS:
    trailing *
    trailing**
--
QueryStatement [37-47] [SELECT foo]
  Query [37-47] [SELECT foo]
    Select [37-47] [SELECT foo]
      SelectList [44-47] [foo]
        SelectColumn [44-47] [foo]
          PathExpression [44-47] [foo]
            Identifier(foo) [44-47] [foo]
--
SELECT
  foo
==

# Parenthesized ANDs should not be merged.
SELECT (TRUE AND FALSE) AND (FALSE AND TRUE)
--
QueryStatement [0-44] [SELECT (TRUE...AND TRUE)]
  Query [0-44] [SELECT (TRUE...AND TRUE)]
    Select [0-44] [SELECT (TRUE...AND TRUE)]
      SelectList [7-44] [(TRUE AND...AND TRUE)]
        SelectColumn [7-44] [(TRUE AND...AND TRUE)]
          AndExpr [7-44] [(TRUE AND...AND TRUE)]
            AndExpr [8-22] [TRUE AND FALSE]
              BooleanLiteral(TRUE) [8-12] [TRUE]
              BooleanLiteral(FALSE) [17-22] [FALSE]
            AndExpr [29-43] [FALSE AND TRUE]
              BooleanLiteral(FALSE) [29-34] [FALSE]
              BooleanLiteral(TRUE) [39-43] [TRUE]
--
SELECT
  (TRUE AND FALSE) AND (FALSE AND TRUE)
==

# Parenthesized ORs should not be merged.
SELECT (TRUE OR FALSE) OR (FALSE OR TRUE)
--
QueryStatement [0-41] [SELECT (TRUE...FALSE OR TRUE)]
  Query [0-41] [SELECT (TRUE...FALSE OR TRUE)]
    Select [0-41] [SELECT (TRUE...FALSE OR TRUE)]
      SelectList [7-41] [(TRUE OR FALSE...ALSE OR TRUE)]
        SelectColumn [7-41] [(TRUE OR FALSE...ALSE OR TRUE)]
          OrExpr [7-41] [(TRUE OR FALSE...ALSE OR TRUE)]
            OrExpr [8-21] [TRUE OR FALSE]
              BooleanLiteral(TRUE) [8-12] [TRUE]
              BooleanLiteral(FALSE) [16-21] [FALSE]
            OrExpr [27-40] [FALSE OR TRUE]
              BooleanLiteral(FALSE) [27-32] [FALSE]
              BooleanLiteral(TRUE) [36-40] [TRUE]
--
SELECT
  (TRUE OR FALSE) OR (FALSE OR TRUE)
==

# Query ending in an end-of-line comment without a newline.
[strip_trailing_newline]
SELECT 1 # End of line comment
--
QueryStatement [0-8] [SELECT 1]
  Query [0-8] [SELECT 1]
    Select [0-8] [SELECT 1]
      SelectList [7-8] [1]
        SelectColumn [7-8] [1]
          IntLiteral(1) [7-8] [1]
--
SELECT
  1
==

# Function call operator can only be applied to an *unparenthesized* path
# expression.
select {{(foo)|(foo.bar)|(3)|3|(current_date)|(current_date())}}
       ({{DISTINCT|}} foo)
--
ALTERNATION GROUPS:
    (foo),DISTINCT
    (foo.bar),DISTINCT
    (3),DISTINCT
    3,DISTINCT
    (current_date),DISTINCT
    (current_date()),DISTINCT
--
ERROR: Syntax error: Function call cannot be applied to this expression. Function calls require a path, e.g. a.b.c() [at 2:8]
       (DISTINCT foo)
       ^
--
ALTERNATION GROUPS:
    (foo),
    (foo.bar),
    (3),
    3,
    (current_date),
    (current_date()),
--
ERROR: Syntax error: Function call cannot be applied to this expression. Function calls require a path, e.g. a.b.c() [at 2:8]
       ( foo)
       ^
