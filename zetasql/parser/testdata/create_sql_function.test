# Missing function arguments.
create function myfunc
  as ( ) ;
--
ERROR: Syntax error: Expected "(" or "." but got keyword AS [at 2:3]
  as ( ) ;
  ^
==

# Missing expression.
create function myfunc ( )
  as ( ) ;
--
ERROR: Syntax error: Unexpected ")" [at 2:8]
  as ( ) ;
       ^
==

# Missing AS.
create function myfunc ( ) ( 'wot' ) ;
--
ERROR: Syntax error: Expected end of input but got "(" [at 1:28]
create function myfunc ( ) ( 'wot' ) ;
                           ^
==

# Can't test missing parens around statement.  It parses as an external function
# but then fails a DCHECK on unparsing.
# create function myfunc ( ) AS 'wot' ;
==

# Inferred return type with int literal.
create function myfunc ( )
  as ( 42 ) ;
--
CreateFunctionStatement [0-38] [create function...as ( 42 )]
  FunctionDeclaration [16-26] [myfunc ( )]
    PathExpression [16-22] [myfunc]
      Identifier(myfunc) [16-22] [myfunc]
    FunctionParameters [23-26] [( )]
  SqlFunctionBody [32-38] [( 42 )]
    IntLiteral(42) [34-36] [42]
--
CREATE FUNCTION myfunc()
AS (
  42
)
==

# CREATE scope modifiers
create {{temp|temporary|public|private}} function myfunc ( )
  as ( 42 ) ;
--
ALTERNATION GROUP: temp
--
CreateFunctionStatement(is_temp) [0-43] [create temp...as ( 42 )]
  FunctionDeclaration [21-31] [myfunc ( )]
    PathExpression [21-27] [myfunc]
      Identifier(myfunc) [21-27] [myfunc]
    FunctionParameters [28-31] [( )]
  SqlFunctionBody [37-43] [( 42 )]
    IntLiteral(42) [39-41] [42]
--
CREATE TEMP FUNCTION myfunc()
AS (
  42
)
--
ALTERNATION GROUP: temporary
--
CreateFunctionStatement(is_temp) [0-48] [create temporary...as ( 42 )]
  FunctionDeclaration [26-36] [myfunc ( )]
    PathExpression [26-32] [myfunc]
      Identifier(myfunc) [26-32] [myfunc]
    FunctionParameters [33-36] [( )]
  SqlFunctionBody [42-48] [( 42 )]
    IntLiteral(42) [44-46] [42]
--
CREATE TEMP FUNCTION myfunc()
AS (
  42
)
--
ALTERNATION GROUP: public
--
CreateFunctionStatement(is_public) [0-45] [create public...as ( 42 )]
  FunctionDeclaration [23-33] [myfunc ( )]
    PathExpression [23-29] [myfunc]
      Identifier(myfunc) [23-29] [myfunc]
    FunctionParameters [30-33] [( )]
  SqlFunctionBody [39-45] [( 42 )]
    IntLiteral(42) [41-43] [42]
--
CREATE PUBLIC FUNCTION myfunc()
AS (
  42
)
--
ALTERNATION GROUP: private
--
CreateFunctionStatement(is_private) [0-46] [create private...as ( 42 )]
  FunctionDeclaration [24-34] [myfunc ( )]
    PathExpression [24-30] [myfunc]
      Identifier(myfunc) [24-30] [myfunc]
    FunctionParameters [31-34] [( )]
  SqlFunctionBody [40-46] [( 42 )]
    IntLiteral(42) [42-44] [42]
--
CREATE PRIVATE FUNCTION myfunc()
AS (
  42
)
==

# "if not exists"
create function if not exists myfunc ( )
  as ( 42 ) ;
--
CreateFunctionStatement(is_if_not_exists) [0-52] [create function...as ( 42 )]
  FunctionDeclaration [30-40] [myfunc ( )]
    PathExpression [30-36] [myfunc]
      Identifier(myfunc) [30-36] [myfunc]
    FunctionParameters [37-40] [( )]
  SqlFunctionBody [46-52] [( 42 )]
    IntLiteral(42) [48-50] [42]
--
CREATE FUNCTION IF NOT EXISTS myfunc()
AS (
  42
)
==

# "temp" and "if not exists"
create temp function if not exists myfunc ( )
  as ( 42 ) ;
--
CreateFunctionStatement(is_temp, is_if_not_exists) [0-57] [create temp...as ( 42 )]
  FunctionDeclaration [35-45] [myfunc ( )]
    PathExpression [35-41] [myfunc]
      Identifier(myfunc) [35-41] [myfunc]
    FunctionParameters [42-45] [( )]
  SqlFunctionBody [51-57] [( 42 )]
    IntLiteral(42) [53-55] [42]
--
CREATE TEMP FUNCTION IF NOT EXISTS myfunc()
AS (
  42
)
==

# "or replace"
create or replace function myfunc ( )
  as ( 42 ) ;
--
CreateFunctionStatement(is_or_replace) [0-49] [create or...as ( 42 )]
  FunctionDeclaration [27-37] [myfunc ( )]
    PathExpression [27-33] [myfunc]
      Identifier(myfunc) [27-33] [myfunc]
    FunctionParameters [34-37] [( )]
  SqlFunctionBody [43-49] [( 42 )]
    IntLiteral(42) [45-47] [42]
--
CREATE OR REPLACE FUNCTION myfunc()
AS (
  42
)
==

# Function with multi-part name.
create function mypackage.myfunc ( )
  as ( 42 ) ;
--
CreateFunctionStatement [0-48] [create function...as ( 42 )]
  FunctionDeclaration [16-36] [mypackage.myfunc ( )]
    PathExpression [16-32] [mypackage.myfunc]
      Identifier(mypackage) [16-25] [mypackage]
      Identifier(myfunc) [26-32] [myfunc]
    FunctionParameters [33-36] [( )]
  SqlFunctionBody [42-48] [( 42 )]
    IntLiteral(42) [44-46] [42]
--
CREATE FUNCTION mypackage.myfunc()
AS (
  42
)
==

# Function with options in the end.
create function mypackage.myfunc ( )
  as ( 42 )
  options ( a=b, bruce=lee ) ;
--
CreateFunctionStatement [0-77] [create function...bruce=lee )]
  FunctionDeclaration [16-36] [mypackage.myfunc ( )]
    PathExpression [16-32] [mypackage.myfunc]
      Identifier(mypackage) [16-25] [mypackage]
      Identifier(myfunc) [26-32] [myfunc]
    FunctionParameters [33-36] [( )]
  SqlFunctionBody [42-48] [( 42 )]
    IntLiteral(42) [44-46] [42]
  OptionsList [59-77] [( a=b, bruce=lee )]
    OptionsEntry [61-64] [a=b]
      Identifier(a) [61-62] [a]
      PathExpression [63-64] [b]
        Identifier(b) [63-64] [b]
    OptionsEntry [66-75] [bruce=lee]
      Identifier(bruce) [66-71] [bruce]
      PathExpression [72-75] [lee]
        Identifier(lee) [72-75] [lee]
--
CREATE FUNCTION mypackage.myfunc()
AS (
  42
)
OPTIONS
  (a = b, bruce = lee)
==

# Function with options before body.
create function mypackage.myfunc ( )
  options ( a=b, bruce=lee )
  as ( 42 ) ;
--
CreateFunctionStatement [0-77] [create function...as ( 42 )]
  FunctionDeclaration [16-36] [mypackage.myfunc ( )]
    PathExpression [16-32] [mypackage.myfunc]
      Identifier(mypackage) [16-25] [mypackage]
      Identifier(myfunc) [26-32] [myfunc]
    FunctionParameters [33-36] [( )]
  SqlFunctionBody [71-77] [( 42 )]
    IntLiteral(42) [73-75] [42]
  OptionsList [47-65] [( a=b, bruce=lee )]
    OptionsEntry [49-52] [a=b]
      Identifier(a) [49-50] [a]
      PathExpression [51-52] [b]
        Identifier(b) [51-52] [b]
    OptionsEntry [54-63] [bruce=lee]
      Identifier(bruce) [54-59] [bruce]
      PathExpression [60-63] [lee]
        Identifier(lee) [60-63] [lee]
--
CREATE FUNCTION mypackage.myfunc()
AS (
  42
)
OPTIONS
  (a = b, bruce = lee)
==

# Inferred return type with statement.
create function myfunc ( a int64 )
  as ( if ( a > 0, a, -1 ) ) ;
--
CreateFunctionStatement [0-63] [create function...a, -1 ) )]
  FunctionDeclaration [16-34] [myfunc ( a int64 )]
    PathExpression [16-22] [myfunc]
      Identifier(myfunc) [16-22] [myfunc]
    FunctionParameters [23-34] [( a int64 )]
      FunctionParameter [25-32] [a int64]
        Identifier(a) [25-26] [a]
        SimpleType [27-32] [int64]
          PathExpression [27-32] [int64]
            Identifier(int64) [27-32] [int64]
  SqlFunctionBody [40-63] [( if ( a > 0, a, -1 ) )]
    FunctionCall [42-61] [if ( a > 0, a, -1 )]
      PathExpression [42-44] [if]
        Identifier("if") [42-44] [if]
      BinaryExpression(>) [47-52] [a > 0]
        PathExpression [47-48] [a]
          Identifier(a) [47-48] [a]
        IntLiteral(0) [51-52] [0]
      PathExpression [54-55] [a]
        Identifier(a) [54-55] [a]
      UnaryExpression(-) [57-59] [-1]
        IntLiteral(1) [58-59] [1]
--
CREATE FUNCTION myfunc(a int64)
AS (
  `if`(a > 0, a, -1)
)
==

# Explicit return type with statement.
create function myfunc ( a int32 )
  returns int32
  as ( if ( a > 0, a, -1 ) ) ;
--
CreateFunctionStatement [0-79] [create function...a, -1 ) )]
  FunctionDeclaration [16-34] [myfunc ( a int32 )]
    PathExpression [16-22] [myfunc]
      Identifier(myfunc) [16-22] [myfunc]
    FunctionParameters [23-34] [( a int32 )]
      FunctionParameter [25-32] [a int32]
        Identifier(a) [25-26] [a]
        SimpleType [27-32] [int32]
          PathExpression [27-32] [int32]
            Identifier(int32) [27-32] [int32]
  SimpleType [45-50] [int32]
    PathExpression [45-50] [int32]
      Identifier(int32) [45-50] [int32]
  SqlFunctionBody [56-79] [( if ( a > 0, a, -1 ) )]
    FunctionCall [58-77] [if ( a > 0, a, -1 )]
      PathExpression [58-60] [if]
        Identifier("if") [58-60] [if]
      BinaryExpression(>) [63-68] [a > 0]
        PathExpression [63-64] [a]
          Identifier(a) [63-64] [a]
        IntLiteral(0) [67-68] [0]
      PathExpression [70-71] [a]
        Identifier(a) [70-71] [a]
      UnaryExpression(-) [73-75] [-1]
        IntLiteral(1) [74-75] [1]
--
CREATE FUNCTION myfunc(a int32)
RETURNS int32 AS (
  `if`(a > 0, a, -1)
)
==

# Multiple arguments.
create function myfunc ( x int32, y int32 )
  returns int32
  as ( x * y ) ;
--
CreateFunctionStatement [0-74] [create function...( x * y )]
  FunctionDeclaration [16-43] [myfunc ( x int32, y int32 )]
    PathExpression [16-22] [myfunc]
      Identifier(myfunc) [16-22] [myfunc]
    FunctionParameters [23-43] [( x int32, y int32 )]
      FunctionParameter [25-32] [x int32]
        Identifier(x) [25-26] [x]
        SimpleType [27-32] [int32]
          PathExpression [27-32] [int32]
            Identifier(int32) [27-32] [int32]
      FunctionParameter [34-41] [y int32]
        Identifier(y) [34-35] [y]
        SimpleType [36-41] [int32]
          PathExpression [36-41] [int32]
            Identifier(int32) [36-41] [int32]
  SimpleType [54-59] [int32]
    PathExpression [54-59] [int32]
      Identifier(int32) [54-59] [int32]
  SqlFunctionBody [65-74] [( x * y )]
    BinaryExpression(*) [67-72] [x * y]
      PathExpression [67-68] [x]
        Identifier(x) [67-68] [x]
      PathExpression [71-72] [y]
        Identifier(y) [71-72] [y]
--
CREATE FUNCTION myfunc(x int32, y int32)
RETURNS int32 AS (
  x * y
)
==

# Explicit standalone return type.
# Also tests trivially returning an integer.
create function myfunc ( int64 x )
  returns a.b.c
  as ( 999 ) ;
--
CreateFunctionStatement [0-63] [create function...as ( 999 )]
  FunctionDeclaration [16-34] [myfunc ( int64 x )]
    PathExpression [16-22] [myfunc]
      Identifier(myfunc) [16-22] [myfunc]
    FunctionParameters [23-34] [( int64 x )]
      FunctionParameter [25-32] [int64 x]
        Identifier(int64) [25-30] [int64]
        SimpleType [31-32] [x]
          PathExpression [31-32] [x]
            Identifier(x) [31-32] [x]
  SimpleType [45-50] [a.b.c]
    PathExpression [45-50] [a.b.c]
      Identifier(a) [45-46] [a]
      Identifier(b) [47-48] [b]
      Identifier(c) [49-50] [c]
  SqlFunctionBody [56-63] [( 999 )]
    IntLiteral(999) [58-61] [999]
--
CREATE FUNCTION myfunc(int64 x)
RETURNS a.b.c AS (
  999
)
==

# Trivial function that returns a boolean.
create function myfunc ( )
  returns boolean
  as ( true ) ;
--
CreateFunctionStatement [0-58] [create function...as ( true )]
  FunctionDeclaration [16-26] [myfunc ( )]
    PathExpression [16-22] [myfunc]
      Identifier(myfunc) [16-22] [myfunc]
    FunctionParameters [23-26] [( )]
  SimpleType [37-44] [boolean]
    PathExpression [37-44] [boolean]
      Identifier(boolean) [37-44] [boolean]
  SqlFunctionBody [50-58] [( true )]
    BooleanLiteral(true) [52-56] [true]
--
CREATE FUNCTION myfunc()
RETURNS boolean AS (
  true
)
==

# Trivial function that returns a struct.
create function myfunc ( )
  returns struct<a string, b int32>
  as ( STRUCT<a string, b int32>('balloons', 99)
 ) ;
--
CreateFunctionStatement [0-114] [create function...ons', 99)  )]
  FunctionDeclaration [16-26] [myfunc ( )]
    PathExpression [16-22] [myfunc]
      Identifier(myfunc) [16-22] [myfunc]
    FunctionParameters [23-26] [( )]
  StructType [37-62] [struct<a string, b int32>]
    StructField [44-52] [a string]
      Identifier(a) [44-45] [a]
      SimpleType [46-52] [string]
        PathExpression [46-52] [string]
          Identifier(string) [46-52] [string]
    StructField [54-61] [b int32]
      Identifier(b) [54-55] [b]
      SimpleType [56-61] [int32]
        PathExpression [56-61] [int32]
          Identifier(int32) [56-61] [int32]
  SqlFunctionBody [68-114] [( STRUCT<a...balloons', 99)  )]
    StructConstructorWithKeyword [70-111] [STRUCT<a string...lloons', 99)]
      StructType [70-95] [STRUCT<a string, b int32>]
        StructField [77-85] [a string]
          Identifier(a) [77-78] [a]
          SimpleType [79-85] [string]
            PathExpression [79-85] [string]
              Identifier(string) [79-85] [string]
        StructField [87-94] [b int32]
          Identifier(b) [87-88] [b]
          SimpleType [89-94] [int32]
            PathExpression [89-94] [int32]
              Identifier(int32) [89-94] [int32]
      StructConstructorArg [96-106] ['balloons']
        StringLiteral('balloons') [96-106] ['balloons']
      StructConstructorArg [108-110] [99]
        IntLiteral(99) [108-110] [99]
--
CREATE FUNCTION myfunc()
RETURNS STRUCT< a string, b int32 > AS (
  STRUCT< a string, b int32 > ('balloons', 99)
)
==

# Trivial function that returns a struct, alternate syntax.
create function myfunc ( )
  returns struct<x string, y boolean>
  as ( ('abc', true) ) ;
--
CreateFunctionStatement [0-87] [create function...', true) )]
  FunctionDeclaration [16-26] [myfunc ( )]
    PathExpression [16-22] [myfunc]
      Identifier(myfunc) [16-22] [myfunc]
    FunctionParameters [23-26] [( )]
  StructType [37-64] [struct<x string, y boolean>]
    StructField [44-52] [x string]
      Identifier(x) [44-45] [x]
      SimpleType [46-52] [string]
        PathExpression [46-52] [string]
          Identifier(string) [46-52] [string]
    StructField [54-63] [y boolean]
      Identifier(y) [54-55] [y]
      SimpleType [56-63] [boolean]
        PathExpression [56-63] [boolean]
          Identifier(boolean) [56-63] [boolean]
  SqlFunctionBody [70-87] [( ('abc', true) )]
    StructConstructorWithParens [72-85] [('abc', true)]
      StringLiteral('abc') [73-78] ['abc']
      BooleanLiteral(true) [80-84] [true]
--
CREATE FUNCTION myfunc()
RETURNS STRUCT< x string, y boolean > AS (
  ('abc', true)
)
==

# Trivial function that returns a string
create function myfunc ( )
  returns string
  as ( 'hello world' ) ;
--
CreateFunctionStatement [0-66] [create function...llo world' )]
  FunctionDeclaration [16-26] [myfunc ( )]
    PathExpression [16-22] [myfunc]
      Identifier(myfunc) [16-22] [myfunc]
    FunctionParameters [23-26] [( )]
  SimpleType [37-43] [string]
    PathExpression [37-43] [string]
      Identifier(string) [37-43] [string]
  SqlFunctionBody [49-66] [( 'hello world' )]
    StringLiteral('hello world') [51-64] ['hello world']
--
CREATE FUNCTION myfunc()
RETURNS string AS (
  'hello world'
)
==

# Invalid but parseable node : argument name not given.  Missing argument
# names are only valid in the context of DROP FUNCTION statements.
create function myfunc ( string )
  returns string
  as ( 'hello world' ) ;
--
CreateFunctionStatement [0-73] [create function...llo world' )]
  FunctionDeclaration [16-33] [myfunc ( string )]
    PathExpression [16-22] [myfunc]
      Identifier(myfunc) [16-22] [myfunc]
    FunctionParameters [23-33] [( string )]
      FunctionParameter [25-31] [string]
        SimpleType [25-31] [string]
          PathExpression [25-31] [string]
            Identifier(string) [25-31] [string]
  SimpleType [44-50] [string]
    PathExpression [44-50] [string]
      Identifier(string) [44-50] [string]
  SqlFunctionBody [56-73] [( 'hello world' )]
    StringLiteral('hello world') [58-71] ['hello world']
--
CREATE FUNCTION myfunc(string)
RETURNS string AS (
  'hello world'
)
==

# Invalid but parseable node : some argument names not given.  Missing argument
# names are only valid in the context of DROP FUNCTION statements.
create function myfunc ( string, s string, int32, i int32 )
  returns string
  as ( 'hello world' ) ;
--
CreateFunctionStatement [0-99] [create function...llo world' )]
  FunctionDeclaration [16-59] [myfunc ( string...i int32 )]
    PathExpression [16-22] [myfunc]
      Identifier(myfunc) [16-22] [myfunc]
    FunctionParameters [23-59] [( string,...i int32 )]
      FunctionParameter [25-31] [string]
        SimpleType [25-31] [string]
          PathExpression [25-31] [string]
            Identifier(string) [25-31] [string]
      FunctionParameter [33-41] [s string]
        Identifier(s) [33-34] [s]
        SimpleType [35-41] [string]
          PathExpression [35-41] [string]
            Identifier(string) [35-41] [string]
      FunctionParameter [43-48] [int32]
        SimpleType [43-48] [int32]
          PathExpression [43-48] [int32]
            Identifier(int32) [43-48] [int32]
      FunctionParameter [50-57] [i int32]
        Identifier(i) [50-51] [i]
        SimpleType [52-57] [int32]
          PathExpression [52-57] [int32]
            Identifier(int32) [52-57] [int32]
  SimpleType [70-76] [string]
    PathExpression [70-76] [string]
      Identifier(string) [70-76] [string]
  SqlFunctionBody [82-99] [( 'hello world' )]
    StringLiteral('hello world') [84-97] ['hello world']
--
CREATE FUNCTION myfunc(string, s string, int32, i int32)
RETURNS string AS (
  'hello world'
)
==

create aggregate function myfunc
          (string not aggregate, s string, int32, i int32 not aggregate)
  as ( count(*) ) ;
--
CreateFunctionStatement(is_aggregate=true) [0-123] [create aggregate...count(*) )]
  FunctionDeclaration [26-105] [myfunc...aggregate)]
    PathExpression [26-32] [myfunc]
      Identifier(myfunc) [26-32] [myfunc]
    FunctionParameters [43-105] [(string not...aggregate)]
      FunctionParameter(is_not_aggregate=true) [44-64] [string not aggregate]
        SimpleType [44-50] [string]
          PathExpression [44-50] [string]
            Identifier(string) [44-50] [string]
      FunctionParameter [66-74] [s string]
        Identifier(s) [66-67] [s]
        SimpleType [68-74] [string]
          PathExpression [68-74] [string]
            Identifier(string) [68-74] [string]
      FunctionParameter [76-81] [int32]
        SimpleType [76-81] [int32]
          PathExpression [76-81] [int32]
            Identifier(int32) [76-81] [int32]
      FunctionParameter(is_not_aggregate=true) [83-104] [i int32 not aggregate]
        Identifier(i) [83-84] [i]
        SimpleType [85-90] [int32]
          PathExpression [85-90] [int32]
            Identifier(int32) [85-90] [int32]
  SqlFunctionBody [111-123] [( count(*) )]
    FunctionCall [113-121] [count(*)]
      PathExpression [113-118] [count]
        Identifier(count) [113-118] [count]
      Star(*) [119-120] [*]
--
CREATE AGGREGATE FUNCTION myfunc(string NOT AGGREGATE, s string, int32, i int32 NOT AGGREGATE)
AS (
  count(*)
)
==

create or replace aggregate function if not exists myfunc();
--
CreateFunctionStatement(is_or_replace, is_if_not_exists)(is_aggregate=true) [0-59] [create or...exists myfunc()]
  FunctionDeclaration [51-59] [myfunc()]
    PathExpression [51-57] [myfunc]
      Identifier(myfunc) [51-57] [myfunc]
    FunctionParameters [57-59] [()]
--
CREATE OR REPLACE AGGREGATE FUNCTION IF NOT EXISTS myfunc()
==

create {{temp|temporary}} aggregate function myfunc();
--
ALTERNATION GROUP: temp
--
CreateFunctionStatement(is_temp)(is_aggregate=true) [0-39] [create temp...unction myfunc()]
  FunctionDeclaration [31-39] [myfunc()]
    PathExpression [31-37] [myfunc]
      Identifier(myfunc) [31-37] [myfunc]
    FunctionParameters [37-39] [()]
--
CREATE TEMP AGGREGATE FUNCTION myfunc()
--
ALTERNATION GROUP: temporary
--
CreateFunctionStatement(is_temp)(is_aggregate=true) [0-44] [create temporary...on myfunc()]
  FunctionDeclaration [36-44] [myfunc()]
    PathExpression [36-42] [myfunc]
      Identifier(myfunc) [36-42] [myfunc]
    FunctionParameters [42-44] [()]
--
CREATE TEMP AGGREGATE FUNCTION myfunc()
==

create or replace {{temp|temporary}} aggregate function myfunc();
--
ALTERNATION GROUP: temp
--
CreateFunctionStatement(is_temp, is_or_replace)(is_aggregate=true) [0-50] [create or...function myfunc()]
  FunctionDeclaration [42-50] [myfunc()]
    PathExpression [42-48] [myfunc]
      Identifier(myfunc) [42-48] [myfunc]
    FunctionParameters [48-50] [()]
--
CREATE OR REPLACE TEMP AGGREGATE FUNCTION myfunc()
--
ALTERNATION GROUP: temporary
--
CreateFunctionStatement(is_temp, is_or_replace)(is_aggregate=true) [0-55] [create or...function myfunc()]
  FunctionDeclaration [47-55] [myfunc()]
    PathExpression [47-53] [myfunc]
      Identifier(myfunc) [47-53] [myfunc]
    FunctionParameters [53-55] [()]
--
CREATE OR REPLACE TEMP AGGREGATE FUNCTION myfunc()
==

# The parser returns a helpful error message when the SQL UDF declaration
# forgets parentheses around an expression subquery in the body.
create temporary function f() returns int64 as (select 1);
--
ERROR: The body of each CREATE FUNCTION statement is an expression, not a query; to use a query as an expression, the query must be wrapped with additional parentheses to make it a scalar subquery expression [at 1:49]
create temporary function f() returns int64 as (select 1);
                                                ^
==

create function myfunc(x interval) returns interval
as (x)
--
CreateFunctionStatement [0-58] [create function...erval as (x)]
  FunctionDeclaration [16-34] [myfunc(x interval)]
    PathExpression [16-22] [myfunc]
      Identifier(myfunc) [16-22] [myfunc]
    FunctionParameters [22-34] [(x interval)]
      FunctionParameter [23-33] [x interval]
        Identifier(x) [23-24] [x]
        SimpleType [25-33] [interval]
          PathExpression [25-33] [interval]
            Identifier("interval") [25-33] [interval]
  SimpleType [43-51] [interval]
    PathExpression [43-51] [interval]
      Identifier("interval") [43-51] [interval]
  SqlFunctionBody [55-58] [(x)]
    PathExpression [56-57] [x]
      Identifier(x) [56-57] [x]
--
CREATE FUNCTION myfunc(x interval)
RETURNS interval AS (
  x
)
