[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]
[load_enum_names=zetasql_test__.TestEnum]
[prepare_database]
CREATE TABLE TestTable AS
SELECT cast(1 as int64) as row_id,
       cast(null as bool) as bool_val,
       cast(null as int64) as int64_val,
       cast(null as uint64) as uint64_val,
       cast(null as double) as double_val,
       cast(null as string) as str_val UNION ALL
  SELECT 2,  true,  2,    3,    1.5,  "A"   UNION ALL
  SELECT 3,  false, 1,    6,    1.5,  "A"   UNION ALL
  SELECT 4,  true,  null, 2,    2.5,  "B"   UNION ALL
  SELECT 5,  false, 1,    null, 3.5,  "A"   UNION ALL
  SELECT 6,  true,  2,    2,    null, "C"   UNION ALL
  SELECT 7,  false, 1,    5,    -0.5,  null UNION ALL
  SELECT 8,  true,  4,    2,    -1.5,  "A"  UNION ALL
  SELECT 9,  false, 2,    3,    1.5,   "B"  UNION ALL
  SELECT 10, true,  3,    1,    2.5,   "B"
--
ARRAY<STRUCT<row_id INT64,
             bool_val BOOL,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE,
             str_val STRING>>
[
  {1, NULL, NULL, NULL, NULL, NULL},
  {2, true, 2, 3, 1.5, "A"},
  {3, false, 1, 6, 1.5, "A"},
  {4, true, NULL, 2, 2.5, "B"},
  {5, false, 1, NULL, 3.5, "A"},
  {6, true, 2, 2, NULL, "C"},
  {7, false, 1, 5, -0.5, NULL},
  {8, true, 4, 2, -1.5, "A"},
  {9, false, 2, 3, 1.5, "B"},
  {10, true, 3, 1, 2.5, "B"}
]
==

[prepare_database]
CREATE TABLE TableDateTimeBytes AS
SELECT cast(1 as int64) as row_id,
       cast(null as date) as date_val,
       cast(null as timestamp) as timestamp_val,
       cast(null as bytes) as bytes_val UNION ALL
SELECT 2,
       cast('2014-01-01' as date),
       TIMESTAMP '2014-01-01 00:00:01.011011-08',
       cast("1" as bytes) UNION ALL
SELECT 3,
       cast('2014-01-01' as date),
       TIMESTAMP '2014-01-01 00:00:01.011011-08',
       cast("2" as bytes) UNION ALL
SELECT 4,
       cast('2015-01-01' as date),
       TIMESTAMP '2014-01-01 00:00:01.011011-08',
       cast("1" as bytes) UNION ALL
SELECT 5,
       cast('2015-01-01' as date),
       TIMESTAMP '2013-01-01 00:00:01.011011-08',
       cast("2" as bytes) UNION ALL
SELECT 6,
       cast('2014-01-01' as date),
       TIMESTAMP '2015-01-01 00:00:01.011011-08',
       cast("5" as bytes)
--
ARRAY<STRUCT<
        row_id INT64,
        date_val DATE,
        timestamp_val TIMESTAMP,
        bytes_val BYTES
      >>
[{1, NULL, NULL, NULL},
 {
   2,
   2014-01-01,
   2014-01-01 08:00:01.011011+00,
   b"1"
 },
 {
   3,
   2014-01-01,
   2014-01-01 08:00:01.011011+00,
   b"2"
 },
 {
   4,
   2015-01-01,
   2014-01-01 08:00:01.011011+00,
   b"1"
 },
 {
   5,
   2015-01-01,
   2013-01-01 08:00:01.011011+00,
   b"2"
 },
 {
   6,
   2014-01-01,
   2015-01-01 08:00:01.011011+00,
   b"5"
 }]
==

# ----------------------------------------------------------------------------
# MIN
# ----------------------------------------------------------------------------

[default required_features=ANALYTIC_FUNCTIONS]
[name=analytic_min_int64_uint64]
[labels=analytic_cumulative_min]
SELECT row_id, int64_val, uint64_val,
       MIN(int64_val) OVER (ORDER BY row_id)
From TestTable
--
ARRAY<STRUCT<row_id INT64, int64_val INT64, uint64_val UINT64, INT64>>[unknown order:
  {1, NULL, NULL, NULL},
  {2, 2, 3, 2},
  {3, 1, 6, 1},
  {4, NULL, 2, 1},
  {5, 1, NULL, 1},
  {6, 2, 2, 1},
  {7, 1, 5, 1},
  {8, 4, 2, 1},
  {9, 2, 3, 1},
  {10, 3, 1, 1}
]
==

[name=analytic_min_int32_uint32]
[labels=analytic_min_with_bounded_start]
SELECT row_id, int64_val,
       MIN(CAST(int64_val as int32)) OVER (ORDER BY row_id ROWS 4 PRECEDING),
       MIN(CAST(int64_val as uint32)) OVER (ORDER BY row_id RANGE 2 PRECEDING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, int64_val INT64, INT32, UINT32>>[unknown order:
  {1, NULL, NULL, NULL},
  {2, 2, 2, 2},
  {3, 1, 1, 1},
  {4, NULL, 1, 1},
  {5, 1, 1, 1},
  {6, 2, 1, 1},
  {7, 1, 1, 1},
  {8, 4, 1, 1},
  {9, 2, 1, 1},
  {10, 3, 1, 2}
]
==

[name=analytic_min_float_double_1]
[labels=analytic_min_with_bounded_start]
SELECT row_id, double_val,
       MIN(double_val * 2.0) OVER (ORDER BY row_id RANGE 2 PRECEDING),
       MIN(CAST(double_val as float)) OVER (ORDER BY row_id DESC
                                            RANGE BETWEEN 2 PRECEDING AND
                                                          UNBOUNDED FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, double_val DOUBLE, DOUBLE, FLOAT>>[unknown order:
  {10, 2.5, -3, -1.5},
  {9, 1.5, -3, -1.5},
  {8, -1.5, -3, -1.5},
  {7, -0.5, -1, -1.5},
  {6, NULL, 5, -1.5},
  {5, 3.5, 3, -0.5},
  {4, 2.5, 3, 1.5},
  {3, 1.5, 3, 1.5},
  {2, 1.5, 3, 1.5},
  {1, NULL, NULL, 1.5}
]
==

[name=analytic_min_float_double_2]
[labels=analytic_cumulative_min]
SELECT row_id,
       MIN(double_val) OVER (ORDER BY row_id),
       MIN(double_val) OVER (ORDER BY row_id DESC)
FROM (SELECT 1 row_id, CAST(null as double) double_val UNION ALL
      SELECT 2, 2.0 UNION ALL
      SELECT 3, CAST(null as double) UNION ALL
      SELECT 4, CAST("INF" as double) UNION ALL
      SELECT 5, CAST("NaN" as double) UNION ALL
      SELECT 6, CAST("NaN" as double) UNION ALL
      SELECT 7, CAST("-INF" as double))
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE>>[unknown order:
  {7, nan, -inf},
  {6, nan, nan},
  {5, nan, nan},
  {4, 2, nan},
  {3, 2, nan},
  {2, 2, nan},
  {1, NULL, nan}
]
==

[name=analytic_min_string]
[labels=analytic_cumulative_min]
SELECT row_id, str_val, MIN(str_val) OVER (ORDER BY row_id)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, str_val STRING, STRING>>[unknown order:
  {1, NULL, NULL},
  {2, "A", "A"},
  {3, "A", "A"},
  {4, "B", "A"},
  {5, "A", "A"},
  {6, "C", "A"},
  {7, NULL, "A"},
  {8, "A", "A"},
  {9, "B", "A"},
  {10, "B", "A"}
]
==

[name=analytic_min_date_timestamp]
[labels=analytic_cumulative_min]
SELECT row_id, date_val, timestamp_val,
       MIN(date_val) OVER (ORDER BY row_id DESC),
       MIN(timestamp_val) OVER (ORDER BY row_id)
FROM TableDateTimeBytes
--
ARRAY<STRUCT<
        row_id INT64,
        date_val DATE,
        timestamp_val TIMESTAMP,
        DATE,
        TIMESTAMP
      >>
[unknown order:{1, NULL, NULL, 2014-01-01, NULL},
               {
                 2,
                 2014-01-01,
                 2014-01-01 08:00:01.011011+00,
                 2014-01-01,
                 2014-01-01 08:00:01.011011+00
               },
               {
                 3,
                 2014-01-01,
                 2014-01-01 08:00:01.011011+00,
                 2014-01-01,
                 2014-01-01 08:00:01.011011+00
               },
               {
                 4,
                 2015-01-01,
                 2014-01-01 08:00:01.011011+00,
                 2014-01-01,
                 2014-01-01 08:00:01.011011+00
               },
               {
                 5,
                 2015-01-01,
                 2013-01-01 08:00:01.011011+00,
                 2014-01-01,
                 2013-01-01 08:00:01.011011+00
               },
               {
                 6,
                 2014-01-01,
                 2015-01-01 08:00:01.011011+00,
                 2014-01-01,
                 2013-01-01 08:00:01.011011+00
               }]
==

[name=analytic_min_bytes]
[labels=analytic_cumulative_min]
SELECT row_id, bytes_val,
       MIN(bytes_val) OVER (ORDER BY row_id)
FROM TableDateTimeBytes
--
ARRAY<STRUCT<row_id INT64, bytes_val BYTES, BYTES>>[unknown order:
  {1, NULL, NULL},
  {2, b"1", b"1"},
  {3, b"2", b"1"},
  {4, b"1", b"1"},
  {5, b"2", b"1"},
  {6, b"5", b"1"}
]
==

[name=analytic_min_enum]
[labels=analytic_min_with_moving_window]
SELECT row_id, enum_val,
       MIN(enum_val) OVER (ORDER BY row_id DESC
                           ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id,
               CAST(null as "zetasql_test__.TestEnum") enum_val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 3, 0 UNION ALL
      SELECT 4, 1 UNION ALL
      SELECT 5, CAST(null as "zetasql_test__.TestEnum") UNION ALL
      SELECT 6, 2 UNION ALL
      SELECT 7, 0)
--
ARRAY<STRUCT<
        row_id INT64,
        enum_val ENUM<zetasql_test__.TestEnum>,
        ENUM<zetasql_test__.TestEnum>
      >>
[unknown order:
  {7, TESTENUM0, TESTENUM0},
  {6, TESTENUM2, TESTENUM0},
  {5, NULL, TESTENUM0},
  {4, TESTENUM1, TESTENUM0},
  {3, TESTENUM0, TESTENUM0},
  {2, TESTENUM1, TESTENUM0},
  {1, NULL, TESTENUM0}
]
==

[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=analytic_min_numeric_1]
[labels=analytic_cumulative_min]
[parameters="99999999999999999999999999999.999999999" as max_val,
            "-99999999999999999999999999999.999999999" as min_val]
SELECT row_id,
       MIN(value) OVER(ORDER BY row_id)
FROM (SELECT 1 row_id, CAST(NULL as NUMERIC) value UNION ALL
      SELECT 2, 0                                  UNION ALL
      SELECT 3, 3.5                                UNION ALL
      SELECT 4, -1.230000001                       UNION ALL
      SELECT 5, CAST(@max_val AS NUMERIC)          UNION ALL
      SELECT 6, CAST(@min_val AS NUMERIC))
--
ARRAY<STRUCT<row_id INT64, NUMERIC>>[unknown order:
  {1, NULL},
  {2, 0},
  {3, 0},
  {4, -1.230000001},
  {5, -1.230000001},
  {
    6,
    -99999999999999999999999999999.999999999
  }
]
==

[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=analytic_min_numeric_2]
[labels=analytic_min_with_moving_window]
[parameters="99999999999999999999999999999.999999999" as max_val,
            "-99999999999999999999999999999.999999999" as min_val]
SELECT row_id,
       MIN(value) OVER(ORDER BY row_id
                              RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id, CAST(NULL as NUMERIC) value UNION ALL
      SELECT 2, 0                                  UNION ALL
      SELECT 3, 3.5                                UNION ALL
      SELECT 4, -1.230000001                       UNION ALL
      SELECT 5, CAST(@max_val AS NUMERIC)          UNION ALL
      SELECT 6, CAST(@min_val AS NUMERIC))
--
ARRAY<STRUCT<row_id INT64, NUMERIC>>[unknown order:
  {1, 0},
  {2, 0},
  {3, -1.230000001},
  {4, -1.230000001},
  {
    5,
    -99999999999999999999999999999.999999999
  },
  {
    6,
    -99999999999999999999999999999.999999999
  }
]
==

[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=analytic_min_numeric_3]
[labels=analytic_min_with_unbounded_window]
[parameters="99999999999999999999999999999.999999999" as max_val,
            "-99999999999999999999999999999.999999999" as min_val]
SELECT row_id,
       MIN(value) OVER(),
       MIN(value) OVER(PARTITION BY is_even)
FROM (SELECT 1 row_id, CAST(NULL as NUMERIC) value, false is_even UNION ALL
      SELECT 2, 0, true                                           UNION ALL
      SELECT 3, 3.5, false                                        UNION ALL
      SELECT 4, -1.230000001, true                                UNION ALL
      SELECT 5, CAST(@max_val AS NUMERIC), false                  UNION ALL
      SELECT 6, CAST(@min_val AS NUMERIC), true)
--
ARRAY<STRUCT<row_id INT64, NUMERIC, NUMERIC>>[unknown order:
  {
    1,
    -99999999999999999999999999999.999999999,
    3.5
  },
  {
    5,
    -99999999999999999999999999999.999999999,
    3.5
  },
  {
    3,
    -99999999999999999999999999999.999999999,
    3.5
  },
  {
    4,
    -99999999999999999999999999999.999999999,
    -99999999999999999999999999999.999999999
  },
  {
    2,
    -99999999999999999999999999999.999999999,
    -99999999999999999999999999999.999999999
  },
  {
    6,
    -99999999999999999999999999999.999999999,
    -99999999999999999999999999999.999999999
  }
]
==

[required_features=ANALYTIC_FUNCTIONS,BIGNUMERIC_TYPE]
[name=analytic_min_bignumeric_1]
[labels=analytic_cumulative_min]
[parameters="578960446186580977117854925043439539266.34992332820282019728792003956564819967" as max_val,
            "-578960446186580977117854925043439539266.34992332820282019728792003956564819968" as min_val]
SELECT row_id,
       MIN(value) OVER(ORDER BY row_id)
FROM (SELECT 1 row_id, CAST(NULL as BIGNUMERIC) value     UNION ALL
      SELECT 2, 0                                         UNION ALL
      SELECT 3, 3.5                                       UNION ALL
      SELECT 4, -1.23000000000000000000000000000000000001 UNION ALL
      SELECT 5, CAST(@max_val AS BIGNUMERIC)              UNION ALL
      SELECT 6, CAST(@min_val AS BIGNUMERIC))
--
ARRAY<STRUCT<row_id INT64, BIGNUMERIC>>[unknown order:
  {1, NULL},
  {2, 0},
  {3, 0},
  {
    4,
    -1.23000000000000000000000000000000000001
  },
  {
    5,
    -1.23000000000000000000000000000000000001
  },
  {
    6,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968
  }
]
==

[required_features=ANALYTIC_FUNCTIONS,BIGNUMERIC_TYPE]
[name=analytic_min_bignumeric_2]
[labels=analytic_min_with_moving_window]
[parameters="578960446186580977117854925043439539266.34992332820282019728792003956564819967" as max_val,
            "-578960446186580977117854925043439539266.34992332820282019728792003956564819968" as min_val]
SELECT row_id,
       MIN(value) OVER(ORDER BY row_id
                              RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id, CAST(NULL as BIGNUMERIC) value     UNION ALL
      SELECT 2, 0                                         UNION ALL
      SELECT 3, 3.5                                       UNION ALL
      SELECT 4, -1.23000000000000000000000000000000000001 UNION ALL
      SELECT 5, CAST(@max_val AS BIGNUMERIC)              UNION ALL
      SELECT 6, CAST(@min_val AS BIGNUMERIC))
--
ARRAY<STRUCT<row_id INT64, BIGNUMERIC>>[unknown order:
  {1, 0},
  {2, 0},
  {
    3,
    -1.23000000000000000000000000000000000001
  },
  {
    4,
    -1.23000000000000000000000000000000000001
  },
  {
    5,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968
  },
  {
    6,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968
  }
]
==

[required_features=ANALYTIC_FUNCTIONS,BIGNUMERIC_TYPE]
[name=analytic_min_bignumeric_3]
[labels=analytic_min_with_unbounded_window]
[parameters="578960446186580977117854925043439539266.34992332820282019728792003956564819967" as max_val,
            "-578960446186580977117854925043439539266.34992332820282019728792003956564819968" as min_val]
SELECT row_id,
       MIN(value) OVER(),
       MIN(value) OVER(PARTITION BY is_even)
FROM (SELECT 1 row_id, CAST(NULL as BIGNUMERIC) value, false is_even     UNION ALL
      SELECT 2, 0, true                                                  UNION ALL
      SELECT 3, 3.5, false                                               UNION ALL
      SELECT 4, -1.23000000000000000000000000000000000001, true          UNION ALL
      SELECT 5, CAST(@max_val AS BIGNUMERIC), false                      UNION ALL
      SELECT 6, CAST(@min_val AS BIGNUMERIC), true)
--
ARRAY<STRUCT<row_id INT64, BIGNUMERIC, BIGNUMERIC>>[unknown order:
  {
    1,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
    3.5
  },
  {
    5,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
    3.5
  },
  {
    3,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
    3.5
  },
  {
    4,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968
  },
  {
    2,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968
  },
  {
    6,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968
  }
]
==

[name=analytic_min_distinct_1]
[labels=analytic_min_with_unbounded_window]
SELECT row_id, int64_val,
       MIN(DISTINCT int64_val) OVER ()
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, int64_val INT64, INT64>>[unknown order:
  {2, 2, 1},
  {4, NULL, 1},
  {6, 2, 1},
  {8, 4, 1},
  {10, 3, 1},
  {1, NULL, 1},
  {3, 1, 1},
  {5, 1, 1},
  {7, 1, 1},
  {9, 2, 1}
]
==

[name=analytic_min_distinct_2]
[labels=analytic_min_with_unbounded_window]
SELECT row_id, double_val,
       MIN(DISTINCT double_val) OVER ()
FROM (SELECT 1 row_id, 1.0 double_val UNION ALL
      SELECT 2, 2.0 UNION ALL
      SELECT 3, CAST(null as double) UNION ALL
      SELECT 4, 2.0 UNION ALL
      SELECT 5, CAST("INF" as double) UNION ALL
      SELECT 6, CAST("NaN" as double) UNION ALL
      SELECT 7, CAST("NaN" as double) UNION ALL
      SELECT 8, CAST("INF" as double) UNION ALL
      SELECT 9, CAST("-INF" as double) UNION ALL
      SELECT 10, CAST("-INF" as double))
--
ARRAY<STRUCT<row_id INT64, double_val DOUBLE, DOUBLE>>[unknown order:
  {2, 2, nan},
  {4, 2, nan},
  {6, nan, nan},
  {8, inf, nan},
  {10, -inf, nan},
  {1, 1, nan},
  {3, NULL, nan},
  {5, inf, nan},
  {7, nan, nan},
  {9, -inf, nan}
]
==

[name=analytic_min_distinct_3]
[labels=analytic_min_with_unbounded_window]
SELECT row_id,
       MIN(DISTINCT bool_val) OVER test_window,
       MIN(DISTINCT CAST(int64_val as int32)) OVER test_window,
       MIN(DISTINCT int64_val) OVER test_window,
       MIN(DISTINCT CAST(uint64_val as uint32)) OVER test_window,
       MIN(DISTINCT uint64_val) OVER test_window,
       MIN(DISTINCT str_val) OVER test_window
FROM TestTable
WINDOW test_window AS (PARTITION BY bool_val)
--
ARRAY<STRUCT<row_id INT64, BOOL, INT32, INT64, UINT32, UINT64, STRING>>[unknown order:
  {1, NULL, NULL, NULL, NULL, NULL, NULL},
  {5, false, 1, 1, 3, 3, "A"},
  {9, false, 1, 1, 3, 3, "A"},
  {3, false, 1, 1, 3, 3, "A"},
  {7, false, 1, 1, 3, 3, "A"},
  {4, true, 2, 2, 1, 1, "A"},
  {8, true, 2, 2, 1, 1, "A"},
  {2, true, 2, 2, 1, 1, "A"},
  {6, true, 2, 2, 1, 1, "A"},
  {10, true, 2, 2, 1, 1, "A"}
]
==

[name=analytic_min_distinct_4]
[labels=analytic_min_with_unbounded_window]
SELECT row_id,
       MIN(DISTINCT double_val) OVER test_window,
       MIN(DISTINCT CAST(double_val as float)) OVER test_window
FROM TestTable
WINDOW test_window AS (PARTITION BY bool_val)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, FLOAT>>[unknown order:
  {1, NULL, NULL},
  {5, -0.5, -0.5},
  {9, -0.5, -0.5},
  {3, -0.5, -0.5},
  {7, -0.5, -0.5},
  {4, -1.5, -1.5},
  {8, -1.5, -1.5},
  {2, -1.5, -1.5},
  {6, -1.5, -1.5},
  {10, -1.5, -1.5}
]
==

[name=analytic_min_distinct_5]
[labels=analytic_min_with_unbounded_window]
SELECT row_id,
       MIN(DISTINCT bytes_val) OVER (),
       MIN(DISTINCT date_val) OVER (),
       MIN(DISTINCT timestamp_val) OVER ()
FROM TableDateTimeBytes
--
ARRAY<STRUCT<row_id INT64, BYTES, DATE, TIMESTAMP>>[unknown order:
  {
    2,
    b"1",
    2014-01-01,
    2013-01-01 08:00:01.011011+00
  },
  {
    4,
    b"1",
    2014-01-01,
    2013-01-01 08:00:01.011011+00
  },
  {
    6,
    b"1",
    2014-01-01,
    2013-01-01 08:00:01.011011+00
  },
  {
    1,
    b"1",
    2014-01-01,
    2013-01-01 08:00:01.011011+00
  },
  {
    3,
    b"1",
    2014-01-01,
    2013-01-01 08:00:01.011011+00
  },
  {
    5,
    b"1",
    2014-01-01,
    2013-01-01 08:00:01.011011+00
  }
]
==

# ----------------------------------------------------------------------------
# MAX
# ----------------------------------------------------------------------------

# The following queries repeat those for MIN, with the function name replaced
# with MAX.

[name=analytic_max_int64_uint64]
[labels=analytic_cumulative_max]
SELECT row_id, int64_val, uint64_val,
       MAX(int64_val) OVER (ORDER BY row_id)
From TestTable
--
ARRAY<STRUCT<row_id INT64, int64_val INT64, uint64_val UINT64, INT64>>[unknown order:
  {1, NULL, NULL, NULL},
  {2, 2, 3, 2},
  {3, 1, 6, 2},
  {4, NULL, 2, 2},
  {5, 1, NULL, 2},
  {6, 2, 2, 2},
  {7, 1, 5, 2},
  {8, 4, 2, 4},
  {9, 2, 3, 4},
  {10, 3, 1, 4}
]
==

[name=analytic_max_int32_uint32]
[labels=analytic_max_with_bounded_start]
SELECT row_id, int64_val,
       MAX(CAST(int64_val as int32)) OVER (ORDER BY row_id ROWS 4 PRECEDING),
       MAX(CAST(int64_val as uint32)) OVER (ORDER BY row_id RANGE 2 PRECEDING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, int64_val INT64, INT32, UINT32>>[unknown order:
  {1, NULL, NULL, NULL},
  {2, 2, 2, 2},
  {3, 1, 2, 2},
  {4, NULL, 2, 2},
  {5, 1, 2, 1},
  {6, 2, 2, 2},
  {7, 1, 2, 2},
  {8, 4, 4, 4},
  {9, 2, 4, 4},
  {10, 3, 4, 4}
]
==

[name=analytic_max_float_double_1]
[labels=analytic_max_with_bounded_start]
SELECT row_id, double_val,
       MAX(double_val * 2.0) OVER (ORDER BY row_id RANGE 2 PRECEDING),
       MAX(CAST(double_val as float)) OVER (ORDER BY row_id DESC
                                            RANGE BETWEEN 2 PRECEDING AND
                                                          UNBOUNDED FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, double_val DOUBLE, DOUBLE, FLOAT>>[unknown order:
  {10, 2.5, 5, 3.5},
  {9, 1.5, 3, 3.5},
  {8, -1.5, -1, 3.5},
  {7, -0.5, 7, 3.5},
  {6, NULL, 7, 3.5},
  {5, 3.5, 7, 3.5},
  {4, 2.5, 5, 3.5},
  {3, 1.5, 3, 3.5},
  {2, 1.5, 3, 2.5},
  {1, NULL, NULL, 1.5}
]
==

[name=analytic_max_float_double_2]
[labels=analytic_cumulative_max]
SELECT row_id,
       MAX(double_val) OVER (ORDER BY row_id),
       MAX(double_val) OVER (ORDER BY row_id DESC)
FROM (SELECT 1 row_id, CAST(null as double) double_val UNION ALL
      SELECT 2, 2.0 UNION ALL
      SELECT 3, CAST(null as double) UNION ALL
      SELECT 4, CAST("INF" as double) UNION ALL
      SELECT 5, CAST("NaN" as double) UNION ALL
      SELECT 6, CAST("NaN" as double) UNION ALL
      SELECT 7, CAST("-INF" as double))
--
ARRAY<STRUCT<row_id INT64, DOUBLE, DOUBLE>>[unknown order:
  {7, nan, -inf},
  {6, nan, nan},
  {5, nan, nan},
  {4, inf, nan},
  {3, 2, nan},
  {2, 2, nan},
  {1, NULL, nan}
]
==

[name=analytic_max_string]
[labels=analytic_cumulative_max]
SELECT row_id, str_val, MAX(str_val) OVER (ORDER BY row_id)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, str_val STRING, STRING>>[unknown order:
  {1, NULL, NULL},
  {2, "A", "A"},
  {3, "A", "A"},
  {4, "B", "B"},
  {5, "A", "B"},
  {6, "C", "C"},
  {7, NULL, "C"},
  {8, "A", "C"},
  {9, "B", "C"},
  {10, "B", "C"}
]
==

[name=analytic_max_date_timestamp]
[labels=analytic_cumulative_max]
SELECT row_id, date_val, timestamp_val,
       MAX(date_val) OVER (ORDER BY row_id DESC),
       MAX(timestamp_val) OVER (ORDER BY row_id)
FROM TableDateTimeBytes
--
ARRAY<STRUCT<
        row_id INT64,
        date_val DATE,
        timestamp_val TIMESTAMP,
        DATE,
        TIMESTAMP
      >>
[unknown order:{1, NULL, NULL, 2015-01-01, NULL},
               {
                 2,
                 2014-01-01,
                 2014-01-01 08:00:01.011011+00,
                 2015-01-01,
                 2014-01-01 08:00:01.011011+00
               },
               {
                 3,
                 2014-01-01,
                 2014-01-01 08:00:01.011011+00,
                 2015-01-01,
                 2014-01-01 08:00:01.011011+00
               },
               {
                 4,
                 2015-01-01,
                 2014-01-01 08:00:01.011011+00,
                 2015-01-01,
                 2014-01-01 08:00:01.011011+00
               },
               {
                 5,
                 2015-01-01,
                 2013-01-01 08:00:01.011011+00,
                 2015-01-01,
                 2014-01-01 08:00:01.011011+00
               },
               {
                 6,
                 2014-01-01,
                 2015-01-01 08:00:01.011011+00,
                 2014-01-01,
                 2015-01-01 08:00:01.011011+00
               }]
==

[name=analytic_max_bytes]
[labels=analytic_cumulative_max]
SELECT row_id, bytes_val,
       MAX(bytes_val) OVER (ORDER BY row_id)
FROM TableDateTimeBytes
--
ARRAY<STRUCT<row_id INT64, bytes_val BYTES, BYTES>>[unknown order:
  {1, NULL, NULL},
  {2, b"1", b"1"},
  {3, b"2", b"2"},
  {4, b"1", b"2"},
  {5, b"2", b"2"},
  {6, b"5", b"5"}
]
==

[name=analytic_max_enum]
[labels=analytic_max_with_moving_window]
SELECT row_id, enum_val,
       MAX(enum_val) OVER (ORDER BY row_id DESC
                           ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id,
               CAST(null as "zetasql_test__.TestEnum") enum_val UNION ALL
      SELECT 2, 1 UNION ALL
      SELECT 3, 0 UNION ALL
      SELECT 4, 1 UNION ALL
      SELECT 5, CAST(null as "zetasql_test__.TestEnum") UNION ALL
      SELECT 6, 2 UNION ALL
      SELECT 7, 0)
--
ARRAY<STRUCT<
        row_id INT64,
        enum_val ENUM<zetasql_test__.TestEnum>,
        ENUM<zetasql_test__.TestEnum>
      >>
[unknown order:
  {7, TESTENUM0, TESTENUM2},
  {6, TESTENUM2, TESTENUM2},
  {5, NULL, TESTENUM2},
  {4, TESTENUM1, TESTENUM2},
  {3, TESTENUM0, TESTENUM1},
  {2, TESTENUM1, TESTENUM1},
  {1, NULL, TESTENUM1}
]
==

[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=analytic_max_numeric_1]
[labels=analytic_cumulative_max]
[parameters="99999999999999999999999999999.999999999" as max_val,
            "-99999999999999999999999999999.999999999" as min_val]
SELECT row_id,
       MAX(value) OVER(ORDER BY row_id)
FROM (SELECT 1 row_id, CAST(NULL as NUMERIC) value UNION ALL
      SELECT 2, 0                                  UNION ALL
      SELECT 3, 3.5                                UNION ALL
      SELECT 4, -1.230000001                       UNION ALL
      SELECT 5, CAST(@max_val AS NUMERIC)          UNION ALL
      SELECT 6, CAST(@min_val AS NUMERIC))
--
ARRAY<STRUCT<row_id INT64, NUMERIC>>[unknown order:
  {1, NULL},
  {2, 0},
  {3, 3.5},
  {4, 3.5},
  {
    5,
    99999999999999999999999999999.999999999
  },
  {
    6,
    99999999999999999999999999999.999999999
  }
]
==

[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=analytic_max_numeric_2]
[labels=analytic_max_with_moving_window]
[parameters="99999999999999999999999999999.999999999" as max_val,
            "-99999999999999999999999999999.999999999" as min_val]
SELECT row_id,
       MAX(value) OVER(ORDER BY row_id
                              RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id, CAST(NULL as NUMERIC) value UNION ALL
      SELECT 2, 0                                  UNION ALL
      SELECT 3, 3.5                                UNION ALL
      SELECT 4, -1.230000001                       UNION ALL
      SELECT 5, CAST(@max_val AS NUMERIC)          UNION ALL
      SELECT 6, CAST(@min_val AS NUMERIC))
--
ARRAY<STRUCT<row_id INT64, NUMERIC>>[unknown order:
  {1, 0},
  {2, 3.5},
  {3, 3.5},
  {
    4,
    99999999999999999999999999999.999999999
  },
  {
    5,
    99999999999999999999999999999.999999999
  },
  {
    6,
    99999999999999999999999999999.999999999
  }
]
==

[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=analytic_max_numeric_3]
[labels=analytic_max_with_unbounded_window]
[parameters="99999999999999999999999999999.999999999" as max_val,
            "-99999999999999999999999999999.999999999" as min_val]
SELECT row_id,
       MAX(value) OVER(),
       MAX(value) OVER(PARTITION BY is_even)
FROM (SELECT 1 row_id, CAST(NULL as NUMERIC) value, false is_even UNION ALL
      SELECT 2, 0, true                                           UNION ALL
      SELECT 3, 3.5, false                                        UNION ALL
      SELECT 4, -1.230000001, true                                UNION ALL
      SELECT 5, CAST(@max_val AS NUMERIC), false                  UNION ALL
      SELECT 6, CAST(@min_val AS NUMERIC), true)
--
ARRAY<STRUCT<row_id INT64, NUMERIC, NUMERIC>>[unknown order:
  {
    1,
    99999999999999999999999999999.999999999,
    99999999999999999999999999999.999999999
  },
  {
    5,
    99999999999999999999999999999.999999999,
    99999999999999999999999999999.999999999
  },
  {
    3,
    99999999999999999999999999999.999999999,
    99999999999999999999999999999.999999999
  },
  {
    4,
    99999999999999999999999999999.999999999,
    0
  },
  {
    2,
    99999999999999999999999999999.999999999,
    0
  },
  {
    6,
    99999999999999999999999999999.999999999,
    0
  }
]
==

[required_features=ANALYTIC_FUNCTIONS,BIGNUMERIC_TYPE]
[name=analytic_max_bignumeric_1]
[labels=analytic_cumulative_max]
[parameters="578960446186580977117854925043439539266.34992332820282019728792003956564819967" as max_val,
            "-578960446186580977117854925043439539266.34992332820282019728792003956564819968" as min_val]
SELECT row_id,
       MAX(value) OVER(ORDER BY row_id)
FROM (SELECT 1 row_id, CAST(NULL as BIGNUMERIC) value     UNION ALL
      SELECT 2, 0                                         UNION ALL
      SELECT 3, 3.5                                       UNION ALL
      SELECT 4, -1.23000000000000000000000000000000000001 UNION ALL
      SELECT 5, CAST(@max_val AS BIGNUMERIC)              UNION ALL
      SELECT 6, CAST(@min_val AS BIGNUMERIC))
--
ARRAY<STRUCT<row_id INT64, BIGNUMERIC>>[unknown order:
  {1, NULL},
  {2, 0},
  {3, 3.5},
  {4, 3.5},
  {
    5,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967
  },
  {
    6,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967
  }
]
==

[required_features=ANALYTIC_FUNCTIONS,BIGNUMERIC_TYPE]
[name=analytic_max_bignumeric_2]
[labels=analytic_max_with_moving_window]
[parameters="578960446186580977117854925043439539266.34992332820282019728792003956564819967" as max_val,
            "-578960446186580977117854925043439539266.34992332820282019728792003956564819968" as min_val]
SELECT row_id,
       MAX(value) OVER(ORDER BY row_id
                              RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING)
FROM (SELECT 1 row_id, CAST(NULL as BIGNUMERIC) value     UNION ALL
      SELECT 2, 0                                         UNION ALL
      SELECT 3, 3.5                                       UNION ALL
      SELECT 4, -1.23000000000000000000000000000000000001 UNION ALL
      SELECT 5, CAST(@max_val AS BIGNUMERIC)              UNION ALL
      SELECT 6, CAST(@min_val AS BIGNUMERIC))
--
ARRAY<STRUCT<row_id INT64, BIGNUMERIC>>[unknown order:
  {1, 0},
  {2, 3.5},
  {3, 3.5},
  {
    4,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967
  },
  {
    5,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967
  },
  {
    6,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967
  }
]
==

[required_features=ANALYTIC_FUNCTIONS,BIGNUMERIC_TYPE]
[name=analytic_max_bignumeric_3]
[labels=analytic_max_with_unbounded_window]
[parameters="578960446186580977117854925043439539266.34992332820282019728792003956564819967" as max_val,
            "-578960446186580977117854925043439539266.34992332820282019728792003956564819968" as min_val]
SELECT row_id,
       MAX(value) OVER(),
       MAX(value) OVER(PARTITION BY is_even)
FROM (SELECT 1 row_id, CAST(NULL as BIGNUMERIC) value, false is_even     UNION ALL
      SELECT 2, 0, true                                                  UNION ALL
      SELECT 3, 3.5, false                                               UNION ALL
      SELECT 4, -1.23000000000000000000000000000000000001, true          UNION ALL
      SELECT 5, CAST(@max_val AS BIGNUMERIC), false                      UNION ALL
      SELECT 6, CAST(@min_val AS BIGNUMERIC), true)
--
ARRAY<STRUCT<row_id INT64, BIGNUMERIC, BIGNUMERIC>>[unknown order:
  {
    1,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967
  },
  {
    5,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967
  },
  {
    3,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967
  },
  {
    4,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967,
    0
  },
  {
    2,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967,
    0
  },
  {
    6,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967,
    0
  }
]
==

[name=analytic_max_distinct_1]
[labels=analytic_max_with_unbounded_window]
SELECT row_id, int64_val,
       MAX(DISTINCT int64_val) OVER ()
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, int64_val INT64, INT64>>[unknown order:
  {2, 2, 4},
  {4, NULL, 4},
  {6, 2, 4},
  {8, 4, 4},
  {10, 3, 4},
  {1, NULL, 4},
  {3, 1, 4},
  {5, 1, 4},
  {7, 1, 4},
  {9, 2, 4}
]
==

[name=analytic_max_distinct_2]
[labels=analytic_max_with_unbounded_window]
SELECT row_id, double_val,
       MAX(DISTINCT double_val) OVER ()
FROM (SELECT 1 row_id, 1.0 double_val UNION ALL
      SELECT 2, 2.0 UNION ALL
      SELECT 3, CAST(null as double) UNION ALL
      SELECT 4, 2.0 UNION ALL
      SELECT 5, CAST("INF" as double) UNION ALL
      SELECT 6, CAST("NaN" as double) UNION ALL
      SELECT 7, CAST("NaN" as double) UNION ALL
      SELECT 8, CAST("INF" as double) UNION ALL
      SELECT 9, CAST("-INF" as double) UNION ALL
      SELECT 10, CAST("-INF" as double))
--
ARRAY<STRUCT<row_id INT64, double_val DOUBLE, DOUBLE>>[unknown order:
  {2, 2, nan},
  {4, 2, nan},
  {6, nan, nan},
  {8, inf, nan},
  {10, -inf, nan},
  {1, 1, nan},
  {3, NULL, nan},
  {5, inf, nan},
  {7, nan, nan},
  {9, -inf, nan}
]
==

[name=analytic_max_distinct_3]
[labels=analytic_max_with_unbounded_window]
SELECT row_id,
       MAX(DISTINCT bool_val) OVER test_window,
       MAX(DISTINCT CAST(int64_val as int32)) OVER test_window,
       MAX(DISTINCT int64_val) OVER test_window,
       MAX(DISTINCT CAST(uint64_val as uint32)) OVER test_window,
       MAX(DISTINCT uint64_val) OVER test_window,
       MAX(DISTINCT str_val) OVER test_window
FROM TestTable
WINDOW test_window AS (PARTITION BY bool_val)
--
ARRAY<STRUCT<row_id INT64, BOOL, INT32, INT64, UINT32, UINT64, STRING>>[unknown order:
  {1, NULL, NULL, NULL, NULL, NULL, NULL},
  {5, false, 2, 2, 6, 6, "B"},
  {9, false, 2, 2, 6, 6, "B"},
  {3, false, 2, 2, 6, 6, "B"},
  {7, false, 2, 2, 6, 6, "B"},
  {4, true, 4, 4, 3, 3, "C"},
  {8, true, 4, 4, 3, 3, "C"},
  {2, true, 4, 4, 3, 3, "C"},
  {6, true, 4, 4, 3, 3, "C"},
  {10, true, 4, 4, 3, 3, "C"}
]
==

[name=analytic_max_distinct_4]
[labels=analytic_max_with_unbounded_window]
SELECT row_id,
       MAX(DISTINCT double_val) OVER test_window,
       MAX(DISTINCT CAST(double_val as float)) OVER test_window
FROM TestTable
WINDOW test_window AS (PARTITION BY bool_val)
--
ARRAY<STRUCT<row_id INT64, DOUBLE, FLOAT>>[unknown order:
  {1, NULL, NULL},
  {5, 3.5, 3.5},
  {9, 3.5, 3.5},
  {3, 3.5, 3.5},
  {7, 3.5, 3.5},
  {4, 2.5, 2.5},
  {8, 2.5, 2.5},
  {2, 2.5, 2.5},
  {6, 2.5, 2.5},
  {10, 2.5, 2.5}
]
==

[name=analytic_max_distinct_5]
[labels=analytic_max_with_unbounded_window]
SELECT row_id,
       MAX(DISTINCT bytes_val) OVER (),
       MAX(DISTINCT date_val) OVER (),
       MAX(DISTINCT timestamp_val) OVER ()
FROM TableDateTimeBytes
--
ARRAY<STRUCT<row_id INT64, BYTES, DATE, TIMESTAMP>>[unknown order:
  {
    2,
    b"5",
    2015-01-01,
    2015-01-01 08:00:01.011011+00
  },
  {
    4,
    b"5",
    2015-01-01,
    2015-01-01 08:00:01.011011+00
  },
  {
    6,
    b"5",
    2015-01-01,
    2015-01-01 08:00:01.011011+00
  },
  {
    1,
    b"5",
    2015-01-01,
    2015-01-01 08:00:01.011011+00
  },
  {
    3,
    b"5",
    2015-01-01,
    2015-01-01 08:00:01.011011+00
  },
  {
    5,
    b"5",
    2015-01-01,
    2015-01-01 08:00:01.011011+00
  }
]
==

[name=analytic_max_with_nan_offset_following]
[labels=analytic_max_with_moving_window]
select row_id, val,
       max(val) over (order by row_id ROWS BETWEEN 1 FOLLOWING
                                               AND 4 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 13, NULL        UNION ALL
      SELECT 14, IEEE_DIVIDE(5, 0)           UNION ALL
      SELECT 12, 1           UNION ALL
      SELECT 11, 2           UNION ALL
      SELECT 10, NULL        UNION ALL
      SELECT 8, 2            UNION ALL
      SELECT 9, 6            UNION ALL
      SELECT 7, IEEE_DIVIDE(0, 0)            UNION ALL
      SELECT 6, NULL         UNION ALL
      SELECT 5, 2            UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, IEEE_DIVIDE(0, 0)            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[known order:
  {1, NULL, nan},
  {2, nan, 4},
  {3, 3, nan},
  {4, 4, nan},
  {5, 2, nan},
  {6, NULL, nan},
  {7, nan, 6},
  {8, 2, 6},
  {9, 6, 2},
  {10, NULL, inf},
  {11, 2, inf},
  {12, 1, inf},
  {13, NULL, inf},
  {14, inf, NULL}
]
==

[name=analytic_max_with_nan_offset_preceding_following]
[labels=analytic_max_with_moving_window]
select row_id, val,
       max(val) over (order by row_id ROWS BETWEEN 1 PRECEDING
                                               AND 4 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 13, NULL        UNION ALL
      SELECT 14, IEEE_DIVIDE(5, 0)           UNION ALL
      SELECT 12, 1           UNION ALL
      SELECT 11, 2           UNION ALL
      SELECT 10, NULL        UNION ALL
      SELECT 8, 2            UNION ALL
      SELECT 9, 6            UNION ALL
      SELECT 7, IEEE_DIVIDE(0, 0)            UNION ALL
      SELECT 6, NULL         UNION ALL
      SELECT 5, 2            UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, IEEE_DIVIDE(0, 0)            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[known order:
  {1, NULL, nan},
  {2, nan, nan},
  {3, 3, nan},
  {4, 4, nan},
  {5, 2, nan},
  {6, NULL, nan},
  {7, nan, nan},
  {8, 2, nan},
  {9, 6, 6},
  {10, NULL, inf},
  {11, 2, inf},
  {12, 1, inf},
  {13, NULL, inf},
  {14, inf, inf}
]
==

[name=analytic_max_with_nan_offset_preceding]
[labels=analytic_max_with_moving_window]
select row_id, val,
       max(val) over (order by row_id ROWS BETWEEN 2 PRECEDING
                                               AND 1 PRECEDING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 13, NULL        UNION ALL
      SELECT 14, IEEE_DIVIDE(5, 0)           UNION ALL
      SELECT 12, 1           UNION ALL
      SELECT 11, 2           UNION ALL
      SELECT 10, NULL        UNION ALL
      SELECT 8, 2            UNION ALL
      SELECT 9, 6            UNION ALL
      SELECT 7, IEEE_DIVIDE(0, 0)            UNION ALL
      SELECT 6, NULL         UNION ALL
      SELECT 5, 2            UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, IEEE_DIVIDE(0, 0)            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[known order:
  {1, NULL, NULL},
  {2, nan, NULL},
  {3, 3, nan},
  {4, 4, nan},
  {5, 2, 4},
  {6, NULL, 4},
  {7, nan, 2},
  {8, 2, nan},
  {9, 6, nan},
  {10, NULL, 6},
  {11, 2, 6},
  {12, 1, 2},
  {13, NULL, 2},
  {14, inf, 1}
]
==

[name=analytic_max_with_nan_offset_current_following]
[labels=analytic_max_with_moving_window]
select row_id, val,
       max(val) over (order by row_id ROWS BETWEEN CURRENT ROW
                                               AND 1 FOLLOWING)
FROM (SELECT 3 row_id, 3 val UNION ALL
      SELECT 13, NULL        UNION ALL
      SELECT 14, IEEE_DIVIDE(5, 0)           UNION ALL
      SELECT 12, 1           UNION ALL
      SELECT 11, 2           UNION ALL
      SELECT 10, NULL        UNION ALL
      SELECT 8, 2            UNION ALL
      SELECT 9, 6            UNION ALL
      SELECT 7, IEEE_DIVIDE(0, 0)            UNION ALL
      SELECT 6, NULL         UNION ALL
      SELECT 5, 2            UNION ALL
      SELECT 1, NULL         UNION ALL
      SELECT 2, IEEE_DIVIDE(0, 0)            UNION ALL
      SELECT 4, 4)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val DOUBLE, DOUBLE>>[known order:
  {1, NULL, nan},
  {2, nan, nan},
  {3, 3, 4},
  {4, 4, 4},
  {5, 2, 2},
  {6, NULL, nan},
  {7, nan, nan},
  {8, 2, 6},
  {9, 6, 6},
  {10, NULL, 2},
  {11, 2, 2},
  {12, 1, 1},
  {13, NULL, inf},
  {14, inf, inf}
]
==

[name=analytic_min_max_arr_with_nan_offset_current_and_3_following]
[labels=analytic_max_with_moving_window]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_ARRAY_ORDERING]
select row_id, val,
     min(val) over (order by row_id ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING),
     max(val) over (order by row_id ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING)
FROM (
  SELECT 1 row_id, ARRAY<FLOAT64>[] val UNION ALL
  SELECT 4, ARRAY<FLOAT64>[CAST("-Inf" AS FLOAT64)] UNION ALL
  SELECT 2, ARRAY<FLOAT64>[NULL] UNION ALL
  SELECT 3, ARRAY<FLOAT64>[CAST("NaN" AS FLOAT64)] UNION ALL
  SELECT 5, ARRAY<FLOAT64>[CAST("+Inf" AS FLOAT64)] UNION ALL
  SELECT 6 row_id, ARRAY<FLOAT64>[] val
)
order by row_id
--
ARRAY<STRUCT<row_id INT64, val ARRAY<>, ARRAY<>, ARRAY<>>>[known order:
  {1, ARRAY<DOUBLE>[], ARRAY<DOUBLE>[], ARRAY<DOUBLE>[-inf]},
  {2, ARRAY<DOUBLE>[NULL], ARRAY<DOUBLE>[NULL], ARRAY<DOUBLE>[inf]},
  {3, ARRAY<DOUBLE>[nan], ARRAY<DOUBLE>[], ARRAY<DOUBLE>[inf]},
  {4, ARRAY<DOUBLE>[-inf], ARRAY<DOUBLE>[], ARRAY<DOUBLE>[inf]},
  {5, ARRAY<DOUBLE>[inf], ARRAY<DOUBLE>[], ARRAY<DOUBLE>[inf]},
  {6, ARRAY<DOUBLE>[], ARRAY<DOUBLE>[], ARRAY<DOUBLE>[]}
]
