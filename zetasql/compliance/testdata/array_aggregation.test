# ARRAY_AGG queries

[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB, zetasql_test__.TestExtraPB, zetasql_test__.KitchenSinkPB.Nested, zetasql_test__.RepeatedHolderPB, zetasql_test__.EmptyMessage, zetasql_test__.MessageWithNulls, zetasql_test__.NullableInt]
[load_enum_names=zetasql_test__.TestEnum]

[name=array_agg_BOOL_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT true AS elem UNION ALL
  SELECT false UNION ALL
  SELECT true)
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BOOL>[unknown order:false, true, true]}]
==
[name=array_agg_INT32_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT CAST(1 AS INT32) AS elem UNION ALL
  SELECT CAST(0 AS INT32) UNION ALL
  SELECT CAST(-1 AS INT32))
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT32>[unknown order:0, 1, -1]}]
==
[name=array_agg_UINT32_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT CAST(2 AS UINT32) AS elem UNION ALL
  SELECT CAST(1 AS UINT32) UNION ALL
  SELECT CAST(0 AS UINT32))
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT32>[unknown order:1, 2, 0]}]
==
[name=array_agg_INT64_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT CAST(8589934592 AS INT64) AS elem UNION ALL
  SELECT CAST(0 AS INT64) UNION ALL
  SELECT CAST(-8589934592 AS INT64) AS elem)
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<INT64>[unknown order:0, 8589934592, -8589934592]}
]
==
[name=array_agg_UINT64_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT CAST(8589934592 AS UINT64) AS elem UNION ALL
  SELECT CAST(1 AS UINT64) UNION ALL
  SELECT CAST(0 AS UINT64))
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT64>[unknown order:1, 8589934592, 0]}]
==
[name=array_agg_FLOAT_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT CAST(1.1 AS FLOAT) AS elem UNION ALL
  SELECT CAST(0.0 AS FLOAT) UNION ALL
  SELECT CAST(-1.1 AS FLOAT))
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<FLOAT>[unknown order:0, 1.1, -1.1]}]
==
[name=array_agg_DOUBLE_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT CAST(1.1 AS DOUBLE) AS elem UNION ALL
  SELECT CAST(0.0 AS DOUBLE) UNION ALL
  SELECT CAST(-1.1 AS DOUBLE))
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DOUBLE>[unknown order:0, 1.1, -1.1]}]
==
[required_features=NUMERIC_TYPE]
[name=array_agg_NUMERIC_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT NUMERIC '1.000000001' AS elem UNION ALL
  SELECT NUMERIC '0' UNION ALL
  SELECT NUMERIC '-1.000000001')
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<NUMERIC>[unknown order:0, 1.000000001, -1.000000001]}
]
==
[required_features=BIGNUMERIC_TYPE]
[name=array_agg_BIGNUMERIC_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT BIGNUMERIC '1.00000000000000000000000000000000000001' AS elem UNION ALL
  SELECT BIGNUMERIC '0.0' UNION ALL
  SELECT BIGNUMERIC '-1.00000000000000000000000000000000000001')
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<BIGNUMERIC>[unknown order:
     0,
     1.00000000000000000000000000000000000001,
     -1.00000000000000000000000000000000000001
   ]}
]
==
[name=array_agg_STRING_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT "σ" AS elem UNION ALL
  SELECT "π" UNION ALL
  SELECT "⨝")
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>[unknown order:"π", "σ", "⨝"]}]
==
[name=array_agg_BYTES_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT b"a" AS elem UNION ALL
  SELECT b"b" UNION ALL
  SELECT b"c")
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BYTES>[unknown order:b"b", b"a", b"c"]}]
==
[name=array_agg_DATE_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT DATE('1984-08-02') AS elem UNION ALL
  SELECT DATE('2000-01-01') UNION ALL
  SELECT DATE('2014-09-11'))
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<DATE>[unknown order:2000-01-01, 1984-08-02, 2014-09-11]}
]
==
[name=array_agg_TIMESTAMP_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT TIMESTAMP("1984-08-02 01:01:01.001001 UTC") AS elem UNION ALL
  SELECT TIMESTAMP("2000-01-01 01:01:01.001001 UTC") UNION ALL
  SELECT TIMESTAMP("2014-09-11 01:01:01.001001 UTC"))
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<TIMESTAMP>[unknown order:
     2000-01-01 01:01:01.001001+00,
     1984-08-02 01:01:01.001001+00,
     2014-09-11 01:01:01.001001+00
   ]}
]
==
[name=array_agg_enum_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT CAST('TESTENUM0' AS "zetasql_test__.TestEnum") AS elem UNION ALL
  SELECT CAST('TESTENUM1' AS "zetasql_test__.TestEnum") UNION ALL
  SELECT CAST('TESTENUM2' AS "zetasql_test__.TestEnum"))
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[unknown order:
     TESTENUM1,
     TESTENUM0,
     TESTENUM2
   ]}
]
==
[name=array_agg_proto_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT NEW zetasql_test__.KitchenSinkPB(11 AS int64_key_1,
                                          12 AS int64_key_2) AS elem UNION ALL
  SELECT NEW zetasql_test__.KitchenSinkPB(21 AS int64_key_1,
                                          22 AS int64_key_2) UNION ALL
  SELECT NEW zetasql_test__.KitchenSinkPB(31 AS int64_key_1,
                                          32 AS int64_key_2))

--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[unknown order:
     {
       int64_key_1: 21
       int64_key_2: 22
     },
     {
       int64_key_1: 11
       int64_key_2: 12
     },
     {
       int64_key_1: 31
       int64_key_2: 32
     }
   ]}
]
==
[name=array_agg_STRUCT_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT STRUCT(11, 12) AS elem UNION ALL
  SELECT STRUCT(21, 22) UNION ALL
  SELECT STRUCT(31, 32))
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<STRUCT<INT64, INT64>>[unknown order:{21, 22}, {11, 12}, {31, 32}]}
]
==
[required_features=JSON_TYPE]
[name=array_agg_JSON_basic]
SELECT ARRAY_AGG(elem) FROM (
  SELECT JSON '10' AS elem UNION ALL
  SELECT JSON 'false' UNION ALL
  SELECT JSON 'null' UNION ALL
  SELECT JSON '{"a": 10}' UNION ALL
  SELECT JSON '[10, true, "test"]' UNION ALL
  SELECT JSON '"foo"')
--
ARRAY<STRUCT<ARRAY<>>>[
  {
    ARRAY<JSON>[unknown order:false, {"a":10}, "foo", 10, null, [10,true,"test"]]
  }
]
==
[name=array_agg_with_nulls]
SELECT ARRAY_AGG(elem) FROM (
  SELECT 1 AS elem UNION ALL
  SELECT NULL UNION ALL
  SELECT 3)
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[unknown order:NULL, 1, 3]}]
==
[name=array_agg_with_null_prefix]
SELECT ARRAY_AGG(elem) FROM (
  SELECT NULL AS elem UNION ALL
  SELECT 3)
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[unknown order:3, NULL]}]
==
[name=array_agg_with_null_suffix]
SELECT ARRAY_AGG(elem) FROM (
  SELECT 3 AS elem UNION ALL
  SELECT NULL)
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[unknown order:NULL, 3]}]
==
[name=array_agg_with_just_null]
SELECT ARRAY_AGG(elem) FROM (
  SELECT NULL AS elem
)
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[NULL]}]
==
[name=array_agg_produces_null_for_no_rows]
SELECT ARRAY_AGG(elem) FROM (
  SELECT * FROM (SELECT 1 AS elem)
  WHERE false
)
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>(NULL)}]
==
[name=array_agg_with_filter]
SELECT ARRAY_AGG(elem) FROM (
  SELECT 1 AS elem UNION ALL
  SELECT 2 UNION ALL
  SELECT 3)
WHERE MOD(elem, 2) = 1
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[unknown order:3, 1]}]
==
[name=array_agg_with_group_by]
SELECT ARRAY_AGG(elem) FROM (
  SELECT 1 AS elem UNION ALL
  SELECT 2 UNION ALL
  SELECT 3)
GROUP BY MOD(elem, 2)
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<INT64>[2]},
  {ARRAY<INT64>[unknown order:1, 3]}
]
==
[name=array_agg_with_group_having]
SELECT ARRAY_AGG(a) b FROM (
  SELECT 1 AS a UNION ALL
  SELECT 2 UNION ALL
  SELECT 3)
GROUP BY MOD(a, 2)
HAVING ARRAY_LENGTH(b) > 1
--
ARRAY<STRUCT<b ARRAY<>>>[{ARRAY<INT64>[unknown order:1, 3]}]
==
[name=array_agg_with_having]
SELECT ARRAY_AGG(a) b FROM (
  SELECT 1 AS a UNION ALL
  SELECT 2 UNION ALL
  SELECT 3)
HAVING ARRAY_LENGTH(b) > 1
--
ARRAY<STRUCT<b ARRAY<>>>[{ARRAY<INT64>[unknown order:2, 1, 3]}]
==
[name=array_agg_constant_value]
SELECT ARRAY_AGG(1) b FROM (
  SELECT 1 UNION ALL
  SELECT 2 UNION ALL
  SELECT 3)
--
ARRAY<STRUCT<b ARRAY<>>>[{ARRAY<INT64>[unknown order:1, 1, 1]}]
==
[name=array_agg_constant_null]
SELECT ARRAY_AGG(NULL) b FROM (
  SELECT 1 UNION ALL
  SELECT 2 UNION ALL
  SELECT 3)
--
ARRAY<STRUCT<b ARRAY<>>>[{ARRAY<INT64>[unknown order:NULL, NULL, NULL]}]
==
[name=array_agg_of_subquery]
SELECT ARRAY_AGG((SELECT AS STRUCT a AS element)) b
FROM (
  SELECT 1 AS a UNION ALL
  SELECT 2 UNION ALL
  SELECT 3)
--
ARRAY<STRUCT<b ARRAY<>>>[
  {ARRAY<STRUCT<element INT64>>[unknown order:{2}, {1}, {3}]}
]
==
[name=array_agg_of_struct_expr_anonymous_fields]
SELECT ARRAY_AGG((a, b)) c
FROM
  (SELECT 1 AS a UNION ALL
   SELECT 2 UNION ALL
   SELECT 3),
  (SELECT "a" AS b UNION ALL
   SELECT "b" UNION ALL
   SELECT "c")
--
ARRAY<STRUCT<c ARRAY<>>>[
  {ARRAY<STRUCT<INT64, STRING>>[unknown order:
     {2, "a"},
     {1, "b"},
     {1, "c"},
     {3, "a"},
     {2, "b"},
     {2, "c"},
     {1, "a"},
     {3, "b"},
     {3, "c"}
   ]}
]
==
[name=array_agg_of_struct_expr_named_fields]
SELECT ARRAY_AGG(STRUCT(a AS foo, b AS bar)) c FROM
  (SELECT 1 AS a UNION ALL
   SELECT 2),
  (SELECT "a" AS b UNION ALL
   SELECT "b")
--
ARRAY<STRUCT<c ARRAY<>>>[
  {ARRAY<STRUCT<foo INT64, bar STRING>>[unknown order:
     {2, "a"},
     {1, "a"},
     {2, "b"},
     {1, "b"}
   ]}
]
==
[name=array_agg_of_struct_variable]
SELECT ARRAY_AGG(p) c FROM
  (SELECT 1 AS a UNION ALL
   SELECT 2) t,
  (SELECT 1, 2) p
--
ARRAY<STRUCT<c ARRAY<>>>[
  {ARRAY<STRUCT<INT64, INT64>>[unknown order:{1, 2}, {1, 2}]}
]
==
[name=array_agg_of_null_subquery]
SELECT ARRAY_AGG((SELECT 1 FROM (SELECT 1) WHERE false)) b
FROM (SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) a
--
ARRAY<STRUCT<b ARRAY<>>>[{ARRAY<INT64>[unknown order:NULL, NULL, NULL]}]
==
[name=array_agg_of_empty_input]
SELECT ARRAY_AGG(a) b FROM
  (SELECT 1 AS a UNION ALL SELECT 2 UNION ALL SELECT 3)
WHERE false
--
ARRAY<STRUCT<b ARRAY<>>>[{ARRAY<INT64>(NULL)}]
==
[name=array_agg_with_other_aggregates]
SELECT ARRAY_AGG(a), COUNT(*), MAX(a) FROM
  (SELECT 1 AS a UNION ALL SELECT 2 UNION ALL SELECT 3)
GROUP BY MOD(a, 2)
--
ARRAY<STRUCT<ARRAY<>, INT64, INT64>>[unknown order:
  {ARRAY<INT64>[2], 1, 2},
  {
    ARRAY<INT64>[unknown order:1, 3],
    2,
    3
  }
]
==
[name=array_agg_in_expression]
SELECT ARRAY_LENGTH(ARRAY_AGG(a)) FROM
(SELECT 1 AS a UNION ALL SELECT 2 UNION ALL SELECT 3)
--
ARRAY<STRUCT<INT64>>[{3}]
==
[name=array_agg_with_direct_offset_access]
SELECT ARRAY_AGG(a)[OFFSET(1)] BETWEEN 1 AND 3 FROM
  (SELECT 1 AS a UNION ALL SELECT 2 UNION ALL SELECT 3)
--
ARRAY<STRUCT<BOOL>>[{true}]

NOTE: Reference implementation reports non-determinism.
==
[name=array_agg_distinct_same]
SELECT ARRAY_AGG(DISTINCT a) b FROM
  (SELECT 1 AS a UNION ALL SELECT 1 UNION ALL SELECT 1)
--
ARRAY<STRUCT<b ARRAY<>>>[{ARRAY<INT64>[1]}]
==
[name=array_agg_distinct_different]
SELECT ARRAY_AGG(DISTINCT a) b FROM (
  SELECT 1 AS a UNION ALL SELECT 2 AS a UNION ALL SELECT 1 AS a UNION ALL
  SELECT 2 AS a UNION ALL SELECT 1 AS a)
--
ARRAY<STRUCT<b ARRAY<>>>[{ARRAY<INT64>[unknown order:2, 1]}]
==
[name=array_agg_distinct_with_null]
SELECT ARRAY_AGG(DISTINCT a) b FROM (
 SELECT 1 AS a UNION ALL
 SELECT NULL UNION ALL
 SELECT 1 UNION ALL
 SELECT NULL UNION ALL
 SELECT 1)
--
ARRAY<STRUCT<b ARRAY<>>>[{ARRAY<INT64>[unknown order:NULL, 1]}]
==
[name=array_agg_distinct_all_null]
SELECT ARRAY_AGG(DISTINCT a) b FROM (
  SELECT NULL AS a UNION ALL SELECT NULL AS a)
--
ARRAY<STRUCT<b ARRAY<>>>[{ARRAY<INT64>[NULL]}]
==
[name=array_agg_distinct_empty_input]
SELECT ARRAY_AGG(DISTINCT a) b FROM
  (SELECT * FROM (SELECT true AS a) WHERE false)
--
ARRAY<STRUCT<b ARRAY<>>>[{ARRAY<BOOL>(NULL)}]
==
[name=array_agg_array_concat]
SELECT ARRAY_CONCAT(ARRAY_AGG(x), [1, 2, 3])
FROM (SELECT 100 AS x UNION ALL SELECT 200 AS x);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[unknown order:200, 100, 1, 2, 3]}]
==

# ARRAY type subquery in SELECT

[name=array_subquery_simple]
SELECT ARRAY(SELECT 1) FROM UNNEST([1, 2, 3])
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<INT64>[1]},
  {ARRAY<INT64>[1]},
  {ARRAY<INT64>[1]}
]
==
[name=array_subquery_simple_null]
SELECT ARRAY(SELECT NULL) FROM UNNEST([1, 2, 3])
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<INT64>[NULL]},
  {ARRAY<INT64>[NULL]},
  {ARRAY<INT64>[NULL]}
]
==
[name=array_subquery_correlated]
SELECT ARRAY(SELECT a) FROM UNNEST([1, 2, 3]) a
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<INT64>[2]},
  {ARRAY<INT64>[1]},
  {ARRAY<INT64>[3]}
]
==
[name=array_subquery_preserves_nulls]
SELECT ARRAY(SELECT b FROM UNNEST(["a", NULL, "b"]) b) FROM UNNEST([1, 2, 3])
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<STRING>[unknown order:"a", NULL, "b"]},
  {ARRAY<STRING>[unknown order:"a", NULL, "b"]},
  {ARRAY<STRING>[unknown order:"a", NULL, "b"]}
]
==
[name=array_subquery_preserves_null_prefix]
SELECT ARRAY(SELECT b FROM UNNEST([NULL, "b"]) b) FROM UNNEST([1, 2, 3])
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<STRING>[unknown order:NULL, "b"]},
  {ARRAY<STRING>[unknown order:NULL, "b"]},
  {ARRAY<STRING>[unknown order:NULL, "b"]}
]
==
[name=array_subquery_preserves_null_suffix]
SELECT ARRAY(SELECT b FROM UNNEST(["a", NULL]) b) FROM UNNEST([1, 2, 3])
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<STRING>[unknown order:"a", NULL]},
  {ARRAY<STRING>[unknown order:"a", NULL]},
  {ARRAY<STRING>[unknown order:"a", NULL]}
]
==
[name=array_subquery_preserves_null_singleton]
SELECT ARRAY(SELECT b FROM UNNEST([NULL]) b) FROM UNNEST([1, 2, 3])
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<INT64>[NULL]},
  {ARRAY<INT64>[NULL]},
  {ARRAY<INT64>[NULL]}
]
==
[name=array_subquery_produces_empty_for_no_rows]
SELECT ARRAY(SELECT b FROM UNNEST(ARRAY<INT64>[]) b) FROM UNNEST([1, 2, 3])
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<INT64>[]},
  {ARRAY<INT64>[]},
  {ARRAY<INT64>[]}
]
==
[name=array_subquery_with_filter]
SELECT ARRAY(SELECT b
             FROM UNNEST(["a", NULL, "b"]) b
             WHERE b IS NOT NULL)
FROM UNNEST([1, 2, 3])
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<STRING>[unknown order:"a", "b"]},
  {ARRAY<STRING>[unknown order:"a", "b"]},
  {ARRAY<STRING>[unknown order:"a", "b"]}
]
==
[name=array_of_structs]
SELECT ARRAY(SELECT AS STRUCT a, b
             FROM UNNEST(["a", NULL, "c"]) b
             WHERE b IS NOT NULL)
FROM UNNEST([1, 2, 3]) a
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<STRUCT<a INT64, b STRING>>[unknown order:{2, "a"}, {2, "c"}]},
  {ARRAY<STRUCT<a INT64, b STRING>>[unknown order:{1, "a"}, {1, "c"}]},
  {ARRAY<STRUCT<a INT64, b STRING>>[unknown order:{3, "a"}, {3, "c"}]}
]
==
[name=array_of_protos]
SELECT ARRAY(SELECT AS "zetasql_test__.MessageWithNulls"
               a as i1, b as i2, NULL as i3 -- i4 is not specified
             FROM UNNEST([1, NULL, 2]) b)
FROM UNNEST([1, NULL, 3]) a
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<PROTO<zetasql_test__.MessageWithNulls>>[unknown order:
     {i2: 1},
     {},
     {i2: 2}
   ]},
  {ARRAY<PROTO<zetasql_test__.MessageWithNulls>>[unknown order:
     {
       i1: 1
       i2: 1
     },
     {i1: 1},
     {
       i1: 1
       i2: 2
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.MessageWithNulls>>[unknown order:
     {
       i1: 3
       i2: 1
     },
     {i1: 3},
     {
       i1: 3
       i2: 2
     }
   ]}
]
==


# ARRAY type subquery in scalar context (non SELECT list)

[name=array_subquery_in_scalar_context]
SELECT ARRAY_LENGTH(ARRAY(SELECT 1))
--
ARRAY<STRUCT<INT64>>[{1}]
==
[name=array_subquery_in_if_condition_1]
SELECT IF(ARRAY_LENGTH(ARRAY(SELECT 1)) = 0, "empty", "has elements");
--
ARRAY<STRUCT<STRING>>[{"has elements"}]
==
[name=array_subquery_in_if_condition_2]
SELECT IF(ARRAY_LENGTH(ARRAY(SELECT 1 FROM (SELECT 1) WHERE false)) = 0,
          "empty", "has elements");
--
ARRAY<STRUCT<STRING>>[{"empty"}]
==
[name=array_subquery_in_if_case_1]
SELECT IF(1 = 1,
          ARRAY_LENGTH(ARRAY(SELECT 1)),
          ARRAY_LENGTH(ARRAY(SELECT 1 UNION ALL SELECT 2)));
--
ARRAY<STRUCT<INT64>>[{1}]
==
[name=array_subquery_in_if_case_2]
SELECT IF(1 = 2,
          ARRAY_LENGTH(ARRAY(SELECT 1)),
          ARRAY_LENGTH(ARRAY(SELECT 1 UNION ALL SELECT 2)));
--
ARRAY<STRUCT<INT64>>[{2}]
==
[name=array_subquery_with_direct_offset_access]
SELECT ARRAY(SELECT 1 UNION ALL SELECT 1)[OFFSET(1)]
--
ARRAY<STRUCT<INT64>>[{1}]

NOTE: Reference implementation reports non-determinism.
==


# ARRAY type sub-query in FROM clause

[name=array_subquery_from_simple]
SELECT a
FROM UNNEST(ARRAY(SELECT a FROM UNNEST(["a", "b", "c"]) a)) a
--
ARRAY<STRUCT<a STRING>>[unknown order:{"a"}, {"b"}, {"c"}]
==
[name=array_subquery_from_correlated]
SELECT a, b
FROM UNNEST([1, 2, 3]) a,
     UNNEST(ARRAY(SELECT a+1 FROM UNNEST([1, 2, 3]))) b
--
ARRAY<STRUCT<a INT64, b INT64>>[unknown order:
  {2, 3},
  {2, 3},
  {2, 3},
  {1, 2},
  {1, 2},
  {1, 2},
  {3, 4},
  {3, 4},
  {3, 4}
]
==
[name=array_subquery_from_correlated_twice]
SELECT a, b, c
FROM UNNEST([1, 2, 3]) a,
     UNNEST(ARRAY(SELECT a+1 FROM UNNEST(["a", "b", "c"]))) b,
     UNNEST(ARRAY(SELECT b+1 FROM UNNEST(["d", "e", "f"]))) c
--
ARRAY<STRUCT<a INT64, b INT64, c INT64>>[unknown order:
  {2, 3, 4},
  {2, 3, 4},
  {2, 3, 4},
  {1, 2, 3},
  {1, 2, 3},
  {1, 2, 3},
  {1, 2, 3},
  {1, 2, 3},
  {1, 2, 3},
  {3, 4, 5},
  {3, 4, 5},
  {3, 4, 5},
  {2, 3, 4},
  {2, 3, 4},
  {2, 3, 4},
  {2, 3, 4},
  {2, 3, 4},
  {2, 3, 4},
  {1, 2, 3},
  {1, 2, 3},
  {1, 2, 3},
  {3, 4, 5},
  {3, 4, 5},
  {3, 4, 5},
  {3, 4, 5},
  {3, 4, 5},
  {3, 4, 5}
]
==
[name=array_subquery_in_join]
SELECT a, b
FROM UNNEST([1, 2, 3]) a
  JOIN UNNEST(ARRAY(SELECT b FROM UNNEST([3, 2, 1]) b)) b
    ON a = b;
--
ARRAY<STRUCT<a INT64, b INT64>>[unknown order:{2, 2}, {1, 1}, {3, 3}]
==
[name=array_subquery_with_grouping]
SELECT a
FROM UNNEST(ARRAY(SELECT COUNT(*) FROM UNNEST([3, 2, 1]) a)) a;
--
ARRAY<STRUCT<a INT64>>[{3}]
==
# ARRAY_CONCAT_AGG queries

[name=array_concat_agg_no_input]
SELECT ARRAY_CONCAT_AGG(x)
FROM (SELECT x FROM (SELECT [1] x) foo where 1 = 2) bar;
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>(NULL)}]
==
[name=array_concat_agg_all_nulls]
SELECT ARRAY_CONCAT_AGG(x)
FROM (SELECT CAST(NULL as ARRAY<INT64>) x UNION ALL SELECT NULL)
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>(NULL)}]
==
[name=array_concat_agg_empty]
SELECT ARRAY_CONCAT_AGG(x)
FROM (SELECT [] x) foo;
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[]}]
==
[name=array_concat_agg_empty_empty]
SELECT ARRAY_CONCAT_AGG(x)
FROM (SELECT [] x UNION ALL SELECT [] x) foo;
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[]}]
==
[name=array_concat_agg_with_null]
SELECT ARRAY_CONCAT_AGG(x)
FROM (SELECT ARRAY<INT64>[1, 2] x UNION ALL SELECT NULL x) foo;
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[unknown order:1, 2]}]
==
[name=array_concat_agg_simple]
SELECT ARRAY_CONCAT_AGG(x)
FROM (SELECT [1, 2] x) foo;
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[unknown order:1, 2]}]
==
[required_features=V_1_1_LIMIT_IN_AGGREGATE]
[name=array_concat_agg_simple_with_limit]
SELECT ARRAY_CONCAT_AGG(x LIMIT 1)
FROM (SELECT [1] x) foo;
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[1]}]

NOTE: Reference implementation reports non-determinism.
==
[name=array_concat_agg_empty_non_empty]
SELECT ARRAY_CONCAT_AGG(x)
FROM (SELECT [] x UNION ALL SELECT [2, 3] x) foo;
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[unknown order:2, 3]}]
==
[name=array_concat_agg_two_non_empty]
SELECT ARRAY_CONCAT_AGG(x)
FROM (SELECT [1, 2] x UNION ALL SELECT [1, 2] x) foo;
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[unknown order:1, 2, 1, 2]}]

==
[name=array_concat_agg_two_non_empty_string_arrays]
SELECT ARRAY_CONCAT_AGG(x)
FROM (SELECT ARRAY<STRING>["a", "ab"] x UNION ALL
      SELECT ARRAY<STRING>["a", "ab"] x) foo;
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>[unknown order:"a", "ab", "a", "ab"]}]
==
[name=array_concat_agg_three_rows_with_null_elements]
SELECT ARRAY_CONCAT_AGG(x)
FROM (SELECT [1, NULL] x UNION ALL SELECT [NULL, 2] x
      UNION ALL SELECT [3] x) foo;
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[unknown order:NULL, 2, 1, NULL, 3]}]
==
[name=array_concat_agg_with_group_by]
SELECT w, ARRAY_CONCAT_AGG(x)
FROM (SELECT 1 as w, [1, NULL] as x UNION ALL SELECT 2 as w, [NULL, 2] as x
      UNION ALL SELECT 1 as w, [3] as x UNION ALL SELECT 3 as w, NULL as x
      UNION ALL SELECT 2 as w, [4] as x) foo
GROUP BY w ORDER by w;
--
ARRAY<STRUCT<w INT64, ARRAY<>>>[known order:
  {
    1,
    ARRAY<INT64>[unknown order:1, NULL, 3]
  },
  {
    2,
    ARRAY<INT64>[unknown order:NULL, 2, 4]
  },
  {3, ARRAY<INT64>(NULL)}
]
==

# ARRAY_CONCAT_AGG queries for different types

[name=array_concat_agg_int32]
SELECT ARRAY_CONCAT_AGG(x) FROM (SELECT ARRAY<INT32>[1, 4] x UNION ALL
                                 SELECT ARRAY<INT32>[2, 5]) foo
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT32>[unknown order:2, 5, 1, 4]}]
==
[name=array_concat_agg_uint32]
SELECT ARRAY_CONCAT_AGG(x) FROM (SELECT ARRAY<UINT32>[1, 4] x UNION ALL
                                 SELECT ARRAY<UINT32>[2, 5]) foo
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT32>[unknown order:2, 5, 1, 4]}]
==
[name=array_concat_agg_int64]
SELECT ARRAY_CONCAT_AGG(x) FROM (SELECT ARRAY<INT64>[1, 4] x UNION ALL
                                 SELECT ARRAY<INT64>[2, 5]) foo
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[unknown order:2, 5, 1, 4]}]
==
[name=array_concat_agg_uint64]
SELECT ARRAY_CONCAT_AGG(x) FROM (SELECT ARRAY<UINT64>[1, 4] x UNION ALL
                                 SELECT ARRAY<UINT64>[2, 5]) foo
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT64>[unknown order:2, 5, 1, 4]}]
==
[name=array_concat_agg_float]
SELECT ARRAY_CONCAT_AGG(x) FROM (SELECT ARRAY<FLOAT>[1.1, 4.5] x UNION ALL
                                 SELECT ARRAY<FLOAT>[2.7, 5.3]) foo
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<FLOAT>[unknown order:2.7, 5.3, 1.1, 4.5]}]
==
[name=array_concat_agg_double]
SELECT ARRAY_CONCAT_AGG(x) FROM (SELECT ARRAY<DOUBLE>[1.1, 4.5] x UNION ALL
                                 SELECT ARRAY<DOUBLE>[2.7, 5.3]) foo
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DOUBLE>[unknown order:2.7, 5.3, 1.1, 4.5]}]
==
[required_features=NUMERIC_TYPE]
[name=array_concat_agg_numeric]
SELECT ARRAY_CONCAT_AGG(x) FROM (SELECT ARRAY<NUMERIC>[1.000000001, 4.5] x UNION ALL
                                 SELECT ARRAY<NUMERIC>[2.7, 5.3]) foo
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<NUMERIC>[unknown order:2.7, 5.3, 1.000000001, 4.5]}
]
==
[required_features=BIGNUMERIC_TYPE]
[name=array_concat_agg_bignumeric]
SELECT ARRAY_CONCAT_AGG(x) FROM (SELECT ARRAY<BIGNUMERIC>[1.00000000000000000000000000000000000001, 4.5] x UNION ALL
                                 SELECT ARRAY<BIGNUMERIC>[2.7, 5.3]) foo
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<BIGNUMERIC>[unknown order:
     2.7,
     5.3,
     1.00000000000000000000000000000000000001,
     4.5
   ]}
]
==
[name=array_concat_agg_bool]
SELECT ARRAY_CONCAT_AGG(x) FROM (SELECT ARRAY<BOOL>[true, false] x UNION ALL
                                 SELECT ARRAY<BOOL>[false, true]) foo
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BOOL>[unknown order:false, true, true, false]}]
==
[name=array_concat_agg_string]
SELECT ARRAY_CONCAT_AGG(x) FROM (SELECT ARRAY<STRING>["a", "f"] x UNION ALL
                                 SELECT ARRAY<STRING>["c", "r"]) foo
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>[unknown order:"c", "r", "a", "f"]}]
==
[name=array_concat_agg_bytes]
SELECT ARRAY_CONCAT_AGG(x) FROM (SELECT ARRAY<BYTES>[b"a", b"f"] x UNION ALL
                                 SELECT ARRAY<BYTES>[b"c", b"r"]) foo
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BYTES>[unknown order:b"c", b"r", b"a", b"f"]}]
==
[name=array_concat_agg_date]
SELECT ARRAY_CONCAT_AGG(x) FROM (SELECT ARRAY<DATE>['2000-01-01'] x UNION ALL
                                 SELECT ARRAY<DATE>['2015-12-30']) foo
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DATE>[unknown order:2015-12-30, 2000-01-01]}]
==
[name=array_concat_agg_timestamp]
SELECT ARRAY_CONCAT_AGG(x) FROM (
    SELECT ARRAY<TIMESTAMP>["2013-02-01 12:34:56.789012"] x UNION ALL
    SELECT ARRAY<TIMESTAMP>["2014-09-11 01:01:01.001001 UTC"]) foo
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<TIMESTAMP>[unknown order:
     2014-09-11 01:01:01.001001+00,
     2013-02-01 20:34:56.789012+00
   ]}
]
==
[name=array_concat_agg_enum]
SELECT ARRAY_CONCAT_AGG(x) FROM (
    SELECT ARRAY<zetasql_test__.TestEnum>['TESTENUM0', 'TESTENUM2'] x UNION ALL
    SELECT ARRAY<zetasql_test__.TestEnum>['TESTENUM1']) foo
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[unknown order:
     TESTENUM1,
     TESTENUM0,
     TESTENUM2
   ]}
]
==
[name=array_concat_agg_struct]
SELECT ARRAY_CONCAT_AGG(x) FROM (
    SELECT ARRAY[STRUCT(1 as i)] x UNION ALL
    SELECT ARRAY[STRUCT(2 as i)]) foo
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRUCT<i INT64>>[unknown order:{2}, {1}]}]
==
[name=array_concat_agg_array]
SELECT ARRAY_CONCAT_AGG(x) FROM (
    SELECT ARRAY[ARRAY[1]] x UNION ALL
    SELECT ARRAY[ARRAY[2]]) foo
--
ERROR: generic::invalid_argument: Cannot construct array with element type ARRAY<INT64> because nested arrays are not supported [at 2:18]
    SELECT ARRAY[ARRAY[1]] x UNION ALL
                 ^
==
[name=array_concat_agg_proto]
SELECT ARRAY_CONCAT_AGG(x) FROM (
    SELECT ARRAY<"zetasql_test__.KitchenSinkPB">[
  '''
    int64_key_1: 11
    int64_key_2: 12
  '''] x UNION ALL
    SELECT ARRAY<"zetasql_test__.KitchenSinkPB">[
  '''
    int64_key_1: 21
    int64_key_2: 22
  ''']) foo
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[unknown order:
     {
       int64_key_1: 21
       int64_key_2: 22
     },
     {
       int64_key_1: 11
       int64_key_2: 12
     }
   ]}
]
==
[required_features=JSON_TYPE]
[name=array_concat_agg_json]
SELECT ARRAY_CONCAT_AGG(x) FROM (
    SELECT [JSON '"test"', JSON '{"a": 10}'] x UNION ALL
    SELECT [JSON 'null', JSON '10', JSON 'false'])
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<JSON>[unknown order:null, 10, false, "test", {"a":10}]}
]
==
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=array_agg_BOOL_ignore_nulls_with_unnest]
SELECT ARRAY_AGG(elem IGNORE NULLS)
FROM UNNEST(ARRAY<BOOL>[true, null, false, true, null]) elem;
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BOOL>[unknown order:true, true, false]}]
==
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=array_agg_BOOL_ignore_nulls]
SELECT ARRAY_AGG(elem IGNORE NULLS)
FROM (SELECT true as elem
      UNION ALL
      SELECT null
      UNION ALL
      SELECT false
      UNION ALL
      SELECT true
      UNION ALL
      SELECT null)
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BOOL>[unknown order:true, true, false]}]
==
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=array_agg_BOOL_respect_nulls]
SELECT ARRAY_AGG(elem RESPECT NULLS)
FROM (SELECT true as elem
      UNION ALL
      SELECT null
      UNION ALL
      SELECT false
      UNION ALL
      SELECT true
      UNION ALL
      SELECT null)
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<BOOL>[unknown order:NULL, true, true, false, NULL]}
]
==
# This test is added because some engines disallow arrays with null elements
# in operation/stage outputs. We can still test a query which transiently
# stores arrays with null elements.
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE,V_1_1_ORDER_BY_IN_AGGREGATE,V_1_4_WITH_EXPRESSION]
[name=array_agg_BOOL_respect_nulls_2]
SELECT
  WITH(
   x AS ARRAY_AGG(x RESPECT NULLS ORDER BY x),
   STRUCT(ARRAY_LENGTH(x) AS arr_len, x[OFFSET(0)] AS idx0, x[OFFSET(1)] AS idx1)
  ).*
FROM UNNEST([true, NULL]) AS x;
--
ARRAY<STRUCT<arr_len INT64, idx0 BOOL, idx1 BOOL>>[{2, NULL, true}]
==
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=array_agg_INT64_ignore_nulls]
SELECT ARRAY_AGG(elem IGNORE NULLS)
FROM (SELECT 4 AS elem
      UNION ALL
      SELECT null
      UNION ALL
      SELECT 0
      UNION ALL
      SELECT 4
      UNION ALL
      SELECT null);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[unknown order:4, 4, 0]}]
==
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=array_agg_INT64_respect_nulls]
SELECT ARRAY_AGG(elem RESPECT NULLS)
FROM (SELECT 4 AS elem
      UNION ALL
      SELECT null
      UNION ALL
      SELECT 0
      UNION ALL
      SELECT 4
      UNION ALL
      SELECT null);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[unknown order:NULL, 4, 4, 0, NULL]}]
==
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE,V_1_1_ORDER_BY_IN_AGGREGATE,V_1_4_WITH_EXPRESSION]
[name=array_agg_INT64_respect_nulls_2]
SELECT
  WITH(
   x AS ARRAY_AGG(x RESPECT NULLS ORDER BY x),
   STRUCT(ARRAY_LENGTH(x) AS arr_len, x[OFFSET(0)] AS idx0, x[OFFSET(1)] AS idx1)
  ).*
FROM UNNEST([3, NULL]) AS x;
--
ARRAY<STRUCT<arr_len INT64, idx0 INT64, idx1 INT64>>[{2, NULL, 3}]
==
# When all values to aggregate are NULL, then the result is a NULL
# array.
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=array_agg_STRING_ignore_nulls]
SELECT ARRAY_AGG(elem IGNORE NULLS)
FROM (SELECT CAST(NULL AS STRING) AS elem
      UNION ALL
      SELECT NULL);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>(NULL)}]
==
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=array_agg_STRING_respect_nulls]
SELECT ARRAY_AGG(elem RESPECT NULLS)
FROM (SELECT CAST(NULL AS STRING) AS elem
      UNION ALL
      SELECT NULL);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>[unknown order:NULL, NULL]}]
==
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE,V_1_1_ORDER_BY_IN_AGGREGATE,V_1_4_WITH_EXPRESSION]
[name=array_agg_STRING_respect_nulls_2]
SELECT
  WITH(
   x AS ARRAY_AGG(x RESPECT NULLS ORDER BY x),
   STRUCT(ARRAY_LENGTH(x) AS arr_len, x[OFFSET(0)] AS idx0, x[OFFSET(1)] AS idx1)
  ).*
FROM UNNEST(["ab", NULL]) AS x;
--
ARRAY<STRUCT<arr_len INT64, idx0 STRING, idx1 STRING>>[{2, NULL, "ab"}]
==
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=array_agg_STRUCT_ignore_nulls]
SELECT ARRAY_AGG(elem IGNORE NULLS)
FROM (SELECT STRUCT<a INT64, b STRING>(1, null) AS elem
      UNION ALL
      SELECT CAST(null as STRUCT<a INT64, b STRING>)
      UNION ALL
      SELECT STRUCT<a INT64, b STRING>(null, "")
      UNION ALL
      SELECT STRUCT<a INT64, b STRING>(null, null))
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<STRUCT<a INT64, b STRING>>[unknown order:
     {NULL, NULL},
     {1, NULL},
     {NULL, ""}
   ]}
]
==
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=array_agg_STRUCT_respect_nulls]
SELECT ARRAY_AGG(elem RESPECT NULLS)
FROM (SELECT STRUCT<a INT64, b STRING>(1, null) AS elem
      UNION ALL
      SELECT CAST(null as STRUCT<a INT64, b STRING>)
      UNION ALL
      SELECT STRUCT<a INT64, b STRING>(null, "")
      UNION ALL
      SELECT STRUCT<a INT64, b STRING>(null, null))
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<STRUCT<a INT64, b STRING>>[unknown order:
     NULL,
     {NULL, NULL},
     {1, NULL},
     {NULL, ""}
   ]}
]
==
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE,V_1_1_ORDER_BY_IN_AGGREGATE,V_1_4_WITH_EXPRESSION]
[name=array_agg_STRUCT_respect_nulls_2]
SELECT
  WITH(
   x AS ARRAY_AGG(x RESPECT NULLS ORDER BY x.a),
   STRUCT(ARRAY_LENGTH(x) AS arr_len, x[OFFSET(0)] AS idx0, x[OFFSET(1)] AS idx1)
  ).*
FROM UNNEST([STRUCT<a INT64, b STRING>(1, "a"), NULL]) AS x;
--
ARRAY<STRUCT<
        arr_len INT64,
        idx0 STRUCT<a INT64, b STRING>,
        idx1 STRUCT<a INT64, b STRING>
      >>[{2, NULL, {1, "a"}}]
==
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=array_agg_PROTO_ignore_nulls]
SELECT ARRAY_AGG(elem IGNORE NULLS)
FROM (SELECT CAST("" AS "zetasql_test__.NullableInt") AS elem
      UNION ALL
      SELECT null
      UNION ALL
      SELECT CAST("value: 0" AS "zetasql_test__.NullableInt"));
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.NullableInt>>[unknown order:{}, {value: 0}]}
]
==
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=array_agg_PROTO_respect_nulls]
SELECT ARRAY_AGG(elem RESPECT NULLS)
FROM (SELECT CAST("" AS "zetasql_test__.NullableInt") AS elem
      UNION ALL
      SELECT null
      UNION ALL
      SELECT CAST("value: 0" AS "zetasql_test__.NullableInt"));
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.NullableInt>>[unknown order:NULL, {}, {value: 0}]}
]
==
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE,V_1_1_ORDER_BY_IN_AGGREGATE,V_1_4_WITH_EXPRESSION]
[name=array_agg_PROTO_respect_nulls_2]
SELECT
  WITH(
   x AS ARRAY_AGG(x RESPECT NULLS ORDER BY x.value),
   STRUCT(ARRAY_LENGTH(x) AS arr_len, x[OFFSET(0)] AS idx0, x[OFFSET(1)] AS idx1)
  ).*
FROM UNNEST([CAST("value: 0" AS "zetasql_test__.NullableInt"), NULL]) AS x;
--
ARRAY<STRUCT<
        arr_len INT64,
        idx0 PROTO<zetasql_test__.NullableInt>,
        idx1 PROTO<zetasql_test__.NullableInt>
      >>[{2, NULL, {value: 0}}]
==
# Note that the LIMIT applies to the non-NULL aggregated values.
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE,V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE]
[name=array_agg_DOUBLE_ignore_nulls_order_by_asc_limit]
SELECT ARRAY_AGG(elem IGNORE NULLS ORDER BY elem ASC LIMIT 3)
FROM (SELECT CAST(null AS DOUBLE) as elem
      UNION ALL
      SELECT null
      UNION ALL
      SELECT null
      UNION ALL
      SELECT 0.0
      UNION ALL
      SELECT null
      UNION ALL
      SELECT 0
      UNION ALL
      SELECT 4
      UNION ALL
      SELECT -1
      UNION ALL
      SELECT null)
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DOUBLE>[known order:-1, 0, 0]}]
==
# Note that the LIMIT applies to the non-NULL aggregated values.
[required_features=V_1_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE,V_1_1_ORDER_BY_IN_AGGREGATE,V_1_1_LIMIT_IN_AGGREGATE]
[name=array_agg_DOUBLE_ignore_nulls_order_by_desc_limit]
SELECT ARRAY_AGG(elem IGNORE NULLS ORDER BY elem DESC LIMIT 3)
FROM (SELECT CAST(null AS DOUBLE) as elem
      UNION ALL
      SELECT null
      UNION ALL
      SELECT null
      UNION ALL
      SELECT 0.0
      UNION ALL
      SELECT null
      UNION ALL
      SELECT 0
      UNION ALL
      SELECT 4
      UNION ALL
      SELECT -1
      UNION ALL
      SELECT null)
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DOUBLE>[known order:4, 0, 0]}]
