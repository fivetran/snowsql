[prepare_database]
CREATE TABLE TableAllNull AS
SELECT CAST(1 as int64) as row_id,
       CAST(NULL AS bool) as bool_val, CAST(NULL AS double) as double_val,
       CAST(NULL AS float) as float_val, CAST(NULL AS uint32) as uint32_val,
       CAST(NULL AS int32) as int32_val, CAST(NULL AS uint64) as uint64_val,
       CAST(NULL AS int64) as int64_val, CAST(NULL AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val, CAST(NULL AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val
--
ARRAY<STRUCT<
        row_id INT64,
        bool_val BOOL,
        double_val DOUBLE,
        float_val FLOAT,
        uint32_val UINT32,
        int32_val INT32,
        uint64_val UINT64,
        int64_val INT64,
        str_val STRING,
        bytes_val BYTES,
        date_val DATE,
        timestamp_val TIMESTAMP
      >>[
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}
]
==
[prepare_database]
CREATE TABLE TableOneValue AS
SELECT CAST(1 as int64) as row_id,
       CAST(true AS bool) as bool_val, CAST(1 AS double) as double_val,
       CAST(1 AS float) as float_val, CAST(1 AS uint32) as uint32_val,
       CAST(1 AS int32) as int32_val, CAST(1 AS uint64) as uint64_val,
       CAST(1 AS int64) as int64_val, CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val, CAST('2001-01-01' AS DATE) as date_val,
       CAST('2001-01-01 00:00:00 UTC' AS TIMESTAMP) as timestamp_val
--
ARRAY<STRUCT<
        row_id INT64,
        bool_val BOOL,
        double_val DOUBLE,
        float_val FLOAT,
        uint32_val UINT32,
        int32_val INT32,
        uint64_val UINT64,
        int64_val INT64,
        str_val STRING,
        bytes_val BYTES,
        date_val DATE,
        timestamp_val TIMESTAMP
      >>
[{
   1,
   true,
   1,
   1,
   1,
   1,
   1,
   1,
   "1",
   b"1",
   2001-01-01,
   2001-01-01 00:00:00+00
 }]
==
[prepare_database]
CREATE TABLE TableAllTypes AS
SELECT CAST(1 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST(0.125 AS float) as float_val,
       CAST(0.125 AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01 UTC' as timestamp_val
UNION ALL
SELECT CAST(2 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST('NaN' AS float) as float_val,
       CAST("+Inf" AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01 UTC' as timestamp_val
UNION ALL
SELECT CAST(3 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST("+Inf" AS float) as float_val,
       CAST("-Inf" AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01 UTC' as timestamp_val
UNION ALL
SELECT CAST(4 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-2 AS int32) as int32_val,
       CAST(-2 AS int64) as int64_val,
       CAST(2 AS uint32) as uint32_val,
       CAST(2 AS uint64) as uint64_val,
       CAST('NaN' AS float) as float_val,
       CAST("+Inf" AS double) as double_val, #positive 0 of type double
       CAST('2' AS string) as str_val,
       CAST('2' AS BYTES) as bytes_val,
       CAST('2014-01-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:02 UTC' as timestamp_val
UNION ALL
SELECT CAST(5 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-2 AS int32) as int32_val,
       CAST(-2 AS int64) as int64_val,
       CAST(2 AS uint32) as uint32_val,
       CAST(2 AS uint64) as uint64_val,
       CAST("-Inf" AS float) as float_val,
       CAST('NaN' AS double) as double_val,
       CAST('2' AS string) as str_val,
       CAST('2' AS BYTES) as bytes_val,
       CAST('2014-01-02' AS DATE) as date_val,
       TIMESTAMP '2014-01-02 00:00:02 UTC' as timestamp_val
UNION ALL
SELECT CAST(6 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-3 AS int32) as int32_val,
       CAST(-3 AS int64) as int64_val,
       CAST(3 AS uint32) as uint32_val,
       CAST(3 AS uint64) as uint64_val,
       CAST("+Inf" AS float) as float_val,
       CAST("-Inf" AS double) as double_val,
       CAST("3" AS string) as str_val,
       CAST("3" AS BYTES) as bytes_val,
       CAST('2014-01-03' AS DATE) as date_val,
       TIMESTAMP '2014-01-03 00:00:03 UTC' as timestamp_val
UNION ALL
SELECT CAST(7 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-4 AS int32) as int32_val,
       CAST(-4 AS int64) as int64_val,
       CAST(4 AS uint32) as uint32_val,
       CAST(4 AS uint64) as uint64_val,
       CAST("-Inf" AS float) as float_val,
       CAST("+Inf" AS double) as double_val,
       CAST('4' AS string) as str_val,
       CAST('4' AS BYTES) as bytes_val,
       CAST('2014-01-04' AS DATE) as date_val,
       TIMESTAMP '2014-01-04 00:00:04 UTC' as timestamp_val
UNION ALL
SELECT CAST(8 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(NULL AS float) as float_val,
       CAST(NULL AS double) as double_val,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val
UNION ALL
SELECT CAST(9 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(-pow(0.1, 46) AS float) as float_val, #negative 0 of type float
       CAST('NaN' AS double) as double_val,
       CAST(NULL AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val
UNION ALL
SELECT CAST(10 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(1 AS int32) as int32_val,
       CAST(1 AS int64) as int64_val,
       CAST(11 AS uint32) as uint32_val,
       CAST(11 AS uint64) as uint64_val,
       CAST(0.125 AS float) as float_val,
       CAST(0.125 AS double) as double_val,
       CAST('6' AS string) as str_val,
       CAST('7' AS BYTES) as bytes_val,
       CAST('2014-01-08' AS DATE) as date_val,
       TIMESTAMP '2014-01-07 00:00:01 UTC' as timestamp_val
UNION ALL
SELECT CAST(11 AS int64) as row_id, # Values duplicated in row 18 for distinct testing.
       CAST(false AS bool) as bool_val,
       CAST(5 AS int32) as int32_val,
       CAST(3 AS int64) as int64_val,
       CAST(11 AS uint32) as uint32_val,
       CAST(8 AS uint64) as uint64_val,
       CAST(-0.125 AS float) as float_val,
       CAST(-0.125 AS double) as double_val,
       CAST('123' AS string) as str_val,
       CAST('123' AS BYTES) as bytes_val,
       CAST('2014-02-01' AS DATE) as date_val,
       TIMESTAMP '2014-03-01 00:00:01 UTC' as timestamp_val
UNION ALL
SELECT CAST(12 AS int64) as row_id, # Values duplicated in row 19 for distinct testing.
       CAST(false AS bool) as bool_val,
       CAST(2 AS int32) as int32_val,
       CAST(16 AS int64) as int64_val,
       CAST(5 AS uint32) as uint32_val,
       CAST(9 AS uint64) as uint64_val,
       CAST(0.75 AS float) as float_val,
       CAST(-0.25 AS double) as double_val,
       CAST('24' AS string) as str_val,
       CAST('22' AS BYTES) as bytes_val,
       CAST('2014-02-02' AS DATE) as date_val,
       TIMESTAMP '2014-03-02 00:00:02 UTC' as timestamp_val
UNION ALL
SELECT CAST(13 AS int64) as row_id, # Values duplicated in row 20 for distinct testing.
       CAST(false AS bool) as bool_val,
       CAST(9 AS int32) as int32_val,
       CAST(9 AS int64) as int64_val,
       CAST(4 AS uint32) as uint32_val,
       CAST(8 AS uint64) as uint64_val,
       CAST(-0.25 AS float) as float_val,
       CAST(-0.75 AS double) as double_val,
       CAST('222' AS string) as str_val,
       CAST("234" AS BYTES) as bytes_val,
       CAST('2014-05-02' AS DATE) as date_val,
       TIMESTAMP '2014-05-02 00:00:02 UTC' as timestamp_val
UNION ALL
SELECT CAST(14 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(13 AS int32) as int32_val,
       CAST(23 AS int64) as int64_val,
       CAST(31 AS uint32) as uint32_val,
       CAST(32 AS uint64) as uint64_val,
       CAST(-0.375 AS float) as float_val,
       CAST(-0.375 AS double) as double_val,
       CAST('345' AS string) as str_val,
       CAST('345' AS BYTES) as bytes_val,
       CAST('2014-01-06' AS DATE) as date_val,
       TIMESTAMP '2014-02-03 00:00:03 UTC' as timestamp_val
UNION ALL
SELECT CAST(15 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(-24 AS int32) as int32_val,
       CAST(-14 AS int64) as int64_val,
       CAST(41 AS uint32) as uint32_val,
       CAST(54 AS uint64) as uint64_val,
       CAST(-0.5 AS float) as float_val,
       CAST(-0.5 AS double) as double_val,
       CAST('432' AS string) as str_val,
       CAST("433" AS BYTES) as bytes_val,
       CAST('2014-02-04' AS DATE) as date_val,
       TIMESTAMP '2014-02-04 00:00:04 UTC' as timestamp_val
UNION ALL
SELECT CAST(16 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(NULL AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(NULL AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST(NULL AS float) as float_val,
       CAST(-pow(0.1, 324) AS double) as double_val, #negative 0 of type double
       CAST(NULL AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST(NULL AS DATE) as date_val,
       TIMESTAMP '2014-02-04 00:00:04 UTC' as timestamp_val
UNION ALL
SELECT CAST(17 AS int64) as row_id,
       CAST(NULL AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(NULL AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(NULL AS uint64) as uint64_val,
       CAST(pow(0.1, 46) AS float) as float_val, #positive 0 of type float
       CAST(NULL AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST(NULL AS BYTES) as bytes_val,
       CAST('2014-02-04' AS DATE) as date_val,
       CAST(NULL AS TIMESTAMP) as timestamp_val
UNION ALL
SELECT CAST(18 AS int64) as row_id, # Values duplicated in row 11 for distinct testing.
       CAST(false AS bool) as bool_val,
       CAST(5 AS int32) as int32_val,
       CAST(3 AS int64) as int64_val,
       CAST(11 AS uint32) as uint32_val,
       CAST(8 AS uint64) as uint64_val,
       CAST(-0.125 AS float) as float_val,
       CAST(-0.125 AS double) as double_val,
       CAST('123' AS string) as str_val,
       CAST('123' AS BYTES) as bytes_val,
       CAST('2014-02-01' AS DATE) as date_val,
       TIMESTAMP '2014-03-01 00:00:01 UTC' as timestamp_val
UNION ALL
SELECT CAST(19 AS int64) as row_id, # Values duplicated in row 12 for distinct testing.
       CAST(false AS bool) as bool_val,
       CAST(2 AS int32) as int32_val,
       CAST(16 AS int64) as int64_val,
       CAST(5 AS uint32) as uint32_val,
       CAST(9 AS uint64) as uint64_val,
       CAST(0.75 AS float) as float_val,
       CAST(-0.25 AS double) as double_val,
       CAST('24' AS string) as str_val,
       CAST('22' AS BYTES) as bytes_val,
       CAST('2014-02-02' AS DATE) as date_val,
       TIMESTAMP '2014-03-02 00:00:02 UTC' as timestamp_val
UNION ALL
SELECT CAST(20 AS int64) as row_id, # Values duplicated in row 13 for distinct testing.
       CAST(false AS bool) as bool_val,
       CAST(9 AS int32) as int32_val,
       CAST(9 AS int64) as int64_val,
       CAST(4 AS uint32) as uint32_val,
       CAST(8 AS uint64) as uint64_val,
       CAST(-0.25 AS float) as float_val,
       CAST(-0.75 AS double) as double_val,
       CAST('222' AS string) as str_val,
       CAST("234" AS BYTES) as bytes_val,
       CAST('2014-05-02' AS DATE) as date_val,
       TIMESTAMP '2014-05-02 00:00:02 UTC' as timestamp_val
--
ARRAY<STRUCT<
        row_id INT64,
        bool_val BOOL,
        int32_val INT32,
        int64_val INT64,
        uint32_val UINT32,
        uint64_val UINT64,
        float_val FLOAT,
        double_val DOUBLE,
        str_val STRING,
        bytes_val BYTES,
        date_val DATE,
        timestamp_val TIMESTAMP
      >>
[{
   1,
   true,
   -1,
   -1,
   1,
   1,
   0.125,
   0.125,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01+00
 },
 {
   2,
   true,
   -1,
   -1,
   1,
   1,
   nan,
   inf,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01+00
 },
 {
   3,
   true,
   -1,
   -1,
   1,
   1,
   inf,
   -inf,
   "1",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01+00
 },
 {
   4,
   false,
   -2,
   -2,
   2,
   2,
   nan,
   inf,
   '2',
   b'2',
   2014-01-02,
   2014-01-02 00:00:02+00
 },
 {
   5,
   false,
   -2,
   -2,
   2,
   2,
   -inf,
   nan,
   '2',
   b'2',
   2014-01-02,
   2014-01-02 00:00:02+00
 },
 {
   6,
   true,
   -3,
   -3,
   3,
   3,
   inf,
   -inf,
   "3",
   b"3",
   2014-01-03,
   2014-01-03 00:00:03+00
 },
 {
   7,
   false,
   -4,
   -4,
   4,
   4,
   -inf,
   inf,
   '4',
   b"4",
   2014-01-04,
   2014-01-04 00:00:04+00
 },
 {8, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
 {9, NULL, NULL, NULL, NULL, NULL, -0, nan, NULL, NULL, NULL, NULL},
 {
   10,
   true,
   1,
   1,
   11,
   11,
   0.125,
   0.125,
   '6',
   b'7',
   2014-01-08,
   2014-01-07 00:00:01+00
 },
 {
   11,
   false,
   5,
   3,
   11,
   8,
   -0.125,
   -0.125,
   '123',
   b'123',
   2014-02-01,
   2014-03-01 00:00:01+00
 },
 {
   12,
   false,
   2,
   16,
   5,
   9,
   0.75,
   -0.25,
   '24',
   b'22',
   2014-02-02,
   2014-03-02 00:00:02+00
 },
 {
   13,
   false,
   9,
   9,
   4,
   8,
   -0.25,
   -0.75,
   '222',
   b"234",
   2014-05-02,
   2014-05-02 00:00:02+00
 },
 {
   14,
   true,
   13,
   23,
   31,
   32,
   -0.375,
   -0.375,
   '345',
   b'345',
   2014-01-06,
   2014-02-03 00:00:03+00
 },
 {
   15,
   false,
   -24,
   -14,
   41,
   54,
   -0.5,
   -0.5,
   '432',
   b"433",
   2014-02-04,
   2014-02-04 00:00:04+00
 },
 {
   16,
   false,
   NULL,
   -1,
   NULL,
   1,
   NULL,
   -0,
   NULL,
   b"1",
   NULL,
   2014-02-04 00:00:04+00
 },
 {17, NULL, -1, NULL, 1, NULL, 0, NULL, "1", NULL, 2014-02-04, NULL},
 {
   18,
   false,
   5,
   3,
   11,
   8,
   -0.125,
   -0.125,
   '123',
   b'123',
   2014-02-01,
   2014-03-01 00:00:01+00
 },
 {
   19,
   false,
   2,
   16,
   5,
   9,
   0.75,
   -0.25,
   '24',
   b'22',
   2014-02-02,
   2014-03-02 00:00:02+00
 },
 {
   20,
   false,
   9,
   9,
   4,
   8,
   -0.25,
   -0.75,
   '222',
   b"234",
   2014-05-02,
   2014-05-02 00:00:02+00
 }]
==
[prepare_database]
CREATE TABLE TableEmpty AS SELECT val FROM (SELECT 1 as val) WHERE false
--
ARRAY<STRUCT<val INT64>>[]
==
[prepare_database]
CREATE TABLE TableWithStruct AS
SELECT
  CAST(1 AS int64) as row_id,
  STRUCT(CAST(true AS bool) as a,
    STRUCT(CAST(-1 AS int32) as c, CAST(-1 AS int64) as d
      ) AS b_struct
  ) AS struct_col
UNION ALL SELECT 2, struct(true,  struct(1, 1))
UNION ALL SELECT 3, struct(false, struct(1, 2))
UNION ALL SELECT 4, struct(false, struct(null, 1))
UNION ALL SELECT 5, struct(null,  struct(null, 1))
UNION ALL SELECT 6, struct(null, cast(null as struct<int32, int64>))
UNION ALL SELECT 7, struct(false, struct(1, 1))
--
ARRAY<STRUCT<row_id INT64,
             struct_col STRUCT<
                    a BOOL,
                    b_struct STRUCT<c INT32, d INT64>
                  >>>
[
  {1, {true, {-1, -1}}},
  {2, {true, {1, 1}}},
  {3, {false, {1, 2}}},
  {4, {false, {NULL, 1}}},
  {5, {NULL, {NULL, 1}}},
  {6, {NULL, NULL}},
  {7, {false, {1, 1}}}
]
==
# ----------------------------------------------------------------------------
# COUNT
# ----------------------------------------------------------------------------
[name=aggregation_distinct_count_1]
SELECT COUNT(DISTINCT x)
FROM ((SELECT 1.0 x) UNION ALL (SELECT 3.2) UNION ALL (SELECT 1.0))
--
ARRAY<STRUCT<INT64>>[{2}]
==
[name=aggregation_distinct_count_2]
SELECT COUNT(DISTINCT bool_val), COUNT(DISTINCT double_val),
       COUNT(DISTINCT float_val), COUNT(DISTINCT str_val),
       COUNT(DISTINCT int32_val), COUNT(DISTINCT uint32_val),
       COUNT(DISTINCT int64_val), COUNT(DISTINCT uint64_val),
       COUNT(DISTINCT date_val), COUNT(DISTINCT bytes_val),
       COUNT(DISTINCT timestamp_val)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>[{2, 10, 10, 10, 10, 8, 10, 9, 10, 10, 10}]
==
[name=aggregation_distinct_count_3]
SELECT COUNT(DISTINCT bool_val), COUNT(DISTINCT double_val),
       COUNT(DISTINCT float_val), COUNT(DISTINCT str_val),
       COUNT(DISTINCT int32_val), COUNT(DISTINCT uint32_val),
       COUNT(DISTINCT int64_val), COUNT(DISTINCT uint64_val),
       COUNT(DISTINCT date_val), COUNT(DISTINCT bytes_val),
       COUNT(DISTINCT timestamp_val)
FROM TableAllNull
--
ARRAY<STRUCT<INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>[{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}]
==
[name=aggregation_distinct_count_4]
SELECT COUNT(DISTINCT val) FROM TableEmpty
--
ARRAY<STRUCT<INT64>>[{0}]
==
[name=aggregation_distinct_count_5]
[required_features=V_1_2_GROUP_BY_STRUCT]
SELECT COUNT(DISTINCT struct_col.b_struct) FROM TableWithStruct
--
ARRAY<STRUCT<INT64>>[{4}]
==
[name=aggregation_distinct_count_6]
[required_features=V_1_2_GROUP_BY_ARRAY]
SELECT COUNT(DISTINCT s.a)
FROM ((select NULL as a) union all
      (select NULL) union all
      (select [1]) union all
      (select [2]) union all
      (select [1, NULL]) union all
      (select [2, NULL]) union all
      (select [1]) union all
      (select [2, NULL]) union all
      (select ARRAY<INT64>[]) union all
      (select ARRAY<INT64>[]) union all
      (select [1, 2])) s
--
ARRAY<STRUCT<INT64>>[{6}]
==
[name=aggregation_distinct_count_group_by]
SELECT COUNT(DISTINCT str_val), bool_val
FROM TableAllTypes GROUP BY bool_val ORDER BY bool_Val
--
ARRAY<STRUCT<INT64, bool_val BOOL>>[known order:
  {1, NULL},
  {6, false},
  {4, true}
]
==
[name=aggregation_distinct_count_group_by_and_having]
SELECT COUNT(DISTINCT int64_val), bool_val FROM TableAllTypes
  GROUP BY bool_val HAVING COUNT(DISTINCT str_val) < 5 ORDER BY bool_val
--
ARRAY<STRUCT<INT64, bool_val BOOL>>[known order:{0, NULL}, {4, true}]
==
# ----------------------------------------------------------------------------
# COUNTIF
# ----------------------------------------------------------------------------
[name=aggregation_distinct_countif_1]
SELECT COUNTIF(DISTINCT x > 0)
FROM ((SELECT 1.0 x) UNION ALL (SELECT 3.2) UNION ALL (SELECT 1.0))
--
ARRAY<STRUCT<INT64>>[{1}]
==
[name=aggregation_distinct_countif_2]
SELECT COUNTIF(DISTINCT bool_val)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64>>[{1}]
==
[name=aggregation_distinct_countif_3]
SELECT COUNTIF(DISTINCT bool_val)
FROM TableAllNull
--
ARRAY<STRUCT<INT64>>[{0}]
==
[name=aggregation_distinct_countif_4]
SELECT COUNTIF(DISTINCT val > 0) FROM TableEmpty
--
ARRAY<STRUCT<INT64>>[{0}]
==
[name=aggregation_distinct_countif_group_by]
SELECT COUNTIF(DISTINCT bool_val), int32_val
FROM TableAllTypes GROUP BY int32_val ORDER BY int32_val
--
ARRAY<STRUCT<INT64, int32_val INT32>>[known order:
  {0, NULL},
  {0, -24},
  {0, -4},
  {1, -3},
  {0, -2},
  {1, -1},
  {1, 1},
  {0, 2},
  {0, 5},
  {0, 9},
  {1, 13}
]
==
[name=aggregation_distinct_countif_group_by_struct]
[required_features=V_1_2_GROUP_BY_STRUCT]
SELECT COUNTIF(DISTINCT struct_col.a), struct_col
FROM TableWithStruct
GROUP BY struct_col
ORDER BY struct_col.b_struct.c,
  struct_col.b_struct.d,
  struct_col.a
--
ARRAY<STRUCT<INT64,
             struct_col STRUCT<
                    a BOOL,
                    b_struct STRUCT<c INT32, d INT64>
                  >>>
[known order:
  {0, {NULL, NULL}},
  {0, {NULL, {NULL, 1}}},
  {0, {false, {NULL, 1}}},
  {1, {true, {-1, -1}}},
  {0, {false, {1, 1}}},
  {1, {true, {1, 1}}},
  {0, {false, {1, 2}}}
]
==
[name=aggregation_distinct_group_by_struct_subquery]
[required_features=V_1_2_GROUP_BY_STRUCT]
SELECT key, COUNT(DISTINCT struct_col)
FROM (
  SELECT STRUCT(bool_val as key1) as key,
    STRUCT(int32_val, uint32_val) as struct_col
  FROM TableAllTypes
)
GROUP BY key
ORDER BY key.key1
--
ARRAY<STRUCT<
        key STRUCT<key1 BOOL>,
        INT64
      >>
[known order:{{NULL}, 2}, {{false}, 7}, {{true}, 4}]
==
[name=aggregation_distinct_countif_group_by_and_having]
SELECT COUNTIF(DISTINCT bool_val), int32_val FROM TableAllTypes
  GROUP BY int32_val HAVING COUNTIF(distinct bool_val) > 0 ORDER BY int32_val
--
ARRAY<STRUCT<INT64, int32_val INT32>>[known order:
  {1, -3},
  {1, -1},
  {1, 1},
  {1, 13}
]
==
# ----------------------------------------------------------------------------
# ARRAY_AGG
# ----------------------------------------------------------------------------
[name=aggregation_distinct_array_agg_1]
SELECT ARRAY_AGG(DISTINCT x)
FROM ((SELECT 'abc' x) UNION ALL (SELECT 'abc') UNION ALL (SELECT 'abc'))
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>["abc"]}]
==
[name=aggregation_distinct_array_agg_2]
SELECT ARRAY_AGG(DISTINCT bool_val), ARRAY_AGG(DISTINCT double_val),
       ARRAY_AGG(DISTINCT float_val), ARRAY_AGG(DISTINCT str_val),
       ARRAY_AGG(DISTINCT int32_val), ARRAY_AGG(DISTINCT uint32_val),
       ARRAY_AGG(DISTINCT int64_val), ARRAY_AGG(DISTINCT uint64_val),
       ARRAY_AGG(DISTINCT date_val), ARRAY_AGG(DISTINCT bytes_val),
       ARRAY_AGG(DISTINCT timestamp_val)
FROM TableAllTypes
--
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>>>
[{ARRAY<BOOL>[unknown order:true, false, NULL],
  ARRAY<DOUBLE>[unknown order:
    inf,
    -inf,
    NULL,
    0.125,
    -0.25,
    -0.375,
    -0,
    -0.125,
    -0.75,
    nan,
    -0.5
  ],
  ARRAY<FLOAT>[unknown order:
    nan,
    inf,
    NULL,
    0.125,
    0.75,
    -0.375,
    -0.125,
    -0.25,
    -inf,
    -0,
    -0.5
  ],
  ARRAY<STRING>[unknown order:
    "1",
    '2',
    "3",
    NULL,
    '6',
    '24',
    '345',
    '123',
    '222',
    '4',
    '432'
  ],
  ARRAY<INT32>[unknown order:-1, -2, -3, NULL, 1, 2, 13, 5, 9, -4, -24],
  ARRAY<UINT32>[unknown order:1, 2, 3, NULL, 11, 5, 31, 4, 41],
  ARRAY<INT64>[unknown order:-1, -2, -3, NULL, 1, 16, 23, 3, 9, -4, -14],
  ARRAY<UINT64>[unknown order:1, 2, 3, NULL, 11, 9, 32, 8, 4, 54],
  ARRAY<DATE>[unknown order:
    2014-01-01,
    2014-01-02,
    2014-01-03,
    NULL,
    2014-01-08,
    2014-02-02,
    2014-01-06,
    2014-02-01,
    2014-05-02,
    2014-01-04,
    2014-02-04
  ],
  ARRAY<BYTES>[unknown order:
    b"1",
    b'2',
    b"3",
    NULL,
    b'7',
    b'22',
    b'345',
    b'123',
    b"234",
    b"4",
    b"433"
  ],
  ARRAY<TIMESTAMP>[unknown order:
    2014-01-01 00:00:01+00,
    2014-01-02 00:00:02+00,
    2014-01-03 00:00:03+00,
    NULL,
    2014-01-07 00:00:01+00,
    2014-03-02 00:00:02+00,
    2014-02-03 00:00:03+00,
    2014-02-04 00:00:04+00,
    2014-03-01 00:00:01+00,
    2014-05-02 00:00:02+00,
    2014-01-04 00:00:04+00
  ]}]
==
[name=aggregation_distinct_array_agg_3]
SELECT ARRAY_AGG(DISTINCT bool_val), ARRAY_AGG(DISTINCT double_val),
       ARRAY_AGG(DISTINCT float_val), ARRAY_AGG(DISTINCT str_val),
       ARRAY_AGG(DISTINCT int32_val), ARRAY_AGG(DISTINCT uint32_val),
       ARRAY_AGG(DISTINCT int64_val), ARRAY_AGG(DISTINCT uint64_val),
       ARRAY_AGG(DISTINCT date_val), ARRAY_AGG(DISTINCT bytes_val),
       ARRAY_AGG(DISTINCT timestamp_val)
FROM TableAllNull
--
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>>>
[{
   ARRAY<BOOL>[NULL],
   ARRAY<DOUBLE>[NULL],
   ARRAY<FLOAT>[NULL],
   ARRAY<STRING>[NULL],
   ARRAY<INT32>[NULL],
   ARRAY<UINT32>[NULL],
   ARRAY<INT64>[NULL],
   ARRAY<UINT64>[NULL],
   ARRAY<DATE>[NULL],
   ARRAY<BYTES>[NULL],
   ARRAY<TIMESTAMP>[NULL]
 }]
==
[name=aggregation_distinct_array_agg_4]
SELECT ARRAY_AGG(DISTINCT val) FROM TableEmpty
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>(NULL)}]
==
[name=aggregation_distinct_array_agg_group_by]
SELECT row_id, ARRAY_AGG(DISTINCT int32_val) FROM TableAllTypes
  GROUP BY row_id ORDER BY row_id
--
ARRAY<STRUCT<row_id INT64, ARRAY<>>>[known order:
  {1, ARRAY<INT32>[-1]},
  {2, ARRAY<INT32>[-1]},
  {3, ARRAY<INT32>[-1]},
  {4, ARRAY<INT32>[-2]},
  {5, ARRAY<INT32>[-2]},
  {6, ARRAY<INT32>[-3]},
  {7, ARRAY<INT32>[-4]},
  {8, ARRAY<INT32>[NULL]},
  {9, ARRAY<INT32>[NULL]},
  {10, ARRAY<INT32>[1]},
  {11, ARRAY<INT32>[5]},
  {12, ARRAY<INT32>[2]},
  {13, ARRAY<INT32>[9]},
  {14, ARRAY<INT32>[13]},
  {15, ARRAY<INT32>[-24]},
  {16, ARRAY<INT32>[NULL]},
  {17, ARRAY<INT32>[-1]},
  {18, ARRAY<INT32>[5]},
  {19, ARRAY<INT32>[2]},
  {20, ARRAY<INT32>[9]}
]
==
[name=aggregation_distinct_array_agg_group_by_and_having]
SELECT bool_val, ARRAY_AGG(DISTINCT int32_val)
FROM TableAllTypes GROUP BY bool_val HAVING bool_val ORDER BY bool_val
--
ARRAY<STRUCT<bool_val BOOL, ARRAY<>>>[
  {
    true,
    ARRAY<INT32>[unknown order:-1, -3, 1, 13]
  }
]
==

# ----------------------------------------------------------------------------
# STRING_AGG
# ----------------------------------------------------------------------------
[name=aggregation_distinct_string_agg_1]
SELECT STRING_AGG(DISTINCT x) IN ("first,second", "second,first")
FROM ((SELECT "first" x) UNION ALL (SELECT "second") UNION ALL (SELECT "first"))
--
ARRAY<STRUCT<BOOL>>[{true}]

NOTE: Reference implementation reports non-determinism.
==
[name=aggregation_distinct_string_agg_2]
SELECT
  unordered_concat IN
  (b"1->2->3", b"1->3->2", b"2->1->3", b"2->3->1", b"3->1->2", b"3->2->1")
FROM (
SELECT STRING_AGG(DISTINCT x, b"->") unordered_concat
FROM ((SELECT b"1" x) UNION ALL (SELECT b'2') UNION ALL (SELECT b"3")
      UNION ALL (SELECT b'2') UNION ALL (SELECT b"1")))
--
ARRAY<STRUCT<BOOL>>[{true}]

NOTE: Reference implementation reports non-determinism.
==
[name=aggregation_distinct_string_agg_3]
SELECT LENGTH(STRING_AGG(DISTINCT str_val)),
       LENGTH(STRING_AGG(DISTINCT bytes_val))
FROM TableAllTypes
--
ARRAY<STRUCT<INT64, INT64>>[{28, 28}]

NOTE: Reference implementation reports non-determinism.
==
[name=aggregation_distinct_string_agg_4]
SELECT STRPOS(STRING_AGG(DISTINCT str_val, ":"), ":2") > 0 FROM TableAllTypes
--
ARRAY<STRUCT<BOOL>>[{true}]

NOTE: Reference implementation reports non-determinism.
==
[name=aggregation_distinct_string_agg_5]
SELECT STRING_AGG(DISTINCT str_val), STRING_AGG(DISTINCT bytes_val)
FROM TableAllNull
--
ARRAY<STRUCT<STRING, BYTES>>[{NULL, NULL}]
==
[name=aggregation_distinct_string_agg_6]
SELECT STRING_AGG(DISTINCT str_val, ":"), STRING_AGG(DISTINCT bytes_val, b"=>")
FROM TableAllNull
--
ARRAY<STRUCT<STRING, BYTES>>[{NULL, NULL}]
==
[name=aggregation_distinct_string_agg_group_by]
SELECT STRING_AGG(DISTINCT str_val), row_id
FROM TableAllTypes GROUP BY row_id ORDER BY row_id
--
ARRAY<STRUCT<STRING, row_id INT64>>[known order:
  {"1", 1},
  {"1", 2},
  {"1", 3},
  {'2', 4},
  {'2', 5},
  {"3", 6},
  {'4', 7},
  {NULL, 8},
  {NULL, 9},
  {'6', 10},
  {'123', 11},
  {'24', 12},
  {'222', 13},
  {'345', 14},
  {'432', 15},
  {NULL, 16},
  {"1", 17},
  {'123', 18},
  {'24', 19},
  {'222', 20}
]
==

# ----------------------------------------------------------------------------
# MAX, MIN
# ----------------------------------------------------------------------------
[name=aggregation_distinct_min_max_1]
SELECT MIN(DISTINCT x), MAX(DISTINCT x)
FROM ((SELECT 1 x) UNION ALL (SELECT 3) UNION ALL (SELECT 1))
--
ARRAY<STRUCT<INT64, INT64>>[{1, 3}]
==
[name=aggregation_distinct_min_max_2]
SELECT MIN(DISTINCT bool_val), MIN(DISTINCT double_val),
       MIN(DISTINCT float_val), MIN(DISTINCT str_val),
       MIN(DISTINCT int32_val), MIN(DISTINCT uint32_val),
       MIN(DISTINCT int64_val), MIN(DISTINCT uint64_val),
       MIN(DISTINCT date_val), MIN(DISTINCT bytes_val),
       MIN(DISTINCT timestamp_val)
FROM TableAllTypes
--
ARRAY<STRUCT<BOOL,
             DOUBLE,
             FLOAT,
             STRING,
             INT32,
             UINT32,
             INT64,
             UINT64,
             DATE,
             BYTES,
             TIMESTAMP>>
[{
   false,
   nan,
   nan,
   "1",
   -24,
   1,
   -14,
   1,
   2014-01-01,
   b"1",
   2014-01-01 00:00:01+00
 }]
==
[name=aggregation_distinct_min_max_3]
SELECT MIN(DISTINCT double_val) FROM TableAllTypes WHERE NOT IS_NAN(double_val)
--
ARRAY<STRUCT<DOUBLE>>[{-inf}]
==
[name=aggregation_distinct_min_max_4]
SELECT MIN(DISTINCT double_val) FROM TableAllTypes
  WHERE NOT IS_NAN(double_val) AND NOT IS_INF(double_val)

--
ARRAY<STRUCT<DOUBLE>>[{-0.75}]
==
[name=aggregation_distinct_min_max_5]
SELECT MIN(DISTINCT float_val) FROM TableAllTypes WHERE NOT IS_NAN(float_val)
--
ARRAY<STRUCT<FLOAT>>[{-inf}]
==
[name=aggregation_distinct_min_max_6]
SELECT MIN(DISTINCT float_val) FROM TableAllTypes
  WHERE NOT IS_NAN(float_val) AND NOT IS_INF(float_val)

--
ARRAY<STRUCT<FLOAT>>[{-0.5}]
==
[name=aggregation_distinct_min_max_7]
SELECT MAX(DISTINCT bool_val), MAX(DISTINCT double_val),
       MAX(DISTINCT float_val), MAX(DISTINCT str_val),
       MAX(DISTINCT int32_val), MAX(DISTINCT uint32_val),
       MAX(DISTINCT int64_val), MAX(DISTINCT uint64_val),
       MAX(DISTINCT date_val), MAX(DISTINCT bytes_val),
       MAX(DISTINCT timestamp_val)
FROM TableAllTypes
--
ARRAY<STRUCT<BOOL,
             DOUBLE,
             FLOAT,
             STRING,
             INT32,
             UINT32,
             INT64,
             UINT64,
             DATE,
             BYTES,
             TIMESTAMP>>
[{
   true,
   nan,
   nan,
   '6',
   13,
   41,
   23,
   54,
   2014-05-02,
   b'7',
   2014-05-02 00:00:02+00
 }]
==
[name=aggregation_distinct_min_max_8]
SELECT MAX(DISTINCT float_val) FROM TableAllTypes WHERE NOT IS_NAN(float_val)
--
ARRAY<STRUCT<FLOAT>>[{inf}]
==
[name=aggregation_distinct_min_max_9]
SELECT MAX(DISTINCT float_val) FROM TableAllTypes
  WHERE NOT IS_NAN(float_val) AND NOT IS_INF(float_val)

--
ARRAY<STRUCT<FLOAT>>[{0.75}]
==
[name=aggregation_distinct_min_max_10]
SELECT MAX(DISTINCT double_val) FROM TableAllTypes WHERE NOT IS_NAN(double_val)
--
ARRAY<STRUCT<DOUBLE>>[{inf}]
==
[name=aggregation_distinct_min_max_11]
SELECT MAX(DISTINCT double_val) FROM TableAllTypes
  WHERE NOT IS_NAN(double_val) AND NOT IS_INF(double_val)
--
ARRAY<STRUCT<DOUBLE>>[{0.125}]
==
[name=aggregation_distinct_min_max_12]
SELECT MIN(DISTINCT bool_val), MIN(DISTINCT double_val),
       MIN(DISTINCT float_val), MIN(DISTINCT str_val),
       MIN(DISTINCT int32_val), MIN(DISTINCT uint32_val),
       MIN(DISTINCT int64_val), MIN(DISTINCT uint64_val),
       MIN(DISTINCT date_val), MIN(DISTINCT bytes_val),
       MIN(DISTINCT timestamp_val)
FROM TableAllNull
--
ARRAY<STRUCT<BOOL,
             DOUBLE,
             FLOAT,
             STRING,
             INT32,
             UINT32,
             INT64,
             UINT64,
             DATE,
             BYTES,
             TIMESTAMP>>[
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}
]
==
[name=aggregation_distinct_min_max_13]
SELECT MAX(DISTINCT bool_val), MAX(DISTINCT double_val),
       MAX(DISTINCT float_val), MAX(DISTINCT str_val),
       MAX(DISTINCT int32_val), MAX(DISTINCT uint32_val),
       MAX(DISTINCT int64_val), MAX(DISTINCT uint64_val),
       MAX(DISTINCT date_val), MAX(DISTINCT bytes_val),
       MAX(DISTINCT timestamp_val)
FROM TableAllNull
--
ARRAY<STRUCT<BOOL,
             DOUBLE,
             FLOAT,
             STRING,
             INT32,
             UINT32,
             INT64,
             UINT64,
             DATE,
             BYTES,
             TIMESTAMP>>[
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}
]
==
[name=aggregation_distinct_min_max_14]
SELECT MIN(DISTINCT val) FROM TableEmpty
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=aggregation_distinct_min_max_15]
SELECT MAX(DISTINCT val) FROM TableEmpty
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=aggregation_distinct_min_max_group_by]
SELECT MAX(DISTINCT int32_val), MIN(DISTINCT uint32_val), int64_val
FROM TableAllTypes GROUP BY int64_val ORDER BY int64_val
--
ARRAY<STRUCT<INT32, UINT32, int64_val INT64>>[known order:
  {-1, 1, NULL},
  {-24, 41, -14},
  {-4, 4, -4},
  {-3, 3, -3},
  {-2, 2, -2},
  {-1, 1, -1},
  {1, 11, 1},
  {5, 11, 3},
  {9, 4, 9},
  {2, 5, 16},
  {13, 31, 23}
]
==
[name=aggregation_distinct_min_max_group_by_and_having]
SELECT MAX(DISTINCT int32_val), int64_val
FROM TableAllTypes GROUP BY int64_val HAVING MIN(DISTINCT uint32_val) > 4 ORDER BY int64_val
--
ARRAY<STRUCT<INT32, int64_val INT64>>[known order:
  {-24, -14},
  {1, 1},
  {5, 3},
  {2, 16},
  {13, 23}
]
==
[name=aggregation_distinct_min_max_array_null_nan]
[required_features=V_1_3_ARRAY_ORDERING,V_1_2_GROUP_BY_ARRAY]
SELECT MIN(DISTINCT x), MAX(DISTINCT x)
FROM (
  (SELECT ARRAY<FLOAT64>[1] x)
  UNION ALL
  (SELECT ARRAY<FLOAT64>[-1] x)
  UNION ALL
  (SELECT ARRAY<FLOAT64>[NULL] x)
  UNION ALL
  (SELECT ARRAY<FLOAT64>[NULL] x)
  UNION ALL
  (SELECT ARRAY<FLOAT64>[CAST('NaN' AS FLOAT64)] x)
  UNION ALL
  (SELECT ARRAY<FLOAT64>[CAST('NaN' AS FLOAT64)] x)
)
--
ARRAY<STRUCT<ARRAY<>, ARRAY<>>>[{ARRAY<DOUBLE>[NULL], ARRAY<DOUBLE>[1]}]
==
# ----------------------------------------------------------------------------
# AVG
# ----------------------------------------------------------------------------
[name=aggregation_distinct_avg_1]
SELECT AVG(DISTINCT x)
FROM ((SELECT 1.1 x) UNION ALL (SELECT 3.2) UNION ALL (SELECT 1.1))
--
ARRAY<STRUCT<DOUBLE>>[{2.1500000000000004}]
==
[name=aggregation_distinct_avg_2]
SELECT AVG(DISTINCT double_val), AVG(DISTINCT int64_val),
       AVG(DISTINCT uint64_val)
FROM TableAllTypes
--
ARRAY<STRUCT<DOUBLE, DOUBLE, DOUBLE>>[{nan, 2.8, 13.777777777777779}]
==
[name=aggregation_distinct_avg_3]
SELECT AVG(DISTINCT double_val) FROM TableAllTypes
  WHERE NOT IS_NAN(double_val)
--
ARRAY<STRUCT<DOUBLE>>[{nan}]
==
[name=aggregation_distinct_avg_4]
SELECT AVG(DISTINCT double_val) FROM TableAllTypes
  WHERE NOT IS_NAN(double_val) AND NOT IS_INF(double_val)
--
ARRAY<STRUCT<DOUBLE>>[{-0.26785714285714285}]
==
[name=aggregation_distinct_avg_5]
SELECT AVG(DISTINCT double_val), AVG(DISTINCT int64_val),
       AVG(DISTINCT uint64_val)
FROM TableAllNull
--
ARRAY<STRUCT<DOUBLE, DOUBLE, DOUBLE>>[{NULL, NULL, NULL}]
==
[name=aggregation_distinct_avg_6]
SELECT AVG(DISTINCT val) FROM TableEmpty
--
ARRAY<STRUCT<DOUBLE>>[{NULL}]
==
[name=aggregation_distinct_avg_group_by]
SELECT AVG(DISTINCT int64_val), row_id
FROM TableAllTypes GROUP BY row_id ORDER BY row_id
--
ARRAY<STRUCT<DOUBLE, row_id INT64>>[known order:
  {-1, 1},
  {-1, 2},
  {-1, 3},
  {-2, 4},
  {-2, 5},
  {-3, 6},
  {-4, 7},
  {NULL, 8},
  {NULL, 9},
  {1, 10},
  {3, 11},
  {16, 12},
  {9, 13},
  {23, 14},
  {-14, 15},
  {-1, 16},
  {NULL, 17},
  {3, 18},
  {16, 19},
  {9, 20}
]
==
[name=aggregation_distinct_avg_group_by_and_having]
SELECT AVG(DISTINCT int64_val) int_distinct_avg, row_id FROM TableAllTypes
  GROUP BY row_id HAVING int_distinct_avg > 0 ORDER BY row_id
--
ARRAY<STRUCT<
        int_distinct_avg DOUBLE,
        row_id INT64
      >>
[known order:{1, 10},
             {3, 11},
             {16, 12},
             {9, 13},
             {23, 14},
             {3, 18},
             {16, 19},
             {9, 20}]
==
# ----------------------------------------------------------------------------
# SUM
# ----------------------------------------------------------------------------
[name=aggregation_distinct_sum_1]
SELECT SUM(DISTINCT x)
FROM ((SELECT 1.0 x) UNION ALL (SELECT 3.2) UNION ALL (SELECT 1.0))
--
ARRAY<STRUCT<DOUBLE>>[{4.2}]
==
[name=aggregation_distinct_sum_2]
SELECT SUM(DISTINCT double_val), SUM(DISTINCT int64_val),
       SUM(DISTINCT uint64_val)
FROM TableAllTypes
--
ARRAY<STRUCT<DOUBLE, INT64, UINT64>>[{nan, 28, 124}]
==
[name=aggregation_distinct_sum_3]
SELECT SUM(DISTINCT double_val) FROM TableAllTypes
  WHERE NOT IS_NAN(double_val)
--
ARRAY<STRUCT<DOUBLE>>[{nan}]
==
[name=aggregation_distinct_sum_4]
SELECT SUM(DISTINCT double_val) FROM TableAllTypes
  WHERE NOT IS_NAN(double_val) AND NOT IS_INF(double_val)
--
ARRAY<STRUCT<DOUBLE>>[{-1.875}]
==
[name=aggregation_distinct_sum_5]
SELECT SUM(DISTINCT double_val), SUM(DISTINCT int64_val),
       SUM(DISTINCT uint64_val)
FROM TableAllNull
--
ARRAY<STRUCT<DOUBLE, INT64, UINT64>>[{NULL, NULL, NULL}]
==
[name=aggregation_distinct_sum_6]
SELECT SUM(DISTINCT val) FROM TableEmpty
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=aggregation_distinct_sum_group_by]
SELECT SUM(DISTINCT uint64_val), bool_val
FROM TableAllTypes GROUP BY bool_val ORDER BY bool_val
--
ARRAY<STRUCT<UINT64, bool_val BOOL>>[known order:
  {NULL, NULL},
  {78, false},
  {47, true}
]
==
[name=aggregation_distinct_sum_group_by_and_having]
SELECT SUM(DISTINCT uint64_val), bool_val FROM TableAllTypes
  GROUP BY bool_val HAVING COUNT(DISTINCT int64_val) > 1 ORDER BY bool_val
--
ARRAY<STRUCT<UINT64, bool_val BOOL>>[known order:{78, false}, {47, true}]
==
# ----------------------------------------------------------------------------
# BIT_AND_BQ
# ----------------------------------------------------------------------------
[name=aggregation_distinct_bit_and_1]
SELECT BIT_AND_BQ(DISTINCT CAST(x as uint64)), BIT_AND_BQ(DISTINCT CAST(x as int64)),
       BIT_AND_BQ(DISTINCT CAST(x as uint32)), BIT_AND_BQ(DISTINCT CAST(x as int32))
FROM ((SELECT 5 x) UNION ALL (SELECT 5) UNION ALL (SELECT 21))
--
ARRAY<STRUCT<UINT64, INT64, UINT32, INT32>>[{5, 5, 5, 5}]
==
[name=aggregation_distinct_bit_and_2]
SELECT BIT_AND_BQ(DISTINCT int32_val), BIT_AND_BQ(DISTINCT int64_val),
       BIT_AND_BQ(DISTINCT uint32_val), BIT_AND_BQ(DISTINCT uint64_val)
FROM TableAllTypes
--
ARRAY<STRUCT<INT32, INT64, UINT32, UINT64>>[{0, 0, 0, 0}]
==
[name=aggregation_distinct_bit_and_3]
SELECT BIT_AND_BQ(DISTINCT int32_val), BIT_AND_BQ(DISTINCT uint32_val),
       BIT_AND_BQ(DISTINCT int64_val), BIT_AND_BQ(DISTINCT uint64_val)
FROM TableAllNull
--
ARRAY<STRUCT<INT32, UINT32, INT64, UINT64>>[{NULL, NULL, NULL, NULL}]
==
[name=aggregation_distinct_bit_and_4]
SELECT BIT_AND_BQ(DISTINCT val) FROM TableEmpty
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=aggregation_distinct_bit_and_group_by]
SELECT BIT_AND_BQ(DISTINCT int32_val), row_id
FROM TableAllTypes GROUP BY row_id ORDER BY row_id
--
ARRAY<STRUCT<INT32, row_id INT64>>[known order:
  {-1, 1},
  {-1, 2},
  {-1, 3},
  {-2, 4},
  {-2, 5},
  {-3, 6},
  {-4, 7},
  {NULL, 8},
  {NULL, 9},
  {1, 10},
  {5, 11},
  {2, 12},
  {9, 13},
  {13, 14},
  {-24, 15},
  {NULL, 16},
  {-1, 17},
  {5, 18},
  {2, 19},
  {9, 20}
]
==
[name=aggregation_distinct_bit_and_group_by_and_having]
SELECT BIT_AND_BQ(DISTINCT int32_val), bool_val FROM TableAllTypes
  GROUP BY bool_val HAVING bool_val AND BIT_AND_BQ(DISTINCT int32_val) > 0
    ORDER BY bool_val
--
ARRAY<STRUCT<INT32, bool_val BOOL>>[{1, true}]
==

# ----------------------------------------------------------------------------
# BIT_OR_BQ
# ----------------------------------------------------------------------------
[name=aggregation_distinct_bit_or_1]
SELECT BIT_OR_BQ(DISTINCT CAST(x as uint64)), BIT_OR_BQ(DISTINCT CAST(x as int64)),
       BIT_OR_BQ(DISTINCT CAST(x as uint32)), BIT_OR_BQ(DISTINCT CAST(x as int32))
FROM ((SELECT 1 x) UNION ALL (SELECT 2) UNION ALL (SELECT 3)
      UNION ALL (SELECT 2))
--
ARRAY<STRUCT<UINT64, INT64, UINT32, INT32>>[{3, 3, 3, 3}]
==
[name=aggregation_distinct_bit_or_2]
SELECT BIT_OR_BQ(DISTINCT int32_val), BIT_OR_BQ(DISTINCT int64_val),
       BIT_OR_BQ(DISTINCT uint32_val), BIT_OR_BQ(DISTINCT uint64_val)
FROM TableAllTypes
--
ARRAY<STRUCT<INT32, INT64, UINT32, UINT64>>[{-1, -1, 63, 63}]
==
[name=aggregation_distinct_bit_or_3]
SELECT BIT_OR_BQ(DISTINCT int32_val), BIT_OR_BQ(DISTINCT uint32_val),
       BIT_OR_BQ(DISTINCT int64_val), BIT_OR_BQ(DISTINCT uint64_val)
FROM TableAllNull
--
ARRAY<STRUCT<INT32, UINT32, INT64, UINT64>>[{NULL, NULL, NULL, NULL}]
==
[name=aggregation_distinct_bit_or_4]
SELECT BIT_OR_BQ(DISTINCT val) FROM TableEmpty
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=aggregation_distinct_bit_or_group_by]
SELECT BIT_OR_BQ(DISTINCT int32_val), row_id
FROM TableAllTypes GROUP BY row_id ORDER BY row_id
--
ARRAY<STRUCT<INT32, row_id INT64>>[known order:
  {-1, 1},
  {-1, 2},
  {-1, 3},
  {-2, 4},
  {-2, 5},
  {-3, 6},
  {-4, 7},
  {NULL, 8},
  {NULL, 9},
  {1, 10},
  {5, 11},
  {2, 12},
  {9, 13},
  {13, 14},
  {-24, 15},
  {NULL, 16},
  {-1, 17},
  {5, 18},
  {2, 19},
  {9, 20}
]
==
# ----------------------------------------------------------------------------
# BIT_XOR_BQ
# ----------------------------------------------------------------------------
[name=aggregation_distinct_bit_xor_1]
SELECT BIT_XOR_BQ(DISTINCT CAST(x as uint64)), BIT_XOR_BQ(DISTINCT CAST(x as int64)),
       BIT_XOR_BQ(DISTINCT CAST(x as uint32)), BIT_XOR_BQ(DISTINCT CAST(x as int32))
FROM ((SELECT 8 x) UNION ALL (SELECT 16) UNION ALL (SELECT 16)
      UNION ALL (SELECT 8))
--
ARRAY<STRUCT<UINT64, INT64, UINT32, INT32>>[{24, 24, 24, 24}]
==
[name=aggregation_distinct_bit_xor_2]
SELECT BIT_XOR_BQ(DISTINCT int32_val), BIT_XOR_BQ(DISTINCT int64_val),
       BIT_XOR_BQ(DISTINCT uint32_val), BIT_XOR_BQ(DISTINCT uint64_val)
FROM TableAllTypes
--
ARRAY<STRUCT<INT32, INT64, UINT32, UINT64>>[{-22, -2, 60, 24}]
==
[name=aggregation_distinct_bit_xor_3]
SELECT BIT_XOR_BQ(DISTINCT int32_val), BIT_XOR_BQ(DISTINCT uint32_val),
       BIT_XOR_BQ(DISTINCT int64_val), BIT_XOR_BQ(DISTINCT uint64_val)
FROM TableAllNull
--
ARRAY<STRUCT<INT32, UINT32, INT64, UINT64>>[{NULL, NULL, NULL, NULL}]
==
[name=aggregation_distinct_bit_xor_4]
SELECT BIT_XOR_BQ(DISTINCT val) FROM TableEmpty
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=aggregation_distinct_bit_xor_group_by]
SELECT BIT_XOR_BQ(DISTINCT int32_val), row_id
FROM TableAllTypes GROUP BY row_id ORDER BY row_id
--
ARRAY<STRUCT<INT32, row_id INT64>>[known order:
  {-1, 1},
  {-1, 2},
  {-1, 3},
  {-2, 4},
  {-2, 5},
  {-3, 6},
  {-4, 7},
  {NULL, 8},
  {NULL, 9},
  {1, 10},
  {5, 11},
  {2, 12},
  {9, 13},
  {13, 14},
  {-24, 15},
  {NULL, 16},
  {-1, 17},
  {5, 18},
  {2, 19},
  {9, 20}
]
==
# ----------------------------------------------------------------------------
# LOGICAL_OR
# ----------------------------------------------------------------------------
[name=aggregation_distinct_logical_or_1]
SELECT LOGICAL_OR(x) FROM (SELECT true x FROM (SELECT 1) WHERE false);
--
ARRAY<STRUCT<BOOL>>[{NULL}]
==
[name=aggregation_distinct_logical_or_2]
SELECT LOGICAL_OR(x) FROM (SELECT CAST(NULL AS bool) x);
--
ARRAY<STRUCT<BOOL>>[{NULL}]
==
[name=aggregation_distinct_logical_or_3]
SELECT LOGICAL_OR(DISTINCT bool_val) FROM TableAllTypes
--
ARRAY<STRUCT<BOOL>>[{true}]
==
[name=aggregation_distinct_logical_or_4]
SELECT LOGICAL_OR(DISTINCT bool_val) FROM TableAllNull
--
ARRAY<STRUCT<BOOL>>[{NULL}]
==
[name=aggregation_distinct_logical_or_5]
SELECT LOGICAL_OR(DISTINCT CAST (val as BOOL)) FROM TableEmpty
--
ARRAY<STRUCT<BOOL>>[{NULL}]
==
[name=aggregation_distinct_logical_or_group_by]
SELECT row_id, LOGICAL_OR(DISTINCT bool_val)
FROM TableAllTypes GROUP BY row_id ORDER BY row_id
--
ARRAY<STRUCT<row_id INT64, BOOL>>[known order:
  {1, true},
  {2, true},
  {3, true},
  {4, false},
  {5, false},
  {6, true},
  {7, false},
  {8, NULL},
  {9, NULL},
  {10, true},
  {11, false},
  {12, false},
  {13, false},
  {14, true},
  {15, false},
  {16, false},
  {17, NULL},
  {18, false},
  {19, false},
  {20, false}
]
==
# ----------------------------------------------------------------------------
# LOGICAL_AND
# ----------------------------------------------------------------------------
[name=aggregation_distinct_logical_and_1]
SELECT LOGICAL_AND(x) FROM (SELECT true x FROM (SELECT 1) WHERE false);
--
ARRAY<STRUCT<BOOL>>[{NULL}]
==
[name=aggregation_distinct_logical_and_2]
SELECT LOGICAL_AND(x) FROM (SELECT CAST(NULL AS bool) x);
--
ARRAY<STRUCT<BOOL>>[{NULL}]
==
[name=aggregation_distinct_logical_and_3]
SELECT LOGICAL_AND(DISTINCT bool_val) FROM TableAllTypes
--
ARRAY<STRUCT<BOOL>>[{false}]
==
[name=aggregation_distinct_logical_and_4]
SELECT LOGICAL_AND(DISTINCT bool_val) FROM TableAllNull
--
ARRAY<STRUCT<BOOL>>[{NULL}]
==
[name=aggregation_distinct_logical_and_5]
SELECT LOGICAL_AND(DISTINCT CAST (val as BOOL)) FROM TableEmpty
--
ARRAY<STRUCT<BOOL>>[{NULL}]
==
[name=aggregation_distinct_logical_and_group_by]
SELECT row_id, LOGICAL_AND(DISTINCT bool_val) FROM TableAllTypes
  GROUP BY row_id ORDER BY row_id
--
ARRAY<STRUCT<row_id INT64, BOOL>>[known order:
  {1, true},
  {2, true},
  {3, true},
  {4, false},
  {5, false},
  {6, true},
  {7, false},
  {8, NULL},
  {9, NULL},
  {10, true},
  {11, false},
  {12, false},
  {13, false},
  {14, true},
  {15, false},
  {16, false},
  {17, NULL},
  {18, false},
  {19, false},
  {20, false}
]
==
[name=aggregation_distinct_logical_and_group_by_and_having]
SELECT row_id, LOGICAL_AND(DISTINCT bool_val) logical_and FROM TableAllTypes
  GROUP BY row_id HAVING logical_and ORDER BY row_id
--
ARRAY<STRUCT<row_id INT64, logical_and BOOL>>[known order:
  {1, true},
  {2, true},
  {3, true},
  {6, true},
  {10, true},
  {14, true}
]
==
# ----------------------------------------------------------------------------
# ANY_VALUE
# ----------------------------------------------------------------------------
[name=aggregation_distinct_any_value_1]
SELECT ANY_VALUE(DISTINCT x) FROM (select 2 as x)
--
ARRAY<STRUCT<INT64>>[{2}]
==
[name=aggregation_distinct_any_value_2]
SELECT ANY_VALUE(DISTINCT bool_val), ANY_VALUE(DISTINCT double_val), ANY_VALUE(DISTINCT float_val),
       ANY_VALUE(DISTINCT str_val), ANY_VALUE(DISTINCT int32_val), ANY_VALUE(DISTINCT uint32_val),
       ANY_VALUE(DISTINCT int64_val), ANY_VALUE(DISTINCT uint64_val), ANY_VALUE(DISTINCT date_val),
       ANY_VALUE(DISTINCT bytes_val), ANY_VALUE(DISTINCT timestamp_val)
  FROM TableOneValue
--
ARRAY<STRUCT<BOOL,
             DOUBLE,
             FLOAT,
             STRING,
             INT32,
             UINT32,
             INT64,
             UINT64,
             DATE,
             BYTES,
             TIMESTAMP>>
[{
   true,
   1,
   1,
   "1",
   1,
   1,
   1,
   1,
   2001-01-01,
   b"1",
   2001-01-01 00:00:00+00
 }]
==
[name=aggregation_distinct_any_value_3]
SELECT ANY_VALUE(DISTINCT bool_val), ANY_VALUE(DISTINCT double_val), ANY_VALUE(DISTINCT float_val),
       ANY_VALUE(DISTINCT str_val), ANY_VALUE(DISTINCT int32_val), ANY_VALUE(DISTINCT uint32_val),
       ANY_VALUE(DISTINCT int64_val), ANY_VALUE(DISTINCT uint64_val), ANY_VALUE(DISTINCT date_val),
       ANY_VALUE(DISTINCT bytes_val), ANY_VALUE(DISTINCT timestamp_val)
  FROM TableAllNull
--
ARRAY<STRUCT<BOOL,
             DOUBLE,
             FLOAT,
             STRING,
             INT32,
             UINT32,
             INT64,
             UINT64,
             DATE,
             BYTES,
             TIMESTAMP>>[
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}
]
==
[name=aggregation_distinct_any_value_group_by]
SELECT ANY_VALUE(DISTINCT date_val), bool_val
FROM TableOneValue GROUP BY bool_val ORDER BY bool_val
--
ARRAY<STRUCT<DATE, bool_val BOOL>>[{2001-01-01, true}]
==
[name=aggregation_distinct_any_value_group_by_and_having]
SELECT ANY_VALUE(DISTINCT date_val), bool_val
FROM TableOneValue GROUP BY bool_val HAVING bool_val ORDER BY bool_val
--
ARRAY<STRUCT<DATE, bool_val BOOL>>[{2001-01-01, true}]
==
[name=aggregation_distinct_any_value_empty]
SELECT ANY_VALUE(DISTINCT val) FROM TableEmpty
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=aggregation_distinct_any_value_double_INF]
SELECT ANY_VALUE(DISTINCT double_val) IN (CAST("Inf" AS float), CAST("-Inf" AS float))
FROM TableAllTypes WHERE IS_INF(double_val)
--
ARRAY<STRUCT<BOOL>>[{true}]

NOTE: Reference implementation reports non-determinism.
==
[name=aggregation_distinct_any_value_float_INF]
SELECT ANY_VALUE(DISTINCT float_val) IN (CAST("Inf" AS float), CAST("-Inf" AS float))
FROM TableAllTypes WHERE IS_INF(float_val)
--
ARRAY<STRUCT<BOOL>>[{true}]

NOTE: Reference implementation reports non-determinism.
==
[name=aggregation_distinct_any_value_double_NaN]
SELECT ANY_VALUE(DISTINCT double_val)
FROM TableAllTypes WHERE IS_NAN(double_val)
--
ARRAY<STRUCT<DOUBLE>>[{nan}]
==
[name=aggregation_distinct_any_value_float_NaN]
SELECT ANY_VALUE(DISTINCT float_val) FROM TableAllTypes WHERE IS_NAN(float_val)
--
ARRAY<STRUCT<FLOAT>>[{nan}]
==
# Overflow double.
[name=aggregation_distinct_sum_9_with_group_by]
SELECT 1 as a, SUM(DISTINCT x) FROM (SELECT 1.1e+308 x UNION ALL SELECT 1.2e+308) GROUP BY 1
--
ERROR: generic::out_of_range: double overflow
==
# Overflow int64.
[name=aggregation_distinct_sum_7_with_group_by]
SELECT 1 as a, SUM(DISTINCT x) FROM (SELECT 9223372036854775807 x UNION ALL SELECT 1) GROUP BY 1
--
ERROR: generic::out_of_range: int64 overflow
==
# Overflow uint64.
[name=aggregation_distinct_sum_8_with_group_by]
SELECT 1 as a, SUM(DISTINCT x) FROM (SELECT 18446744073709551615 x UNION ALL SELECT CAST(1 AS uint64) as x) GROUP BY 1
--
ERROR: generic::out_of_range: uint64 overflow
==
# Overflow double.
[name=aggregation_distinct_sum_9]
SELECT SUM(DISTINCT x) FROM (SELECT 1.1e+308 x UNION ALL SELECT 1.2e+308)
--
ERROR: generic::out_of_range: double overflow
==
# Overflow int64.
[name=aggregation_distinct_sum_7]
SELECT SUM(DISTINCT x) FROM (SELECT 9223372036854775807 x UNION ALL SELECT 1)
--
ERROR: generic::out_of_range: int64 overflow
==
# Overflow uint64.
[name=aggregation_distinct_sum_8]
SELECT SUM(DISTINCT x) FROM (SELECT 18446744073709551615 x UNION ALL SELECT CAST(1 AS uint64) as x)
--
ERROR: generic::out_of_range: uint64 overflow
