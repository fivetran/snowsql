[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]
[load_enum_names=zetasql_test__.TestEnum]
[prepare_database]
CREATE TABLE TestTable AS
SELECT cast(1 as int64) as row_id,
       cast(null as bool) as bool_val,
       cast(null as int64) as int64_val,
       cast(null as int32) as int32_val,
       cast(null as string) as str_val UNION ALL
  SELECT 2,  true,  null, null,  null  UNION ALL
  SELECT 3,  false, 1,    6,     "A"   UNION ALL
  SELECT 4,  true,  2,    2,     "A"   UNION ALL
  SELECT 5,  false, 1,    3,     "aA"   UNION ALL
  SELECT 6,  true,  2,    2,     "Aa"   UNION ALL
  SELECT 7,  false, 1,    5,     'a'   UNION ALL
  SELECT 8,  true,  4,    2,     "a"   UNION ALL
  SELECT 9,  false, 2,    3,     "b"   UNION ALL
  SELECT 10, true,  3,    1,     "B"
--
ARRAY<STRUCT<row_id INT64,
             bool_val BOOL,
             int64_val INT64,
             int32_val INT32,
             str_val STRING>>
[
  {1, NULL, NULL, NULL, NULL},
  {2, true, NULL, NULL, NULL},
  {3, false, 1, 6, "A"},
  {4, true, 2, 2, "A"},
  {5, false, 1, 3, "aA"},
  {6, true, 2, 2, "Aa"},
  {7, false, 1, 5, "a"},
  {8, true, 4, 2, "a"},
  {9, false, 2, 3, "b"},
  {10, true, 3, 1, "B"}
]
==

[prepare_database]
CREATE TABLE TableDateTimeBytes AS
SELECT cast(1 as int64) as row_id,
       cast(null as date) as date_val,
       cast(null as timestamp) as timestamp_val,
       cast(null as bytes) as bytes_val UNION ALL
SELECT 2,
       cast('2014-01-01' as date),
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC',
       cast("1" as bytes) UNION ALL
SELECT 3,
       cast('2014-01-01' as date),
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC',
       cast("2" as bytes) UNION ALL
SELECT 4,
       cast('2015-01-01' as date),
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC',
       cast("1" as bytes) UNION ALL
SELECT 5,
       cast('2015-01-01' as date),
       TIMESTAMP '2013-01-01 00:00:01.011011 UTC',
       cast("2" as bytes) UNION ALL
SELECT 6,
       cast('2014-01-01' as date),
       TIMESTAMP '2015-01-01 00:00:01.011011 UTC',
       cast("5" as bytes)
--
ARRAY<STRUCT<
        row_id INT64,
        date_val DATE,
        timestamp_val TIMESTAMP,
        bytes_val BYTES
      >>
[{1, NULL, NULL, NULL},
 {
   2,
   2014-01-01,
   2014-01-01 00:00:01.011011+00,
   b"1"
 },
 {
   3,
   2014-01-01,
   2014-01-01 00:00:01.011011+00,
   b"2"
 },
 {
   4,
   2015-01-01,
   2014-01-01 00:00:01.011011+00,
   b"1"
 },
 {
   5,
   2015-01-01,
   2013-01-01 00:00:01.011011+00,
   b"2"
 },
 {
   6,
   2014-01-01,
   2015-01-01 00:00:01.011011+00,
   b"5"
 }]
==

[prepare_database]
CREATE TABLE TableEnumStructProto AS
SELECT cast(1 as int64) as row_id,
       cast(null as "zetasql_test__.TestEnum") as enum_val,
       cast(null as STRUCT<a int64, b int64>) as struct_val,
       cast(null as "zetasql_test__.KitchenSinkPB") as proto_val UNION ALL
SELECT 2, 1, struct(2, 4),
       NEW zetasql_test__.KitchenSinkPB(6 AS int64_key_1,
                                        6 AS int64_key_2) UNION ALL
SELECT 3, 1, struct(2, 4),
       NEW zetasql_test__.KitchenSinkPB(5 AS int64_key_1,
                                        6 AS int64_key_2) UNION ALL
SELECT 4, 2, struct(3, 4),
       NEW zetasql_test__.KitchenSinkPB(6 AS int64_key_1,
                                        6 AS int64_key_2) UNION ALL
SELECT 5, 0, struct(2, cast(null as int64)),
       NEW zetasql_test__.KitchenSinkPB(5 AS int64_key_1,
                                        7 AS int64_key_2)
--
ARRAY<STRUCT<
        row_id INT64,
        enum_val ENUM<zetasql_test__.TestEnum>,
        struct_val STRUCT<a INT64, b INT64>,
        proto_val PROTO<zetasql_test__.KitchenSinkPB>
      >>
[{1, NULL, NULL, NULL},
 {2,
  TESTENUM1,
  {2, 4},
  {
    int64_key_1: 6
    int64_key_2: 6
  }},
 {3,
  TESTENUM1,
  {2, 4},
  {
    int64_key_1: 5
    int64_key_2: 6
  }},
 {4,
  TESTENUM2,
  {3, 4},
  {
    int64_key_1: 6
    int64_key_2: 6
  }},
 {5,
  TESTENUM0,
  {2, NULL},
  {
    int64_key_1: 5
    int64_key_2: 7
  }}]
==

[default required_features=ANALYTIC_FUNCTIONS]
[name=first_value_1]
[labels=first_value_with_bounded_window_frame_start]
SELECT bool_val, row_id,
       FIRST_VALUE(row_id) OVER (PARTITION BY bool_val ORDER BY row_id DESC
                                 ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING),
       FIRST_VALUE(row_id) OVER (PARTITION BY bool_val ORDER BY row_id DESC
                                 ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, row_id INT64, INT64, INT64>>[unknown order:
  {NULL, 1, NULL, NULL},
  {false, 9, NULL, 7},
  {false, 7, 9, 5},
  {false, 5, 9, 3},
  {false, 3, 7, NULL},
  {true, 10, NULL, 8},
  {true, 8, 10, 6},
  {true, 6, 10, 4},
  {true, 4, 8, 2},
  {true, 2, 6, NULL}
]
==

[name=first_value_2]
[labels=first_value_with_bounded_window_frame_start]
SELECT bool_val, int64_val,
       FIRST_VALUE(int64_val * 2) OVER (PARTITION BY bool_val ORDER BY int64_val
                                        RANGE BETWEEN 1 PRECEDING AND
                                                      1 FOLLOWING),
       FIRST_VALUE(int64_val) OVER (PARTITION BY bool_val ORDER BY int64_val
                                    RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, int64_val INT64, INT64, INT64>>[unknown order:
  {NULL, NULL, NULL, NULL},
  {false, 1, 2, 1},
  {false, 1, 2, 1},
  {false, 1, 2, 1},
  {false, 2, 2, 2},
  {true, NULL, NULL, NULL},
  {true, 2, 4, 2},
  {true, 2, 4, 2},
  {true, 3, 4, 3},
  {true, 4, 6, 4}
]
==

[name=first_value_bool_int32]
[labels=first_value_with_bounded_window_frame_start]
SELECT row_id, bool_val, int32_val,
       FIRST_VALUE(bool_val) OVER (ORDER BY row_id
                                   ROWS BETWEEN CURRENT ROW AND
                                                UNBOUNDED FOLLOWING),
       FIRST_VALUE(int32_val) OVER (ORDER BY row_id
                                    ROWS BETWEEN UNBOUNDED PRECEDING AND
                                                 CURRENT ROW)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, bool_val BOOL, int32_val INT32, BOOL, INT32>>[unknown order:
  {1, NULL, NULL, NULL, NULL},
  {2, true, NULL, true, NULL},
  {3, false, 6, false, NULL},
  {4, true, 2, true, NULL},
  {5, false, 3, false, NULL},
  {6, true, 2, true, NULL},
  {7, false, 5, false, NULL},
  {8, true, 2, true, NULL},
  {9, false, 3, false, NULL},
  {10, true, 1, true, NULL}
]
==

[name=first_value_uint32_int64]
[labels=first_value_with_bounded_window_frame_start]
SELECT row_id, int32_val, int64_val,
       FIRST_VALUE(CAST(int32_val as uint32))
           OVER (ORDER BY row_id
                 ROWS BETWEEN 3 PRECEDING AND 2 FOLLOWING),
       FIRST_VALUE(int64_val) OVER (ORDER BY row_id ROWS 3 PRECEDING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, int32_val INT32, int64_val INT64, UINT32, INT64>>[unknown order:
  {1, NULL, NULL, NULL, NULL},
  {2, NULL, NULL, NULL, NULL},
  {3, 6, 1, NULL, NULL},
  {4, 2, 2, NULL, NULL},
  {5, 3, 1, NULL, NULL},
  {6, 2, 2, 6, 1},
  {7, 5, 1, 2, 2},
  {8, 2, 4, 3, 1},
  {9, 3, 2, 2, 2},
  {10, 1, 3, 5, 1}
]
==

[name=first_value_uint64]
[labels=first_value_with_bounded_window_frame_start]
SELECT row_id, int64_val,
       FIRST_VALUE(CAST(int64_val as uint64))
           OVER (ORDER BY row_id
                 ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, int64_val INT64, UINT64>>[unknown order:
  {1, NULL, NULL},
  {2, NULL, NULL},
  {3, 1, NULL},
  {4, 2, NULL},
  {5, 1, 1},
  {6, 2, 2},
  {7, 1, 1},
  {8, 4, 2},
  {9, 2, 1},
  {10, 3, 4}
]
==

[name=first_value_float_double]
[labels=first_value_with_bounded_window_frame_start]
SELECT row_id, cast(int64_val as float), cast(int32_val as double) + 1.5,
       FIRST_VALUE(cast(int64_val as float))
           OVER (ORDER BY row_id ROWS 1 PRECEDING),
       FIRST_VALUE(cast(int32_val as double) + 1.5)
           OVER (ORDER BY row_id RANGE 1 PRECEDING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, FLOAT, DOUBLE, FLOAT, DOUBLE>>[unknown order:
  {1, NULL, NULL, NULL, NULL},
  {2, NULL, NULL, NULL, NULL},
  {3, 1, 7.5, NULL, NULL},
  {4, 2, 3.5, 1, 7.5},
  {5, 1, 4.5, 2, 3.5},
  {6, 2, 3.5, 1, 4.5},
  {7, 1, 6.5, 2, 3.5},
  {8, 4, 3.5, 1, 6.5},
  {9, 2, 4.5, 4, 3.5},
  {10, 3, 2.5, 2, 4.5}
]
==

[name=first_value_string]
[labels=first_value_with_bounded_window_frame_start]
SELECT row_id, str_val,
       FIRST_VALUE(str_val) OVER (ORDER BY row_id
                                  ROWS BETWEEN 1 FOLLOWING AND
                                               2 FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, str_val STRING, STRING>>[unknown order:
  {1, NULL, NULL},
  {2, NULL, "A"},
  {3, "A", "A"},
  {4, "A", "aA"},
  {5, "aA", "Aa"},
  {6, "Aa", "a"},
  {7, "a", "a"},
  {8, "a", "b"},
  {9, "b", "B"},
  {10, "B", NULL}
]
==

[name=first_value_date]
[labels=first_value_with_bounded_window_frame_start]
SELECT row_id, date_val,
       FIRST_VALUE(date_val) OVER (ORDER BY row_id),
       FIRST_VALUE(date_val) OVER (ORDER BY row_id ROWS 1 PRECEDING)
FROM TableDateTimeBytes
--
ARRAY<STRUCT<row_id INT64, date_val DATE, DATE, DATE>>[unknown order:
  {1, NULL, NULL, NULL},
  {2, 2014-01-01, NULL, NULL},
  {3, 2014-01-01, NULL, 2014-01-01},
  {4, 2015-01-01, NULL, 2014-01-01},
  {5, 2015-01-01, NULL, 2015-01-01},
  {6, 2014-01-01, NULL, 2015-01-01}
]
==

[name=first_value_timestamp]
[labels=first_value_with_bounded_window_frame_start]
SELECT row_id, timestamp_val,
       FIRST_VALUE(timestamp_val) OVER (ORDER BY row_id ROWS 3 PRECEDING)
FROM TableDateTimeBytes
--
ARRAY<STRUCT<
        row_id INT64,
        timestamp_val TIMESTAMP,
        TIMESTAMP
      >>
[unknown order:{1, NULL, NULL},
               {
                 2,
                 2014-01-01 00:00:01.011011+00,
                 NULL
               },
               {
                 3,
                 2014-01-01 00:00:01.011011+00,
                 NULL
               },
               {
                 4,
                 2014-01-01 00:00:01.011011+00,
                 NULL
               },
               {
                 5,
                 2013-01-01 00:00:01.011011+00,
                 2014-01-01 00:00:01.011011+00
               },
               {
                 6,
                 2015-01-01 00:00:01.011011+00,
                 2014-01-01 00:00:01.011011+00
               }]
==

[name=first_value_bytes]
[labels=first_value_with_bounded_window_frame_start]
SELECT row_id, bytes_val,
       FIRST_VALUE(bytes_val) OVER (ORDER BY row_id ROWS 3 PRECEDING)
FROM TableDateTimeBytes
--
ARRAY<STRUCT<row_id INT64, bytes_val BYTES, BYTES>>[unknown order:
  {1, NULL, NULL},
  {2, b"1", NULL},
  {3, b"2", NULL},
  {4, b"1", NULL},
  {5, b"2", b"1"},
  {6, b"5", b"2"}
]
==

[name=first_value_enum]
[labels=first_value_with_bounded_window_frame_start]
SELECT row_id, enum_val,
       FIRST_VALUE(enum_val) OVER (ORDER BY row_id RANGE 0 PRECEDING)
FROM TableEnumStructProto
--
ARRAY<STRUCT<
        row_id INT64,
        enum_val ENUM<zetasql_test__.TestEnum>,
        ENUM<zetasql_test__.TestEnum>
      >>
[unknown order:
  {1, NULL, NULL},
  {2, TESTENUM1, TESTENUM1},
  {3, TESTENUM1, TESTENUM1},
  {4, TESTENUM2, TESTENUM2},
  {5, TESTENUM0, TESTENUM0}
]
==

[name=first_value_proto]
[labels=first_value_with_bounded_window_frame_start]
SELECT row_id, proto_val,
       FIRST_VALUE(proto_val) OVER (ORDER BY row_id ROWS 0 PRECEDING)
FROM TableEnumStructProto
--
ARRAY<STRUCT<
        row_id INT64,
        proto_val PROTO<zetasql_test__.KitchenSinkPB>,
        PROTO<zetasql_test__.KitchenSinkPB>
      >>
[unknown order:{1, NULL, NULL},
               {2,
                {
                  int64_key_1: 6
                  int64_key_2: 6
                },
                {
                  int64_key_1: 6
                  int64_key_2: 6
                }},
               {3,
                {
                  int64_key_1: 5
                  int64_key_2: 6
                },
                {
                  int64_key_1: 5
                  int64_key_2: 6
                }},
               {4,
                {
                  int64_key_1: 6
                  int64_key_2: 6
                },
                {
                  int64_key_1: 6
                  int64_key_2: 6
                }},
               {5,
                {
                  int64_key_1: 5
                  int64_key_2: 7
                },
                {
                  int64_key_1: 5
                  int64_key_2: 7
                }}]
==

[name=first_value_struct]
[labels=first_value_with_bounded_window_frame_start]
SELECT row_id, struct_val,
       FIRST_VALUE(struct_val) OVER (ORDER BY row_id
                                     RANGE 2 PRECEDING) first_value_struct_val
FROM TableEnumStructProto
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<
        row_id INT64,
        struct_val STRUCT<a INT64, b INT64>,
        first_value_struct_val STRUCT<a INT64, b INT64>
      >>
[unknown order:
  {1, NULL, NULL},
  {2, {2, 4}, NULL},
  {3, {2, 4}, NULL},
  {4, {3, 4}, {2, 4}},
  {5, {2, NULL}, {2, 4}}
]
==

[name=first_value_struct_fields]
[labels=first_value_with_bounded_window_frame_start]
SELECT row_id, struct_val.a, struct_val.b, first_value_struct_val.a,
       first_value_struct_val.b
FROM (
  SELECT row_id, struct_val,
         FIRST_VALUE(struct_val) OVER (ORDER BY row_id
                                       RANGE 2 PRECEDING) first_value_struct_val
  FROM TableEnumStructProto
  WINDOW test_window AS (ORDER BY row_id)
)
--
ARRAY<STRUCT<row_id INT64, a INT64, b INT64, a INT64, b INT64>>[unknown order:
  {2, 2, 4, NULL, NULL},
  {4, 3, 4, 2, 4},
  {1, NULL, NULL, NULL, NULL},
  {3, 2, 4, NULL, NULL},
  {5, 2, NULL, 2, 4}
]
==

[name=first_value_array]
[labels=first_value_with_bounded_window_frame_start]
SELECT row_id, array_val,
       FIRST_VALUE(array_val) OVER (ORDER BY row_id RANGE 2 PRECEDING)
FROM (SELECT 1 row_id, [1, 2, 3] array_val UNION ALL
      SELECT 2, [2, 3, 4] UNION ALL
      SELECT 3, [3, 4, 5] UNION ALL
      SELECT 5, CAST(null as ARRAY<int64>) UNION ALL
      SELECT 6, [6, 5] UNION ALL
      SELECT 7, CAST(null as ARRAY<int64>))
--
ARRAY<STRUCT<row_id INT64, array_val ARRAY<>, ARRAY<>>>[unknown order:
  {
    1,
    ARRAY<INT64>[known order:1, 2, 3],
    ARRAY<INT64>[known order:1, 2, 3]
  },
  {
    2,
    ARRAY<INT64>[known order:2, 3, 4],
    ARRAY<INT64>[known order:1, 2, 3]
  },
  {
    3,
    ARRAY<INT64>[known order:3, 4, 5],
    ARRAY<INT64>[known order:1, 2, 3]
  },
  {
    5,
    ARRAY<INT64>(NULL),
    ARRAY<INT64>[known order:3, 4, 5]
  },
  {
    6,
    ARRAY<INT64>[known order:6, 5],
    ARRAY<INT64>(NULL)
  },
  {7, ARRAY<INT64>(NULL), ARRAY<INT64>(NULL)}
]
==

[name=first_value_unbounded_window_frame_start_1]
SELECT bool_val, row_id,
       FIRST_VALUE(row_id) OVER (PARTITION BY bool_val ORDER BY row_id DESC),
       FIRST_VALUE(row_id) OVER (PARTITION BY bool_val ORDER BY row_id DESC
                                 RANGE BETWEEN UNBOUNDED PRECEDING
                                           AND CURRENT ROW),
       FIRST_VALUE(row_id) OVER (PARTITION BY bool_val ORDER BY row_id DESC
                                 ROWS BETWEEN UNBOUNDED PRECEDING
                                          AND 1 FOLLOWING),
       FIRST_VALUE(row_id) OVER (PARTITION BY bool_val ORDER BY row_id DESC
                                 RANGE BETWEEN UNBOUNDED PRECEDING
                                           AND UNBOUNDED FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, row_id INT64, INT64, INT64, INT64, INT64>>[unknown order:
  {NULL, 1, 1, 1, 1, 1},
  {false, 9, 9, 9, 9, 9},
  {false, 7, 9, 9, 9, 9},
  {false, 5, 9, 9, 9, 9},
  {false, 3, 9, 9, 9, 9},
  {true, 10, 10, 10, 10, 10},
  {true, 8, 10, 10, 10, 10},
  {true, 6, 10, 10, 10, 10},
  {true, 4, 10, 10, 10, 10},
  {true, 2, 10, 10, 10, 10}
]
==

# Same test as the previous, but leveraging the WINDOW clause.
[name=first_value_unbounded_window_frame_start_2]
SELECT bool_val, row_id,
       FIRST_VALUE(row_id) OVER (window1),
       FIRST_VALUE(row_id) OVER (window1
                                 RANGE BETWEEN UNBOUNDED PRECEDING
                                           AND CURRENT ROW),
       FIRST_VALUE(row_id) OVER (window1
                                 ROWS BETWEEN UNBOUNDED PRECEDING
                                          AND 1 FOLLOWING),
       FIRST_VALUE(row_id) OVER (window1
                                 RANGE BETWEEN UNBOUNDED PRECEDING
                                           AND UNBOUNDED FOLLOWING)
FROM TestTable
WINDOW window1 AS (PARTITION BY bool_val ORDER BY row_id DESC);
--
ARRAY<STRUCT<bool_val BOOL, row_id INT64, INT64, INT64, INT64, INT64>>[unknown order:
  {NULL, 1, 1, 1, 1, 1},
  {false, 9, 9, 9, 9, 9},
  {false, 7, 9, 9, 9, 9},
  {false, 5, 9, 9, 9, 9},
  {false, 3, 9, 9, 9, 9},
  {true, 10, 10, 10, 10, 10},
  {true, 8, 10, 10, 10, 10},
  {true, 6, 10, 10, 10, 10},
  {true, 4, 10, 10, 10, 10},
  {true, 2, 10, 10, 10, 10}
]
==

# Somewhat tricky case, the window frame start is unbounded but there are
# no rows in the window for the first row of the partition.  So that row
# has a first value of NULL.
[name=first_value_unbounded_window_frame_start_but_n_preceding_end]
SELECT bool_val, row_id,
       FIRST_VALUE(row_id) OVER (PARTITION BY bool_val ORDER BY row_id DESC
                                 ROWS BETWEEN UNBOUNDED PRECEDING
                                          AND 1 PRECEDING),
       FIRST_VALUE(row_id) OVER (PARTITION BY bool_val ORDER BY row_id DESC
                                 RANGE BETWEEN UNBOUNDED PRECEDING
                                           AND 1 PRECEDING)
FROM TestTable
--
ARRAY<STRUCT<bool_val BOOL, row_id INT64, INT64, INT64>>[unknown order:
  {NULL, 1, NULL, NULL},
  {false, 9, NULL, NULL},
  {false, 7, 9, 9},
  {false, 5, 9, 9},
  {false, 3, 9, 9},
  {true, 10, NULL, NULL},
  {true, 8, 10, 10},
  {true, 6, 10, 10},
  {true, 4, 10, 10},
  {true, 2, 10, 10}
]
==

[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=first_value_numeric]
[parameters="99999999999999999999999999999.999999999" as max_val,
            "-99999999999999999999999999999.999999999" as min_val]
SELECT row_id,
       FIRST_VALUE(value) OVER(ORDER BY row_id
                               RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING)
FROM (SELECT 1 row_id, CAST(NULL as NUMERIC) value UNION ALL
      SELECT 2, 0                                  UNION ALL
      SELECT 3, 3.5                                UNION ALL
      SELECT 4, -1.230000001                       UNION ALL
      SELECT 5, CAST(@max_val AS NUMERIC)          UNION ALL
      SELECT 6, CAST(@min_val AS NUMERIC))
--
ARRAY<STRUCT<row_id INT64, NUMERIC>>[unknown order:
  {1, NULL},
  {2, NULL},
  {3, 0},
  {4, 3.5},
  {5, -1.230000001},
  {
    6,
    99999999999999999999999999999.999999999
  }
]
