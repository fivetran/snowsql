[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB, zetasql_test__.TestExtraPB, zetasql_test__.KitchenSinkPB.Nested, zetasql_test__.KitchenSinkExtension, zetasql_test__.RecursivePB, zetasql_test__.TestNullabilityMiddlePB, zetasql_test__.MessageWithMapField, zetasql_test__.MessageWithMapField.StringInt32MapEntry]

[name=replace_fields_proto_top_level]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    CAST(
      "int64_key_1:13, int64_key_2:123, string_val:'sample'"
        as zetasql_test__.KitchenSinkPB
    ),
    11 as int64_val, "abc" as string_val, true as bool_val,
    [1,2,3] as repeated_int64_val, 321 as int64_key_2,
    "nested_int64:99999" as nested_value
  )
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 13
     int64_key_2: 321
     int64_val: 11
     string_val: "abc"
     bool_val: true
     repeated_int64_val: 1
     repeated_int64_val: 2
     repeated_int64_val: 3
     nested_value {
       nested_int64: 99999
     }
   }}
]
==

[name=replace_fields_proto_nested_field]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    CAST(
      "int64_key_1:1, int64_key_2:2, nested_value:{nested_int64:3}"
        as zetasql_test__.KitchenSinkPB
    ),
    13 as nested_value.nested_int64,
    [1,2,3] as nested_value.nested_repeated_int64
  )
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 1
     int64_key_2: 2
     nested_value {
       nested_int64: 13
       nested_repeated_int64: 1
       nested_repeated_int64: 2
       nested_repeated_int64: 3
     }
   }}
]
==

[name=replace_fields_proto_complex_nested]
[required_features=V_1_3_REPLACE_FIELDS,V_1_2_PROTO_EXTENSIONS_WITH_NEW]
SELECT
  REPLACE_FIELDS(
    NEW
      zetasql_test__.RecursivePB(
        NEW
          zetasql_test__.RecursivePB(
            13 as int64_val,
            "int64_val:5432"
              as (zetasql_test__.RecursivePB.recursive_pb_extension)
          ) as recursive_pb
      ),
      192837
        as recursive_pb.(
          zetasql_test__.RecursivePB.recursive_pb_extension
        ).int64_val
  )
--
ARRAY<STRUCT<PROTO<zetasql_test__.RecursivePB>>>[
  {{
     recursive_pb {
       int64_val: 13
       [zetasql_test__.RecursivePB.recursive_pb_extension] {
         int64_val: 192837
       }
     }
   }}
]
==

[name=replace_fields_proto_formatted_fields]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    CAST(
      "int64_key_1:1, int64_key_2:2, date:10950, nested_dates:{timestamp_millis:0}"
        as zetasql_test__.KitchenSinkPB
    ),
    '2023-06-01'
      as date, '2008-12-25 15:30:00 UTC' as nested_dates.timestamp_millis
  )
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 1
     int64_key_2: 2
     date: 19509
     nested_dates {
       timestamp_millis: 1230219000000
     }
   }}
]
==

[name=replace_fields_proto_repeated_append]
[required_features=V_1_3_REPLACE_FIELDS]
WITH KitchenSinkTable as (SELECT CAST(
      "int64_key_1:13, int64_key_2:123, repeated_int64_val:[3,2,1]"
        as zetasql_test__.KitchenSinkPB
   ) foo)
SELECT
  REPLACE_FIELDS(
    foo, ARRAY_CONCAT(foo.repeated_int64_val, [0, -1]) as repeated_int64_val
  )
FROM KitchenSinkTable
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 13
     int64_key_2: 123
     repeated_int64_val: 3
     repeated_int64_val: 2
     repeated_int64_val: 1
     repeated_int64_val: 0
     repeated_int64_val: -1
   }}
]
==

[name=replace_fields_proto_array_of_protos]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  ARRAY(
    SELECT
      REPLACE_FIELDS(array_element, array_element.int32_val1 + 5 as int32_val1)
    FROM
      UNNEST(
        ARRAY<zetasql_test__.TestExtraPB> ["int32_val1:1",
        "int32_val1:2",
        "int32_val1:3"]
      ) array_element
    ORDER BY array_element.int32_val1
  )
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.TestExtraPB>>[known order:
     {int32_val1: 6},
     {int32_val1: 7},
     {int32_val1: 8}
   ]}
]
==

[name=replace_fields_proto_extension]
[required_features=V_1_3_REPLACE_FIELDS,V_1_2_PROTO_EXTENSIONS_WITH_NEW]
SELECT
  REPLACE_FIELDS(
    NEW
      zetasql_test__.KitchenSinkPB(
        1 as int64_key_1,
        2 as int64_key_2,
        "nested_int64:3" as nested_value,
        13 as (zetasql_test__.int_top_level_extension),
        '1980-08-08' as (zetasql_test__.date_extension),
        "value:'abc'"
            as (zetasql_test__.KitchenSinkExtension.optional_extension)
      ),
      NULL as (zetasql_test__.date_extension),
      321 as (zetasql_test__.int_top_level_extension),
      ["sample","data"]
         as (
           zetasql_test__.KitchenSinkExtension.optional_extension
         ).repeated_value,
         123
           as nested_value.(
             zetasql_test__.KitchenSinkPB.nested_extension_int64
           )
  )
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 1
     int64_key_2: 2
     nested_value {
       nested_int64: 3
       [zetasql_test__.KitchenSinkPB.nested_extension_int64]: 123
     }
     [zetasql_test__.KitchenSinkExtension.optional_extension] {
       value: "abc"
       repeated_value: "sample"
       repeated_value: "data"
     }
     [zetasql_test__.int_top_level_extension]: 321
   }}
]
==

[name=replace_fields_proto_named_extension]
[required_features=V_1_3_REPLACE_FIELDS,V_1_2_PROTO_EXTENSIONS_WITH_NEW]
SELECT
  REPLACE_FIELDS(
    NEW
       zetasql_test__.KitchenSinkPB(
         1 as int64_key_1,
         2 as int64_key_2,
         "nested_int64:3" as nested_value,
         NEW
           zetasql_test__.TestExtraPB(
             "ext_value:[1,2,3]"
               as (zetasql_test__.TestExtraPBExtensionHolder.named_extension)
           ) as test_extra_pb
       ),
       ARRAY<INT32> [3, 2, 1] as test_extra_pb.named_extension.ext_value
  )
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 1
     int64_key_2: 2
     nested_value {
       nested_int64: 3
     }
     test_extra_pb {
       [zetasql_test__.TestExtraPBExtensionHolder.named_extension] {
         ext_value: 3
         ext_value: 2
         ext_value: 1
       }
     }
   }}
]
==

[name=replace_fields_proto_clear]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    CAST(
      "int64_key_1:13, int64_key_2:123, string_val:'sample', repeated_int64_val:[3,2,1], repeated_bool_val:[true,false,true], nested_value:{nested_int64:3}, nested_dates:{date:10950}"
        as zetasql_test__.KitchenSinkPB
    ),
      NULL as string_val,
      NULL as nested_value.nested_int64,
      NULL as nested_dates,
      NULL as repeated_int64_val,
      ARRAY<BOOL>[] as repeated_bool_val
  )
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 13
     int64_key_2: 123
     nested_value {
     }
   }}
]
==

[name=replace_fields_proto_clear_required]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    CAST(
      "int64_key_1:13, int64_key_2:123"
        as zetasql_test__.KitchenSinkPB
    ),
    NULL as int64_key_1
  )
--
ERROR: generic::out_of_range: REPLACE_FIELDS() cannot be used to clear required fields
==

[name=replace_fields_proto_clear_required_subfield]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    CAST(
      "required_field:13, required_nested:{required_field:34432}"
        as zetasql_test__.TestNullabilityMiddlePB
    ),
    NULL as required_nested.required_field
  )
--
ERROR: generic::out_of_range: REPLACE_FIELDS() cannot be used to clear required fields
==

[name=replace_fields_proto_modify_unset_subfield]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    CAST(
      "int64_key_1:13, int64_key_2:123"
        as zetasql_test__.KitchenSinkPB
    ),
    500 as nested_value.nested_int64
  )
--
ERROR: generic::out_of_range: REPLACE_FIELDS() cannot be used to modify the fields of an unset proto
==

[name=replace_fields_proto_oneofs]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    CAST(
      "int64_key_1:13, int64_key_2:123, int64_one_of:1111"
        as zetasql_test__.KitchenSinkPB
    ),
    22222 as int64_one_of, "oneof_field" as string_one_of
  )
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 13
     int64_key_2: 123
     string_one_of: "oneof_field"
     int64_one_of: 22222
   }}
]
==

[name=replace_fields_struct_top_level]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    STRUCT(
      7 as unmodified_field,
      123 as int64_val,
      "def" as string_val,
      false as bool_val,
      [3,2,1] as repeated_int64_val,
      STRUCT(123 as nested_struct_field) as nested_struct
    ),
      11 as int64_val,
      "abc" as string_val,
      true as bool_val,
      [1,2,3] as repeated_int64_val,
      STRUCT(321 as nested_structed_field) as nested_struct
  )
--
ARRAY<STRUCT<STRUCT<
                    unmodified_field INT64,
                    int64_val INT64,
                    string_val STRING,
                    bool_val BOOL,
                    repeated_int64_val ARRAY<>,
                    nested_struct STRUCT<nested_struct_field INT64>
                  >>>
[{{
    7,
    11,
    "abc",
    true,
    ARRAY<INT64>[known order:1, 2, 3],
    {321}
  }}]
==

[name=replace_fields_struct_nested]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    STRUCT(
      STRUCT(
        7 as unmodified_field,
        123 as int64_val,
        "def" as string_val,
        false as bool_val,
        [3,2,1] as repeated_int64_val
      ) as nested_struct
    ),
      11 as nested_struct.int64_val,
      "abc" as nested_struct.string_val,
      true as nested_struct.bool_val,
      [1,2,3] as nested_struct.repeated_int64_val
  )
--
ARRAY<STRUCT<STRUCT<nested_struct STRUCT<
                                unmodified_field INT64,
                                int64_val INT64,
                                string_val STRING,
                                bool_val BOOL,
                                repeated_int64_val ARRAY<>
                              >>>>
[{{{
     7,
     11,
     "abc",
     true,
     ARRAY<INT64>[known order:1, 2, 3]
   }}}]
==

[name=replace_fields_struct_clear]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    STRUCT(
      7 as unmodified_field,
      123 as int64_val,
      [3,2,1] as repeated_int64_val,
      STRUCT(123 as nested_int64, "abcdefg" as nested_string) as nested_struct1,
      STRUCT(321 as nested_struct_field) as nested_struct2
    ),
      NULL as int64_val,
      NULL as repeated_int64_val,
      NULL as nested_struct1.nested_int64,
      NULL as nested_struct2
  )
--
ARRAY<STRUCT<
        STRUCT<
               unmodified_field INT64,
               int64_val INT64,
               repeated_int64_val ARRAY<>,
               nested_struct1 STRUCT<nested_int64 INT64, nested_string STRING>,
               nested_struct2 STRUCT<nested_struct_field INT64>
             >
      >>[{{7, NULL, ARRAY<INT64>(NULL), {NULL, "abcdefg"}, NULL}}]
==

[name=replace_fields_struct_proto_top_level]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    STRUCT(
      CAST(
        "int64_key_1:13, int64_key_2:123, string_val:'sample'"
          as zetasql_test__.KitchenSinkPB
      ) as nested_proto
    ),
      11 as nested_proto.int64_val,
      "abc" as nested_proto.string_val,
      true as nested_proto.bool_val,
      [1,2,3] as nested_proto.repeated_int64_val,
      321 as nested_proto.int64_key_2
  )
--
ARRAY<STRUCT<STRUCT<nested_proto PROTO<zetasql_test__.KitchenSinkPB>>>>[
  {{{
      int64_key_1: 13
      int64_key_2: 321
      int64_val: 11
      string_val: "abc"
      bool_val: true
      repeated_int64_val: 1
      repeated_int64_val: 2
      repeated_int64_val: 3
    }}}
]
==

[name=replace_fields_struct_proto_nested]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(STRUCT(
    CAST(
      "int64_key_1:13, int64_key_2:123, nested_value:{nested_int64:3}"
        as zetasql_test__.KitchenSinkPB
    ) as proto_field),
    99999 as proto_field.nested_value.nested_int64,
    [1,2,3] as proto_field.nested_value.nested_repeated_int64
)
--
ARRAY<STRUCT<STRUCT<proto_field PROTO<zetasql_test__.KitchenSinkPB>>>>[
  {{{
      int64_key_1: 13
      int64_key_2: 123
      nested_value {
        nested_int64: 99999
        nested_repeated_int64: 1
        nested_repeated_int64: 2
        nested_repeated_int64: 3
      }
    }}}
]
==

[name=replace_fields_struct_proto_extension]
[required_features=V_1_3_REPLACE_FIELDS,V_1_2_PROTO_EXTENSIONS_WITH_NEW]
SELECT
  REPLACE_FIELDS(
    STRUCT(
      NEW
        zetasql_test__.KitchenSinkPB(
          1 as int64_key_1,
          2 as int64_key_2,
          "nested_int64:3" as nested_value,
          13 as (zetasql_test__.int_top_level_extension),
          "value:'abc'"
              as (zetasql_test__.KitchenSinkExtension.optional_extension)
        ) as nested_proto
    ),
    321 as nested_proto.(zetasql_test__.int_top_level_extension),
      ["sample","data"]
            as nested_proto.(
              zetasql_test__.KitchenSinkExtension.optional_extension
            ).repeated_value,
      123 as nested_proto.nested_value.(
                zetasql_test__.KitchenSinkPB.nested_extension_int64
              )
  )
--
ARRAY<STRUCT<STRUCT<nested_proto PROTO<zetasql_test__.KitchenSinkPB>>>>[
  {{{
      int64_key_1: 1
      int64_key_2: 2
      nested_value {
        nested_int64: 3
        [zetasql_test__.KitchenSinkPB.nested_extension_int64]: 123
      }
      [zetasql_test__.KitchenSinkExtension.optional_extension] {
        value: "abc"
        repeated_value: "sample"
        repeated_value: "data"
      }
      [zetasql_test__.int_top_level_extension]: 321
    }}}
]
==

[name=replace_fields_struct_proto_complex_nested]
[required_features=V_1_3_REPLACE_FIELDS,V_1_2_PROTO_EXTENSIONS_WITH_NEW]
SELECT
  REPLACE_FIELDS(
    STRUCT(
      STRUCT(
        NEW
          zetasql_test__.RecursivePB(
            NEW
              zetasql_test__.RecursivePB(
                13 as int64_val,
                "int64_val:5432"
                  as (zetasql_test__.RecursivePB.recursive_pb_extension)
              ) as recursive_pb
          ) as nested_recursive_pb,
          "abc" as nested_string_field
      ) as nested_struct,
      123 as int64_field
    ),
    192837
      as nested_struct.nested_recursive_pb.recursive_pb.(
        zetasql_test__.RecursivePB.recursive_pb_extension
      ).int64_val,
    321 as int64_field, "zzzzz" as nested_struct.nested_string_field
  )
--
ARRAY<STRUCT<
        STRUCT<
               nested_struct STRUCT<
                      nested_recursive_pb PROTO<zetasql_test__.RecursivePB>,
                      nested_string_field STRING
                    >,
               int64_field INT64
             >
      >>
[{{{{
      recursive_pb {
        int64_val: 13
        [zetasql_test__.RecursivePB.recursive_pb_extension] {
          int64_val: 192837
        }
      }
    },
    "zzzzz"},
   321}}]
==

[name=replace_fields_struct_proto_clear_required]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    STRUCT(CAST(
      "int64_key_1:13, int64_key_2:123"
        as zetasql_test__.KitchenSinkPB
    ) as nested_proto),
    NULL as nested_proto.int64_key_1
  )
--
ERROR: generic::out_of_range: REPLACE_FIELDS() cannot be used to clear required fields
==

[name=replace_fields_struct_proto_modify_unset_subfield]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    STRUCT(CAST(
      "int64_key_1:13, int64_key_2:123"
        as zetasql_test__.KitchenSinkPB
    ) as nested_proto),
    313 as nested_proto.nested_value.nested_int64
  )
--
ERROR: generic::out_of_range: REPLACE_FIELDS() cannot be used to modify the fields of an unset proto
==

[name=replace_map_field]
[required_features=V_1_3_REPLACE_FIELDS]

SELECT
  REPLACE_FIELDS(
    CAST("" as zetasql_test__.MessageWithMapField),
    [NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry("foo" AS key, 123 AS value)] as string_int32_map
  )
--
ARRAY<STRUCT<PROTO<zetasql_test__.MessageWithMapField>>>[
  {{
     string_int32_map {
       key: "foo"
       value: 123
     }
   }}
]
==

[name=replace_map_field_key_null]
[required_features=V_1_3_REPLACE_FIELDS,V_1_3_PROTO_MAPS]

SELECT
  REPLACE_FIELDS(
    CAST("" as zetasql_test__.MessageWithMapField),
    [NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry(CAST(NULL as STRING) AS key, 123 AS value)] as string_int32_map
  )
--
ERROR: generic::out_of_range: Cannot write NULL to key or value of map field in StringInt32MapEntry
==

[name=replace_map_field_value_null]
[required_features=V_1_3_REPLACE_FIELDS,V_1_3_PROTO_MAPS]

SELECT
  REPLACE_FIELDS(
    CAST("" as zetasql_test__.MessageWithMapField),
    [NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry("foo" AS key, CAST(NULL as INT32) AS value)] as string_int32_map
  )
--
ERROR: generic::out_of_range: Cannot write NULL to key or value of map field in StringInt32MapEntry
==
[name=replace_map_field_entry_key]
[required_features=V_1_3_REPLACE_FIELDS]

SELECT
  REPLACE_FIELDS(
    CAST("key: 'foo' value: 123" as zetasql_test__.MessageWithMapField.StringInt32MapEntry),
    "bar" as key
  )
--
ARRAY<STRUCT<PROTO<zetasql_test__.MessageWithMapField.StringInt32MapEntry>>>[
  {{
     key: "bar"
     value: 123
   }}
]
==

[name=replace_map_field_entry_value]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT
  REPLACE_FIELDS(
    CAST("key: 'foo' value: 123" as zetasql_test__.MessageWithMapField.StringInt32MapEntry),
    456 as value
  )
--
ARRAY<STRUCT<PROTO<zetasql_test__.MessageWithMapField.StringInt32MapEntry>>>[
  {{
     key: "foo"
     value: 456
   }}
]
==

[name=replace_map_field_entry_key_null]
[required_features=V_1_3_REPLACE_FIELDS,V_1_3_PROTO_MAPS]
SELECT
  REPLACE_FIELDS(
    CAST("key: 'foo' value: 123" as zetasql_test__.MessageWithMapField.StringInt32MapEntry),
    NULL as key
  )
--
ERROR: generic::out_of_range: REPLACE_FIELDS() cannot be used to clear a field of a map entry
==

[name=replace_map_field_entry_value_null]
[required_features=V_1_3_REPLACE_FIELDS,V_1_3_PROTO_MAPS]
SELECT
  REPLACE_FIELDS(
    CAST("key: 'foo' value: 123" as zetasql_test__.MessageWithMapField.StringInt32MapEntry),
    NULL as value
  )
--
ERROR: generic::out_of_range: REPLACE_FIELDS() cannot be used to clear a field of a map entry

==
[name=replace_fields_unset_cast_test]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT REPLACE_FIELDS(CAST(b'' AS zetasql_test__.KitchenSinkPB), 1 AS int64_key_1) AS c
--
ERROR: generic::out_of_range: REPLACE_FIELDS() cannot be used on a proto with missing fields: int64_key_1, int64_key_2

==
[name=replace_fields_unset_try_cast_test]
[required_features=V_1_3_REPLACE_FIELDS]
SELECT REPLACE_FIELDS(TRY_CAST(b'' AS zetasql_test__.KitchenSinkPB), 1 AS int64_key_1) AS c
--
ERROR: generic::out_of_range: REPLACE_FIELDS() cannot be used on a proto with missing fields: int64_key_1, int64_key_2
