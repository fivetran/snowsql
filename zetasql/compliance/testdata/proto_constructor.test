[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB, zetasql_test__.TestExtraPB, zetasql_test__.TestExtraPBExtensionHolder, zetasql_test__.KitchenSinkPB.Nested, zetasql_test__.RepeatedHolderPB, zetasql_test__.MessageWithMapField, zetasql_test__.MessageWithMapField.StringInt32MapEntry]

[prepare_database]
CREATE TABLE TableWithNulls AS
SELECT cast(1 as int64) as primary_key,
       cast(null as int64) as int64_val UNION ALL
  SELECT 2,  null UNION ALL
  SELECT 3, null UNION ALL
  SELECT 4, null UNION ALL
  SELECT 5, 4 UNION ALL
  SELECT 6, 5 UNION ALL
  SELECT 7, 6
--
ARRAY<STRUCT<primary_key INT64, int64_val INT64>>[
  {1, NULL},
  {2, NULL},
  {3, NULL},
  {4, NULL},
  {5, 4},
  {6, 5},
  {7, 6}
]
==

[name=valid]
SELECT NEW zetasql_test__.KitchenSinkPB(5 AS int64_key_1, 6 AS int64_key_2)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
   }}
]
==

[name=null_required_field]
SELECT NEW zetasql_test__.KitchenSinkPB(NULL AS int64_key_1, 5 AS int64_key_2)
--
ERROR: generic::out_of_range: Cannot encode a null value Int64(NULL) in required protocol message field zetasql_test__.KitchenSinkPB.int64_key_1
==

[name=null_optional_field]
SELECT NEW zetasql_test__.KitchenSinkPB(
    1 AS int64_key_1,
    2 AS int64_key_2,
    NULL AS int32_val)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 1
     int64_key_2: 2
   }}
]
==

[name=valid_extension]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_NEW]
SELECT NEW zetasql_test__.TestExtraPB(
    'ext_value: 1' AS
    (zetasql_test__.TestExtraPBExtensionHolder.test_extra_proto_extension))
--
ARRAY<STRUCT<PROTO<zetasql_test__.TestExtraPB>>>[
  {
    {
      [zetasql_test__.TestExtraPBExtensionHolder.test_extra_proto_extension] {
        ext_value: 1
      }
    }
  }
]
==

[name=extensions_and_regular_fields]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_NEW]
SELECT NEW zetasql_test__.TestExtraPB(
    ["foo", "bar"] AS str_value,
    'ext_value: 1' AS
    (zetasql_test__.TestExtraPBExtensionHolder.test_extra_proto_extension),
    5 AS int32_val1)
--
ARRAY<STRUCT<PROTO<zetasql_test__.TestExtraPB>>>[
  {
    {
      int32_val1: 5
      str_value: "foo"
      str_value: "bar"
      [zetasql_test__.TestExtraPBExtensionHolder.test_extra_proto_extension] {
        ext_value: 1
      }
    }
  }
]
==

[name=multiple_extensions]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_NEW]
SELECT NEW zetasql_test__.TestExtraPB(
    'ext_value: 1' AS
    (zetasql_test__.TestExtraPBExtensionHolder.test_extra_proto_extension),
    'inner_value: 2' AS
    (zetasql_test__.TestExtraPBExtensionOuter.TestExtraPBExtensionInner
     .nested_extension))
--
ARRAY<STRUCT<PROTO<zetasql_test__.TestExtraPB>>>[
  {
    {
      [zetasql_test__.TestExtraPBExtensionHolder.test_extra_proto_extension] {
        ext_value: 1
      }
      [zetasql_test__.TestExtraPBExtensionOuter.TestExtraPBExtensionInner.nested_extension] {
        inner_value: 2
      }
    }
  }
]
==

[name=null_extension]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_NEW]
SELECT NEW zetasql_test__.TestExtraPB(
    NULL AS
    (zetasql_test__.TestExtraPBExtensionHolder.test_extra_proto_extension))
--
ARRAY<STRUCT<PROTO<zetasql_test__.TestExtraPB>>>[{{}}]
==

[name=null_extension_runtime]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_NEW]
SELECT NEW zetasql_test__.TestExtraPB(
    COALESCE(CAST(NULL AS zetasql_test__.TestExtraPBExtensionHolder))
    AS (zetasql_test__.TestExtraPBExtensionHolder.test_extra_proto_extension))
--
ARRAY<STRUCT<PROTO<zetasql_test__.TestExtraPB>>>[{{}}]
==

[name=extension_successful_implicit_narrowing_cast]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_NEW]
SELECT NEW zetasql_test__.KitchenSinkPB(
    1 AS int64_key_1,
    2 AS int64_key_2,
    0x11223344 AS (zetasql_test__.int32_top_level_extension))
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 1
     int64_key_2: 2
     [zetasql_test__.int32_top_level_extension]: 287454020
   }}
]
==

[name=extension_failed_implicit_narrowing_cast]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_NEW]
SELECT NEW zetasql_test__.KitchenSinkPB(
    1 AS int64_key_1,
    2 AS int64_key_2,
    COALESCE(0x1234567890ABCDEF) AS (zetasql_test__.int32_top_level_extension))
--
ERROR: generic::out_of_range: int32 out of range: 1311768467294899695
==

[name=extension_invalid_value]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_NEW]
SELECT NEW zetasql_test__.TestExtraPB(
    COALESCE('garbage_string') AS
    (zetasql_test__.TestExtraPBExtensionHolder.test_extra_proto_extension))
--
ERROR: generic::out_of_range: Error parsing proto: Message type "zetasql_test__.TestExtraPBExtensionHolder" has no field named "garbage_string". [1:15]
==

[name=extension_format_annotation]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_NEW]
SELECT NEW zetasql_test__.KitchenSinkPB(
    1 AS int64_key_1,
    2 AS int64_key_2,
    DATE "2017-06-15" AS (zetasql_test__.date_extension))
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 1
     int64_key_2: 2
     [zetasql_test__.date_extension]: 17332
   }}
]
==

[name=missing_required]
SELECT NEW zetasql_test__.KitchenSinkPB(5 AS int64_key_1)
--
ERROR: generic::invalid_argument: Cannot construct proto zetasql_test__.KitchenSinkPB because required field int64_key_2 is missing [at 1:12]
SELECT NEW zetasql_test__.KitchenSinkPB(5 AS int64_key_1)
           ^
==

[name=null_required]
SELECT NEW zetasql_test__.KitchenSinkPB(5 AS int64_key_1, NULL AS int64_key_2)
--
ERROR: generic::out_of_range: Cannot encode a null value Int64(NULL) in required protocol message field zetasql_test__.KitchenSinkPB.int64_key_2
==
[name=null_optional]
SELECT NEW zetasql_test__.KitchenSinkPB(
    5 AS int64_key_1, 6 AS int64_key_2,
    NULL AS int32_val)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
   }}
]
==

[name=null_repeated]
SELECT NEW zetasql_test__.KitchenSinkPB(
    5 AS int64_key_1, 6 AS int64_key_2,
    NULL AS repeated_int32_val)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
   }}
]
==

[name=null_packed_repeated]
SELECT NEW zetasql_test__.KitchenSinkPB(
    5 AS int64_key_1, 6 AS int64_key_2,
    NULL AS repeated_int32_packed)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
   }}
]
==

[name=null_within_repeated]
SELECT NEW zetasql_test__.KitchenSinkPB(
    5 AS int64_key_1, 6 AS int64_key_2,
    ARRAY<INT32>[7, 8, NULL, 9] AS repeated_int32_val)
--
ERROR: generic::out_of_range: Cannot encode a null value Int32(NULL) in repeated protocol message field zetasql_test__.KitchenSinkPB.repeated_int32_val
==

[name=null_within_packed_repeated]
SELECT NEW zetasql_test__.KitchenSinkPB(
    5 AS int64_key_1, 6 AS int64_key_2,
    ARRAY<INT32>[7, 8, NULL, 9] AS repeated_int32_packed)
--
ERROR: generic::out_of_range: Cannot encode a null value Int32(NULL) in repeated protocol message field zetasql_test__.KitchenSinkPB.repeated_int32_packed
==

[name=null_from_array_subquery_within_repeated]
select NEW zetasql_test__.KitchenSinkPB(
    1 as int64_key_1, 2 as int64_key_2,
    ARRAY(select NULL) as repeated_int64_val)
--
ERROR: generic::out_of_range: Cannot encode a null value Int64(NULL) in repeated protocol message field zetasql_test__.KitchenSinkPB.repeated_int64_val
==

[name=null_from_array_subquery_of_table_within_repeated]
select NEW zetasql_test__.KitchenSinkPB(
    1 as int64_key_1, 2 as int64_key_2,
    ARRAY(select int64_val from TableWithNulls) as repeated_int64_val)
--
ERROR: generic::out_of_range: Cannot encode a null value Int64(NULL) in repeated protocol message field zetasql_test__.KitchenSinkPB.repeated_int64_val
==

[name=null_from_array_agg_subquery_within_repeated]
select NEW zetasql_test__.KitchenSinkPB(
    1 as int64_key_1, 2 as int64_key_2,
    (select ARRAY_AGG(val) from UNNEST([1, NULL]) val) as repeated_int64_val)
--
ERROR: generic::out_of_range: Cannot encode a null value Int64(NULL) in repeated protocol message field zetasql_test__.KitchenSinkPB.repeated_int64_val
==

[name=valid_with_message_field]
SELECT NEW zetasql_test__.KitchenSinkPB(
  5 AS int64_key_1,
  6 AS int64_key_2,
  NEW zetasql_test__.KitchenSinkPB.Nested(10 AS nested_int64) AS nested_value)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
     nested_value {
       nested_int64: 10
     }
   }}
]
==

[name=null_message_subfield]
SELECT NEW zetasql_test__.KitchenSinkPB(
  5 AS int64_key_1,
  6 AS int64_key_2,
  NEW zetasql_test__.KitchenSinkPB.Nested(NULL AS nested_int64) AS nested_value)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
     nested_value {
     }
   }}
]
==

[name=null_message_field]
SELECT NEW zetasql_test__.KitchenSinkPB(
  5 AS int64_key_1,
  6 AS int64_key_2,
  NULL AS nested_value)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
   }}
]
==

[name=valid_with_repeated_message_field]
SELECT NEW zetasql_test__.KitchenSinkPB(
  5 AS int64_key_1,
  6 AS int64_key_2,
  [
    NEW zetasql_test__.KitchenSinkPB.Nested(100 AS nested_int64),
    NEW zetasql_test__.KitchenSinkPB.Nested(200 AS nested_int64),
    NEW zetasql_test__.KitchenSinkPB.Nested(300 AS nested_int64)
  ] AS nested_repeated_value)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
     nested_repeated_value {
       nested_int64: 100
     }
     nested_repeated_value {
       nested_int64: 200
     }
     nested_repeated_value {
       nested_int64: 300
     }
   }}
]
==

[name=null_repeated_message_field]
SELECT NEW zetasql_test__.KitchenSinkPB(
  5 AS int64_key_1,
  6 AS int64_key_2,
  NULL AS nested_repeated_value)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
   }}
]
==

[name=null_within_repeated_message_field]
SELECT NEW zetasql_test__.KitchenSinkPB(
  5 AS int64_key_1,
  6 AS int64_key_2,
  [
    NEW zetasql_test__.KitchenSinkPB.Nested(100 AS nested_int64),
    NULL,
    NEW zetasql_test__.KitchenSinkPB.Nested(300 AS nested_int64)
  ] AS nested_repeated_value)
--
ERROR: generic::out_of_range: Cannot encode a null value Proto<zetasql_test__.KitchenSinkPB.Nested>(NULL) in repeated protocol message field zetasql_test__.KitchenSinkPB.nested_repeated_value
==

[name=valid_with_group]
SELECT NEW zetasql_test__.KitchenSinkPB(
  5 AS int64_key_1,
  6 AS int64_key_2,
  NEW zetasql_test__.KitchenSinkPB.OptionalGroup(
    10 AS int64_val)
  AS optional_group)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
     optional_group {
       int64_val: 10
     }
   }}
]
==

[name=null_required_group_subfield]
SELECT NEW zetasql_test__.KitchenSinkPB(
  5 AS int64_key_1,
  6 AS int64_key_2,
  NEW zetasql_test__.KitchenSinkPB.OptionalGroup(
    NULL AS int64_val)
  AS optional_group)
--
ERROR: generic::out_of_range: Cannot encode a null value Int64(NULL) in required protocol message field zetasql_test__.KitchenSinkPB.OptionalGroup.int64_val
==

[name=null_optional_group_subfield]
SELECT NEW zetasql_test__.KitchenSinkPB(
  5 AS int64_key_1,
  6 AS int64_key_2,
  NEW zetasql_test__.KitchenSinkPB.OptionalGroup(
    10 AS int64_val,
    NULL AS string_val)
  AS optional_group)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
     optional_group {
       int64_val: 10
     }
   }}
]
==

[name=null_group_field]
SELECT NEW zetasql_test__.KitchenSinkPB(
  5 AS int64_key_1,
  6 AS int64_key_2,
  NULL AS optional_group)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
   }}
]
==

[name=valid_with_nested_repeated_group]
SELECT NEW zetasql_test__.KitchenSinkPB(
  5 AS int64_key_1,
  6 AS int64_key_2,
  NEW zetasql_test__.KitchenSinkPB.OptionalGroup(
    10 AS int64_val,
    [
      NEW zetasql_test__.KitchenSinkPB.OptionalGroup.OptionalGroupNested(
        100 AS int64_val),
      NEW zetasql_test__.KitchenSinkPB.OptionalGroup.OptionalGroupNested(
        200 AS int64_val),
      NEW zetasql_test__.KitchenSinkPB.OptionalGroup.OptionalGroupNested(
        300 AS int64_val)
    ] AS OptionalGroupNested)
  AS optional_group)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
     optional_group {
       int64_val: 10
       OptionalGroupNested {
         int64_val: 100
       }
       OptionalGroupNested {
         int64_val: 200
       }
       OptionalGroupNested {
         int64_val: 300
       }
     }
   }}
]
==

[name=null_nested_repeated_group]
SELECT NEW zetasql_test__.KitchenSinkPB(
  5 AS int64_key_1,
  6 AS int64_key_2,
  NEW zetasql_test__.KitchenSinkPB.OptionalGroup(
    10 AS int64_val,
    NULL AS OptionalGroupNested)
  AS optional_group)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
     optional_group {
       int64_val: 10
     }
   }}
]
==

[name=null_within_nested_repeated_group]
SELECT NEW zetasql_test__.KitchenSinkPB(
  5 AS int64_key_1,
  6 AS int64_key_2,
  NEW zetasql_test__.KitchenSinkPB.OptionalGroup(
    10 AS int64_val,
    [
      NEW zetasql_test__.KitchenSinkPB.OptionalGroup.OptionalGroupNested(
        100 AS int64_val),
      NULL,
      NEW zetasql_test__.KitchenSinkPB.OptionalGroup.OptionalGroupNested(
        300 AS int64_val)
    ] AS OptionalGroupNested)
  AS optional_group)
--
ERROR: generic::out_of_range: Cannot encode a null value Proto<zetasql_test__.KitchenSinkPB.OptionalGroup.OptionalGroupNested>(NULL) in repeated protocol message field zetasql_test__.KitchenSinkPB.OptionalGroup.optionalgroupnested
==

[name=int_coercion]
SELECT NEW zetasql_test__.KitchenSinkPB(
    5 AS int64_key_1, CAST(6 AS INT32) AS int64_key_2)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
   }}
]
==

[name=enum_coercion]
SELECT NEW zetasql_test__.KitchenSinkPB(
    5 AS int64_key_1, 6 AS int64_key_2,
    'TESTENUM0' AS test_enum)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
     test_enum: TESTENUM0
   }}
]
==

[name=invalid_enum]
SELECT NEW zetasql_test__.KitchenSinkPB(
    5 AS int64_key_1, 6 AS int64_key_2,
    'NO_SUCH_ENUM' AS test_enum)

--
ERROR: generic::invalid_argument: Could not store value with type STRING into proto field zetasql_test__.KitchenSinkPB.test_enum which has SQL type zetasql_test__.TestEnum [at 3:5]
    'NO_SUCH_ENUM' AS test_enum)
    ^
==
[name=b38310962]
SELECT
  ts,
  ts_proto.timestamp_millis AS ts_millis_roundtrip,
  ts_proto,
  UNIX_MILLIS(ts) ts_unix_millis,
  UNIX_MILLIS(ts_proto.timestamp_millis) ts_unix_millis
FROM (SELECT TIMESTAMP "1890-08-03 01:33:11.634390+00" as ts,
             NEW "zetasql_test__.KitchenSinkPB.NestedDates"(
                 "1890-08-03 01:33:11.634390+00" AS timestamp_millis
             ) AS ts_proto);
--
ARRAY<STRUCT<
        ts TIMESTAMP,
        ts_millis_roundtrip TIMESTAMP,
        ts_proto PROTO<zetasql_test__.KitchenSinkPB.NestedDates>,
        ts_unix_millis INT64,
        ts_unix_millis INT64
      >>
[{
   1890-08-03 01:33:11.634390+00,
   1890-08-03 01:33:11.634+00,
   {timestamp_millis: -2506026408366},
   -2506026408366,
   -2506026408366
 }]
==
[name=date_timestamp_format_negative]
SELECT NEW zetasql_test__.KitchenSinkPB(
    1 AS int64_key_1,
    2 AS int64_key_2,
    ts AS timestamp_micros,
    ts AS timestamp_millis,
    ts AS timestamp_seconds,
    d AS date_default,
    d AS date_decimal)
FROM (SELECT TIMESTAMP "1890-08-03 01:33:11.634390+00" as ts,
             DATE "1890-08-03" as d)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 1
     int64_key_2: 2
     timestamp_seconds: -2506026409
     timestamp_millis: -2506026408366
     timestamp_micros: -2506026408365610
     date_decimal: 18900803
     date_default: -29005
   }}
]
==
[name=date_timestamp_format_positive]
SELECT NEW zetasql_test__.KitchenSinkPB(
    1 AS int64_key_1,
    2 AS int64_key_2,
    ts AS timestamp_micros,
    ts AS timestamp_millis,
    ts AS timestamp_seconds,
    d AS date_default,
    d AS date_decimal)
FROM (SELECT TIMESTAMP "2049-05-30 22:26:48.36561+00:00" as ts,
             DATE "2049-05-30" as d)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 1
     int64_key_2: 2
     timestamp_seconds: 2506026408
     timestamp_millis: 2506026408365
     timestamp_micros: 2506026408365610
     date_decimal: 20490530
     date_default: 29004
   }}
]
==
[name=date_timestamp_format_negative_round]
SELECT NEW zetasql_test__.KitchenSinkPB(
    1 AS int64_key_1,
    2 AS int64_key_2,
    ts AS timestamp_micros,
    ts AS timestamp_millis,
    ts AS timestamp_seconds,
    d AS date_default,
    d AS date_decimal)
FROM (SELECT TIMESTAMP "1890-10-11 19:33:20+00:00" as ts,
             DATE "1890-10-11" as d)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 1
     int64_key_2: 2
     timestamp_seconds: -2500000000
     timestamp_millis: -2500000000000
     timestamp_micros: -2500000000000000
     date_decimal: 18901011
     date_default: -28936
   }}
]
==
[name=date_timestamp_format_positive_round]
SELECT NEW zetasql_test__.KitchenSinkPB(
    1 AS int64_key_1,
    2 AS int64_key_2,
    ts AS timestamp_micros,
    ts AS timestamp_millis,
    ts AS timestamp_seconds,
    d AS date_default,
    d AS date_decimal)
FROM (SELECT TIMESTAMP "2049-03-22 04:26:40+00:00" as ts,
             DATE "2049-03-22" as d)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 1
     int64_key_2: 2
     timestamp_seconds: 2500000000
     timestamp_millis: 2500000000000
     timestamp_micros: 2500000000000000
     date_decimal: 20490322
     date_default: 28935
   }}
]
==
[name=date_timestamp_format_zero]
SELECT NEW zetasql_test__.KitchenSinkPB(
    1 AS int64_key_1,
    2 AS int64_key_2,
    ts AS timestamp_micros,
    ts AS timestamp_millis,
    ts AS timestamp_seconds,
    d AS date_default,
    d AS date_decimal)
FROM (SELECT TIMESTAMP "1970-01-01 00:00:00+00:00" as ts,
             DATE "1970-01-01" as d)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 1
     int64_key_2: 2
     timestamp_seconds: 0
     timestamp_millis: 0
     timestamp_micros: 0
     date_decimal: 19700101
     date_default: 0
   }}
]
==
[name=date_timestamp_format_minus_one]
SELECT NEW zetasql_test__.KitchenSinkPB(
    1 AS int64_key_1,
    2 AS int64_key_2,
    ts AS timestamp_micros,
    ts AS timestamp_millis,
    ts AS timestamp_seconds,
    d AS date_default,
    d AS date_decimal)
FROM (SELECT TIMESTAMP "1969-12-31 23:59:59.999999+00:00" as ts,
             DATE "1969-12-31" as d)
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 1
     int64_key_2: 2
     timestamp_seconds: -1
     timestamp_millis: -1
     timestamp_micros: -1
     date_decimal: 19691231
     date_default: -1
   }}
]
==

[name=map_entry]
SELECT NEW zetasql_test__.MessageWithMapField(
  [NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry("foo" AS key, 123 AS value)] AS string_int32_map
) as pb
--
ARRAY<STRUCT<pb PROTO<zetasql_test__.MessageWithMapField>>>[
  {{
     string_int32_map {
       key: "foo"
       value: 123
     }
   }}
]
==

[name=map_entry_key_null]
[required_features=V_1_3_PROTO_MAPS]
SELECT NEW zetasql_test__.MessageWithMapField(
  [NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry(CAST(NULL AS STRING) AS key, 123 AS value)] AS string_int32_map
) as pb
--
ERROR: generic::out_of_range: Cannot write NULL to key or value of map field in StringInt32MapEntry
==

[name=map_entry_value_null]
[required_features=V_1_3_PROTO_MAPS]
SELECT NEW zetasql_test__.MessageWithMapField(
  [NEW zetasql_test__.MessageWithMapField.StringInt32MapEntry("foo" AS key, CAST(NULL AS INT32) AS value)] AS string_int32_map
) as pb
--
ERROR: generic::out_of_range: Cannot write NULL to key or value of map field in StringInt32MapEntry
==

[name=braced_proto_constructor]
[required_features=V_1_3_BRACED_PROTO_CONSTRUCTORS]
SELECT NEW zetasql_test__.KitchenSinkPB {
  int64_key_1: 1
  int64_key_2: 2
  nested_repeated_value: [{
    nested_int64: 10
    nested_repeated_int64: [100, 200]
  }, {
    nested_int64: 20
    nested_repeated_int64: [300, 400]
  }]
}
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 1
     int64_key_2: 2
     nested_repeated_value {
       nested_int64: 10
       nested_repeated_int64: 100
       nested_repeated_int64: 200
     }
     nested_repeated_value {
       nested_int64: 20
       nested_repeated_int64: 300
       nested_repeated_int64: 400
     }
   }}
]
