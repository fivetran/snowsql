##
## ARRAY_LENGTH queries
##
[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB, zetasql_test__.TestExtraPB, zetasql_test__.KitchenSinkPB.Nested, zetasql_test__.RepeatedHolderPB, zetasql_test__.EmptyMessage, zetasql_test__.MessageWithNulls]
[load_enum_names=zetasql_test__.TestEnum]

[name=array_length_null]
SELECT ARRAY_LENGTH(CAST(NULL AS ARRAY<INT64>))
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=array_length_empty]
SELECT ARRAY_LENGTH(ARRAY<STRING>[])
--
ARRAY<STRUCT<INT64>>[{0}]
==
[name=array_length_1]
SELECT ARRAY_LENGTH(ARRAY<STRING>["foo"])
--
ARRAY<STRUCT<INT64>>[{1}]
==
[name=array_length_2]
SELECT ARRAY_LENGTH(ARRAY<STRING>["foo", NULL])
--
ARRAY<STRUCT<INT64>>[{2}]
==
[name=array_length_many]
SELECT ARRAY_LENGTH(arr)
FROM (SELECT ARRAY<INT64>[1, NULL, 2] arr UNION ALL
      SELECT [3, 4] UNION ALL
      SELECT [5] UNION ALL
      SELECT [NULL] UNION ALL
      SELECT ARRAY<INT64>[] UNION ALL
      SELECT NULL)
--
ARRAY<STRUCT<INT64>>[unknown order:{2}, {1}, {NULL}, {3}, {1}, {0}]
==
[name=array_length_many_2]
SELECT ARRAY_LENGTH(ARRAY(SELECT 1
                          FROM
                            UNNEST([1,2,3,4,5,6,7,8,9,10]),
                            UNNEST(['a','b','c','d','e','f','g','h','i','j']),
                            UNNEST([true, false])))
--
ARRAY<STRUCT<INT64>>[{200}]
==
[name=array_length_parameter]
[parameters=[1,2,3,4,5,6,7,8,9,10] as arr]
SELECT ARRAY_LENGTH(@arr)
--
ARRAY<STRUCT<INT64>>[{10}]
==
[name=array_length_null_parameter]
[parameters=cast(null as ARRAY<INT64>) as arr]
SELECT ARRAY_LENGTH(@arr)
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=array_length_array_concat]
SELECT ARRAY_LENGTH(ARRAY_CONCAT([1, 5], [2, 5, 7], [3, 2], [4]));
--
ARRAY<STRUCT<INT64>>[{8}]
==
[name=array_length_array_concat_operator]
SELECT ARRAY_LENGTH([1, 5] || [2, 5, 7] || [3, 2] || [4]);
--
ARRAY<STRUCT<INT64>>[{8}]
==
##
## OFFSET queries
##
[name=array_offset_negative]
SELECT [10, 11][OFFSET(-1)]
--
ERROR: generic::out_of_range: Array index -1 is out of bounds
==
[name=array_offset_zero]
SELECT [10, 11][OFFSET(0)]
--
ARRAY<STRUCT<INT64>>[{10}]
==
[name=array_offset_basic]
SELECT [10, 11][OFFSET(1)]
--
ARRAY<STRUCT<INT64>>[{11}]
==
[name=array_offset_out_of_range]
SELECT [10, 11][OFFSET(2)]
--
ERROR: generic::out_of_range: Array index 2 is out of bounds
==
[name=array_var_offset]
SELECT arr[OFFSET(0)] ten, arr[OFFSET(1)] eleven
FROM (SELECT [10, 11] arr)
--
ARRAY<STRUCT<ten INT64, eleven INT64>>[{10, 11}]
==
[name=array_var_offset_out_of_range]
SELECT arr[OFFSET(-1)] underflow, arr[OFFSET(0)] ten, arr[OFFSET(1)] eleven, arr[OFFSET(2)] overflow
FROM (SELECT [10, 11] arr)
--
ERROR: generic::out_of_range: Array index -1 is out of bounds
==
[name=array_var_offset_var]
SELECT arr[OFFSET(pos)]
FROM (SELECT ARRAY(SELECT "foo" UNION ALL SELECT "bar") arr),
     (SELECT 0 pos UNION ALL SELECT 1)
--
ARRAY<STRUCT<STRING>>[unknown order:{"foo"}, {"bar"}]

NOTE: Reference implementation reports non-determinism.
==
[name=array_var_offset_var_out_of_range]
SELECT arr[OFFSET(pos)]
FROM (SELECT ARRAY(SELECT "foo" UNION ALL SELECT "bar") arr),
     (SELECT -1 pos UNION ALL SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2)
--
ERROR: generic::out_of_range: Array index 2 is out of bounds
==
[name=at_offset_null_position_and_array_return_null]
SELECT arr[OFFSET(pos)]
FROM (SELECT [1,2,3] arr UNION ALL SELECT NULL), (SELECT NULL pos)
--
ARRAY<STRUCT<INT64>>[unknown order:{NULL}, {NULL}]
==
[name=at_offset_negative_offset_null_array_fails]
SELECT arr[OFFSET(pos)]
FROM (SELECT [1,2,3] arr UNION ALL SELECT NULL), (SELECT -1 pos)
WHERE arr IS NULL
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=at_offset_position_in_null_array_returns_null]
SELECT arr[OFFSET(pos)]
FROM (SELECT [1,2,3] arr UNION ALL SELECT NULL),
     (SELECT 0 pos UNION ALL SELECT 1 UNION ALL SELECT 2)
--
ARRAY<STRUCT<INT64>>[unknown order:{NULL}, {2}, {3}, {NULL}, {NULL}, {1}]
==
[name=array_at_offset_null_position_and_array_return_null]
SELECT arr[OFFSET(pos)]
FROM (SELECT [1,2,3] arr UNION ALL SELECT NULL), (SELECT NULL pos)
--
ARRAY<STRUCT<INT64>>[unknown order:{NULL}, {NULL}]
==
[name=array_at_offset_negative_offset_null_array_fails]
SELECT arr[offset(pos)]
FROM (SELECT [1,2,3] arr UNION ALL SELECT NULL), (SELECT -1 pos)
WHERE arr IS NULL
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=array_at_offset_position_in_null_array_returns_null]
SELECT arr[offset(pos)]
FROM (SELECT [1,2,3] arr UNION ALL SELECT NULL),
     (SELECT 0 pos UNION ALL SELECT 1 UNION ALL SELECT 2)
--
ARRAY<STRUCT<INT64>>[unknown order:{NULL}, {2}, {3}, {NULL}, {NULL}, {1}]
==
[name=array_param_offset_from_param]
[parameters=[10, 11, 12] as arr, 0 as off]
SELECT @arr[OFFSET(@off)]
--
ARRAY<STRUCT<INT64>>[{10}]
==
[name=array_param_offset_from_param_out_of_range]
[parameters=[10, 11, 12] as arr, 3 as off]
SELECT @arr[OFFSET(@off)]
--
ERROR: generic::out_of_range: Array index 3 is out of bounds
==
[name=array_offset_with_various_integer_types]
[parameters=[10, 11, 12] as arr,
            CAST(0 AS INT32) as off32,
            CAST(1 AS UINT32) as offu32,
            CAST(2 AS INT64) as off64]
SELECT @arr[OFFSET(@off32)], @arr[OFFSET(@offu32)], @arr[OFFSET(@off64)]
--
ARRAY<STRUCT<INT64, INT64, INT64>>[{10, 11, 12}]
==
##
## ORDINAL queries
##
[name=array_at_ordinal_zero]
SELECT [1,2,3][ORDINAL(0)]
--
ERROR: generic::out_of_range: Array index 0 is out of bounds
==
[name=array_at_ordinal_negative]
SELECT [1,2,3][ORDINAL(-1)]
--
ERROR: generic::out_of_range: Array index -1 is out of bounds
==
[name=array_at_ordinal_1_non_empty_array]
SELECT ["foo", "bar"][ORDINAL(1)]
--
ARRAY<STRUCT<STRING>>[{"foo"}]
==
[name=array_at_ordinal_array_size]
SELECT ["foo", "bar"][ORDINAL(2)]
--
ARRAY<STRUCT<STRING>>[{"bar"}]
==
[name=array_at_ordinal_exceeds_size]
SELECT ["foo"][ORDINAL(2)]
--
ERROR: generic::out_of_range: Array index 2 is out of bounds
==
[name=array_at_ordinal_1_empty_array]
SELECT ARRAY<INT32>[][ORDINAL(1)]
--
ERROR: generic::out_of_range: Array index 1 is out of bounds
==
[name=array_at_ordinal_1_null_array]
SELECT arr[ORDINAL(1)] FROM (
SELECT arr FROM (SELECT [1] arr UNION ALL SELECT NULL) WHERE arr IS NULL)
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=array_at_ordinal_null]
SELECT [1, 2][ORDINAL(NULL)]
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=array_at_ordinal_0_null_array]
SELECT arr[ORDINAL(0)] FROM (
SELECT arr FROM (SELECT [1] arr UNION ALL SELECT NULL) WHERE arr IS NULL)
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=array_at_ordinal_1_array_of_nulls]
SELECT ARRAY<BOOL>[NULL][ORDINAL(1)]
--
ARRAY<STRUCT<BOOL>>[{NULL}]
==
[name=array_param_ordinal_from_param_out_of_range]
[parameters=[10, 11, 12] as arr, 0 as ord]
SELECT @arr[ORDINAL(@ord)]
--
ERROR: generic::out_of_range: Array index 0 is out of bounds
==
[name=array_param_null_ordinal]
[parameters=cast(NULL as ARRAY<INT64>) as arr, 1 as ord]
SELECT @arr[ORDINAL(@ord)]
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=array_param_ordinal_null]
[parameters=[10, 11, 12] as arr, cast(NULL as INT64) as ord]
SELECT @arr[ORDINAL(@ord)]
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
##
## SAFE_OFFSET and SAFE_ORDINAL queries
##
[name=array_at_safe_offset_negative]
SELECT [1,2,3][SAFE_OFFSET(-1)]
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=array_at_safe_offset_valid]
SELECT [1,2,3][SAFE_OFFSET(1)]
--
ARRAY<STRUCT<INT64>>[{2}]
==
[name=array_at_safe_ordinal_zero]
SELECT [1,2,3][SAFE_ORDINAL(0)]
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=array_at_safe_ordinal_valid]
SELECT [1,2,3][SAFE_ORDINAL(1)]
--
ARRAY<STRUCT<INT64>>[{1}]
==
[name=array_at_safe_offset_out_of_range]
SELECT
  arr[SAFE_OFFSET(2)] AS x,
  arr[SAFE_OFFSET(-1)] AS y,
  arr[SAFE_OFFSET(4)] AS z
FROM (SELECT [1, 2, 3, 4] AS arr)
--
ARRAY<STRUCT<x INT64, y INT64, z INT64>>[{3, NULL, NULL}]
==
[name=array_at_safe_ordinal_out_of_range]
SELECT
  arr[SAFE_ORDINAL(3)] AS x,
  arr[SAFE_ORDINAL(0)] AS y,
  arr[SAFE_ORDINAL(5)] AS z
FROM (SELECT [1, 2, 3, 4] AS arr)
--
ARRAY<STRUCT<x INT64, y INT64, z INT64>>[{3, NULL, NULL}]
==
[name=array_at_negative_safe_offset_null_array]
SELECT arr[SAFE_OFFSET(-1)] FROM (SELECT CAST(NULL AS ARRAY<INT64>) AS arr)
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=array_at_zero_safe_ordinal_null_array]
SELECT arr[SAFE_ORDINAL(0)] FROM (SELECT CAST(NULL AS ARRAY<INT64>) AS arr)
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
##
## ARRAY_CONCAT queries for different types
##
[name=array_concat_int32]
SELECT ARRAY_CONCAT(ARRAY<INT32>[1], ARRAY<INT32>[2])
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT32>[known order:1, 2]}]
==
[name=array_concat_operator_int32]
SELECT ARRAY<INT32>[1] || ARRAY<INT32>[2]
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT32>[known order:1, 2]}]
==
[name=array_concat_uint32]
SELECT ARRAY_CONCAT(ARRAY<UINT32>[1], ARRAY<UINT32>[2])
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT32>[known order:1, 2]}]
==
[name=array_concat_operator_uint32]
SELECT ARRAY<UINT32>[1] || ARRAY<UINT32>[2]
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT32>[known order:1, 2]}]
==
[name=array_concat_int64]
SELECT ARRAY_CONCAT(ARRAY<INT64>[1], ARRAY<INT64>[2])
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[known order:1, 2]}]
==
[name=array_concat_operator_int64]
SELECT ARRAY<INT64>[1] || ARRAY<INT64>[2]
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[known order:1, 2]}]
==
[name=array_concat_uint64]
SELECT ARRAY_CONCAT(ARRAY<UINT64>[1], ARRAY<UINT64>[2])
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT64>[known order:1, 2]}]
==
[name=array_concat_operator_uint64]
SELECT ARRAY<UINT64>[1] || ARRAY<UINT64>[2]
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT64>[known order:1, 2]}]
==
[name=array_concat_float]
SELECT ARRAY_CONCAT(ARRAY<FLOAT>[1.1], ARRAY<FLOAT>[2.2])
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<FLOAT>[known order:1.1, 2.2]}]
==
[name=array_concat_operator_float]
SELECT ARRAY<FLOAT>[1.1] || ARRAY<FLOAT>[2.2]
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<FLOAT>[known order:1.1, 2.2]}]
==
[name=array_concat_double]
SELECT ARRAY_CONCAT(ARRAY<DOUBLE>[1.1], ARRAY<DOUBLE>[2.2])
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DOUBLE>[known order:1.1, 2.2]}]
==
[name=array_concat_operator_double]
SELECT ARRAY<DOUBLE>[1.1] || ARRAY<DOUBLE>[2.2]
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DOUBLE>[known order:1.1, 2.2]}]
==
[name=array_concat_bool]
SELECT ARRAY_CONCAT(ARRAY<BOOL>[true], ARRAY<BOOL>[false])
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BOOL>[known order:true, false]}]
==
[name=array_concat_operator_bool]
SELECT ARRAY<BOOL>[true] || ARRAY<BOOL>[false]
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BOOL>[known order:true, false]}]
==
[name=array_concat_string]
SELECT ARRAY_CONCAT(ARRAY<STRING>['a'], ARRAY<STRING>['b'])
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>[known order:"a", "b"]}]
==
[name=array_concat_operator_string]
SELECT ARRAY<STRING>['a'] || ARRAY<STRING>['b']
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>[known order:"a", "b"]}]
==
[name=array_concat_bytes]
SELECT ARRAY_CONCAT(ARRAY<BYTES>[b"f1"], ARRAY<BYTES>[b"f2"])
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BYTES>[known order:b"f1", b"f2"]}]
==
[name=array_concat_operator_bytes]
SELECT ARRAY<BYTES>[b"f1"] || ARRAY<BYTES>[b"f2"]
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BYTES>[known order:b"f1", b"f2"]}]
==
[name=array_concat_date]
SELECT ARRAY_CONCAT(ARRAY<DATE>['2000-01-01'], ARRAY<DATE>['2015-12-30'])
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DATE>[known order:2000-01-01, 2015-12-30]}]
==
[name=array_concat_operator_date]
SELECT ARRAY<DATE>['2000-01-01'] || ARRAY<DATE>['2015-12-30']
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DATE>[known order:2000-01-01, 2015-12-30]}]
==
[name=array_concat_timestamp]
SELECT ARRAY_CONCAT(ARRAY<TIMESTAMP>['2013-02-01 12:34:56.789012'],
                    ARRAY<TIMESTAMP>['2014-09-11 01:01:01.001001 UTC'])
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<TIMESTAMP>[known order:
     2013-02-01 20:34:56.789012+00,
     2014-09-11 01:01:01.001001+00
   ]}
]
==
[name=array_concat_operator_timestamp]
SELECT ARRAY<TIMESTAMP>['2013-02-01 12:34:56.789012'] ||
       ARRAY<TIMESTAMP>['2014-09-11 01:01:01.001001 UTC']
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<TIMESTAMP>[known order:
     2013-02-01 20:34:56.789012+00,
     2014-09-11 01:01:01.001001+00
   ]}
]
==
[name=array_concat_enum]
SELECT ARRAY_CONCAT(ARRAY<zetasql_test__.TestEnum>['TESTENUM0'],
       ARRAY<zetasql_test__.TestEnum>['TESTENUM1']);
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[known order:TESTENUM0, TESTENUM1]}
]
==
[name=array_concat_operator_enum]
SELECT ARRAY<zetasql_test__.TestEnum>['TESTENUM0'] ||
       ARRAY<zetasql_test__.TestEnum>['TESTENUM1'];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[known order:TESTENUM0, TESTENUM1]}
]
==
[name=array_concat_struct]
SELECT ARRAY_CONCAT(ARRAY[STRUCT(1 as i)], ARRAY[STRUCT(2 as i)])
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRUCT<i INT64>>[known order:{1}, {2}]}]
==
[name=array_concat_operator_struct]
SELECT ARRAY[STRUCT(1 as i)] || ARRAY[STRUCT(2 as i)]
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRUCT<i INT64>>[known order:{1}, {2}]}]
==
[name=array_concat_proto]
SELECT ARRAY_CONCAT(ARRAY<"zetasql_test__.KitchenSinkPB">[
  '''
    int64_key_1: 11
    int64_key_2: 12
  '''], ARRAY<"zetasql_test__.KitchenSinkPB">[
  '''
    int64_key_1: 21
    int64_key_2: 22
  '''])
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
     {
       int64_key_1: 11
       int64_key_2: 12
     },
     {
       int64_key_1: 21
       int64_key_2: 22
     }
   ]}
]


==
[name=array_concat_operator_proto]
SELECT ARRAY<"zetasql_test__.KitchenSinkPB">[
  '''
    int64_key_1: 11
    int64_key_2: 12
  '''] || ARRAY<"zetasql_test__.KitchenSinkPB">[
  '''
    int64_key_1: 21
    int64_key_2: 22
  ''']
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
     {
       int64_key_1: 11
       int64_key_2: 12
     },
     {
       int64_key_1: 21
       int64_key_2: 22
     }
   ]}
]
==
[name=generate_array_no_step]
SELECT
  GENERATE_ARRAY(1, 5),
  GENERATE_ARRAY(CAST(6 AS UINT64), CAST(10 AS UINT64)),
  GENERATE_ARRAY(1.59, 3.14)
--
ARRAY<STRUCT<ARRAY<>, ARRAY<>, ARRAY<>>>[
  {
    ARRAY<INT64>[known order:1, 2, 3, 4, 5],
    ARRAY<UINT64>[known order:6, 7, 8, 9, 10],
    ARRAY<DOUBLE>[known order:1.59, 2.59]
  }
]

==
[name=generate_array_literal_zero_step]
SELECT
  GENERATE_ARRAY(1, 5, 0)
--
ERROR: generic::out_of_range: Sequence step cannot be 0.

==
[name=generate_array_parameterized_zero_step]
[parameters=0 as step]
SELECT
  GENERATE_ARRAY(1, 5, @step)
--
ERROR: generic::out_of_range: Sequence step cannot be 0.

==
# b/31553405
[name=generate_date_array_no_step]
SELECT GENERATE_DATE_ARRAY('2016-09-28', '2016-10-06')
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<DATE>[known order:
     2016-09-28,
     2016-09-29,
     2016-09-30,
     2016-10-01,
     2016-10-02,
     2016-10-03,
     2016-10-04,
     2016-10-05,
     2016-10-06
   ]}
]

==
[name=generate_date_array_literal_zero_step]
SELECT GENERATE_DATE_ARRAY('2016-01-01', '2017-01-01', INTERVAL 0 DAY)
--
ERROR: generic::out_of_range: Sequence step cannot be 0.

==
[name=generate_date_array_parameterized_zero_step]
[parameters=0 as step]
SELECT GENERATE_DATE_ARRAY('2016-01-01', '2017-01-01', INTERVAL @step DAY)
--
ERROR: generic::out_of_range: Sequence step cannot be 0.

==
# b/152971237
[name=generate_date_array_by_row]
SELECT GENERATE_DATE_ARRAY(start_day, end_day, INTERVAL days_step DAY)
FROM UNNEST(ARRAY<STRUCT<start_day DATE, end_day DATE, days_step INT64>>
            [('2020-03-01', '2020-03-10', 4),
             ('2020-03-11', '2020-03-20', 3),
             ('2020-03-21', '2020-03-30', 2),
             ('2020-03-31', '2020-03-31', 1)]) as elem WITH OFFSET
ORDER BY offset
--
ARRAY<STRUCT<ARRAY<>>>[known order:
  {ARRAY<DATE>[known order:2020-03-01, 2020-03-05, 2020-03-09]},
  {ARRAY<DATE>[known order:2020-03-11, 2020-03-14, 2020-03-17, 2020-03-20]},
  {ARRAY<DATE>[known order:
     2020-03-21,
     2020-03-23,
     2020-03-25,
     2020-03-27,
     2020-03-29
   ]},
  {ARRAY<DATE>[2020-03-31]}
]
==
[name=generate_timestamp_array_literal_zero_step]
SELECT GENERATE_TIMESTAMP_ARRAY('2016-01-01', '2017-01-01', INTERVAL 0 DAY)
--
ERROR: generic::out_of_range: Sequence step cannot be 0.

==
[name=generate_timestamp_array_parameterized_zero_step]
[parameters=0 as step]
SELECT GENERATE_TIMESTAMP_ARRAY('2016-01-01', '2017-01-01', INTERVAL @step DAY)
--
ERROR: generic::out_of_range: Sequence step cannot be 0.

==
[name=concat_op_wrong_type_int_int]
[required_features=V_1_3_CONCAT_MIXED_TYPES]
SELECT 1 || 2
--
ARRAY<STRUCT<STRING>>[{"12"}]
==
[name=concat_op_wrong_type_string_int]
[required_features=V_1_3_CONCAT_MIXED_TYPES]
SELECT "abc" || 2
--
ARRAY<STRUCT<STRING>>[{"abc2"}]
==
[name=array_is_distinct_untyped_null_array]
SELECT ARRAY_IS_DISTINCT(NULL)
--
ARRAY<STRUCT<BOOL>>[{NULL}]
==
[name=array_is_distinct_array_of_untyped_null]
SELECT ARRAY_IS_DISTINCT([NULL])
--
ARRAY<STRUCT<BOOL>>[{true}]
==
[name=array_is_distinct_array_of_two_untyped_nulls]
SELECT ARRAY_IS_DISTINCT([NULL, NULL])
--
ARRAY<STRUCT<BOOL>>[{false}]
==
[name=array_is_distinct_array_of_untyped_null_and_int]
SELECT ARRAY_IS_DISTINCT([NULL, 1])
--
ARRAY<STRUCT<BOOL>>[{true}]
==
[name=array_is_distinct_repeated_float]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT ARRAY_IS_DISTINCT([1.0, 1.0])
--
ARRAY<STRUCT<BOOL>>[{false}]
==
[name=array_is_distinct_different_structs]
[required_features=V_1_2_GROUP_BY_STRUCT]
SELECT ARRAY_IS_DISTINCT([STRUCT(1), STRUCT(2)])
--
ARRAY<STRUCT<BOOL>>[{true}]
==
[name=array_is_distinct_repeated_struct]
[required_features=V_1_2_GROUP_BY_STRUCT]
SELECT ARRAY_IS_DISTINCT([STRUCT(1), STRUCT(1)])
--
ARRAY<STRUCT<BOOL>>[{false}]
==
[name=array_is_distinct_floating_point_struct]
[required_features=V_1_2_GROUP_BY_STRUCT]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT ARRAY_IS_DISTINCT([STRUCT(1.0), STRUCT(1.0)])
--
ARRAY<STRUCT<BOOL>>[{false}]
==
[required_features=BIGNUMERIC_TYPE]
[name=array_concat_bignumeric]
SELECT ARRAY_CONCAT([BIGNUMERIC '1', BIGNUMERIC '1e38'], [BIGNUMERIC '-0.00001'])
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<BIGNUMERIC>[known order:
     1,
     100000000000000000000000000000000000000,
     -0.00001
   ]}
]
==
[name=array_first_subquery_unordered]
WITH t AS (SELECT value FROM UNNEST([1, 2, 3, 4]) AS value)
SELECT ARRAY_FIRST(ARRAY(SELECT value FROM t)) IN (1, 2, 3, 4);
--
ARRAY<STRUCT<BOOL>>[{true}]

NOTE: Reference implementation reports non-determinism.

==
[name=array_first_subquery_ordered]
WITH t AS (SELECT value FROM UNNEST([1, 2, 3, 4]) AS value)
SELECT ARRAY_FIRST(ARRAY(SELECT value FROM t ORDER BY value));
--
ARRAY<STRUCT<INT64>>[{1}]

==
[name=array_first_empty_subquery_arg]
WITH t AS (SELECT value FROM UNNEST([1, 2, 3, 4]) AS value)
SELECT ARRAY_FIRST(ARRAY(SELECT value FROM t WHERE FALSE));
--
ERROR: generic::out_of_range: ARRAY_FIRST cannot get the first element of an empty array

==
[name=array_last_empty_subquery_arg]
WITH t AS (SELECT value FROM UNNEST([1, 2, 3, 4]) AS value)
SELECT ARRAY_LAST(ARRAY(SELECT value FROM t WHERE FALSE));
--
ERROR: generic::out_of_range: ARRAY_LAST cannot get the last element of an empty array

==
[name=safe_array_first_empty_subquery_arg]
[required_features=V_1_2_SAFE_FUNCTION_CALL]
WITH t AS (SELECT value FROM UNNEST([1, 2, 3, 4]) AS value)
SELECT SAFE.ARRAY_FIRST(ARRAY(SELECT value FROM t WHERE FALSE));
--
ARRAY<STRUCT<INT64>>[{NULL}]

==
[name=safe_array_last_empty_subquery_arg]
[required_features=V_1_2_SAFE_FUNCTION_CALL]
WITH t AS (SELECT value FROM UNNEST([1, 2, 3, 4]) AS value)
SELECT SAFE.ARRAY_LAST(ARRAY(SELECT value FROM t WHERE FALSE));
--
ARRAY<STRUCT<INT64>>[{NULL}]
==
[name=array_avg_intervals_1]
[required_features=INTERVAL_TYPE,V_1_4_ARRAY_AGGREGATION_FUNCTIONS]
[forbidden_features=TIMESTAMP_NANOS]
SELECT ARRAY_AVG(ARRAY< INTERVAL >[INTERVAL "-7959-1 -153930 54938167:22:41.712081" YEAR TO SECOND,
          INTERVAL "8630-9 3512412 62113018:54:19.721996" YEAR TO SECOND, INTERVAL "675-8 -224302 -58850294:15:14.439522" YEAR TO SECOND,
          INTERVAL "2580-1 -200995 40403849:16:44.554610" YEAR TO SECOND])
--
ARRAY<STRUCT<INTERVAL>>[{981-10 733303 24651203:19:37.887291}]
==
[name=array_avg_intervals_1_nanos]
[required_features=INTERVAL_TYPE,V_1_4_ARRAY_AGGREGATION_FUNCTIONS,TIMESTAMP_NANOS]
SELECT ARRAY_AVG(ARRAY< INTERVAL >[INTERVAL "-7959-1 -153930 54938167:22:41.712081" YEAR TO SECOND,
          INTERVAL "8630-9 3512412 62113018:54:19.721996" YEAR TO SECOND, INTERVAL "675-8 -224302 -58850294:15:14.439522" YEAR TO SECOND,
          INTERVAL "2580-1 -200995 40403849:16:44.554610" YEAR TO SECOND])
--
ARRAY<STRUCT<INTERVAL>>[{981-10 733303 24651203:19:37.887291250}]
==
[name=array_avg_intervals_2]
[required_features=INTERVAL_TYPE,V_1_1_HAVING_IN_AGGREGATE,V_1_4_ARRAY_AGGREGATION_FUNCTIONS]
SELECT ARRAY_CONCAT_AGG(arr
          HAVING MIN ARRAY_AVG(ARRAY< INTERVAL >[INTERVAL "-7959-1 -153930 54938167:22:41.712081" YEAR TO SECOND,
            INTERVAL "8630-9 3512412 62113018:54:19.721996" YEAR TO SECOND,
            INTERVAL "675-8 -224302 -58850294:15:14.439522" YEAR TO SECOND,
            INTERVAL "2580-1 -200995 40403849:16:44.554610" YEAR TO SECOND])
       )
FROM (
  SELECT [INTERVAL "8630-9 3512412 62113018:54:19.721996" YEAR TO SECOND] AS arr
  UNION ALL
  SELECT [INTERVAL "675-8 -224302 -58850294:15:14.439522" YEAR TO SECOND] AS arr
) interval_arrays
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<INTERVAL>[unknown order:
     675-8 -224302 -58850294:15:14.439522,
     8630-9 3512412 62113018:54:19.721996
   ]}
]
==

[name=regression_repro_b287339825]
SELECT ARRAY_SLICE([1, 2], -8869911617074265235, -4)
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[]}]
