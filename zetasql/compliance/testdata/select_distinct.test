#
# Create tables
#
[load_proto_files=zetasql/testdata/test_schema.proto]
[load_enum_names=zetasql_test__.TestEnum]

[prepare_database]
CREATE TABLE TableDistincts AS
SELECT cast(1 as int64) as primary_key,
       cast(1 as int64) as distinct_1, cast(1 as int64) as distinct_2,
       cast(1 as int64) as distinct_4, cast(1 as int64) as distinct_8,
       cast(1 as int64) as distinct_16, cast(1 as int64) as distinct_2B,
       cast(1 as int64) as distinct_4B UNION ALL
  SELECT 2, 1, 2, 2, 2, 2, 1, 1 UNION ALL
  SELECT 3, 1, 1, 3, 3, 3,  1, 1 UNION ALL
  SELECT 4, 1, 2, 4, 4, 4,  1, 1 UNION ALL
  SELECT 5, 1, 1, 1, 5, 5,  1, 2 UNION ALL
  SELECT 6, 1, 2, 2, 6, 6,  1, 2 UNION ALL
  SELECT 7, 1, 1, 3, 7, 7,  1, 2 UNION ALL
  SELECT 8, 1, 2, 4, 8, 8,  1, 2 UNION ALL
  SELECT 9, 1, 1, 1, 1, 9,  2, 3 UNION ALL
  SELECT 10, 1, 2, 2, 2, 10, 2, 3 UNION ALL
  SELECT 11, 1, 1, 3, 3, 11, 2, 3 UNION ALL
  SELECT 12, 1, 2, 4, 4, 12, 2, 3 UNION ALL
  SELECT 13, 1, 1, 1, 5, 13, 2, 4 UNION ALL
  SELECT 14, 1, 2, 2, 6, 14, 2, 4 UNION ALL
  SELECT 15, 1, 1, 3, 7, 15, 2, 4 UNION ALL
  SELECT 16, 1, 2, 4, 8, 16, 2, 4
--
ARRAY<STRUCT<primary_key INT64,
             distinct_1 INT64,
             distinct_2 INT64,
             distinct_4 INT64,
             distinct_8 INT64,
             distinct_16 INT64,
             distinct_2B INT64,
             distinct_4B INT64>>
[
  {1, 1, 1, 1, 1, 1, 1, 1},
  {2, 1, 2, 2, 2, 2, 1, 1},
  {3, 1, 1, 3, 3, 3, 1, 1},
  {4, 1, 2, 4, 4, 4, 1, 1},
  {5, 1, 1, 1, 5, 5, 1, 2},
  {6, 1, 2, 2, 6, 6, 1, 2},
  {7, 1, 1, 3, 7, 7, 1, 2},
  {8, 1, 2, 4, 8, 8, 1, 2},
  {9, 1, 1, 1, 1, 9, 2, 3},
  {10, 1, 2, 2, 2, 10, 2, 3},
  {11, 1, 1, 3, 3, 11, 2, 3},
  {12, 1, 2, 4, 4, 12, 2, 3},
  {13, 1, 1, 1, 5, 13, 2, 4},
  {14, 1, 2, 2, 6, 14, 2, 4},
  {15, 1, 1, 3, 7, 15, 2, 4},
  {16, 1, 2, 4, 8, 16, 2, 4}
]
==
[prepare_database]
CREATE TABLE TableAllNull AS
SELECT cast(1 as int64) as primary_key,
       cast(null as int32) as int32_val, cast(null as int64) as int64_val,
       cast(null as uint32) as uint32_val, cast(null as uint64) as uint64_val,
       cast(null as bool) as bool_val,
       cast(null as float) as float_val, cast(null as double) as double_val,
       cast(null as string) as string_val, cast(null as bytes) as bytes_val,
       cast(null as date) as date_val union all
SELECT cast(2 as int64), cast(null as int32), cast(null as int64),
       cast(null as uint32), cast(null as uint64), cast(null as bool),
       cast(null as float), cast(null as double), cast(null as string),
       cast(null as bytes), cast(null as date)
--
ARRAY<STRUCT<primary_key INT64,
             int32_val INT32,
             int64_val INT64,
             uint32_val UINT32,
             uint64_val UINT64,
             bool_val BOOL,
             float_val FLOAT,
             double_val DOUBLE,
             string_val STRING,
             bytes_val BYTES,
             date_val DATE>>
[
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}
]
==
[prepare_database]
CREATE TABLE TableLarge AS
SELECT cast(1 as int64) as primary_key,
       cast(null as bool) as bool_val, cast(null as double) as double_val,
       cast(null as int64) as int64_val,
       cast(null as string) as str_val UNION ALL
  SELECT 2, true,  null, null, null UNION ALL
  SELECT 3, false, 0.2,  null, null UNION ALL
  SELECT 4, true,  0.3,  3,    null UNION ALL
  SELECT 5, false, 0.4,  4,     "4" UNION ALL
  SELECT 6, true,  0.5,  5,     "5" UNION ALL
  SELECT 7, false, 0.6,  6,     "6" UNION ALL
  SELECT 8, true,  0.7,  7,     "7" UNION ALL
  SELECT 9, false, 0.8,  8,     "8" UNION ALL
  SELECT 10, true,  0.9,  9,     "9" UNION ALL
  SELECT 11, false, 1.0, 10,    "10"
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {1, NULL, NULL, NULL, NULL},
  {2, true, NULL, NULL, NULL},
  {3, false, 0.2, NULL, NULL},
  {4, true, 0.3, 3, NULL},
  {5, false, 0.4, 4, "4"},
  {6, true, 0.5, 5, "5"},
  {7, false, 0.6, 6, "6"},
  {8, true, 0.7, 7, "7"},
  {9, false, 0.8, 8, "8"},
  {10, true, 0.9, 9, "9"},
  {11, false, 1, 10, "10"}
]
==

# -------------------
# Distinct values.
# -------------------
[name=distinct_1]
SELECT DISTINCT distinct_1 from TableDistincts
--
ARRAY<STRUCT<distinct_1 INT64>>[{1}]
==

[name=distinct_2]
SELECT DISTINCT distinct_2 from TableDistincts
--
ARRAY<STRUCT<distinct_2 INT64>>[unknown order:{1}, {2}]
==

[name=distinct_16]
SELECT DISTINCT distinct_16 from TableDistincts
--
ARRAY<STRUCT<distinct_16 INT64>>[unknown order:
  {1},
  {2},
  {3},
  {4},
  {5},
  {6},
  {7},
  {8},
  {9},
  {10},
  {11},
  {12},
  {13},
  {14},
  {15},
  {16}
]
==

[name=distinct_4B]
SELECT DISTINCT distinct_4B from TableDistincts
--
ARRAY<STRUCT<distinct_4B INT64>>[unknown order:{1}, {2}, {3}, {4}]
==

[name=column_with_multiple_null_and_non_null_values]
SELECT DISTINCT int64_val from TableLarge
--
ARRAY<STRUCT<int64_val INT64>>[unknown order:
  {NULL},
  {3},
  {4},
  {5},
  {6},
  {7},
  {8},
  {9},
  {10}
]
==

[name=distinct_empty]
SELECT DISTINCT * from UNNEST(ARRAY<int64>[])
--
ARRAY<STRUCT<INT64>>[]
==

[name=distinct_where]
SELECT DISTINCT distinct_4B
from TableDistincts
where distinct_4B IN (1, 4)
--
ARRAY<STRUCT<distinct_4B INT64>>[unknown order:{1}, {4}]
==

# ----------------
# Count rows after SELECT DISTINCT.
# ---------------
[name=count_distinct_1]
SELECT COUNT(*)
from (SELECT DISTINCT distinct_1 from TableDistincts)
--
ARRAY<STRUCT<INT64>>[{1}]
==

[name=count_distinct_2]
SELECT COUNT(*)
from (SELECT DISTINCT distinct_2 from TableDistincts)
--
ARRAY<STRUCT<INT64>>[{2}]
==

[name=count_distinct_4]
SELECT COUNT(*)
from (SELECT DISTINCT distinct_4 from TableDistincts)
--
ARRAY<STRUCT<INT64>>[{4}]
==

[name=count_distinct_8]
SELECT COUNT(*)
from (SELECT DISTINCT distinct_8 from TableDistincts)
--
ARRAY<STRUCT<INT64>>[{8}]
==

[name=count_distinct_16]
SELECT COUNT(*)
from (SELECT DISTINCT distinct_16 from TableDistincts)
--
ARRAY<STRUCT<INT64>>[{16}]
==

[name=count_distinct_2B]
SELECT COUNT(*)
from (SELECT DISTINCT distinct_2B from TableDistincts)
--
ARRAY<STRUCT<INT64>>[{2}]
==

[name=count_distinct_4B]
SELECT COUNT(*)
from (SELECT DISTINCT distinct_4B from TableDistincts)
--
ARRAY<STRUCT<INT64>>[{4}]
==

[name=count_distinct_1_distinct_4_distinct_16]
SELECT COUNT(*)
from (SELECT DISTINCT distinct_1, distinct_4, distinct_16 from TableDistincts)
--
ARRAY<STRUCT<INT64>>[{16}]
==

[name=count_distinct_8_distinct_2B]
SELECT COUNT(*)
from (SELECT DISTINCT distinct_8, distinct_2B from TableDistincts)
--
ARRAY<STRUCT<INT64>>[{16}]
==

[name=count_distinct_4_distinct_4B]
SELECT COUNT(*)
FROM (SELECT DISTINCT distinct_4, distinct_4B from TableDistincts)
--
ARRAY<STRUCT<INT64>>[{16}]
==

[name=count_distinct_4B_distinct_16]
SELECT COUNT(*)
from (SELECT DISTINCT distinct_4B, distinct_16 from TableDistincts)
--
ARRAY<STRUCT<INT64>>[{16}]
==

# Distinct values counts the same even when the columns are out of order.
[name=count_distint_16_distinct_4B]
SELECT COUNT(*)
from (SELECT DISTINCT distinct_16, distinct_4B from TableDistincts)
--
ARRAY<STRUCT<INT64>>[{16}]
==

# ------
# NULLs.
# ------
[name=null_of_supported_types]
SELECT DISTINCT
  int32_val, int64_val, uint32_val, uint64_val,
  bool_val,
  string_val, bytes_val,
  date_val
from TableAllNull
--
ARRAY<STRUCT<int32_val INT32,
             int64_val INT64,
             uint32_val UINT32,
             uint64_val UINT64,
             bool_val BOOL,
             string_val STRING,
             bytes_val BYTES,
             date_val DATE>>[{NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}]
==

[name=null_of_supported_float_types]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT DISTINCT
  float_val, double_val
from TableAllNull
--
ARRAY<STRUCT<float_val FLOAT, double_val DOUBLE>>[{NULL, NULL}]

NOTE: Reference implementation reports non-determinism.
==


[name=null_enum]
SELECT DISTINCT val.NULL_ENUM
from (select cast(NULL as "zetasql_test__.TestEnum") NULL_ENUM union all
      select cast(NULL as "zetasql_test__.TestEnum")) val
--
ARRAY<STRUCT<NULL_ENUM ENUM<zetasql_test__.TestEnum>>>[{NULL}]
==

# ------------------------------
# Distinct supported data types.
# ------------------------------
[name=distinct_int32]
SELECT DISTINCT val.INT32
from (select cast(1 as int32) INT32 union all
      select cast(NULL as int32) union all
      select cast(-1 as int32) union all
      select cast(1 as int32) union all
      select cast(NULL as int32)) val
--
ARRAY<STRUCT<INT32 INT32>>[unknown order:{NULL}, {-1}, {1}]
==

[name=distinct_int64]
SELECT DISTINCT val.INT64
from (select cast(1 as int64) INT64 union all
      select cast(NULL as int64) union all
      select cast(-1 as int64) union all
      select cast(1 as int64) union all
      select cast(NULL as int64)) val
--
ARRAY<STRUCT<INT64 INT64>>[unknown order:{NULL}, {-1}, {1}]
==

[name=distinct_uint32]
SELECT DISTINCT val.UINT32
from (select cast(1 as uint32) UINT32 union all
      select cast(NULL as uint32) union all
      select cast(0 as uint32) union all
      select cast(1 as uint32) union all
      select cast(NULL as uint32)) val
--
ARRAY<STRUCT<UINT32 UINT32>>[unknown order:{NULL}, {0}, {1}]
==

[name=distinct_uint64]
SELECT DISTINCT val.UINT64
from (select cast(1 as uint64) UINT64 union all
      select cast(NULL as uint64) union all
      select cast(0 as uint64) union all
      select cast(1 as uint64) union all
      select cast(NULL as uint64)) val
--
ARRAY<STRUCT<UINT64 UINT64>>[unknown order:{NULL}, {0}, {1}]
==

[name=distinct_bool]
SELECT DISTINCT val.BOOL
from (select true BOOL union all
      select cast(NULL as bool) union all
      select false union all
      select true union all
      select cast(NULL as bool) union all
      select false) val
--
ARRAY<STRUCT<BOOL BOOL>>[unknown order:{NULL}, {false}, {true}]
==

[name=distinct_float]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT DISTINCT val.FLOAT
from (select cast(1.0 as float) FLOAT union all
      select cast(NULL as float) union all
      select cast(-1.0 as float) union all
      select cast(1.0 as float) union all
      select cast(NULL as float)) val
--
ARRAY<STRUCT<FLOAT FLOAT>>[unknown order:{NULL}, {-1}, {1}]

NOTE: Reference implementation reports non-determinism.
==

[name=distinct_double]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT DISTINCT val.DOUBLE
from (select cast(1.0 as double) DOUBLE union all
      select cast(NULL as double) union all
      select cast(-1.0 as double) union all
      select cast(1.0 as double) union all
      select cast(NULL as double)) val
--
ARRAY<STRUCT<DOUBLE DOUBLE>>[unknown order:{NULL}, {-1}, {1}]

NOTE: Reference implementation reports non-determinism.
==

[name=distinct_string]
SELECT DISTINCT val.STRING
from (select "1" STRING union all
      select cast(NULL as string) union all
      select "-1" union all
      select "1" union all
      select cast(NULL as string)) val
--
ARRAY<STRUCT<STRING STRING>>[unknown order:{NULL}, {"-1"}, {"1"}]
==

[name=distinct_string_case]
SELECT DISTINCT val.STRING
from (select "STRING" STRING union all
      select "string" union all
      select "StRiNg") val
--
ARRAY<STRUCT<STRING STRING>>[unknown order:{"STRING"}, {"StRiNg"}, {"string"}]
==

[name=distinct_string_null_and_empty]
SELECT DISTINCT val.STRING
from (select "" STRING union all
      select cast(NULL as string) union all
      select "" union all
      select cast(NULL as string)) val
--
ARRAY<STRUCT<STRING STRING>>[unknown order:{NULL}, {""}]
==

[name=distinct_bytes]
SELECT DISTINCT val.BYTES
from (select b"1" BYTES union all
      select cast(NULL as bytes) union all
      select b"-1" union all
      select b"1" union all
      select cast(NULL as bytes)) val
--
ARRAY<STRUCT<BYTES BYTES>>[unknown order:{NULL}, {b"-1"}, {b"1"}]
==

[name=distinct_bytes_case]
SELECT DISTINCT val.BYTES
from (select b"BYTES" BYTES union all
      select b"bytes" union all
      select b"ByTeS") val
--
ARRAY<STRUCT<BYTES BYTES>>[unknown order:{b"BYTES"}, {b"ByTeS"}, {b"bytes"}]
==

[name=distinct_bytes_null_and_empty]
SELECT DISTINCT val.BYTES
from (select b"" BYTES union all
      select cast(NULL as bytes) union all
      select b"" union all
      select cast(NULL as bytes)) val
--
ARRAY<STRUCT<BYTES BYTES>>[unknown order:{NULL}, {b""}]
==

[name=distinct_date]
SELECT DISTINCT val.DATE
from (select DATE'2014-01-01' DATE union all
      select cast(NULL as date) union all
      select DATE'2014-01-02' union all
      select DATE'2014-01-01' union all
      select cast(NULL as date)) val
--
ARRAY<STRUCT<DATE DATE>>[unknown order:{NULL}, {2014-01-01}, {2014-01-02}]
==

[name=distinct_enum]
SELECT DISTINCT val.ENUM_col
from (select cast(0 AS "zetasql_test__.TestEnum") ENUM_col union all
      select cast(NULL as "zetasql_test__.TestEnum") union all
      select cast(1 AS "zetasql_test__.TestEnum") union all
      select cast('TESTENUM0' AS "zetasql_test__.TestEnum") union all
      select cast(NULL as "zetasql_test__.TestEnum")) val
--
ARRAY<STRUCT<ENUM_col ENUM<zetasql_test__.TestEnum>>>[unknown order:
  {NULL},
  {TESTENUM0},
  {TESTENUM1}
]
==

[name=distinct_array]
[required_features=V_1_2_GROUP_BY_ARRAY]
SELECT DISTINCT s.a
FROM ((select NULL as a) union all
      (select NULL) union all
      (select [1]) union all
      (select [2]) union all
      (select [1, NULL]) union all
      (select [2, NULL]) union all
      (select [1]) union all
      (select [2, NULL]) union all
      (select ARRAY<INT64>[]) union all
      (select ARRAY<INT64>[]) union all
      (select [1, 2])) s
--
ARRAY<STRUCT<a ARRAY<>>>[unknown order:
  {ARRAY<INT64>(NULL)},
  {ARRAY<INT64>[]},
  {ARRAY<INT64>[1]},
  {ARRAY<INT64>[known order:1, NULL]},
  {ARRAY<INT64>[known order:1, 2]},
  {ARRAY<INT64>[2]},
  {ARRAY<INT64>[known order:2, NULL]}
]

==

[name=distinct_array_no_nulls]
[required_features=V_1_2_GROUP_BY_ARRAY]
SELECT DISTINCT s.a
FROM ((select NULL as a) union all
      (select NULL) union all
      (select [1]) union all
      (select [2]) union all
      (select [1]) union all
      (select ARRAY<INT64>[]) union all
      (select ARRAY<INT64>[]) union all
      (select [1, 2]) union all
      (select [1, 2])) s
--
ARRAY<STRUCT<a ARRAY<>>>[unknown order:
  {ARRAY<INT64>(NULL)},
  {ARRAY<INT64>[]},
  {ARRAY<INT64>[1]},
  {ARRAY<INT64>[known order:1, 2]},
  {ARRAY<INT64>[2]}
]
==

# -------------------
# Grouping of doubles.
# -------------------
[name=distinct_zeros]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT DISTINCT val.DOUBLE
from (select -0.0 DOUBLE union all
      select +0.0 union all
      select SQRT(0.0) union all
      select SQRT(-0.0) union all
      select 0.0 / 1 union all
      select 0.0 / -1 union all
      select -0.0 / 1 union all
      select -0.0 / -1 union all
      select (-0.0) * (-0.0) union all
      select (-0.0) + (-0.0) union all
      select (0.0) - (-0.0) union all
      select 1.0 - 1.0 union all
      select 0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select -0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select 0.0 / IEEE_DIVIDE(1, 0.0) union all
      select -0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select cast("-0.0" as DOUBLE) union all
      select cast("+0.0" as DOUBLE)) val
--
ARRAY<STRUCT<DOUBLE DOUBLE>>[{0}]

NOTE: Reference implementation reports non-determinism.
==

[name=distinct_positive_infinities]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT DISTINCT val.DOUBLE
from (select IEEE_DIVIDE(1, 0) DOUBLE union all
      select POW(0.1, IEEE_DIVIDE(-1, 0)) union all
      select POW(1.1, IEEE_DIVIDE(1, 0)) union all
      select POW(IEEE_DIVIDE(-1, 0), 2) union all
      select POW(IEEE_DIVIDE(1, 0), 2) union all
      select LOG(IEEE_DIVIDE(1, 0), 1.1) union all
      select CAST("Inf" as DOUBLE)) val
--
ARRAY<STRUCT<DOUBLE DOUBLE>>[{inf}]

NOTE: Reference implementation reports non-determinism.
==

[name=distinct_negative_infinities]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT DISTINCT val.DOUBLE
from (select IEEE_DIVIDE(-1, 0) DOUBLE union all
      select POW(IEEE_DIVIDE(-1, 0), 3) union all
      select LOG(IEEE_DIVIDE(1, 0), 0.1) union all
      select CAST("-Inf" as DOUBLE)) val
--
ARRAY<STRUCT<DOUBLE DOUBLE>>[{-inf}]

NOTE: Reference implementation reports non-determinism.
==

[name=distinct_nan]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT DISTINCT val.NAN
from (select TAN(IEEE_DIVIDE(1, 0)) NAN union all
      select TAN(IEEE_DIVIDE(-1, 0)) union all
      select TAN(TAN(IEEE_DIVIDE(1, 0))) union all
      select IEEE_DIVIDE(0, 0) union all
      select LOG(IEEE_DIVIDE(-1, 0), 1) union all
      select LOG(1, IEEE_DIVIDE(1, 0)) union all
      select cast("NAN" as DOUBLE) union all
      select cast("-NAN" as DOUBLE) union all
      select -cast("NAN" as DOUBLE)) val
--
ARRAY<STRUCT<NAN DOUBLE>>[{nan}]

NOTE: Reference implementation reports non-determinism.
==

[name=distinct_doubles]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT DISTINCT DOUBLE
from (select -0.0 DOUBLE union all
      select +0.0 union all
      select SQRT(0.0) union all
      select SQRT(-0.0) union all
      select 0.0 / 1 union all
      select 0.0 / -1 union all
      select -0.0 / 1 union all
      select -0.0 / -1 union all
      select (-0.0) * (-0.0) union all
      select 1 union all
      select cast(NULL as double) union all
      select (-0.0) + (-0.0) union all
      select (0.0) - (-0.0) union all
      select 1.0 - 1.0 union all
      select 0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select -0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select 0.0 / IEEE_DIVIDE(1, 0.0) union all
      select -0.0 / IEEE_DIVIDE(-1, 0.0) union all
      select -1 union all
      select -cast(NULL as double) union all
      select cast("-0.0" as DOUBLE) union all
      select cast("+0.0" as DOUBLE) union all
      select IEEE_DIVIDE(1, 0) union all
      select POW(0.1, IEEE_DIVIDE(-1, 0)) union all
      select POW(1.1, IEEE_DIVIDE(1, 0)) union all
      select POW(IEEE_DIVIDE(-1, 0), 2) union all
      select POW(IEEE_DIVIDE(1, 0), 2) union all
      select LOG(IEEE_DIVIDE(1, 0), 1.1) union all
      select CAST("Inf" as DOUBLE) union all
      select 1 union all
      select -cast(NULL as double) union all
      select IEEE_DIVIDE(-1, 0) union all
      select POW(IEEE_DIVIDE(-1, 0), 3) union all
      select LOG(IEEE_DIVIDE(1, 0), 0.1) union all
      select CAST("-Inf" as DOUBLE) union all
      select TAN(IEEE_DIVIDE(1, 0)) union all
      select TAN(IEEE_DIVIDE(-1, 0)) union all
      select TAN(TAN(IEEE_DIVIDE(1, 0))) union all
      select IEEE_DIVIDE(0, 0) union all
      select LOG(IEEE_DIVIDE(-1, 0), 1) union all
      select -1 union all
      select cast(NULL as double) union all
      select LOG(1, IEEE_DIVIDE(1, 0)) union all
      select cast("NAN" as DOUBLE) union all
      select cast("-NAN" as DOUBLE) union all
      select -cast("NAN" as DOUBLE)) val
--
ARRAY<STRUCT<DOUBLE DOUBLE>>[unknown order:
  {NULL},
  {nan},
  {-inf},
  {-1},
  {0},
  {1},
  {inf}
]

NOTE: Reference implementation reports non-determinism.
==

# -------------------
# Grouping of floats.
# -------------------
[name=distinct_zeros_float]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT DISTINCT val.FLOAT
from (select cast(-0.0 as float) FLOAT union all
      select cast(+0.0 as float) union all
      select cast(SQRT(0.0) as float) union all
      select cast(SQRT(-0.0) as float) union all
      select cast((0.0 / 1) as float) union all
      select cast((0.0 / -1) as float) union all
      select cast((-0.0 / 1) as float) union all
      select cast((-0.0 / -1) as float) union all
      select cast(((-0.0) * (-0.0)) as float) union all
      select cast(((-0.0) + (-0.0)) as float) union all
      select cast(((0.0) - (-0.0)) as float) union all
      select cast((1.0 - 1.0) as float) union all
      select cast((0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select cast((-0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select cast((0.0 / IEEE_DIVIDE(1, 0.0)) as float) union all
      select cast((-0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select cast("-0.0" as float) union all
      select cast("+0.0" as float)) val
--
ARRAY<STRUCT<FLOAT FLOAT>>[{0}]

NOTE: Reference implementation reports non-determinism.
==

[name=distinct_positive_infinities_float]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT DISTINCT val.FLOAT
from (select cast(IEEE_DIVIDE(1, 0) as float) FLOAT union all
      select cast(POW(0.1, IEEE_DIVIDE(-1, 0)) as float) union all
      select cast(POW(1.1, IEEE_DIVIDE(1, 0)) as float) union all
      select cast(POW(IEEE_DIVIDE(-1, 0), 2) as float) union all
      select cast(POW(IEEE_DIVIDE(1, 0), 2) as float) union all
      select cast(LOG(IEEE_DIVIDE(1, 0), 1.1) as float) union all
      select CAST("Inf" as float)) val
--
ARRAY<STRUCT<FLOAT FLOAT>>[{inf}]

NOTE: Reference implementation reports non-determinism.
==

[name=distinct_negative_infinities_float]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT DISTINCT val.FLOAT
from (select cast(IEEE_DIVIDE(-1, 0) as float) FLOAT union all
      select cast(POW(IEEE_DIVIDE(-1, 0), 3) as float) union all
      select cast(LOG(IEEE_DIVIDE(1, 0), 0.1) as float) union all
      select CAST("-Inf" as float)) val
--
ARRAY<STRUCT<FLOAT FLOAT>>[{-inf}]

NOTE: Reference implementation reports non-determinism.
==

[name=distinct_nan_float]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT DISTINCT val.NAN
from (select cast(TAN(IEEE_DIVIDE(1, 0)) as float) NAN union all
      select cast(TAN(IEEE_DIVIDE(-1, 0)) as float) union all
      select cast(TAN(TAN(IEEE_DIVIDE(1, 0))) as float) union all
      select cast(IEEE_DIVIDE(0, 0) as float) union all
      select cast(LOG(IEEE_DIVIDE(-1, 0), 1) as float) union all
      select cast(LOG(1, IEEE_DIVIDE(1, 0)) as float) union all
      select cast("NAN" as float) union all
      select cast("-NAN" as float) union all
      select -cast("NAN" as float)) val
--
ARRAY<STRUCT<NAN FLOAT>>[{nan}]

NOTE: Reference implementation reports non-determinism.
==

[name=distinct_floats]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT DISTINCT FLOAT
from (select cast(-0.0 as float) FLOAT union all
      select cast(+0.0 as float) union all
      select cast(SQRT(0.0) as float) union all
      select cast(SQRT(-0.0) as float) union all
      select cast((0.0 / 1) as float) union all
      select cast((0.0 / -1) as float) union all
      select cast((-0.0 / 1) as float) union all
      select cast((-0.0 / -1) as float) union all
      select cast(((-0.0) * (-0.0)) as float) union all
      select cast(((-0.0) + (-0.0)) as float) union all
      select 1 union all
      select cast(((0.0) - (-0.0)) as float) union all
      select cast((1.0 - 1.0) as float) union all
      select cast((0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select cast((-0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select cast((0.0 / IEEE_DIVIDE(1, 0.0)) as float) union all
      select cast((-0.0 / IEEE_DIVIDE(-1, 0.0)) as float) union all
      select -1 union all
      select cast("-0.0" as float) union all
      select cast("+0.0" as float) union all
      select cast(IEEE_DIVIDE(1, 0) as float) union all
      select cast(POW(0.1, IEEE_DIVIDE(-1, 0)) as float) union all
      select cast(POW(1.1, IEEE_DIVIDE(1, 0)) as float) union all
      select cast(POW(IEEE_DIVIDE(-1, 0), 2) as float) union all
      select cast(POW(IEEE_DIVIDE(1, 0), 2) as float) union all
      select cast(LOG(IEEE_DIVIDE(1, 0), 1.1) as float) union all
      select 1 union all
      select CAST("Inf" as float) union all
      select cast(IEEE_DIVIDE(-1, 0) as float) union all
      select cast(POW(IEEE_DIVIDE(-1, 0), 3) as float) union all
      select cast(LOG(IEEE_DIVIDE(1, 0), 0.1) as float) union all
      select CAST("-Inf" as float) union all
      select cast(TAN(IEEE_DIVIDE(1, 0)) as float) union all
      select cast(TAN(IEEE_DIVIDE(-1, 0)) as float) union all
      select cast(TAN(TAN(IEEE_DIVIDE(1, 0))) as float) union all
      select -1 union all
      select cast(IEEE_DIVIDE(0, 0) as float) union all
      select cast(LOG(IEEE_DIVIDE(-1, 0), 1) as float) union all
      select cast(LOG(1, IEEE_DIVIDE(1, 0)) as float) union all
      select cast("NAN" as float) union all
      select cast("-NAN" as float) union all
      select -cast("NAN" as float)) val
--
ARRAY<STRUCT<FLOAT FLOAT>>[unknown order:{nan}, {-inf}, {-1}, {0}, {1}, {inf}]

NOTE: Reference implementation reports non-determinism.
==

[name=distinct_groupby_aggregate_input]
SELECT COUNT(distinct_1), SUM(distinct_2)
from TableDistincts GROUP BY distinct_4
--
ARRAY<STRUCT<INT64, INT64>>[unknown order:{4, 4}, {4, 8}, {4, 4}, {4, 8}]
==

# DISTINCT with aggregate functions and GROUP BY.
[name=distinct_groupby_aggregate]
SELECT DISTINCT COUNT(distinct_1), SUM(distinct_2)
from TableDistincts GROUP BY distinct_4
--
ARRAY<STRUCT<INT64, INT64>>[unknown order:{4, 4}, {4, 8}]
==

[name=distinct_having_aggregate_input_without_having]
SELECT SUM(distinct_8) from TableDistincts GROUP BY distinct_4B
--
ARRAY<STRUCT<INT64>>[unknown order:{10}, {26}, {10}, {26}]
==

[name=distinct_having_aggregate_input]
SELECT SUM(distinct_8) from TableDistincts
GROUP BY distinct_4B HAVING MIN(distinct_8) > 4
--
ARRAY<STRUCT<INT64>>[unknown order:{26}, {26}]
==

# DISTINCT with aggregate functions and HAVING.
[name=distinct_having_aggregate]
SELECT DISTINCT SUM(distinct_8) from TableDistincts
GROUP BY distinct_4B HAVING MIN(distinct_8) > 4
--
ARRAY<STRUCT<INT64>>[{26}]
==

# Use DISTINCT on a result of previous DISTINCT.
[name=distinct_distinct]
SELECT DISTINCT val.distinct_4, val.distinct_4B
from (select DISTINCT distinct_4, distinct_4B from TableDistincts) val
--
ARRAY<STRUCT<distinct_4 INT64, distinct_4B INT64>>[unknown order:
  {1, 1},
  {1, 2},
  {1, 3},
  {1, 4},
  {2, 1},
  {2, 2},
  {2, 3},
  {2, 4},
  {3, 1},
  {3, 2},
  {3, 3},
  {3, 4},
  {4, 1},
  {4, 2},
  {4, 3},
  {4, 4}
]
==

# Use aggregation and GROUP BY after DISTINCT.
[name=groupby_aggregate_distinct]
SELECT MAX(a), b
from (SELECT DISTINCT distinct_4 a, distinct_4B b from TableDistincts) GROUP BY b
--
ARRAY<STRUCT<INT64, b INT64>>[unknown order:{4, 1}, {4, 2}, {4, 3}, {4, 4}]
==

[name=distinct_in_scalar_subquery]
select (SELECT DISTINCT distinct_1 from TableDistincts)
--
ARRAY<STRUCT<INT64>>[{1}]
==

[name=distinct_in_scalar_subquery_2]
select (SELECT DISTINCT distinct_2 from TableDistincts)
--
ERROR: generic::out_of_range: More than one element
==

[name=distinct_in_array_subquery]
select ARRAY(SELECT DISTINCT distinct_4 from TableDistincts),
       ARRAY(SELECT DISTINCT val from UNNEST(ARRAY<int64>[]) val)
--
ARRAY<STRUCT<ARRAY<>, ARRAY<>>>[
  {
    ARRAY<INT64>[unknown order:1, 2, 3, 4],
    ARRAY<INT64>[]
  }
]
==

[name=distinct_in_exists_subquery]
select EXISTS(SELECT DISTINCT distinct_1 from TableDistincts),
       EXISTS(SELECT DISTINCT val from UNNEST(ARRAY<int64>[]) val)
--
ARRAY<STRUCT<BOOL, BOOL>>[{true, false}]
==

[name=distinct_in_in_subquery]
select 2 IN(SELECT DISTINCT distinct_2 from TableDistincts),
       4 IN(SELECT DISTINCT distinct_2 from TableDistincts)
--
ARRAY<STRUCT<BOOL, BOOL>>[{true, false}]
==

[name=distinct_union_all_input]
SELECT DISTINCT union1
from (select 1 union1 UNION ALL select 2 UNION ALL select 1) UNION ALL
SELECT DISTINCT union2
from (select 3 union2 UNION ALL select 2 UNION ALL select 3)
--
ARRAY<STRUCT<union1 INT64>>[unknown order:{2}, {1}, {3}, {2}]
==

[name=distinct_union_all]
SELECT DISTINCT val.ELEM
from (SELECT DISTINCT union1 ELEM
      from (select 1 union1 UNION ALL select 2 UNION ALL select 1) UNION ALL
      SELECT DISTINCT union2
      from (select 3 union2 UNION ALL select 2 UNION ALL select 3)) val
--
ARRAY<STRUCT<ELEM INT64>>[unknown order:{1}, {2}, {3}]
==

# ------------------
# LIMIT on DISTINCT.
# ------------------
[name=limit_on_distinct_1]
select count(*)
from (SELECT DISTINCT distinct_16 from TableDistincts LIMIT 8)
--
ARRAY<STRUCT<INT64>>[{8}]

NOTE: Reference implementation reports non-determinism.
==

[name=limit_on_distinct_2]
select count(*)
from (SELECT DISTINCT distinct_8 from TableDistincts LIMIT 8)
--
ARRAY<STRUCT<INT64>>[{8}]

NOTE: Reference implementation reports non-determinism.
==

[name=limit_on_distinct_3]
select count(*)
from (SELECT DISTINCT distinct_4 from TableDistincts LIMIT 8)
--
ARRAY<STRUCT<INT64>>[{4}]
==

[name=distinct_on_limit]
SELECT DISTINCT *
from (select distinct_1 from TableDistincts LIMIT 8)
--
ARRAY<STRUCT<distinct_1 INT64>>[{1}]

NOTE: Reference implementation reports non-determinism.
==

[name=offset_on_distinct]
select count(*)
from (SELECT DISTINCT distinct_4 from TableDistincts LIMIT 4 OFFSET 3)
--
ARRAY<STRUCT<INT64>>[{1}]

NOTE: Reference implementation reports non-determinism.
