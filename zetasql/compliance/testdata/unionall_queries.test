[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]
[load_enum_names=zetasql_test__.TestEnum]
[prepare_database]
CREATE TABLE Table1 AS
SELECT cast(1 as int64) as primary_key,
       cast(true as bool) as bool_val, cast(0.1 as double) as double_val,
       cast(1 as int64) as int64_val, cast("1" as string) as str_val UNION ALL
  SELECT 2, false, 0.2, 2, "2"
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {1, true, 0.1, 1, "1"},
  {2, false, 0.2, 2, "2"}
]
==
[prepare_database]
CREATE TABLE Table2 AS
SELECT cast(1 as int64) as primary_key,
       cast(true as bool) as bool_val, cast(0.3 as double) as double_val,
       cast(3 as int64) as int64_val, cast("3" as string) as str_val UNION ALL
  SELECT 2, false, 0.4, 4, "4"
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {1, true, 0.3, 3, "3"},
  {2, false, 0.4, 4, "4"}
]
==
[prepare_database]
CREATE TABLE Table3 AS
SELECT cast(1 as int64) as primary_key,
       cast(true as bool) as bool_val, cast(0.5 as double) as double_val,
       cast(5 as int64) as int64_val, cast("5" as string) as str_val UNION ALL
  SELECT 2, false, 0.6, 6, "6"
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {1, true, 0.5, 5, "5"},
  {2, false, 0.6, 6, "6"}
]
==
# 14 columns of nulls.
[prepare_database]
CREATE TABLE TableAllNull AS
SELECT cast(1 as int64) as primary_key, cast(null as bool) as bool_val,
       cast(NULL as int32) as int32_val, cast(NULL as int64) as int64_val,
       cast(NULL as uint32) as uint32_val, cast(NULL as uint64) as uint64_val,
       cast(NULL as float) as float_val, cast(NULL as double) as double_val,
       cast(NULL as string) as str_val, CAST(NULL as bytes) as bytes_val,
       CAST(NULL as date) as date_val,
       CAST(NULL as TIMESTAMP) as timestamp_val
--
ARRAY<STRUCT<
        primary_key INT64,
        bool_val BOOL,
        int32_val INT32,
        int64_val INT64,
        uint32_val UINT32,
        uint64_val UINT64,
        float_val FLOAT,
        double_val DOUBLE,
        str_val STRING,
        bytes_val BYTES,
        date_val DATE,
        timestamp_val TIMESTAMP
      >>[
  {1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}
]
==
# TableDataTypes contains a column for each primitive data type.
# This means no enums, structs and arrays.
# Each column has 2 rows of data.
[prepare_database]
CREATE TABLE TableDataTypes AS
SELECT cast(1 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-1 as int32) as int32_val, cast(-1 as int64) as int64_val,
       cast(1 as uint32) as uint32_val, cast(1 as uint64) as uint64_val,
       cast(0.1 as float) as float_val, cast(0.1 as double) as double_val,
       cast("1" as string) as str_val, CAST("a" as bytes) as bytes_val,
       CAST('2014-01-17' as date) as date_val,
       TIMESTAMP '2014-01-17 00:00:01.098000 UTC' as
           timestamp_val
UNION ALL
SELECT cast(2 as int64) as primary_key, cast(false as bool) as bool_val,
       cast(-2 as int32) as int32_val, cast(-2 as int64) as int64_val,
       cast(2 as uint32) as uint32_val, cast(2 as uint64) as uint64_val,
       cast(0.2 as float) as float_val, cast(0.2 as double) as double_val,
       cast("2" as string) as str_val, CAST("b" as bytes) as bytes_val,
       CAST('2014-01-17' as date),
       TIMESTAMP '2014-01-17 00:00:02.098000 UTC' as
           timestamp_val
--
ARRAY<STRUCT<
        primary_key INT64,
        bool_val BOOL,
        int32_val INT32,
        int64_val INT64,
        uint32_val UINT32,
        uint64_val UINT64,
        float_val FLOAT,
        double_val DOUBLE,
        str_val STRING,
        bytes_val BYTES,
        date_val DATE,
        timestamp_val TIMESTAMP
      >>
[{
   1,
   true,
   -1,
   -1,
   1,
   1,
   0.1,
   0.1,
   "1",
   b"a",
   2014-01-17,
   2014-01-17 00:00:01.098+00
 },
 {
   2,
   false,
   -2,
   -2,
   2,
   2,
   0.2,
   0.2,
   "2",
   b"b",
   2014-01-17,
   2014-01-17 00:00:02.098+00
 }]
==

# UNION ALL over simple constants
[name=unionall_constants_simple]
SELECT 1 AS ColA UNION ALL SELECT 2
--
ARRAY<STRUCT<ColA INT64>>[unknown order:{1}, {2}]
==
# 3 inputs
[name=unionall_constants_3_inputs]
SELECT 1 AS ColA UNION ALL SELECT 2 UNION ALL SELECT 3
--
ARRAY<STRUCT<ColA INT64>>[unknown order:{1}, {2}, {3}]
==
# UNION All over two Tables.
# SELECT bool column only. Result is unordered.
[name=unionall_datatype_bool]
SELECT bool_val FROM Table1 UNION ALL SELECT bool_val FROM Table2
--
ARRAY<STRUCT<bool_val BOOL>>[unknown order:{false}, {true}, {false}, {true}]
==
# SELECT double column only
[name=unionall_datatype_double]
SELECT double_val FROM Table1 UNION ALL SELECT double_val FROM Table2
--
ARRAY<STRUCT<double_val DOUBLE>>[unknown order:{0.2}, {0.1}, {0.4}, {0.3}]
==
# SELECT int64 column only.
[name=unionall_datatype_int64]
SELECT int64_val FROM Table1 UNION ALL SELECT int64_val FROM Table2
--
ARRAY<STRUCT<int64_val INT64>>[unknown order:{2}, {1}, {4}, {3}]
==
# SELECT string column only.
[name=unionall_datatype_string]
SELECT str_val FROM Table1 UNION ALL SELECT str_val FROM Table2
--
ARRAY<STRUCT<str_val STRING>>[unknown order:{"2"}, {"1"}, {"4"}, {"3"}]
==
# SELECT enum column.
[name=unionall_datatype_enum]
SELECT CAST(0 AS "zetasql_test__.TestEnum") as enum_val
UNION ALL
SELECT CAST(1 AS "zetasql_test__.TestEnum");
--
ARRAY<STRUCT<enum_val ENUM<zetasql_test__.TestEnum>>>[unknown order:
  {TESTENUM0},
  {TESTENUM1}
]
==
# SELECT proto column.
[name=unionall_datatype_proto]
SELECT AS "zetasql_test__.KitchenSinkPB" 5 int64_key_1, 6 int64_key_2
UNION ALL
SELECT AS "zetasql_test__.KitchenSinkPB" 7 int64_key_1, 8 int64_key_2
--
ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[unknown order:
  {
    int64_key_1: 5
    int64_key_2: 6
  },
  {
    int64_key_1: 7
    int64_key_2: 8
  }
]
==
# SELECT array column
[name=unionall_datatype_array]
SELECT ARRAY(SELECT 1 UNION ALL SELECT 2)
UNION ALL
SELECT ARRAY(SELECT 17 UNION ALL SELECT 18 UNION ALL SELECT 19)
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<INT64>[unknown order:1, 2]},
  {ARRAY<INT64>[unknown order:17, 18, 19]}
]
==
# SELECT struct column
[name=unionall_datatype_struct]
SELECT (SELECT t FROM (SELECT 3 a, 5 b) t).b
UNION ALL
SELECT (SELECT t FROM (SELECT 3 a, 5 b) t).a
--
ARRAY<STRUCT<b INT64>>[unknown order:{5}, {3}]
==
# SELECT all columns.
[name=unionall_multiple_columns]
SELECT bool_val, double_val, int64_val, str_val FROM Table1
UNION ALL
SELECT bool_val, double_val, int64_val, str_val FROM Table2
--
ARRAY<STRUCT<bool_val BOOL, double_val DOUBLE, int64_val INT64, str_val STRING>>[unknown order:
  {false, 0.2, 2, "2"},
  {true, 0.1, 1, "1"},
  {false, 0.4, 4, "4"},
  {true, 0.3, 3, "3"}
]
==
# UNION ALL over filters.
[name=unionall_filters]
SELECT int64_val FROM Table1 WHERE int64_val = 1
UNION ALL SELECT int64_val FROM Table1 WHERE int64_val = 2
UNION ALL SELECT int64_val FROM Table1 WHERE int64_val = 3
--
ARRAY<STRUCT<int64_val INT64>>[unknown order:{1}, {2}]
==
# UNION ALL over UNION ALL
[name=unionall_over_unionall]
SELECT a FROM (SELECT 10 a UNION ALL SELECT 20 a) UNION ALL
    SELECT int64_val FROM (SELECT int64_val FROM Table1 UNION ALL
                           SELECT int64_val FROM Table2)
--
ARRAY<STRUCT<a INT64>>[unknown order:{20}, {10}, {1}, {3}, {2}, {4}]
==
# SELECT all columns from multiple Tables with repeated Tables.
[name=unionall_multiple_columns_multiple_tables]
SELECT bool_val, double_val, int64_val, str_val
FROM Table1
      UNION ALL SELECT bool_val, double_val, int64_val, str_val FROM Table2
      UNION ALL SELECT bool_val, double_val, int64_val, str_val FROM Table3
      UNION ALL SELECT bool_val, double_val, int64_val, str_val FROM Table2
      UNION ALL SELECT bool_val, double_val, int64_val, str_val FROM Table1
--
ARRAY<STRUCT<bool_val BOOL, double_val DOUBLE, int64_val INT64, str_val STRING>>[unknown order:
  {false, 0.2, 2, "2"},
  {true, 0.1, 1, "1"},
  {false, 0.4, 4, "4"},
  {true, 0.3, 3, "3"},
  {false, 0.6, 6, "6"},
  {true, 0.5, 5, "5"},
  {false, 0.4, 4, "4"},
  {true, 0.3, 3, "3"},
  {false, 0.2, 2, "2"},
  {true, 0.1, 1, "1"}
]
==
# UNION ALL over NULL and non-NULL array values.
[name=unionall_nulls_array]
SELECT ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) AS array_val
UNION ALL
SELECT NULL
--
ARRAY<STRUCT<array_val ARRAY<>>>[unknown order:
  {ARRAY<INT64>[unknown order:1, 2, 3]},
  {ARRAY<INT64>(NULL)}
]
==
# UNION ALL over NULL and non-NULL enum values
[name=unionall_nulls_enum]
SELECT CAST(0 as "zetasql_test__.TestEnum") AS enum_val
UNION ALL
SELECT NULL
--
ARRAY<STRUCT<enum_val ENUM<zetasql_test__.TestEnum>>>[unknown order:
  {TESTENUM0},
  {NULL}
]
==
# UNION ALL over NULL and non-NULL struct values
[name=unionall_nulls_struct]
SELECT NULL
UNION ALL
SELECT (SELECT t FROM (SELECT 3 a, 5 b) t).a
--
ARRAY<STRUCT<INT64>>[unknown order:{NULL}, {3}]
==
# UNION ALL over NULL and non-NULL proto columns.
[name=unionall_nulls_proto]
SELECT (SELECT AS "zetasql_test__.KitchenSinkPB" 5 int64_key_1, 6 int64_key_2)
UNION ALL
SELECT (SELECT AS "zetasql_test__.KitchenSinkPB" 7 int64_key_1, 8 int64_key_2)
UNION ALL
SELECT NULL AS "zetasql_test__.KitchenSinkPB"
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[unknown order:
  {{
     int64_key_1: 5
     int64_key_2: 6
   }},
  {{
     int64_key_1: 7
     int64_key_2: 8
   }},
  {NULL}
]
==
# UNION ALL over NULL and non-NULL values
[name=unionall_nulls_simple_datatypes]
SELECT bool_val, int32_val, int64_val, uint32_val, uint64_val,
       float_val, double_val, str_val, bytes_val, date_val,
       timestamp_val
       FROM TableDataTypes
UNION ALL
SELECT bool_val, int32_val, int64_val, uint32_val, uint64_val,
       float_val, double_val, str_val, bytes_val, date_val,
       timestamp_val
       FROM TableAllNull
--
ARRAY<STRUCT<
        bool_val BOOL,
        int32_val INT32,
        int64_val INT64,
        uint32_val UINT32,
        uint64_val UINT64,
        float_val FLOAT,
        double_val DOUBLE,
        str_val STRING,
        bytes_val BYTES,
        date_val DATE,
        timestamp_val TIMESTAMP
      >>
[unknown order:
  {
    false,
    -2,
    -2,
    2,
    2,
    0.2,
    0.2,
    "2",
    b"b",
    2014-01-17,
    2014-01-17 00:00:02.098+00
  },
  {
    true,
    -1,
    -1,
    1,
    1,
    0.1,
    0.1,
    "1",
    b"a",
    2014-01-17,
    2014-01-17 00:00:01.098+00
  },
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}
]
==
# Implicit coercion of int32; int32 -> int64 and int32 -> double
[name=unionall_implicit_coercion_int32]
SELECT double_val, int64_val FROM Table1
UNION ALL
SELECT int32_val, int64_val FROM TableDataTypes
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64>>[unknown order:
  {0.2, 2},
  {0.1, 1},
  {-1, -1},
  {-2, -2}
]
==
# Implict coercion of int64 to double
[name=unionall_implicit_coercion_int64]
SELECT int64_val as double_val FROM TableDataTypes
UNION ALL
SELECT double_val FROM Table1
--
ARRAY<STRUCT<double_val DOUBLE>>[unknown order:{-1}, {-2}, {0.2}, {0.1}]
==
# Implict coercion of uint32; uint32 -> uint64, uint32 -> int64 and uint32 -> double
[name=unionall_implicit_coercion_uint32]
SELECT uint32_val as uint64_val,
       uint32_val as int64_val,
       uint32_val as double_val FROM TableDataTypes
UNION ALL
SELECT uint64_val, int64_val, double_val FROM TableDataTypes
--
ARRAY<STRUCT<uint64_val UINT64, int64_val INT64, double_val DOUBLE>>[unknown order:
  {1, 1, 1},
  {2, 2, 2},
  {2, -2, 0.2},
  {1, -1, 0.1}
]
==
# Implicit coercion of uint64 to double
[name=unionall_implicit_coercion_uint64]
SELECT uint64_val as double_val FROM TableDataTypes
UNION ALL
SELECT double_val FROM Table1
--
ARRAY<STRUCT<double_val DOUBLE>>[unknown order:{1}, {2}, {0.2}, {0.1}]
==
# Implicit coercion of float to double
[name=unionall_implicit_coercion_float]
SELECT (SUM(double_val) >= 0.6) as compare_gte FROM
(SELECT double_val FROM Table1
UNION ALL
SELECT float_val FROM TableDataTypes)
--
ARRAY<STRUCT<compare_gte BOOL>>[{true}]
==
# Incompatible types
[name=unionall_implicit_coercion_incompatible_types]
SELECT int32_val AS double_val FROM TableDataTypes
UNION ALL
SELECT int64_val FROM TableDataTypes
UNION ALL
SELECT uint64_val FROM TableDataTypes
--
ERROR: generic::invalid_argument: Column 1 in UNION ALL has incompatible types: INT32, INT64, UINT64 [at 3:1]
SELECT int64_val FROM TableDataTypes
^
==
# Literal coercion from string to timestamp types and date
[name=unionall_literal_coercion_string]
SELECT date_val,
       timestamp_val
       FROM TableDataTypes
UNION ALL
SELECT '2015-01-17',
       '2015-01-17 00:00:00.123456 UTC'
--
ARRAY<STRUCT<
        date_val DATE,
        timestamp_val TIMESTAMP
      >>
[unknown order:{
                 2014-01-17,
                 2014-01-17 00:00:02.098+00
               },
               {
                 2014-01-17,
                 2014-01-17 00:00:01.098+00
               },
               {
                 2015-01-17,
                 2015-01-17 00:00:00.123456+00
               }]
==
# UNION ALL over columns with different names. First one wins.
[name=unionall_diff_name]
SELECT int64_val AS x, int64_val as y FROM TableDataTypes
UNION ALL
SELECT int64_val AS a, int64_val as b FROM TableDataTypes
--
ARRAY<STRUCT<x INT64, y INT64>>[unknown order:
  {-2, -2},
  {-1, -1},
  {-2, -2},
  {-1, -1}
]
==
# UNION ALL unnamed and named columns
[name=unionall_unnamed_and_named]
SELECT (17+1) UNION ALL SELECT int64_val AS x FROM TableDataTypes
--
ARRAY<STRUCT<INT64>>[unknown order:{18}, {-2}, {-1}]
==
# UNION ALL unnamed and named columns
[name=unionall_named_and_unnamed]
SELECT int64_val AS x FROM TableDataTypes UNION ALL SELECT (17+1)
--
ARRAY<STRUCT<x INT64>>[unknown order:{-2}, {-1}, {18}]
==
# UNION ALL over computed values
[name=unionall_computed_columns]
SELECT (1+2) UNION ALL SELECT (3+4)
--
ARRAY<STRUCT<INT64>>[unknown order:{3}, {7}]
==
# UNION ALL with duplicate column names
[name=unionall_duplicate_column_names]
SELECT int64_val AS x, int32_val AS x FROM TableDataTypes
UNION ALL
SELECT 17, 43
--
ARRAY<STRUCT<x INT64, x INT32>>[unknown order:{-2, -2}, {-1, -1}, {17, 43}]
==
# Mismatch in number of columns
[name=unionall_error_num_column_mismatch]
SELECT int64_val, int32_val, date_val FROM TableDataTypes
UNION ALL
SELECT int64_val, int32_val FROM TableDataTypes
--
ERROR: generic::invalid_argument: Queries in UNION have mismatched column count; query 1 has 3 columns, query 2 has 2 columns [at 3:1]
SELECT int64_val, int32_val FROM TableDataTypes
^
==
# @nan_01 and @nan02 are both nans with different bitwise representation.
[name=union_all_nan_different_bitwise_representation]
[parameters=CAST(b"\x08\x00\x10\x00\x49\x01\x00\x00\x00\x00\x00\xf0\x7f" as zetasql_test__.KitchenSinkPB).double_val as nan_01, CAST(b"\x08\x00\x10\x00\x49\x02\x00\x00\x00\x00\x00\xf0\x7f" as zetasql_test__.KitchenSinkPB).double_val as nan_02]
SELECT * FROM UNNEST([@nan_01])
UNION ALL
SELECT * FROM UNNEST([@nan_02]);
--
ARRAY<STRUCT<DOUBLE>>[unknown order:{nan}, {nan}]
==
[name=union_all_corresponding_parenthesized_multiple_operands]
[required_features=V_1_4_CORRESPONDING]
SELECT int64_val, bool_val
FROM Table1
UNION ALL CORRESPONDING
(
  SELECT bool_val, int64_val, str_val
  FROM Table2
  UNION ALL CORRESPONDING
  SELECT bool_val, str_val, int64_val
  FROM Table1
)
--
ARRAY<STRUCT<int64_val INT64, bool_val BOOL>>[unknown order:
  {2, false},
  {1, true},
  {3, true},
  {1, true},
  {4, false},
  {2, false}
]
==
[name=union_all_corresponding_multiple_operands]
[required_features=V_1_4_CORRESPONDING]
SELECT int64_val, bool_val
FROM Table1
UNION ALL CORRESPONDING
SELECT bool_val, int64_val, str_val
FROM Table2
UNION ALL CORRESPONDING
SELECT bool_val, str_val, int64_val
FROM Table1
--
ARRAY<STRUCT<int64_val INT64, bool_val BOOL>>[unknown order:
  {2, false},
  {1, true},
  {4, false},
  {3, true},
  {2, false},
  {1, true}
]
==
[name=union_all_corresponding_type_coercion]
[required_features=V_1_4_CORRESPONDING]
SELECT int64_val AS col1, bool_val AS col2, double_val AS col3
FROM Table1
UNION ALL CORRESPONDING
SELECT int64_val AS col3, int64_val AS col1, bool_val AS col2
FROM Table2
UNION ALL CORRESPONDING
SELECT int64_val AS col1, bool_val AS col2, int64_val AS col3
FROM Table1
--
ARRAY<STRUCT<col1 INT64, col2 BOOL, col3 DOUBLE>>[unknown order:
  {2, false, 0.2},
  {1, true, 0.1},
  {3, true, 3},
  {4, false, 4},
  {1, true, 1},
  {2, false, 2}
]
