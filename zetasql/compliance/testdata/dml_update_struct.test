# Tests for UPDATEs on struct columns. We use multiple test tables to keep test
# output sizes small, and also because there are various features that may not
# be supported by all engines.

[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]

[prepare_database]
CREATE TABLE Table1 AS
SELECT cast(1 as int64) as primary_key,
       STRUCT (cast(10 as int64) as value1,
               cast(11 as int64) as value2) struct_value
UNION ALL
SELECT 2, (20, 21)
--
ARRAY<STRUCT<
        primary_key INT64,
        struct_value STRUCT<value1 INT64, value2 INT64>
      >>
[{1, {10, 11}}, {2, {20, 21}}]
==

[prepare_database]
CREATE TABLE Table2 AS
SELECT cast(1 as int64) as primary_key,
       STRUCT (cast(10 as int64) as int64_value,
               cast([11, 12, 13] as ARRAY<INT64>) as array_value,
               cast([111, 112, 113] as ARRAY<INT64>) as array_value2)
       struct_value
UNION ALL
SELECT 2, (20, [21, 22, 23], [221, 222, 223])
UNION ALL
SELECT 3, (30, cast(NULL as ARRAY<INT64>), cast(NULL as ARRAY<INT64>))
UNION ALL
SELECT 4, NULL
--
ARRAY<STRUCT<
        primary_key INT64,
        struct_value STRUCT<int64_value INT64, array_value ARRAY<>, array_value2 ARRAY<>>
      >>
[{1,
  {
    10,
    ARRAY<INT64>[11, 12, 13],
    ARRAY<INT64>[111, 112, 113]
  }},
 {2,
  {
    20,
    ARRAY<INT64>[21, 22, 23],
    ARRAY<INT64>[221, 222, 223]
  }},
 {
   3,
   {30, ARRAY<INT64>(NULL), ARRAY<INT64>(NULL)}
 },
 {4, NULL}]
==

[prepare_database]
CREATE TABLE Table3 AS
SELECT cast(1 as int64) as primary_key,
       STRUCT (cast(10 as int64) as int64_field,
               STRUCT(cast(11 as int64) as nested_value1,
                      cast(12 as int64) as nested_value2) as struct_field)
       struct_value
UNION ALL
SELECT 2, (20, CAST(NULL AS STRUCT<INT64, INT64>))
--
ARRAY<STRUCT<
        primary_key INT64,
        struct_value STRUCT<
               int64_field INT64,
               struct_field STRUCT<nested_value1 INT64, nested_value2 INT64>
             >
      >>
[{1, {10, {11, 12}}}, {2, {20, NULL}}]
==

[prepare_database]
CREATE TABLE Table4 AS
SELECT cast(1 as int64) as primary_key,
       STRUCT (cast(10 as int64) as int64_field,
               STRUCT(cast(11 as int64) as nested_value,
                      cast([12, 13, 14] as ARRAY<INT64>) as nested_array_value)
               as struct_field)
       struct_value
UNION ALL
SELECT 2, (20, (21, [22, 23, 24]))
--
ARRAY<STRUCT<primary_key INT64,
             struct_value STRUCT<int64_field INT64,
                         struct_field STRUCT<
                                nested_value INT64,
                                nested_array_value ARRAY<>
                              >>>>
[{1,
  {10,
   {
     11,
     ARRAY<INT64>[12, 13, 14]
   }}},
 {2,
  {20,
   {
     21,
     ARRAY<INT64>[22, 23, 24]
   }}}]
==

# For testing long paths like s.a[0].b[1].c[2].d[3].
[prepare_database]
CREATE TABLE Table5 AS
SELECT cast(1 as int64) as primary_key,
       STRUCT ([
         STRUCT ([
           NULL,
           STRUCT ([
             NULL, NULL,
             STRUCT ([NULL, NULL, NULL, cast(10 as int64)] as array4)
           ] as array3)
         ] as array2)
       ] as array1) as struct_value
--
ARRAY<STRUCT<
        primary_key INT64,
        struct_value STRUCT<array1 ARRAY<>>
      >>
[{1,
  {ARRAY<STRUCT<array2 ARRAY<>>>[
     {ARRAY<STRUCT<array3 ARRAY<>>>[
        NULL,
        {ARRAY<STRUCT<array4 ARRAY<>>>[
           NULL,
           NULL,
           {ARRAY<INT64>[NULL, NULL, NULL, 10]}
         ]}
      ]}
   ]}}]
==

[prepare_database]
CREATE TABLE Table6 AS
SELECT cast(1 as int64) as primary_key,
       [
         STRUCT(100 as value1, 101 as value2),
         (110, 111),
         (120, 121)
       ] as array_value
UNION ALL
SELECT 2,
       [
         STRUCT(200 as value1, 201 as value2),
         (210, 211),
         (220, 221)
       ]
UNION ALL
SELECT 3, NULL
--
ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[
  {
    1,
    ARRAY<STRUCT<value1 INT64, value2 INT64>>[{100, 101}, {110, 111}, {120, 121}]
  },
  {
    2,
    ARRAY<STRUCT<value1 INT64, value2 INT64>>[{200, 201}, {210, 211}, {220, 221}]
  },
  {
    3,
    ARRAY<STRUCT<value1 INT64, value2 INT64>>(NULL)
  }
]
==

# For testing long paths like s.a[0].s.b[1].s.c[2].s.d[3].
[prepare_database]
CREATE TABLE Table7 AS
SELECT cast(1 as int64) as primary_key,
       STRUCT (
         STRUCT (
           [ STRUCT (
               STRUCT (
                 [ NULL,
                   STRUCT (
                     STRUCT (
                       [ NULL, NULL,
                         STRUCT (
                           STRUCT (
                             [NULL, NULL, NULL, cast(10 as int64)] as array4
                           ) as struct4)
                       ] as array3) as struct3)
                 ] as array2) as struct2)
           ] as array1) as struct1) as struct_value
--
ARRAY<STRUCT<
        primary_key INT64,
        struct_value STRUCT<struct1 STRUCT<array1 ARRAY<>>>
      >>
[{1,
  {{ARRAY<STRUCT<struct2 STRUCT<array2 ARRAY<>>>>[
      {{
         ARRAY<STRUCT<struct3 STRUCT<array3 ARRAY<>>>>[
           NULL,
           {
             {
               ARRAY<STRUCT<struct4 STRUCT<array4 ARRAY<>>>>[
                 NULL,
                 NULL,
                 {{ARRAY<INT64>[NULL, NULL, NULL, 10]}}
               ]
             }
           }
         ]
       }}
    ]}}}]
==

[prepare_database]
CREATE TABLE Table8 AS
SELECT cast(1 as int64) as primary_key,
       STRUCT (cast(10 as int64) as int64_field,
               cast("int64_key_1: 11 int64_key_2: 12"
                    as "zetasql_test__.KitchenSinkPB") as proto_field)
       struct_value
UNION ALL
SELECT 2, (20, "int64_key_1: 21 int64_key_2: 22")
--
ARRAY<STRUCT<primary_key INT64,
             struct_value STRUCT<
                    int64_field INT64,
                    proto_field PROTO<zetasql_test__.KitchenSinkPB>
                  >>>
[{1,
  {10,
   {
     int64_key_1: 11
     int64_key_2: 12
   }}},
 {2,
  {20,
   {
     int64_key_1: 21
     int64_key_2: 22
   }}}]
==

[prepare_database]
CREATE Table Table9 AS
SELECT cast(1 as int64) primary_key,
       [
         STRUCT(cast(10 as int64) as int64_field,
                cast('''int64_key_1: 11
                        int64_key_2: 12
                        repeated_int64_val: 101
                        repeated_int64_val: 102
                        repeated_int64_val: 103
                        nested_repeated_value {
                          nested_int64: 201
                        }
                        nested_repeated_value {
                          nested_int64: 202
                        }
                        nested_repeated_value {
                          nested_int64: 203
                        }'''
                     as "zetasql_test__.KitchenSinkPB") as proto_field),
         NULL
       ] as array_value
--
ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[
  {1,
   ARRAY<STRUCT<
           int64_field INT64,
           proto_field PROTO<zetasql_test__.KitchenSinkPB>
         >>
   [{10,
         {
           int64_key_1: 11
           int64_key_2: 12
           repeated_int64_val: 101
           repeated_int64_val: 102
           repeated_int64_val: 103
           nested_repeated_value {
             nested_int64: 201
           }
           nested_repeated_value {
             nested_int64: 202
           }
           nested_repeated_value {
             nested_int64: 203
           }
         }},
        NULL]}
]
==

[name=assign_struct_column]
UPDATE Table1 SET struct_value = (100, 200) WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<value1 INT64, value2 INT64>
        >>
  [unknown order:{1, {100, 200}}, {2, {100, 200}}]}
==

[name=assign_struct_column_null]
UPDATE Table1 SET struct_value = NULL WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<value1 INT64, value2 INT64>
        >>
  [unknown order:{1, NULL}, {2, NULL}]}
==

[name=assign_struct_column_default]
UPDATE Table1 SET struct_value = DEFAULT WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<value1 INT64, value2 INT64>
        >>
  [unknown order:{1, NULL}, {2, NULL}]}
==

[name=assign_struct_field]
UPDATE Table1 SET struct_value.value1 = 100 WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<value1 INT64, value2 INT64>
        >>
  [unknown order:{1, {100, 11}}, {2, {100, 21}}]}
==

[name=assign_struct_field_null]
UPDATE Table1 SET struct_value.value1 = NULL WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<value1 INT64, value2 INT64>
        >>
  [unknown order:{1, {NULL, 11}}, {2, {NULL, 21}}]}
==

# Fails because there is a row where struct_value is NULL.
[name=assign_struct_field_in_null_struct]
UPDATE Table2 SET struct_value.int64_value = 100 WHERE True
--
ERROR: generic::out_of_range: Cannot set field of NULL STRUCT<int64_value INT64, array_value ARRAY<INT64>, array_value2 ARRAY<INT64>>
==

[name=assign_struct_field_default]
UPDATE Table1 SET struct_value.value1 = DEFAULT WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<value1 INT64, value2 INT64>
        >>
  [unknown order:{1, {NULL, 11}}, {2, {NULL, 21}}]}
==

[name=assign_array_struct_field]
UPDATE Table2
SET struct_value.array_value = [50, 51, 52]
WHERE struct_value IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  3,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<int64_value INT64, array_value ARRAY<>, array_value2 ARRAY<>>
        >>
  [unknown order:
    {1,
     {
       10,
       ARRAY<INT64>[known order:50, 51, 52],
       ARRAY<INT64>[known order:111, 112, 113]
     }},
    {2,
     {
       20,
       ARRAY<INT64>[known order:50, 51, 52],
       ARRAY<INT64>[known order:221, 222, 223]
     }},
    {3,
     {
       30,
       ARRAY<INT64>[known order:50, 51, 52],
       ARRAY<INT64>(NULL)
     }},
    {4, NULL}
  ]
}
==

[name=assign_array_struct_field_null]
UPDATE Table2
SET struct_value.array_value = NULL
WHERE struct_value IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  3,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<int64_value INT64, array_value ARRAY<>, array_value2 ARRAY<>>
        >>
  [unknown order:
    {1,
     {
       10,
       ARRAY<INT64>(NULL),
       ARRAY<INT64>[known order:111, 112, 113]
     }},
    {2,
     {
       20,
       ARRAY<INT64>(NULL),
       ARRAY<INT64>[known order:221, 222, 223]
     }},
    {
      3,
      {30, ARRAY<INT64>(NULL), ARRAY<INT64>(NULL)}
    },
    {4, NULL}
  ]
}
==

[name=assign_array_struct_field_with_null_element]
UPDATE Table2
SET struct_value.array_value = [50, NULL, 52]
WHERE struct_value IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  3,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<int64_value INT64, array_value ARRAY<>, array_value2 ARRAY<>>
        >>
  [unknown order:
    {1,
     {
       10,
       ARRAY<INT64>[known order:50, NULL, 52],
       ARRAY<INT64>[known order:111, 112, 113]
     }},
    {2,
     {
       20,
       ARRAY<INT64>[known order:50, NULL, 52],
       ARRAY<INT64>[known order:221, 222, 223]
     }},
    {3,
     {
       30,
       ARRAY<INT64>[known order:50, NULL, 52],
       ARRAY<INT64>(NULL)
     }},
    {4, NULL}
  ]
}
==

[name=assign_array_struct_field_default]
UPDATE Table2
SET struct_value.array_value = DEFAULT
WHERE struct_value IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  3,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<int64_value INT64, array_value ARRAY<>, array_value2 ARRAY<>>
        >>
  [unknown order:
    {1,
     {
       10,
       ARRAY<INT64>(NULL),
       ARRAY<INT64>[known order:111, 112, 113]
     }},
    {2,
     {
       20,
       ARRAY<INT64>(NULL),
       ARRAY<INT64>[known order:221, 222, 223]
     }},
    {
      3,
      {30, ARRAY<INT64>(NULL), ARRAY<INT64>(NULL)}
    },
    {4, NULL}
  ]
}
==

[name=update_array_struct_first_element_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table2
SET struct_value.array_value[OFFSET(0)] = 100
WHERE primary_key <= 2
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<int64_value INT64, array_value ARRAY<>, array_value2 ARRAY<>>
        >>
  [unknown order:
    {1,
     {
       10,
       ARRAY<INT64>[known order:100, 12, 13],
       ARRAY<INT64>[known order:111, 112, 113]
     }},
    {2,
     {
       20,
       ARRAY<INT64>[known order:100, 22, 23],
       ARRAY<INT64>[known order:221, 222, 223]
     }},
    {
      3,
      {30, ARRAY<INT64>(NULL), ARRAY<INT64>(NULL)}
    },
    {4, NULL}
  ]
}
==

[name=update_array_struct_with_set_null_struct]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table2
SET struct_value.array_value[OFFSET(0)] = 1
WHERE struct_value IS NULL
--
ERROR: generic::out_of_range: Cannot set field of NULL STRUCT<int64_value INT64, array_value ARRAY<INT64>, array_value2 ARRAY<INT64>>
==

[name=update_array_struct_first_element_to_null_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table2
SET struct_value.array_value[OFFSET(0)] = NULL
WHERE primary_key <= 2
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<int64_value INT64, array_value ARRAY<>, array_value2 ARRAY<>>
        >>
  [unknown order:
    {1,
     {
       10,
       ARRAY<INT64>[known order:NULL, 12, 13],
       ARRAY<INT64>[known order:111, 112, 113]
     }},
    {2,
     {
       20,
       ARRAY<INT64>[known order:NULL, 22, 23],
       ARRAY<INT64>[known order:221, 222, 223]
     }},
    {
      3,
      {30, ARRAY<INT64>(NULL), ARRAY<INT64>(NULL)}
    },
    {4, NULL}
  ]
}
==

[name=update_array_struct_second_element_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table2
SET struct_value.array_value[OFFSET(1)] = 100
WHERE primary_key <= 2
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<int64_value INT64, array_value ARRAY<>, array_value2 ARRAY<>>
        >>
  [unknown order:
    {1,
     {
       10,
       ARRAY<INT64>[known order:11, 100, 13],
       ARRAY<INT64>[known order:111, 112, 113]
     }},
    {2,
     {
       20,
       ARRAY<INT64>[known order:21, 100, 23],
       ARRAY<INT64>[known order:221, 222, 223]
     }},
    {
      3,
      {30, ARRAY<INT64>(NULL), ARRAY<INT64>(NULL)}
    },
    {4, NULL}
  ]
}
==

[name=update_array_struct_with_set_nonliteral_offset]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table2
SET struct_value.array_value[OFFSET(primary_key)] = 100
WHERE primary_key <= 2
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<int64_value INT64, array_value ARRAY<>, array_value2 ARRAY<>>
        >>
  [unknown order:
    {1,
     {
       10,
       ARRAY<INT64>[known order:11, 100, 13],
       ARRAY<INT64>[known order:111, 112, 113]
     }},
    {2,
     {
       20,
       ARRAY<INT64>[known order:21, 22, 100],
       ARRAY<INT64>[known order:221, 222, 223]
     }},
    {
      3,
      {30, ARRAY<INT64>(NULL), ARRAY<INT64>(NULL)}
    },
    {4, NULL}
  ]
}
==

[name=update_two_elements_array_struct_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table2
SET struct_value.array_value[OFFSET(0)] = 100,
    struct_value.array_value[OFFSET(1)] = 200
WHERE primary_key <= 2
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<int64_value INT64, array_value ARRAY<>, array_value2 ARRAY<>>
        >>
  [unknown order:
    {1,
     {
       10,
       ARRAY<INT64>[known order:100, 200, 13],
       ARRAY<INT64>[known order:111, 112, 113]
     }},
    {2,
     {
       20,
       ARRAY<INT64>[known order:100, 200, 23],
       ARRAY<INT64>[known order:221, 222, 223]
     }},
    {
      3,
      {30, ARRAY<INT64>(NULL), ARRAY<INT64>(NULL)}
    },
    {4, NULL}
  ]
}
==

[name=update_duplicate_elements_array_struct_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table2
SET struct_value.array_value[OFFSET(0)] = 100,
    struct_value.array_value[OFFSET(0)] = 200
WHERE primary_key <= 2
--
ERROR: generic::out_of_range: Cannot perform multiple updates to offset 0 of an ARRAY<INT64>
==

[name=update_null_array_struct_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table2 SET struct_value.array_value[OFFSET(0)] = 100 WHERE True
--
ERROR: generic::out_of_range: Cannot use [] to modify a NULL array of type ARRAY<INT64>
==

[name=update_array_struct_with_set_null_index]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table2
SET struct_value.array_value[OFFSET(NULL)] = 100
WHERE primary_key <= 2
--
ERROR: generic::out_of_range: Cannot SET a NULL offset of an ARRAY<INT64>
==

[name=update_array_struct_with_set_negative_index]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table2
SET struct_value.array_value[OFFSET(-1)] = 100
WHERE primary_key <= 2
--
ERROR: generic::out_of_range: Cannot SET array offset -1 of an ARRAY<INT64> of size 3
==

[name=update_array_struct_with_set_index_too_large]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table2
SET struct_value.array_value[OFFSET(1000)] = 100
WHERE primary_key <= 2
--
ERROR: generic::out_of_range: Cannot SET array offset 1000 of an ARRAY<INT64> of size 3
==

[name=update_array_struct_with_set_index_barely_too_large]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table2
SET struct_value.array_value[OFFSET(3)] = 100
WHERE primary_key <= 2
--
ERROR: generic::out_of_range: Cannot SET array offset 3 of an ARRAY<INT64> of size 3
==

[name=update_array_struct_long_path_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table5
SET struct_value.array1[OFFSET(0)]
                .array2[OFFSET(1)]
                .array3[OFFSET(2)]
                .array4[OFFSET(3)] = 100
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<array1 ARRAY<>>
        >>
  [{1,
      {ARRAY<STRUCT<array2 ARRAY<>>>[
         {
           ARRAY<STRUCT<array3 ARRAY<>>>[known order:
             NULL,
             {
               ARRAY<STRUCT<array4 ARRAY<>>>[known order:
                 NULL,
                 NULL,
                 {ARRAY<INT64>[known order:NULL, NULL, NULL, 100]}
               ]
             }
           ]
         }
       ]}}]}
==

[name=update_array_of_structs_field_first_element_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table6 SET array_value[OFFSET(0)].value1 = 1000
WHERE primary_key != 3
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[unknown order:
    {1,
     ARRAY<STRUCT<value1 INT64, value2 INT64>>[known order:
       {1000, 101},
       {110, 111},
       {120, 121}
     ]},
    {2,
     ARRAY<STRUCT<value1 INT64, value2 INT64>>[known order:
       {1000, 201},
       {210, 211},
       {220, 221}
     ]},
    {
      3,
      ARRAY<STRUCT<value1 INT64, value2 INT64>>(NULL)
    }
  ]}
==

[name=update_array_of_structs_field_first_element_to_null_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table6 SET array_value[OFFSET(0)].value1 = NULL
WHERE primary_key != 3
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[unknown order:
    {1,
     ARRAY<STRUCT<value1 INT64, value2 INT64>>[known order:
       {NULL, 101},
       {110, 111},
       {120, 121}
     ]},
    {2,
     ARRAY<STRUCT<value1 INT64, value2 INT64>>[known order:
       {NULL, 201},
       {210, 211},
       {220, 221}
     ]},
    {
      3,
      ARRAY<STRUCT<value1 INT64, value2 INT64>>(NULL)
    }
  ]}
==

[name=update_array_of_structs_field_second_element_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table6
SET array_value[OFFSET(1)].value1 = 1000
WHERE primary_key != 3
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[unknown order:
    {1,
     ARRAY<STRUCT<value1 INT64, value2 INT64>>[known order:
       {100, 101},
       {1000, 111},
       {120, 121}
     ]},
    {2,
     ARRAY<STRUCT<value1 INT64, value2 INT64>>[known order:
       {200, 201},
       {1000, 211},
       {220, 221}
     ]},
    {
      3,
      ARRAY<STRUCT<value1 INT64, value2 INT64>>(NULL)
    }
  ]}
==

[name=update_array_of_structs_with_set_nonliteral_offset]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table6
SET array_value[OFFSET(primary_key)].value1 = 1000
WHERE primary_key != 3
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[unknown order:
    {1,
     ARRAY<STRUCT<value1 INT64, value2 INT64>>[known order:
       {100, 101},
       {1000, 111},
       {120, 121}
     ]},
    {2,
     ARRAY<STRUCT<value1 INT64, value2 INT64>>[known order:
       {200, 201},
       {210, 211},
       {1000, 221}
     ]},
    {
      3,
      ARRAY<STRUCT<value1 INT64, value2 INT64>>(NULL)
    }
  ]}
==

[name=update_two_elements_array_of_structs_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table6
SET array_value[OFFSET(0)].value1 = 1000,
    array_value[OFFSET(1)].value1 = 2000
WHERE primary_key != 3
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[unknown order:
    {1,
     ARRAY<STRUCT<value1 INT64, value2 INT64>>[known order:
       {1000, 101},
       {2000, 111},
       {120, 121}
     ]},
    {2,
     ARRAY<STRUCT<value1 INT64, value2 INT64>>[known order:
       {1000, 201},
       {2000, 211},
       {220, 221}
     ]},
    {
      3,
      ARRAY<STRUCT<value1 INT64, value2 INT64>>(NULL)
    }
  ]}
==

[name=update_duplicate_elements_array_of_structs_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table6
SET array_value[OFFSET(0)].value1 = 1000,
    array_value[OFFSET(0)].value1 = 2000
WHERE primary_key != 3
--
ERROR: generic::out_of_range: Cannot perform multiple updates to offset 0 of an ARRAY<STRUCT<value1 INT64, value2 INT64>>
==

# TODO: Ideally the spec would allow this. See the comments for
# ResolvedUpdateItem in gen_resolved_ast.py.
[name=update_duplicate_nonoverlapping_elements_array_of_structs_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table6
SET array_value[OFFSET(0)].value1 = 1000,
    array_value[OFFSET(0)].value2 = 2000
WHERE primary_key != 3
--
ERROR: generic::out_of_range: Cannot perform multiple updates to offset 0 of an ARRAY<STRUCT<value1 INT64, value2 INT64>>
==

[name=update_null_element_in_array_of_structs_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table6 SET array_value[OFFSET(0)].value1 = 1000 WHERE True
--
ERROR: generic::out_of_range: Cannot use [] to modify a NULL array of type ARRAY<STRUCT<value1 INT64, value2 INT64>>
==

[name=update_element_in_array_of_structs_with_set_null_index]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table6
SET array_value[OFFSET(NULL)].value1 = 1000
WHERE primary_key != 3
--
ERROR: generic::out_of_range: Cannot SET a NULL offset of an ARRAY<STRUCT<value1 INT64, value2 INT64>>
==

[name=update_element_in_array_of_structs_with_set_negative_index]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table6
SET array_value[OFFSET(-1)].value1 = 1000
WHERE primary_key != 3
--
ERROR: generic::out_of_range: Cannot SET array offset -1 of an ARRAY<STRUCT<value1 INT64, value2 INT64>> of size 3
==

[name=update_element_in_array_of_structs_with_set_index_too_large]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table6
SET array_value[OFFSET(1000)].value1 = 1000
WHERE primary_key != 3
--
ERROR: generic::out_of_range: Cannot SET array offset 1000 of an ARRAY<STRUCT<value1 INT64, value2 INT64>> of size 3
==

[name=update_element_in_array_of_structs_with_set_index_barely_too_large]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table6
SET array_value[OFFSET(3)].value1 = 1000
WHERE primary_key != 3
--
ERROR: generic::out_of_range: Cannot SET array offset 3 of an ARRAY<STRUCT<value1 INT64, value2 INT64>> of size 3
==

[name=update_array_struct_complex_long_path_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table7
SET struct_value.struct1.array1[OFFSET(0)]
                .struct2.array2[OFFSET(1)]
                .struct3.array3[OFFSET(2)]
                .struct4.array4[OFFSET(3)] = 100
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  1,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<struct1 STRUCT<array1 ARRAY<>>>
        >>
  [
    {
      1,
      {
        {
          ARRAY<STRUCT<struct2 STRUCT<array2 ARRAY<>>>>[
            {
              {
                ARRAY<STRUCT<struct3 STRUCT<array3 ARRAY<>>>>[known order:
                  NULL,
                  {
                    {
                      ARRAY<STRUCT<struct4 STRUCT<array4 ARRAY<>>>>[known order:
                        NULL,
                        NULL,
                        {{ARRAY<INT64>[known order:NULL, NULL, NULL, 100]}}
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    }
  ]
}
==

[name=assign_struct_subfield]
UPDATE Table3 SET struct_value.struct_field = (50, 51) WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<
                 int64_field INT64,
                 struct_field STRUCT<nested_value1 INT64, nested_value2 INT64>
               >
        >>
  [unknown order:{1, {10, {50, 51}}}, {2, {20, {50, 51}}}]
}
==

[name=assign_struct_subfield_null]
UPDATE Table3 SET struct_value.struct_field = NULL WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<
                 int64_field INT64,
                 struct_field STRUCT<nested_value1 INT64, nested_value2 INT64>
               >
        >>
  [unknown order:{1, {10, NULL}}, {2, {20, NULL}}]
}
==

[name=assign_struct_subfield_default]
UPDATE Table3 SET struct_value.struct_field = DEFAULT WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<
                 int64_field INT64,
                 struct_field STRUCT<nested_value1 INT64, nested_value2 INT64>
               >
        >>
  [unknown order:{1, {10, NULL}}, {2, {20, NULL}}]
}
==

# Fails because struct_value.struct_field is not set in all rows.
[name=assign_null_struct_subfield]
UPDATE Table3 SET struct_value.struct_field.nested_value1 = 1000 WHERE True
--
ERROR: generic::out_of_range: Cannot set field of NULL STRUCT<nested_value1 INT64, nested_value2 INT64>
==

[name=assign_struct_sub_subfield]
UPDATE Table3 SET struct_value.struct_field.nested_value1 = 1000
WHERE struct_value.struct_field IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  1,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<
                 int64_field INT64,
                 struct_field STRUCT<nested_value1 INT64, nested_value2 INT64>
               >
        >>
  [unknown order:
    {1, {10, {1000, 12}}},
    {2, {20, NULL}}
  ]
}
==

[name=assign_struct_sub_subfield_null]
UPDATE Table3 SET struct_value.struct_field.nested_value1 = NULL
WHERE struct_value.struct_field IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  1,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<
                 int64_field INT64,
                 struct_field STRUCT<nested_value1 INT64, nested_value2 INT64>
               >
        >>
  [unknown order:
    {1, {10, {NULL, 12}}},
    {2, {20, NULL}}
  ]
}
==

[name=assign_struct_sub_subfield_default]
UPDATE Table3 SET struct_value.struct_field.nested_value1 = DEFAULT
WHERE struct_value.struct_field IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  1,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<
                 int64_field INT64,
                 struct_field STRUCT<nested_value1 INT64, nested_value2 INT64>
               >
        >>
  [unknown order:
    {1, {10, {NULL, 12}}},
    {2, {20, NULL}}
  ]
}
==

[name=assign_struct_array_sub_subfield]
UPDATE Table4 SET struct_value.struct_field.nested_array_value = [50, 51, 52]
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<primary_key INT64,
               struct_value STRUCT<int64_field INT64,
                           struct_field STRUCT<
                                  nested_value INT64,
                                  nested_array_value ARRAY<>
                                >>>>
  [unknown order:
    {1,
     {10,
      {
        11,
        ARRAY<INT64>[known order:50, 51, 52]
      }}},
    {2,
     {20,
      {
        21,
        ARRAY<INT64>[known order:50, 51, 52]
      }}}
  ]}
==

[name=assign_struct_array_sub_subfield_null]
UPDATE Table4 SET struct_value.struct_field.nested_array_value = NULL
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<primary_key INT64,
               struct_value STRUCT<int64_field INT64,
                           struct_field STRUCT<
                                  nested_value INT64,
                                  nested_array_value ARRAY<>
                                >>>>
  [unknown order:
    {1,
     {
       10,
       {11, ARRAY<INT64>(NULL)}
     }},
    {2,
     {
       20,
       {21, ARRAY<INT64>(NULL)}
     }}
  ]}
==

[name=assign_struct_array_sub_subfield_default]
UPDATE Table4 SET struct_value.struct_field.nested_array_value = DEFAULT
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<primary_key INT64,
               struct_value STRUCT<int64_field INT64,
                           struct_field STRUCT<
                                  nested_value INT64,
                                  nested_array_value ARRAY<>
                                >>>>
  [unknown order:
    {1,
     {
       10,
       {11, ARRAY<INT64>(NULL)}
     }},
    {2,
     {
       20,
       {21, ARRAY<INT64>(NULL)}
     }}
  ]}
==

[name=assign_proto_struct_field]
UPDATE Table8 SET struct_value.proto_field = "int64_key_1: 50 int64_key_2: 51"
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<
                 int64_field INT64,
                 proto_field PROTO<zetasql_test__.KitchenSinkPB>
               >
        >>
  [unknown order:
    {1,
     {10,
      {
        int64_key_1: 50
        int64_key_2: 51
      }}},
    {2,
     {20,
      {
        int64_key_1: 50
        int64_key_2: 51
      }}}
  ]}
==

[name=assign_proto_struct_field_null]
UPDATE Table8 SET struct_value.proto_field = NULL
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<
                 int64_field INT64,
                 proto_field PROTO<zetasql_test__.KitchenSinkPB>
               >
        >>
  [unknown order:{1, {10, NULL}}, {2, {20, NULL}}]}
==

[name=assign_proto_struct_field_default]
UPDATE Table8 SET struct_value.proto_field = DEFAULT
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<
                 int64_field INT64,
                 proto_field PROTO<zetasql_test__.KitchenSinkPB>
               >
        >>
  [unknown order:{1, {10, NULL}}, {2, {20, NULL}}]}
==

[name=assign_proto_subfield_in_struct]
UPDATE Table8 SET struct_value.proto_field.int64_key_1 = 1000 WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<
                 int64_field INT64,
                 proto_field PROTO<zetasql_test__.KitchenSinkPB>
               >
        >>
  [unknown order:
    {1,
     {10,
      {
        int64_key_1: 1000
        int64_key_2: 12
      }}},
    {2,
     {20,
      {
        int64_key_1: 1000
        int64_key_2: 22
      }}}
  ]}
==

# A brief, somewhat tortuous test involving an array of structs wrapping a
# repeated proto field.
[name=update_array_of_struct_with_proto_repeated_field_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table9
SET array_value[OFFSET(0)].proto_field.repeated_int64_val[OFFSET(1)] = 1000
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[
    {1,
     ARRAY<STRUCT<
             int64_field INT64,
             proto_field PROTO<zetasql_test__.KitchenSinkPB>
           >>
     [known order:
       {10,
        {
          int64_key_1: 11
          int64_key_2: 12
          repeated_int64_val: 101
          repeated_int64_val: 1000
          repeated_int64_val: 103
          nested_repeated_value {
            nested_int64: 201
          }
          nested_repeated_value {
            nested_int64: 202
          }
          nested_repeated_value {
            nested_int64: 203
          }
        }},
       NULL
     ]}
  ]}
==

# Another brief, somewhat tortuous test involving an array of structs wrapping
# a repeated proto field that wraps another field.
[name=update_array_of_struct_with_proto_repeated_field_with_set_subfield]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE Table9
SET array_value[OFFSET(0)].proto_field.nested_repeated_value[OFFSET(1)]
                                      .nested_int64 = 1000
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[
    {1,
     ARRAY<STRUCT<
             int64_field INT64,
             proto_field PROTO<zetasql_test__.KitchenSinkPB>
           >>
     [known order:
       {10,
        {
          int64_key_1: 11
          int64_key_2: 12
          repeated_int64_val: 101
          repeated_int64_val: 102
          repeated_int64_val: 103
          nested_repeated_value {
            nested_int64: 201
          }
          nested_repeated_value {
            nested_int64: 1000
          }
          nested_repeated_value {
            nested_int64: 203
          }
        }},
       NULL
     ]}
  ]}
==

[name=assign_two_struct_fields]
UPDATE Table1 SET struct_value.value1 = 100, struct_value.value2 = 200
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<value1 INT64, value2 INT64>
        >>
  [unknown order:{1, {100, 200}}, {2, {100, 200}}]}
==

[name=assign_struct_field_and_two_subfields_of_another_field]
UPDATE Table3 SET
  struct_value.int64_field = 100,
  struct_value.struct_field.nested_value1 = 200,
  struct_value.struct_field.nested_value2 = 200
WHERE struct_value.struct_field IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{
  1,
  ARRAY<STRUCT<
          primary_key INT64,
          struct_value STRUCT<
                 int64_field INT64,
                 struct_field STRUCT<nested_value1 INT64, nested_value2 INT64>
               >
        >>
  [unknown order:
    {1, {100, {200, 200}}},
    {2, {20, NULL}}
  ]
}
