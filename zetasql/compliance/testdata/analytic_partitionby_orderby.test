[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]
[load_enum_names=zetasql_test__.TestEnum]
[prepare_database]
CREATE TABLE TableAllTypes AS
SELECT CAST(1 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(null AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(10 AS uint64) as uint64_val,
       CAST(0.125 AS float) as float_val,
       CAST(0.125 AS double) as double_val,
       CAST("11" AS string) as str_val,
       CAST("1" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as timestamp_val
UNION ALL
SELECT CAST(2 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(null AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(1 AS uint32) as uint32_val,
       CAST(10 AS uint64) as uint64_val,
       CAST(0.125 AS float) as float_val,
       CAST(0.250 AS double) as double_val,
       CAST("11" AS string) as str_val,
       CAST("2" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as timestamp_val
UNION ALL
SELECT CAST(3 AS int64) as row_id,
       CAST(true AS bool) as bool_val,
       CAST(-1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(10 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST("NaN" AS float) as float_val,
       CAST("+Inf" AS double) as double_val,
       CAST("11" AS string) as str_val,
       CAST("2" AS BYTES) as bytes_val,
       CAST('2014-01-11' AS DATE) as date_val,
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC' as timestamp_val
UNION ALL
SELECT CAST(4 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(1 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(10 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST("+Inf" AS float) as float_val,
       CAST("-Inf" AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("3" AS BYTES) as bytes_val,
       CAST('2014-01-01' AS DATE) as date_val,
       TIMESTAMP '2015-01-01 00:00:01.011011 UTC' as timestamp_val
UNION ALL
SELECT CAST(5 AS int64) as row_id,
       CAST(false AS bool) as bool_val,
       CAST(2 AS int32) as int32_val,
       CAST(-1 AS int64) as int64_val,
       CAST(10 AS uint32) as uint32_val,
       CAST(1 AS uint64) as uint64_val,
       CAST("+Inf" AS float) as float_val,
       CAST("-Inf" AS double) as double_val,
       CAST("1" AS string) as str_val,
       CAST("3" AS BYTES) as bytes_val,
       CAST('2014-11-01' AS DATE) as date_val,
       TIMESTAMP '2015-01-01 01:00:01.011011 UTC' as timestamp_val
--
ARRAY<STRUCT<
        row_id INT64,
        bool_val BOOL,
        int32_val INT32,
        int64_val INT64,
        uint32_val UINT32,
        uint64_val UINT64,
        float_val FLOAT,
        double_val DOUBLE,
        str_val STRING,
        bytes_val BYTES,
        date_val DATE,
        timestamp_val TIMESTAMP
      >>
[{
   1,
   true,
   NULL,
   -1,
   1,
   10,
   0.125,
   0.125,
   "11",
   b"1",
   2014-01-01,
   2014-01-01 00:00:01.011011+00
 },
 {
   2,
   true,
   NULL,
   -1,
   1,
   10,
   0.125,
   0.25,
   "11",
   b"2",
   2014-01-01,
   2014-01-01 00:00:01.011011+00
 },
 {
   3,
   true,
   -1,
   -1,
   10,
   1,
   nan,
   inf,
   "11",
   b"2",
   2014-01-11,
   2014-01-01 00:00:01.011011+00
 },
 {
   4,
   false,
   1,
   -1,
   10,
   1,
   inf,
   -inf,
   "1",
   b"3",
   2014-01-01,
   2015-01-01 00:00:01.011011+00
 },
 {
   5,
   false,
   2,
   -1,
   10,
   1,
   inf,
   -inf,
   "1",
   b"3",
   2014-11-01,
   2015-01-01 01:00:01.011011+00
 }]
==

[default required_features=ANALYTIC_FUNCTIONS]
[name=partitionby_supported_types_1]
SELECT COUNT(row_id) OVER (PARTITION BY bool_val),
       COUNT(row_id) OVER (PARTITION BY int32_val, int64_val),
       COUNT(row_id) OVER (PARTITION BY uint32_val, uint64_val),
       COUNT(row_id) OVER (PARTITION BY str_val, bytes_val),
       COUNT(row_id) OVER (PARTITION BY timestamp_val, date_val)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64, INT64, INT64, INT64, INT64>>[unknown order:
  {3, 2, 2, 1, 2},
  {3, 2, 2, 2, 2},
  {3, 1, 3, 2, 1},
  {2, 1, 3, 2, 1},
  {2, 1, 3, 2, 1}
]
==

[name=partitionby_null]
SELECT int_val, COUNT(1) OVER (PARTITION BY int_val)
FROM (SELECT CAST(null AS INT64) as int_val UNION ALL
      SELECT 2 UNION ALL
      SELECT 3 UNION ALL
      SELECT CAST(null AS INT64) UNION ALL
      SELECT CAST(null AS INT64) UNION ALL
      SELECT CAST(null AS INT64))
--
ARRAY<STRUCT<int_val INT64, INT64>>[unknown order:
  {NULL, 4},
  {NULL, 4},
  {NULL, 4},
  {NULL, 4},
  {2, 1},
  {3, 1}
]
==

[name=partitionby_enum]
SELECT enum_val, COUNT(enum_val) OVER (PARTITION BY enum_val)
FROM (SELECT CAST(0 AS "zetasql_test__.TestEnum") enum_val UNION ALL
      SELECT CAST(1 AS "zetasql_test__.TestEnum") UNION ALL
      SELECT CAST(1 AS "zetasql_test__.TestEnum") UNION ALL
      SELECT CAST(2 AS "zetasql_test__.TestEnum") UNION ALL
      SELECT CAST(2 AS "zetasql_test__.TestEnum") UNION ALL
      SELECT CAST(null AS "zetasql_test__.TestEnum") UNION ALL
      SELECT CAST(null AS "zetasql_test__.TestEnum"))
--
ARRAY<STRUCT<
        enum_val ENUM<zetasql_test__.TestEnum>,
        INT64
      >>
[unknown order:{NULL, 0},
               {NULL, 0},
               {TESTENUM0, 1},
               {TESTENUM1, 2},
               {TESTENUM1, 2},
               {TESTENUM2, 2},
               {TESTENUM2, 2}]
==

[name=partitionby_struct]
[required_features=V_1_2_GROUP_BY_STRUCT,ANALYTIC_FUNCTIONS]
SELECT struct_val, COUNT(struct_val) OVER (PARTITION BY struct_val)
FROM (SELECT STRUCT(3, 5) struct_val UNION ALL
      SELECT STRUCT(3, 5) UNION ALL
      SELECT STRUCT(1, 5) UNION ALL
      SELECT STRUCT(3, CAST(null AS int64)))
--
ARRAY<STRUCT<
        struct_val STRUCT<INT64, INT64>,
        INT64
      >>
[unknown order:{{1, 5}, 1}, {{3, NULL}, 1}, {{3, 5}, 2}, {{3, 5}, 2}]
==

[name=partitionby_array]
[required_features=ANALYTIC_FUNCTIONS,V_1_2_GROUP_BY_ARRAY]
SELECT array_val, ROW_NUMBER() OVER (PARTITION BY array_val)
FROM (SELECT [1, 2, 3] array_val UNION ALL
      SELECT [2, 3, 4] UNION ALL SELECT [2, 3, 4])
--
ARRAY<STRUCT<array_val ARRAY<>, INT64>>[unknown order:
  {
    ARRAY<INT64>[known order:1, 2, 3],
    1
  },
  {
    ARRAY<INT64>[known order:2, 3, 4],
    1
  },
  {
    ARRAY<INT64>[known order:2, 3, 4],
    2
  }
]

NOTE: Reference implementation reports non-determinism.
==

# Partition by a correlated column reference.
[name=partitionby_correlated_column_1]
SELECT a.int64_key_1,
       (SELECT SUM(a.int64_key_1)
                   OVER (PARTITION BY a.int_with_default_nullable)
        FROM a.repeated_uint32_val r ORDER BY r LIMIT 1)
FROM (SELECT NEW zetasql_test__.KitchenSinkPB(
                     1 AS int64_key_1,
                     2 AS int64_key_2,
                     ARRAY<UINT32>[7, 8, 9]
                         as repeated_uint32_val) AS a UNION ALL
      SELECT NEW zetasql_test__.KitchenSinkPB(
                     3 AS int64_key_1,
                     4 AS int64_key_2)) AS outer_table
--
ARRAY<STRUCT<int64_key_1 INT64, INT64>>[unknown order:{3, NULL}, {1, 3}]
==

# Partition by a correlated column reference and a non-correlated reference.
[name=partitionby_correlated_column_2]
SELECT a.int64_key_1,
       (SELECT
            SUM(a.int64_key_1) OVER (PARTITION BY r,
                                                  a.int_with_default_nullable)
        FROM a.repeated_uint32_val r ORDER BY r LIMIT 1)
FROM (SELECT NEW zetasql_test__.KitchenSinkPB(
                     1 AS int64_key_1,
                     2 AS int64_key_2,
                     ARRAY<UINT32>[7, 7, 9]
                         as repeated_uint32_val) AS a UNION ALL
      SELECT NEW zetasql_test__.KitchenSinkPB(
                     3 AS int64_key_1,
                     4 AS int64_key_2)) AS outer_table
--
ARRAY<STRUCT<int64_key_1 INT64, INT64>>[unknown order:{3, NULL}, {1, 2}]
==

[name=orderby_supported_types_1]
SELECT bool_val, RANK() OVER (ORDER BY bool_val)
FROM TableAllTypes
--
ARRAY<STRUCT<bool_val BOOL, INT64>>[unknown order:
  {false, 1},
  {false, 1},
  {true, 3},
  {true, 3},
  {true, 3}
]
==

[name=orderby_supported_types_2]
SELECT int32_val, int64_val,
       RANK() OVER (ORDER BY int32_val DESC, int64_val)
FROM TableAllTypes
--
ARRAY<STRUCT<int32_val INT32, int64_val INT64, INT64>>[unknown order:
  {2, -1, 1},
  {1, -1, 2},
  {-1, -1, 3},
  {NULL, -1, 4},
  {NULL, -1, 4}
]
==

[name=orderby_supported_types_3]
SELECT uint32_val, uint64_val,
       RANK() OVER (ORDER BY uint32_val, uint64_val DESC)
FROM TableAllTypes
--
ARRAY<STRUCT<uint32_val UINT32, uint64_val UINT64, INT64>>[unknown order:
  {1, 10, 1},
  {1, 10, 1},
  {10, 1, 3},
  {10, 1, 3},
  {10, 1, 3}
]
==

[name=orderby_supported_types_4]
SELECT str_val, bytes_val,
       RANK() OVER (ORDER BY str_val, bytes_val)
FROM TableAllTypes
--
ARRAY<STRUCT<str_val STRING, bytes_val BYTES, INT64>>[unknown order:
  {"1", b"3", 1},
  {"1", b"3", 1},
  {"11", b"1", 3},
  {"11", b"2", 4},
  {"11", b"2", 4}
]
==

[name=orderby_supported_types_5]
SELECT timestamp_val, date_val,
       RANK() OVER (ORDER BY timestamp_val ASC, date_val DESC)
FROM TableAllTypes
--
ARRAY<STRUCT<
        timestamp_val TIMESTAMP,
        date_val DATE,
        INT64
      >>
[unknown order:{
                 2014-01-01 00:00:01.011011+00,
                 2014-01-11,
                 1
               },
               {
                 2014-01-01 00:00:01.011011+00,
                 2014-01-01,
                 2
               },
               {
                 2014-01-01 00:00:01.011011+00,
                 2014-01-01,
                 2
               },
               {
                 2015-01-01 00:00:01.011011+00,
                 2014-01-01,
                 4
               },
               {
                 2015-01-01 01:00:01.011011+00,
                 2014-11-01,
                 5
               }]
==

[name=orderby_float_1]
SELECT float_val, double_val, RANK() OVER (ORDER BY float_val, double_val)
FROM TableAllTypes
--
ARRAY<STRUCT<float_val FLOAT, double_val DOUBLE, INT64>>[unknown order:
  {nan, inf, 1},
  {0.125, 0.125, 2},
  {0.125, 0.25, 3},
  {inf, -inf, 4},
  {inf, -inf, 4}
]
==

[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
[name=orderby_float_2]
SELECT double_val, count(row_id) OVER (ORDER BY double_val RANGE 2 PRECEDING)
FROM TableAllTypes
--
ARRAY<STRUCT<double_val DOUBLE, INT64>>[unknown order:
  {-inf, 2},
  {-inf, 2},
  {0.125, 1},
  {0.25, 2},
  {inf, 1}
]
==

[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
[name=orderby_float_3]
SELECT double_val, count(row_id) OVER (ORDER BY float_val RANGE 2 PRECEDING)
FROM TableAllTypes
--
ARRAY<STRUCT<double_val DOUBLE, INT64>>[unknown order:
  {inf, 1},
  {0.125, 2},
  {0.25, 2},
  {-inf, 2},
  {-inf, 2}
]
==

[name=orderby_float_4]
SELECT double_val, ROW_NUMBER() OVER (ORDER BY double_val)
FROM (SELECT CAST(0 AS DOUBLE) as double_val UNION ALL
      SELECT CAST(1 AS DOUBLE)      UNION ALL
      SELECT CAST(null AS DOUBLE)   UNION ALL
      SELECT CAST(null AS DOUBLE)   UNION ALL
      SELECT CAST("NaN" AS DOUBLE)  UNION ALL
      SELECT CAST("inf" AS DOUBLE)  UNION ALL
      SELECT CAST("inf" AS DOUBLE)  UNION ALL
      SELECT CAST("NaN" AS DOUBLE)  UNION ALL
      SELECT CAST("-inf" AS DOUBLE) UNION ALL
      SELECT CAST("-inf" AS DOUBLE))
--
ARRAY<STRUCT<double_val DOUBLE, INT64>>[unknown order:
  {NULL, 1},
  {NULL, 2},
  {nan, 3},
  {nan, 4},
  {-inf, 5},
  {-inf, 6},
  {0, 7},
  {1, 8},
  {inf, 9},
  {inf, 10}
]

NOTE: Reference implementation reports non-determinism.
==

[name=rank_orderby_double]
SELECT double_val, RANK() OVER (ORDER BY double_val DESC)
FROM (SELECT CAST(0 AS DOUBLE) as double_val UNION ALL
      SELECT CAST(1 AS DOUBLE)     UNION ALL
      SELECT CAST(null AS DOUBLE)  UNION ALL
      SELECT CAST(null AS DOUBLE)  UNION ALL
      SELECT CAST("NaN" AS DOUBLE) UNION ALL
      SELECT CAST("inf" AS DOUBLE) UNION ALL
      SELECT CAST("inf" AS DOUBLE) UNION ALL
      SELECT CAST("NaN" AS DOUBLE) UNION ALL
      SELECT CAST("-inf" AS DOUBLE) UNION ALL
      SELECT CAST("-inf" AS DOUBLE))
--
ARRAY<STRUCT<double_val DOUBLE, INT64>>[unknown order:
  {inf, 1},
  {inf, 1},
  {1, 3},
  {0, 4},
  {-inf, 5},
  {-inf, 5},
  {nan, 7},
  {nan, 7},
  {NULL, 9},
  {NULL, 9}
]
==

[name=rank_orderby_float]
SELECT float_val, RANK() OVER (ORDER BY float_val DESC)
FROM (SELECT CAST(0 AS FLOAT) float_val UNION ALL
      SELECT CAST(1 AS FLOAT)      UNION ALL
      SELECT CAST(null AS FLOAT)   UNION ALL
      SELECT CAST(null AS FLOAT)   UNION ALL
      SELECT CAST("NaN" AS FLOAT)  UNION ALL
      SELECT CAST("inf" AS FLOAT)  UNION ALL
      SELECT CAST("inf" AS FLOAT)  UNION ALL
      SELECT CAST("NaN" AS FLOAT)  UNION ALL
      SELECT CAST("-inf" AS FLOAT) UNION ALL
      SELECT CAST("-inf" AS FLOAT))
--
ARRAY<STRUCT<float_val FLOAT, INT64>>[unknown order:
  {inf, 1},
  {inf, 1},
  {1, 3},
  {0, 4},
  {-inf, 5},
  {-inf, 5},
  {nan, 7},
  {nan, 7},
  {NULL, 9},
  {NULL, 9}
]
==

[name=orderby_enum]
SELECT enum_val, RANK() OVER (ORDER BY enum_val DESC)
FROM (SELECT CAST(0 AS "zetasql_test__.TestEnum") as enum_val UNION ALL
      SELECT 1 UNION ALL
      SELECT 1 UNION ALL
      SELECT 2 UNION ALL
      SELECT 2 UNION ALL
      SELECT CAST(null AS "zetasql_test__.TestEnum") UNION ALL
      SELECT CAST(null AS "zetasql_test__.TestEnum"))
--
ARRAY<STRUCT<
        enum_val ENUM<zetasql_test__.TestEnum>,
        INT64
      >>
[unknown order:{TESTENUM2, 1},
               {TESTENUM2, 1},
               {TESTENUM1, 3},
               {TESTENUM1, 3},
               {TESTENUM0, 5},
               {NULL, 6},
               {NULL, 6}]
==

[name=orderby_array]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_ARRAY_ORDERING]
SELECT array_val, RANK() OVER (ORDER BY array_val)
FROM (SELECT [1, 2, 3] array_val UNION ALL
      SELECT [2, 3, 4])
--
ARRAY<STRUCT<array_val ARRAY<>, INT64>>[unknown order:
  {
    ARRAY<INT64>[known order:1, 2, 3],
    1
  },
  {
    ARRAY<INT64>[known order:2, 3, 4],
    2
  }
]
==

[required_features=ANALYTIC_FUNCTIONS,V_1_1_ORDER_BY_COLLATE]
[name=orderby_collate_binary_us]
SELECT str_val,
       RANK() OVER (ORDER BY str_val COLLATE "binary"),
       RANK() OVER (ORDER BY str_val COLLATE 'en_US')
FROM unnest(['A', 'e', 'a', 'b', 'C', 'd', 'A']) as str_val
--
ARRAY<STRUCT<str_val STRING, INT64, INT64>>[unknown order:
  {"a", 4, 1},
  {"A", 1, 2},
  {"A", 1, 2},
  {"b", 5, 4},
  {"C", 3, 5},
  {"d", 6, 6},
  {"e", 7, 7}
]
==

[required_features=ANALYTIC_FUNCTIONS,V_1_1_ORDER_BY_COLLATE]
[name=orderby_collate_und_ci]
SELECT str_val,
       RANK() OVER (ORDER BY str_val COLLATE 'und:ci'),
       RANK() OVER (ORDER BY str_val)
FROM unnest(['A', 'e', 'a', 'b', 'C', 'd', 'A']) as str_val
--
ARRAY<STRUCT<str_val STRING, INT64, INT64>>[unknown order:
  {"A", 1, 1},
  {"A", 1, 1},
  {"C", 5, 3},
  {"a", 1, 4},
  {"b", 4, 5},
  {"d", 6, 6},
  {"e", 7, 7}
]
==

[required_features=ANALYTIC_FUNCTIONS,V_1_1_ORDER_BY_COLLATE]
[name=orderby_collate_unknown]
SELECT RANK() OVER (ORDER BY str_val COLLATE "some_collate")
FROM TableAllTypes
--
ERROR: generic::out_of_range: COLLATE has invalid collation name 'some_collate'
==

[required_features=ANALYTIC_FUNCTIONS,V_1_1_ORDER_BY_COLLATE]
[name=orderby_collate_null]
[parameters=cast(NULL as string) collation_name]
SELECT RANK() OVER (ORDER BY str_val COLLATE @collation_name)
FROM TableAllTypes
--
ERROR: generic::out_of_range: COLLATE requires non-NULL collation name
==

# Order by a correlated column reference.
[name=orderby_correlated_column_1]
SELECT b,
       (SELECT count
        FROM (SELECT count(*) OVER (ORDER BY outer_table.b) count
              FROM outer_table.a.repeated_uint32_val)
        GROUP BY count)
FROM (SELECT NEW zetasql_test__.KitchenSinkPB(
                     1 AS int64_key_1,
                     2 AS int64_key_2,
                     ARRAY<UINT32>[7, 8, 9]
                         as repeated_uint32_val) AS a, 5 b UNION ALL
      SELECT NEW zetasql_test__.KitchenSinkPB(
                     1 AS int64_key_1,
                     2 AS int64_key_2,
                     ARRAY<UINT32>[7, 8]
                         as repeated_uint32_val), 6) AS outer_table
--
ARRAY<STRUCT<b INT64, INT64>>[unknown order:{6, 2}, {5, 3}]
==

# Order by a correlated column reference with a range-based cumulative
# window frame.
[name=orderby_correlated_column_2]
SELECT b,
       (SELECT count
        FROM (SELECT count(*) OVER (ORDER BY outer_table.b
                                    RANGE 2 PRECEDING) count
              FROM outer_table.a.repeated_uint32_val)
        GROUP BY count)
FROM (SELECT NEW zetasql_test__.KitchenSinkPB(
                     1 AS int64_key_1,
                     2 AS int64_key_2,
                     ARRAY<UINT32>[7, 8, 9]
                         as repeated_uint32_val) AS a, NULL b UNION ALL
      SELECT NEW zetasql_test__.KitchenSinkPB(
                     1 AS int64_key_1,
                     2 AS int64_key_2,
                     ARRAY<UINT32>[7, 8]
                         as repeated_uint32_val) AS a, 6 b) AS outer_table
--
ARRAY<STRUCT<b INT64, INT64>>[unknown order:{6, 2}, {NULL, 3}]
==

# Order by a correlated column reference with a special range-based moving
# window frame. The window is empty if the order key is finite.
[name=orderby_correlated_column_3]
SELECT b,
       (SELECT count
        FROM (SELECT count(*) OVER (ORDER BY outer_table.b
                                    RANGE BETWEEN 2 PRECEDING AND
                                                  3 PRECEDING) count
              FROM outer_table.a.repeated_uint32_val)
        GROUP BY count)
FROM (SELECT NEW zetasql_test__.KitchenSinkPB(
                     1 AS int64_key_1,
                     2 AS int64_key_2,
                     ARRAY<UINT32>[7, 8, 9]
                         as repeated_uint32_val) AS a, NULL b UNION ALL
      SELECT NEW zetasql_test__.KitchenSinkPB(
                     1 AS int64_key_1,
                     2 AS int64_key_2,
                     ARRAY<UINT32>[7, 8, 9]
                         as repeated_uint32_val) AS a, 6 b) AS outer_table
--
ARRAY<STRUCT<b INT64, INT64>>[unknown order:{6, 0}, {NULL, 3}]
==

# Order by a correlated column reference and a non-correlated reference.
[name=orderby_correlated_column_4]
SELECT b,
       (SELECT r
        FROM (SELECT r, count(*) OVER (ORDER BY r, outer_table.b) count
              FROM outer_table.a.repeated_uint32_val r)
        WHERE count = 2
        GROUP BY r)
FROM (SELECT NEW zetasql_test__.KitchenSinkPB(
                     1 AS int64_key_1,
                     2 AS int64_key_2,
                     ARRAY<UINT32>[7, 7, 9]
                         as repeated_uint32_val) AS a, 5 b UNION ALL
      SELECT NEW zetasql_test__.KitchenSinkPB(
                     1 AS int64_key_1,
                     2 AS int64_key_2,
                     ARRAY<UINT32>[7, 8]
                         as repeated_uint32_val), 6) AS outer_table
--
ARRAY<STRUCT<b INT64, UINT32>>[unknown order:{6, 8}, {5, 7}]
==

# Partition by and order by the same column with a range-based
# cumulative window.
[name=partitionby_and_orderby_same_column_1]
SELECT int32_val, count(*) OVER (PARTITION BY int32_val ORDER BY int32_val
                                 RANGE BETWEEN UNBOUNDED PRECEDING AND
                                               CURRENT ROW)
FROM TableAllTypes
--
ARRAY<STRUCT<int32_val INT32, INT64>>[unknown order:
  {NULL, 2},
  {NULL, 2},
  {-1, 1},
  {1, 1},
  {2, 1}
]
==

# Partition by and order by the same column with a range-based
# moving window. The offset window boundary for a row depends on the value of
# the correlated order by column.
[name=partitionby_and_orderby_same_column_2]
SELECT int32_val, SUM(1) OVER (PARTITION BY int32_val ORDER BY int32_val
                               RANGE BETWEEN 2 PRECEDING AND 3 PRECEDING)
FROM TableAllTypes
--
ARRAY<STRUCT<int32_val INT32, INT64>>[unknown order:
  {NULL, 2},
  {NULL, 2},
  {-1, NULL},
  {1, NULL},
  {2, NULL}
]
==

[name=partitionby_and_orderby_countif]
SELECT int32_val, countif(int32_val > 0)
OVER (PARTITION BY int32_val ORDER BY int32_val
      RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM TableAllTypes
--
ARRAY<STRUCT<int32_val INT32, INT64>>[unknown order:
  {NULL, 0},
  {NULL, 0},
  {-1, 0},
  {1, 1},
  {2, 1}
]
==

[name=partitionby_and_orderby_countif_no_partition]
SELECT int32_val, countif(int32_val > 0)
OVER (ORDER BY int32_val RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM TableAllTypes
--
ARRAY<STRUCT<int32_val INT32, INT64>>[unknown order:
  {NULL, 0},
  {NULL, 0},
  {-1, 0},
  {1, 1},
  {2, 2}
]
==

# Partition by a constant expression.
[name=partitionby_constant_expression]
SELECT SUM(row_id) OVER (PARTITION BY 1)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64>>[unknown order:{15}, {15}, {15}, {15}, {15}]
==

# Partition by a mix of constant and non-constant expressions.
[name=partitionby_constant_and_non_constant_expressions]
SELECT SUM(row_id) OVER (PARTITION BY bool_val, 1)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64>>[unknown order:{9}, {9}, {6}, {6}, {6}]
==

# Order by a constant expression.
[name=orderby_constant_expression]
SELECT SUM(row_id) OVER (ORDER BY 1)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64>>[unknown order:{15}, {15}, {15}, {15}, {15}]
==

# Order by a mix of constant and non-constant expressions.
[name=orderby_constant_and_non_constant_expressions]
SELECT SUM(row_id) OVER (ORDER BY bool_val, 1)
FROM TableAllTypes
--
ARRAY<STRUCT<INT64>>[unknown order:{9}, {9}, {15}, {15}, {15}]
