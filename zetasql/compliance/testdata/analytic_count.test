[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]
[load_enum_names=zetasql_test__.TestEnum]
[prepare_database]
CREATE TABLE TestTable AS
SELECT cast(1 as int64) as row_id,
       cast(null as bool) as bool_val,
       cast(null as int64) as int64_val,
       cast(null as uint64) as uint64_val,
       cast(null as double) as double_val,
       cast(null as string) as str_val UNION ALL
  SELECT 2,  true,  2,    3,    1.5,  "A"   UNION ALL
  SELECT 3,  false, 1,    6,    1.5,  "A"   UNION ALL
  SELECT 4,  null,  null, 2,    2.5,  "B"   UNION ALL
  SELECT 5,  false, 1,    null, 3.5,  "A"   UNION ALL
  SELECT 6,  true,  2,    2,    null, "C"   UNION ALL
  SELECT 7,  null,  1,    5,    -0.5,  null UNION ALL
  SELECT 8,  true,  4,    2,    -1.5,  "A"  UNION ALL
  SELECT 9,  false, 2,    3,    1.5,   "B"  UNION ALL
  SELECT 10, true,  3,    1,    2.5,   "B"
--
ARRAY<STRUCT<row_id INT64,
             bool_val BOOL,
             int64_val INT64,
             uint64_val UINT64,
             double_val DOUBLE,
             str_val STRING>>
[
  {1, NULL, NULL, NULL, NULL, NULL},
  {2, true, 2, 3, 1.5, "A"},
  {3, false, 1, 6, 1.5, "A"},
  {4, NULL, NULL, 2, 2.5, "B"},
  {5, false, 1, NULL, 3.5, "A"},
  {6, true, 2, 2, NULL, "C"},
  {7, NULL, 1, 5, -0.5, NULL},
  {8, true, 4, 2, -1.5, "A"},
  {9, false, 2, 3, 1.5, "B"},
  {10, true, 3, 1, 2.5, "B"}
]
==

[prepare_database]
CREATE TABLE TableDateTimeBytes AS
SELECT cast(1 as int64) as row_id,
       cast(null as date) as date_val,
       cast(null as timestamp) as timestamp_val,
       cast(null as bytes) as bytes_val UNION ALL
SELECT 2,
       cast('2014-01-01' as date),
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC',
       cast("1" as bytes) UNION ALL
SELECT 3,
       cast('2014-01-01' as date),
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC',
       cast("2" as bytes) UNION ALL
SELECT 4,
       cast('2015-01-01' as date),
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC',
       cast("1" as bytes) UNION ALL
SELECT 5,
       cast('2015-01-01' as date),
       TIMESTAMP '2013-01-01 00:00:01.011011 UTC',
       cast("2" as bytes) UNION ALL
SELECT 6,
       cast('2014-01-01' as date),
       TIMESTAMP '2015-01-01 00:00:01.011011 UTC',
       cast("5" as bytes)
--
ARRAY<STRUCT<
        row_id INT64,
        date_val DATE,
        timestamp_val TIMESTAMP,
        bytes_val BYTES
      >>
[{1, NULL, NULL, NULL},
 {
   2,
   2014-01-01,
   2014-01-01 00:00:01.011011+00,
   b"1"
 },
 {
   3,
   2014-01-01,
   2014-01-01 00:00:01.011011+00,
   b"2"
 },
 {
   4,
   2015-01-01,
   2014-01-01 00:00:01.011011+00,
   b"1"
 },
 {
   5,
   2015-01-01,
   2013-01-01 00:00:01.011011+00,
   b"2"
 },
 {
   6,
   2014-01-01,
   2015-01-01 00:00:01.011011+00,
   b"5"
 }]
==

[prepare_database]
CREATE TABLE TableEnumStructProto AS
SELECT cast(1 as int64) as row_id,
       cast(null as "zetasql_test__.TestEnum") as enum_val,
       cast(null as STRUCT<a int64, b int64>) as struct_val,
       cast(null as "zetasql_test__.KitchenSinkPB") as proto_val UNION ALL
SELECT 2, 1, struct(2, 4),
       NEW zetasql_test__.KitchenSinkPB(6 AS int64_key_1,
                                        6 AS int64_key_2) UNION ALL
SELECT 3, 1, struct(2, 4),
       NEW zetasql_test__.KitchenSinkPB(5 AS int64_key_1,
                                        6 AS int64_key_2) UNION ALL
SELECT 4, 2, struct(3, 4),
       NEW zetasql_test__.KitchenSinkPB(6 AS int64_key_1,
                                        6 AS int64_key_2) UNION ALL
SELECT 5, 0, struct(2, cast(null as int64)),
       NEW zetasql_test__.KitchenSinkPB(5 AS int64_key_1,
                                        7 AS int64_key_2)
--
ARRAY<STRUCT<
        row_id INT64,
        enum_val ENUM<zetasql_test__.TestEnum>,
        struct_val STRUCT<a INT64, b INT64>,
        proto_val PROTO<zetasql_test__.KitchenSinkPB>
      >>
[{1, NULL, NULL, NULL},
 {2,
  TESTENUM1,
  {2, 4},
  {
    int64_key_1: 6
    int64_key_2: 6
  }},
 {3,
  TESTENUM1,
  {2, 4},
  {
    int64_key_1: 5
    int64_key_2: 6
  }},
 {4,
  TESTENUM2,
  {3, 4},
  {
    int64_key_1: 6
    int64_key_2: 6
  }},
 {5,
  TESTENUM0,
  {2, NULL},
  {
    int64_key_1: 5
    int64_key_2: 7
  }}]
==

[required_features=NUMERIC_TYPE]
[prepare_database]
CREATE TABLE NumericTestTable AS
SELECT cast(1 as int64) as row_id,
       cast(null as numeric) as numeric_val UNION ALL
  SELECT 2,  cast(1 as numeric)             UNION ALL
  SELECT 3,  cast(0.000000001 as numeric)   UNION ALL
  SELECT 4,  cast(null as numeric)   UNION ALL
  SELECT 5,  cast(99999999999999999999999999999.999999999 as numeric)   UNION ALL
  SELECT 6,  cast(-99999999999999999999999999999.999999999 as numeric)   UNION ALL
  SELECT 7,  cast(null as numeric) UNION ALL
  SELECT 8,  cast(0 as numeric)  UNION ALL
  SELECT 9,  cast(1 as numeric)  UNION ALL
  SELECT 10, cast(10 as numeric)
--
ARRAY<STRUCT<row_id INT64, numeric_val NUMERIC>>[
  {1, NULL},
  {2, 1},
  {3, 0.000000001},
  {4, NULL},
  {
    5,
    99999999999999999999999999999.999999999
  },
  {
    6,
    -99999999999999999999999999999.999999999
  },
  {7, NULL},
  {8, 0},
  {9, 1},
  {10, 10}
]
==

[required_features=BIGNUMERIC_TYPE]
[prepare_database]
CREATE TABLE BigNumericTestTable AS
SELECT cast(1 as int64) as row_id,
       cast(null as bignumeric) as bignumeric_val UNION ALL
  SELECT 2,  cast(1 as bignumeric) UNION ALL
  SELECT 3,  cast(0.00000000000000000000000000000000000001 as bignumeric) UNION ALL
  SELECT 4,  cast(null as bignumeric) UNION ALL
  SELECT 5,  cast(578960446186580977117854925043439539266.34992332820282019728792003956564819967 as bignumeric) UNION ALL
  SELECT 6,  cast(-578960446186580977117854925043439539266.34992332820282019728792003956564819968 as bignumeric) UNION ALL
  SELECT 7,  cast(null as bignumeric) UNION ALL
  SELECT 8,  cast(0 as bignumeric) UNION ALL
  SELECT 9,  cast(1 as bignumeric) UNION ALL
  SELECT 10, cast(10 as bignumeric)
--
ARRAY<STRUCT<
        row_id INT64,
        bignumeric_val BIGNUMERIC
      >>
[
  {1, NULL},
  {2, 1},
  {
    3,
    0.00000000000000000000000000000000000001
  },
  {4, NULL},
  {
    5,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967
  },
  {
    6,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968
  },
  {7, NULL},
  {8, 0},
  {9, 1},
  {10, 10}
]
==

[default required_features=ANALYTIC_FUNCTIONS]
[name=analytic_count_star_range_1]
[labels=analytic_count_with_cumulative_window]
SELECT int64_val, COUNT(*) OVER (ORDER BY int64_val RANGE UNBOUNDED PRECEDING)
FROM (SELECT int64_val FROM TestTable)
--
ARRAY<STRUCT<int64_val INT64, INT64>>[unknown order:
  {NULL, 2},
  {NULL, 2},
  {1, 5},
  {1, 5},
  {1, 5},
  {2, 8},
  {2, 8},
  {2, 8},
  {3, 9},
  {4, 10}
]
==

[name=analytic_count_star_rows_1]
[labels=analytic_count_with_cumulative_window]
SELECT int64_val, COUNT(*) OVER (ORDER BY int64_val ROWS UNBOUNDED PRECEDING)
FROM (SELECT int64_val FROM TestTable)
--
ARRAY<STRUCT<int64_val INT64, INT64>>[unknown order:
  {NULL, 1},
  {NULL, 2},
  {1, 3},
  {1, 4},
  {1, 5},
  {2, 6},
  {2, 7},
  {2, 8},
  {3, 9},
  {4, 10}
]
==

[name=analytic_count_star_2]
[labels=analytic_count_over_range_between_current_row_and_current_row]
SELECT double_val, COUNT(*) OVER (ORDER BY double_val RANGE CURRENT ROW)
FROM (SELECT 1.0 double_val UNION ALL
      SELECT 2.0 UNION ALL
      SELECT CAST(null as double) UNION ALL
      SELECT CAST("NaN" as double) UNION ALL
      SELECT CAST("INF" as double) UNION ALL
      SELECT CAST("NaN" as double) UNION ALL
      SELECT CAST("INF" as double) UNION ALL
      SELECT CAST("-INF" as double) UNION ALL
      SELECT CAST("-INF" as double) UNION ALL
      SELECT CAST(null as double))
--
ARRAY<STRUCT<double_val DOUBLE, INT64>>[unknown order:
  {NULL, 2},
  {NULL, 2},
  {nan, 2},
  {nan, 2},
  {-inf, 2},
  {-inf, 2},
  {1, 1},
  {2, 1},
  {inf, 2},
  {inf, 2}
]
==

[name=analytic_count_star_3]
[labels=analytic_count_star_over_range_between_preceding_and_preceding]
SELECT double_val,
       COUNT(*) OVER (ORDER BY double_val RANGE BETWEEN 2 PRECEDING AND
                                                        1 PRECEDING),
       COUNT(*) OVER (ORDER BY double_val RANGE BETWEEN 1 PRECEDING AND
                                                        2 PRECEDING)
FROM (SELECT 1.0 double_val UNION ALL
      SELECT 2.0 UNION ALL
      SELECT 2.5 UNION ALL
      SELECT 3.0 UNION ALL
      SELECT 4.5 UNION ALL
      SELECT 4.5 UNION ALL
      SELECT CAST(null as double) UNION ALL
      SELECT CAST("NaN" as double) UNION ALL
      SELECT CAST("INF" as double) UNION ALL
      SELECT CAST("NaN" as double) UNION ALL
      SELECT CAST("INF" as double) UNION ALL
      SELECT CAST("-INF" as double) UNION ALL
      SELECT CAST("-INF" as double) UNION ALL
      SELECT CAST(null as double))
--
ARRAY<STRUCT<double_val DOUBLE, INT64, INT64>>[unknown order:
  {NULL, 2, 2},
  {NULL, 2, 2},
  {nan, 2, 2},
  {nan, 2, 2},
  {-inf, 2, 2},
  {-inf, 2, 2},
  {1, 0, 0},
  {2, 1, 0},
  {2.5, 1, 0},
  {3, 2, 0},
  {4.5, 2, 0},
  {4.5, 2, 0},
  {inf, 2, 2},
  {inf, 2, 2}
]
==

[name=analytic_count_star_4]
[labels=analytic_count_star_over_range_between_preceding_and_preceding]
[parameters=9223372036854775807 as int64_max]
SELECT int64_val,
       COUNT(*) OVER (ORDER BY int64_val
                      RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING),
       COUNT(*) OVER (ORDER BY int64_val
                      RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING),
       COUNT(*) OVER (ORDER BY int64_val
                      RANGE BETWEEN @int64_max PRECEDING AND 2 PRECEDING),
       COUNT(*) OVER (ORDER BY int64_val DESC
                      RANGE BETWEEN @int64_max PRECEDING AND 2 PRECEDING),
       COUNT(*) OVER (ORDER BY int64_val
                      RANGE BETWEEN 2 PRECEDING AND @int64_max PRECEDING)
FROM (SELECT 1 int64_val UNION ALL
      SELECT null        UNION ALL
      SELECT 1           UNION ALL
      SELECT 1           UNION ALL
      SELECT @int64_max  UNION ALL
      SELECT null        UNION ALL
      SELECT @int64_max  UNION ALL
      SELECT 2           UNION ALL
      SELECT 5)
--
ARRAY<STRUCT<int64_val INT64, INT64, INT64, INT64, INT64, INT64>>[unknown order:
  {NULL, 2, 2, 2, 2, 2},
  {NULL, 2, 2, 2, 2, 2},
  {1, 0, 0, 0, 3, 0},
  {1, 0, 0, 0, 3, 0},
  {1, 0, 0, 0, 3, 0},
  {2, 3, 3, 0, 3, 0},
  {5, 0, 0, 4, 2, 0},
  {9223372036854775807, 0, 0, 5, 0, 0},
  {9223372036854775807, 0, 0, 5, 0, 0}
]
==

[name=analytic_count_rows_1]
[labels=analytic_count_with_cumulative_window]
SELECT int64_val,
       COUNT(int64_val) OVER (ORDER BY int64_val ROWS UNBOUNDED PRECEDING)
FROM (SELECT int64_val FROM TestTable)
--
ARRAY<STRUCT<int64_val INT64, INT64>>[unknown order:
  {NULL, 0},
  {NULL, 0},
  {1, 1},
  {1, 2},
  {1, 3},
  {2, 4},
  {2, 5},
  {2, 6},
  {3, 7},
  {4, 8}
]
==

# Same test as previous, but with RANGE instead of ROWS.
[name=analytic_count_range_1]
[labels=analytic_count_with_cumulative_window]
SELECT int64_val,
       COUNT(int64_val) OVER (ORDER BY int64_val RANGE UNBOUNDED PRECEDING)
FROM (SELECT int64_val FROM TestTable)
--
ARRAY<STRUCT<int64_val INT64, INT64>>[unknown order:
  {NULL, 0},
  {NULL, 0},
  {1, 3},
  {1, 3},
  {1, 3},
  {2, 6},
  {2, 6},
  {2, 6},
  {3, 7},
  {4, 8}
]
==

[name=analytic_count_rows_2]
[labels=analytic_count_with_cumulative_window]
SELECT int64_val, uint64_val,
       COUNT(uint64_val) OVER (ORDER BY int64_val, uint64_val DESC
                               ROWS UNBOUNDED PRECEDING)
FROM (SELECT int64_val, uint64_val FROM TestTable)
--
ARRAY<STRUCT<int64_val INT64, uint64_val UINT64, INT64>>[unknown order:
  {NULL, 2, 1},
  {NULL, NULL, 1},
  {1, 6, 2},
  {1, 5, 3},
  {1, NULL, 3},
  {2, 3, 4},
  {2, 3, 5},
  {2, 2, 6},
  {3, 1, 7},
  {4, 2, 8}
]
==

[name=analytic_count_range_2]
[labels=analytic_count_with_cumulative_window]
SELECT int64_val, uint64_val,
       COUNT(uint64_val) OVER (ORDER BY int64_val RANGE UNBOUNDED PRECEDING)
FROM (SELECT int64_val, uint64_val FROM TestTable)
ORDER BY int64_val, uint64_val DESC
--
ARRAY<STRUCT<int64_val INT64, uint64_val UINT64, INT64>>[known order:
  {NULL, 2, 1},
  {NULL, NULL, 1},
  {1, 6, 3},
  {1, 5, 3},
  {1, NULL, 3},
  {2, 3, 6},
  {2, 3, 6},
  {2, 2, 6},
  {3, 1, 7},
  {4, 2, 8}
]
==

[name=analytic_count_range_3]
[labels=analytic_count_over_range_between_preceding_and_preceding]
SELECT double_val,
       COUNT(double_val) OVER (ORDER BY double_val RANGE BETWEEN 2 PRECEDING AND
                                                                 1 PRECEDING),
       COUNT(double_val) OVER (ORDER BY double_val RANGE BETWEEN 1 PRECEDING AND
                                                                 2 PRECEDING)
FROM (SELECT 1.0 double_val UNION ALL
      SELECT 2.0 UNION ALL
      SELECT 2.5 UNION ALL
      SELECT 3.0 UNION ALL
      SELECT 4.5 UNION ALL
      SELECT 4.5 UNION ALL
      SELECT CAST(null as double) UNION ALL
      SELECT CAST("NaN" as double) UNION ALL
      SELECT CAST("INF" as double) UNION ALL
      SELECT CAST("NaN" as double) UNION ALL
      SELECT CAST("INF" as double) UNION ALL
      SELECT CAST("-INF" as double) UNION ALL
      SELECT CAST("-INF" as double) UNION ALL
      SELECT CAST(null as double))
--
ARRAY<STRUCT<double_val DOUBLE, INT64, INT64>>[unknown order:
  {NULL, 0, 0},
  {NULL, 0, 0},
  {nan, 2, 2},
  {nan, 2, 2},
  {-inf, 2, 2},
  {-inf, 2, 2},
  {1, 0, 0},
  {2, 1, 0},
  {2.5, 1, 0},
  {3, 2, 0},
  {4.5, 2, 0},
  {4.5, 2, 0},
  {inf, 2, 2},
  {inf, 2, 2}
]
==

[name=analytic_count_range_4]
[labels=analytic_count_over_range_between_preceding_and_preceding]
[parameters=9223372036854775807 as int64_max]
SELECT int64_val,
       COUNT(int64_val) OVER (ORDER BY int64_val
                              RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING),
       COUNT(int64_val) OVER (ORDER BY int64_val
                              RANGE BETWEEN 2 PRECEDING AND 1 PRECEDING),
       COUNT(int64_val) OVER (ORDER BY int64_val
                              RANGE BETWEEN @int64_max PRECEDING AND
                                            2 PRECEDING),
       COUNT(int64_val) OVER (ORDER BY int64_val DESC
                              RANGE BETWEEN @int64_max PRECEDING AND
                                            2 PRECEDING),
       COUNT(int64_val) OVER (ORDER BY int64_val
                              RANGE BETWEEN 2 PRECEDING AND
                                            @int64_max PRECEDING)
FROM (SELECT 1 int64_val UNION ALL
      SELECT null        UNION ALL
      SELECT 1           UNION ALL
      SELECT 1           UNION ALL
      SELECT @int64_max  UNION ALL
      SELECT null        UNION ALL
      SELECT @int64_max  UNION ALL
      SELECT 2           UNION ALL
      SELECT 5)
--
ARRAY<STRUCT<int64_val INT64, INT64, INT64, INT64, INT64, INT64>>[unknown order:
  {NULL, 0, 0, 0, 0, 0},
  {NULL, 0, 0, 0, 0, 0},
  {1, 0, 0, 0, 3, 0},
  {1, 0, 0, 0, 3, 0},
  {1, 0, 0, 0, 3, 0},
  {2, 3, 3, 0, 3, 0},
  {5, 0, 0, 4, 2, 0},
  {9223372036854775807, 0, 0, 5, 0, 0},
  {9223372036854775807, 0, 0, 5, 0, 0}
]
==

[name=analytic_count_int64_uint64_a]
[labels=analytic_count_with_cumulative_window]
SELECT row_id, int64_val, uint64_val,
       COUNT(int64_val) OVER (ORDER BY row_id
                              ROWS UNBOUNDED PRECEDING),
       COUNT(int64_val) OVER (ORDER BY row_id
                              RANGE UNBOUNDED PRECEDING)
From TestTable
--
ARRAY<STRUCT<row_id INT64, int64_val INT64, uint64_val UINT64, INT64, INT64>>[unknown order:
  {1, NULL, NULL, 0, 0},
  {2, 2, 3, 1, 1},
  {3, 1, 6, 2, 2},
  {4, NULL, 2, 2, 2},
  {5, 1, NULL, 3, 3},
  {6, 2, 2, 4, 4},
  {7, 1, 5, 5, 5},
  {8, 4, 2, 6, 6},
  {9, 2, 3, 7, 7},
  {10, 3, 1, 8, 8}
]
==

# Same test as previous, but with ROWS/RANGE switched.  Given that we order
# by a unique 'row_id', ROWS and RANGE behave the same.
[name=analytic_count_int64_uint64_b]
[labels=analytic_count_with_cumulative_window]
SELECT row_id, int64_val, uint64_val,
       COUNT(int64_val) OVER (ORDER BY row_id
                              RANGE UNBOUNDED PRECEDING),
       COUNT(int64_val) OVER (ORDER BY row_id
                              ROWS UNBOUNDED PRECEDING)
From TestTable
--
ARRAY<STRUCT<row_id INT64, int64_val INT64, uint64_val UINT64, INT64, INT64>>[unknown order:
  {1, NULL, NULL, 0, 0},
  {2, 2, 3, 1, 1},
  {3, 1, 6, 2, 2},
  {4, NULL, 2, 2, 2},
  {5, 1, NULL, 3, 3},
  {6, 2, 2, 4, 4},
  {7, 1, 5, 5, 5},
  {8, 4, 2, 6, 6},
  {9, 2, 3, 7, 7},
  {10, 3, 1, 8, 8}
]
==

[name=analytic_count_int32_uint32]
[labels=analytic_count_with_bounded_window]
SELECT row_id, int64_val,
       COUNT(CAST(int64_val as int32)) OVER (ORDER BY row_id ROWS 4 PRECEDING),
       COUNT(CAST(int64_val as uint32)) OVER (ORDER BY row_id ROWS 2 PRECEDING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, int64_val INT64, INT64, INT64>>[unknown order:
  {1, NULL, 0, 0},
  {2, 2, 1, 1},
  {3, 1, 2, 2},
  {4, NULL, 2, 2},
  {5, 1, 3, 2},
  {6, 2, 4, 2},
  {7, 1, 4, 3},
  {8, 4, 4, 3},
  {9, 2, 5, 3},
  {10, 3, 5, 3}
]
==

[name=analytic_count_string]
[labels=analytic_count_with_bounded_window]
SELECT row_id, str_val,
       COUNT(str_val) OVER (ORDER BY row_id ROWS 2 PRECEDING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, str_val STRING, INT64>>[unknown order:
  {1, NULL, 0},
  {2, "A", 1},
  {3, "A", 2},
  {4, "B", 3},
  {5, "A", 3},
  {6, "C", 3},
  {7, NULL, 2},
  {8, "A", 2},
  {9, "B", 2},
  {10, "B", 3}
]
==

[name=analytic_count_float_double_1]
[labels=analytic_count_over_range_between offset_preceding_and_current_row,analytic_count_over_range_between_offset_preceding_and_unbounded_following]
SELECT row_id, double_val,
       COUNT(double_val * 2.0) OVER (ORDER BY row_id RANGE 2 PRECEDING),
       COUNT(CAST(double_val as float)) OVER (ORDER BY row_id
                                              RANGE BETWEEN 2 PRECEDING AND
                                                            UNBOUNDED FOLLOWING)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, double_val DOUBLE, INT64, INT64>>[unknown order:
  {1, NULL, 0, 8},
  {2, 1.5, 1, 8},
  {3, 1.5, 2, 8},
  {4, 2.5, 3, 8},
  {5, 3.5, 3, 7},
  {6, NULL, 2, 6},
  {7, -0.5, 2, 5},
  {8, -1.5, 2, 4},
  {9, 1.5, 3, 4},
  {10, 2.5, 3, 3}
]
==

[name=analytic_count_float_double_2]
[labels=analytic_count_with_cumulative_window]
SELECT row_id, COUNT(double_val) OVER (ORDER BY row_id
                                       ROWS UNBOUNDED PRECEDING)
FROM (SELECT 1 row_id, CAST(null as double) double_val UNION ALL
      SELECT 2, 2.0 UNION ALL
      SELECT 3, CAST(null as double) UNION ALL
      SELECT 4, CAST("INF" as double) UNION ALL
      SELECT 5, CAST("NaN" as double) UNION ALL
      SELECT 6, CAST("NaN" as double) UNION ALL
      SELECT 7, CAST("-INF" as double))
--
ARRAY<STRUCT<row_id INT64, INT64>>[unknown order:
  {1, 0},
  {2, 1},
  {3, 1},
  {4, 2},
  {5, 3},
  {6, 4},
  {7, 5}
]
==

[name=analytic_count_date_timestamp]
[labels=analytic_count_with_cumulative_window]
SELECT row_id, date_val, timestamp_val,
       COUNT(date_val) OVER (ORDER BY row_id
                             RANGE UNBOUNDED PRECEDING),
       COUNT(timestamp_val) OVER (ORDER BY row_id)
FROM TableDateTimeBytes
--
ARRAY<STRUCT<
        row_id INT64,
        date_val DATE,
        timestamp_val TIMESTAMP,
        INT64,
        INT64
      >>
[unknown order:{1, NULL, NULL, 0, 0},
               {
                 2,
                 2014-01-01,
                 2014-01-01 00:00:01.011011+00,
                 1,
                 1
               },
               {
                 3,
                 2014-01-01,
                 2014-01-01 00:00:01.011011+00,
                 2,
                 2
               },
               {
                 4,
                 2015-01-01,
                 2014-01-01 00:00:01.011011+00,
                 3,
                 3
               },
               {
                 5,
                 2015-01-01,
                 2013-01-01 00:00:01.011011+00,
                 4,
                 4
               },
               {
                 6,
                 2014-01-01,
                 2015-01-01 00:00:01.011011+00,
                 5,
                 5
               }]
==

[name=analytic_count_bytes]
[labels=analytic_count_with_cumulative_window]
SELECT row_id, bytes_val,
       COUNT(bytes_val) OVER (ORDER BY row_id
                              ROWS UNBOUNDED PRECEDING)
FROM TableDateTimeBytes
--
ARRAY<STRUCT<row_id INT64, bytes_val BYTES, INT64>>[unknown order:
  {1, NULL, 0},
  {2, b"1", 1},
  {3, b"2", 2},
  {4, b"1", 3},
  {5, b"2", 4},
  {6, b"5", 5}
]
==

[name=analytic_count_proto]
[labels=analytic_count_over_range_between_unbounded_preceding_and_offset_preceding]
SELECT row_id, proto_val,
       COUNT(proto_val) OVER (ORDER BY row_id DESC
                              ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING)
FROM TableEnumStructProto
--
ARRAY<STRUCT<
        row_id INT64,
        proto_val PROTO<zetasql_test__.KitchenSinkPB>,
        INT64
      >>
[unknown order:{5,
                {
                  int64_key_1: 5
                  int64_key_2: 7
                },
                0},
               {4,
                {
                  int64_key_1: 6
                  int64_key_2: 6
                },
                1},
               {3,
                {
                  int64_key_1: 5
                  int64_key_2: 6
                },
                2},
               {2,
                {
                  int64_key_1: 6
                  int64_key_2: 6
                },
                3},
               {1, NULL, 4}]
==

[name=analytic_count_enum]
[labels=analytic_count_over_range_between_current_row_and_unbounded_following]
SELECT row_id, enum_val,
       COUNT(enum_val) OVER (ORDER BY row_id
                             RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM TableEnumStructProto
--
ARRAY<STRUCT<
        row_id INT64,
        enum_val ENUM<zetasql_test__.TestEnum>,
        INT64
      >>
[unknown order:{1, NULL, 4},
               {2, TESTENUM1, 4},
               {3, TESTENUM1, 3},
               {4, TESTENUM2, 2},
               {5, TESTENUM0, 1}]
==

[name=analytic_count_struct]
[labels=analytic_count_with_cumulative_window]
SELECT row_id, struct_val,
       COUNT(struct_val) OVER (ORDER BY row_id)
FROM TableEnumStructProto
--
ARRAY<STRUCT<
        row_id INT64,
        struct_val STRUCT<a INT64, b INT64>,
        INT64
      >>
[unknown order:{1, NULL, 0},
               {2, {2, 4}, 1},
               {3, {2, 4}, 2},
               {4, {3, 4}, 3},
               {5, {2, NULL}, 4}]
==

[name=analytic_count_struct_fields]
[labels=analytic_count_with_cumulative_window]
SELECT row_id, struct_val.a, struct_val.b,
       COUNT(struct_val) OVER (ORDER BY row_id
                               RANGE UNBOUNDED PRECEDING)
FROM TableEnumStructProto
--
ARRAY<STRUCT<row_id INT64, a INT64, b INT64, INT64>>[unknown order:
  {1, NULL, NULL, 0},
  {2, 2, 4, 1},
  {3, 2, 4, 2},
  {4, 3, 4, 3},
  {5, 2, NULL, 4}
]
==

[name=analytic_count_array]
[labels=analytic_count_with_cumulative_window]
SELECT row_id, array_val,
       COUNT(array_val) OVER (ORDER BY row_id
                              RANGE UNBOUNDED PRECEDING)
FROM (SELECT 1 row_id, [1, 2, 3] array_val UNION ALL
      SELECT 2, [2, 3, 4] UNION ALL
      SELECT 3, CAST(null as ARRAY<int64>) UNION ALL
      SELECT 4, [6, 5])
--
ARRAY<STRUCT<row_id INT64, array_val ARRAY<>, INT64>>[unknown order:
  {
    1,
    ARRAY<INT64>[known order:1, 2, 3],
    1
  },
  {
    2,
    ARRAY<INT64>[known order:2, 3, 4],
    2
  },
  {3, ARRAY<INT64>(NULL), 2},
  {
    4,
    ARRAY<INT64>[known order:6, 5],
    3
  }
]
==

[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=analytic_count_numeric_1]
[labels=analytic_count_with_cumulative_window]
SELECT row_id, numeric_val,
       COUNT(numeric_val) OVER (ORDER BY row_id
                                ROWS UNBOUNDED PRECEDING),
       COUNT(numeric_val) OVER (ORDER BY row_id
                                RANGE UNBOUNDED PRECEDING)
From NumericTestTable
--
ARRAY<STRUCT<row_id INT64, numeric_val NUMERIC, INT64, INT64>>[unknown order:
  {1, NULL, 0, 0},
  {2, 1, 1, 1},
  {3, 0.000000001, 2, 2},
  {4, NULL, 2, 2},
  {
    5,
    99999999999999999999999999999.999999999,
    3,
    3
  },
  {
    6,
    -99999999999999999999999999999.999999999,
    4,
    4
  },
  {7, NULL, 4, 4},
  {8, 0, 5, 5},
  {9, 1, 6, 6},
  {10, 10, 7, 7}
]
==

[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=analytic_count_numeric_2]
[labels=analytic_count_with_unbounded_window]
SELECT row_id, numeric_val,
       COUNT(numeric_val) OVER ()
From NumericTestTable
--
ARRAY<STRUCT<row_id INT64, numeric_val NUMERIC, INT64>>[unknown order:
  {2, 1, 7},
  {4, NULL, 7},
  {
    6,
    -99999999999999999999999999999.999999999,
    7
  },
  {8, 0, 7},
  {10, 10, 7},
  {1, NULL, 7},
  {3, 0.000000001, 7},
  {
    5,
    99999999999999999999999999999.999999999,
    7
  },
  {7, NULL, 7},
  {9, 1, 7}
]
==

[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=analytic_count_numeric_3]
[labels=analytic_count_with_bounded_window]
SELECT row_id, numeric_val,
       COUNT(numeric_val) OVER (ORDER BY row_id ROWS 2 PRECEDING)
From NumericTestTable
--
ARRAY<STRUCT<row_id INT64, numeric_val NUMERIC, INT64>>[unknown order:
  {1, NULL, 0},
  {2, 1, 1},
  {3, 0.000000001, 2},
  {4, NULL, 2},
  {
    5,
    99999999999999999999999999999.999999999,
    2
  },
  {
    6,
    -99999999999999999999999999999.999999999,
    2
  },
  {7, NULL, 2},
  {8, 0, 2},
  {9, 1, 2},
  {10, 10, 3}
]
==

[required_features=ANALYTIC_FUNCTIONS,BIGNUMERIC_TYPE]
[name=analytic_count_bignumeric_1]
[labels=analytic_count_with_cumulative_window]
SELECT row_id, bignumeric_val,
       COUNT(bignumeric_val) OVER (ORDER BY row_id
                                   ROWS UNBOUNDED PRECEDING),
       COUNT(bignumeric_val) OVER (ORDER BY row_id
                                   RANGE UNBOUNDED PRECEDING)
From BigNumericTestTable
--
ARRAY<STRUCT<
        row_id INT64,
        bignumeric_val BIGNUMERIC,
        INT64,
        INT64
      >>
[unknown order:
  {1, NULL, 0, 0},
  {2, 1, 1, 1},
  {
    3,
    0.00000000000000000000000000000000000001,
    2,
    2
  },
  {4, NULL, 2, 2},
  {
    5,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967,
    3,
    3
  },
  {
    6,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
    4,
    4
  },
  {7, NULL, 4, 4},
  {8, 0, 5, 5},
  {9, 1, 6, 6},
  {10, 10, 7, 7}
]
==

[required_features=ANALYTIC_FUNCTIONS,BIGNUMERIC_TYPE]
[name=analytic_count_bignumeric_2]
[labels=analytic_count_with_unbounded_window]
SELECT row_id, bignumeric_val,
       COUNT(bignumeric_val) OVER ()
From BigNumericTestTable
--
ARRAY<STRUCT<
        row_id INT64,
        bignumeric_val BIGNUMERIC,
        INT64
      >>
[unknown order:
  {2, 1, 7},
  {4, NULL, 7},
  {
    6,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
    7
  },
  {8, 0, 7},
  {10, 10, 7},
  {1, NULL, 7},
  {
    3,
    0.00000000000000000000000000000000000001,
    7
  },
  {
    5,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967,
    7
  },
  {7, NULL, 7},
  {9, 1, 7}
]
==

[required_features=ANALYTIC_FUNCTIONS,BIGNUMERIC_TYPE]
[name=analytic_count_bignumeric_3]
[labels=analytic_count_with_bounded_window]
SELECT row_id, bignumeric_val,
       COUNT(bignumeric_val) OVER (ORDER BY row_id ROWS 2 PRECEDING)
From BigNumericTestTable
--
ARRAY<STRUCT<
        row_id INT64,
        bignumeric_val BIGNUMERIC,
        INT64
      >>
[unknown order:
  {1, NULL, 0},
  {2, 1, 1},
  {
    3,
    0.00000000000000000000000000000000000001,
    2
  },
  {4, NULL, 2},
  {
    5,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967,
    2
  },
  {
    6,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
    2
  },
  {7, NULL, 2},
  {8, 0, 2},
  {9, 1, 2},
  {10, 10, 3}
]
==

[name=analytic_count_distinct_1]
[labels=analytic_count_distinct]
SELECT row_id, int64_val,
       COUNT(DISTINCT int64_val) OVER ()
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, int64_val INT64, INT64>>[unknown order:
  {2, 2, 4},
  {4, NULL, 4},
  {6, 2, 4},
  {8, 4, 4},
  {10, 3, 4},
  {1, NULL, 4},
  {3, 1, 4},
  {5, 1, 4},
  {7, 1, 4},
  {9, 2, 4}
]
==

[name=analytic_count_distinct_2]
[labels=analytic_count_distinct]
SELECT row_id, double_val,
       COUNT(DISTINCT double_val) OVER ()
FROM (SELECT 1 row_id, 1.0 double_val UNION ALL
      SELECT 2, 2.0 UNION ALL
      SELECT 3, CAST(null as double) UNION ALL
      SELECT 4, 2.0 UNION ALL
      SELECT 5, CAST("INF" as double) UNION ALL
      SELECT 6, CAST("NaN" as double) UNION ALL
      SELECT 7, CAST("NaN" as double) UNION ALL
      SELECT 8, CAST("INF" as double) UNION ALL
      SELECT 9, CAST("-INF" as double) UNION ALL
      SELECT 10, CAST("-INF" as double))
--
ARRAY<STRUCT<row_id INT64, double_val DOUBLE, INT64>>[unknown order:
  {2, 2, 5},
  {4, 2, 5},
  {6, nan, 5},
  {8, inf, 5},
  {10, -inf, 5},
  {1, 1, 5},
  {3, NULL, 5},
  {5, inf, 5},
  {7, nan, 5},
  {9, -inf, 5}
]
==

[name=analytic_count_distinct_3]
[labels=analytic_count_distinct]
SELECT row_id,
       COUNT(DISTINCT bool_val) OVER test_window,
       COUNT(DISTINCT CAST(int64_val as int32)) OVER test_window,
       COUNT(DISTINCT int64_val) OVER test_window,
       COUNT(DISTINCT CAST(uint64_val as uint32)) OVER test_window,
       COUNT(DISTINCT uint64_val) OVER test_window,
       COUNT(DISTINCT str_val) OVER test_window
FROM TestTable
WINDOW test_window AS (PARTITION BY bool_val)
--
ARRAY<STRUCT<row_id INT64, INT64, INT64, INT64, INT64, INT64, INT64>>[unknown order:
  {1, 0, 1, 1, 2, 2, 1},
  {4, 0, 1, 1, 2, 2, 1},
  {7, 0, 1, 1, 2, 2, 1},
  {5, 1, 2, 2, 2, 2, 2},
  {3, 1, 2, 2, 2, 2, 2},
  {9, 1, 2, 2, 2, 2, 2},
  {6, 1, 3, 3, 3, 3, 3},
  {10, 1, 3, 3, 3, 3, 3},
  {2, 1, 3, 3, 3, 3, 3},
  {8, 1, 3, 3, 3, 3, 3}
]
==

[name=analytic_count_distinct_4]
[labels=analytic_count_distinct]
SELECT row_id,
       COUNT(DISTINCT double_val) OVER test_window,
       COUNT(DISTINCT CAST(double_val as float)) OVER test_window
FROM TestTable
WINDOW test_window AS (PARTITION BY bool_val)
--
ARRAY<STRUCT<row_id INT64, INT64, INT64>>[unknown order:
  {1, 2, 2},
  {4, 2, 2},
  {7, 2, 2},
  {5, 2, 2},
  {3, 2, 2},
  {9, 2, 2},
  {6, 3, 3},
  {10, 3, 3},
  {2, 3, 3},
  {8, 3, 3}
]
==

[name=analytic_count_distinct_5]
[labels=analytic_count_distinct]
SELECT row_id,
       COUNT(DISTINCT bytes_val) OVER (),
       COUNT(DISTINCT date_val) OVER (),
       COUNT(DISTINCT timestamp_val) OVER ()
FROM TableDateTimeBytes
--
ARRAY<STRUCT<row_id INT64, INT64, INT64, INT64>>[unknown order:
  {2, 3, 2, 3},
  {4, 3, 2, 3},
  {6, 3, 2, 3},
  {1, 3, 2, 3},
  {3, 3, 2, 3},
  {5, 3, 2, 3}
]
==

[name=analytic_count_distinct_6]
[labels=analytic_count_distinct]
SELECT row_id, enum_val,
       COUNT(DISTINCT enum_val) OVER ()
FROM TableEnumStructProto
--
ARRAY<STRUCT<
        row_id INT64,
        enum_val ENUM<zetasql_test__.TestEnum>,
        INT64
      >>
[unknown order:{2, TESTENUM1, 3},
               {4, TESTENUM2, 3},
               {1, NULL, 3},
               {3, TESTENUM1, 3},
               {5, TESTENUM0, 3}]
==

[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=analytic_count_distinct_numeric]
[labels=analytic_count_distinct]
SELECT row_id, numeric_val,
       COUNT(DISTINCT numeric_val) OVER ()
FROM NumericTestTable
--
ARRAY<STRUCT<row_id INT64, numeric_val NUMERIC, INT64>>[unknown order:
  {2, 1, 6},
  {4, NULL, 6},
  {
    6,
    -99999999999999999999999999999.999999999,
    6
  },
  {8, 0, 6},
  {10, 10, 6},
  {1, NULL, 6},
  {3, 0.000000001, 6},
  {
    5,
    99999999999999999999999999999.999999999,
    6
  },
  {7, NULL, 6},
  {9, 1, 6}
]
==

[required_features=ANALYTIC_FUNCTIONS,BIGNUMERIC_TYPE]
[name=analytic_count_distinct_bignumeric]
[labels=analytic_count_distinct]
SELECT row_id, bignumeric_val,
       COUNT(DISTINCT bignumeric_val) OVER ()
FROM BigNumericTestTable
--
ARRAY<STRUCT<
        row_id INT64,
        bignumeric_val BIGNUMERIC,
        INT64
      >>
[unknown order:
  {2, 1, 6},
  {4, NULL, 6},
  {
    6,
    -578960446186580977117854925043439539266.34992332820282019728792003956564819968,
    6
  },
  {8, 0, 6},
  {10, 10, 6},
  {1, NULL, 6},
  {
    3,
    0.00000000000000000000000000000000000001,
    6
  },
  {
    5,
    578960446186580977117854925043439539266.34992332820282019728792003956564819967,
    6
  },
  {7, NULL, 6},
  {9, 1, 6}
]
==

[name=analytic_count_star_total_1]
[labels=analytic_count_with_unbounded_window]
SELECT int64_val,
       COUNT(*) OVER ()
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<int64_val INT64, INT64>>[known order:
  {NULL, 10},
  {NULL, 10},
  {1, 10},
  {1, 10},
  {1, 10},
  {2, 10},
  {2, 10},
  {2, 10},
  {3, 10},
  {4, 10}
]
==

# These tests analytic_count_star_total_2[a,b,c,d] are semantically equivalent
# to the previous test.  Since the window frame is the entire data set, the
# OVER clause ORDER BY is irrelevant and ROWS/RANGE behave the same.
[name=analytic_count_star_total_2a]
[labels=analytic_count_with_unbounded_window]
SELECT int64_val,
       COUNT(*) OVER (
         ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<int64_val INT64, INT64>>[known order:
  {NULL, 10},
  {NULL, 10},
  {1, 10},
  {1, 10},
  {1, 10},
  {2, 10},
  {2, 10},
  {2, 10},
  {3, 10},
  {4, 10}
]
==

[name=analytic_count_star_total_2b]
[labels=analytic_count_with_unbounded_window]
SELECT int64_val,
       COUNT(*) OVER (
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<int64_val INT64, INT64>>[known order:
  {NULL, 10},
  {NULL, 10},
  {1, 10},
  {1, 10},
  {1, 10},
  {2, 10},
  {2, 10},
  {2, 10},
  {3, 10},
  {4, 10}
]
==

[name=analytic_count_star_total_2c]
[labels=analytic_count_with_unbounded_window]
SELECT int64_val,
       COUNT(*) OVER (
         ORDER BY int64_val
         ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<int64_val INT64, INT64>>[known order:
  {NULL, 10},
  {NULL, 10},
  {1, 10},
  {1, 10},
  {1, 10},
  {2, 10},
  {2, 10},
  {2, 10},
  {3, 10},
  {4, 10}
]
==

[name=analytic_count_star_total_2d]
[labels=analytic_count_with_unbounded_window]
SELECT int64_val,
       COUNT(*) OVER (
         ORDER BY int64_val
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<int64_val INT64, INT64>>[known order:
  {NULL, 10},
  {NULL, 10},
  {1, 10},
  {1, 10},
  {1, 10},
  {2, 10},
  {2, 10},
  {2, 10},
  {3, 10},
  {4, 10}
]
==

# These are similar to the previous, but selecting and ordering by a different
# column type.
[name=analytic_count_star_total_3a]
[labels=analytic_count_with_unbounded_window]
SELECT uint64_val,
       COUNT(*) OVER (
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<uint64_val UINT64, INT64>>[known order:
  {NULL, 10},
  {NULL, 10},
  {1, 10},
  {2, 10},
  {2, 10},
  {2, 10},
  {3, 10},
  {3, 10},
  {5, 10},
  {6, 10}
]
==

[name=analytic_count_star_total_3b]
[labels=analytic_count_with_unbounded_window]
SELECT uint64_val,
       COUNT(*) OVER (
         ORDER BY int64_val
         ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<uint64_val UINT64, INT64>>[known order:
  {NULL, 10},
  {NULL, 10},
  {1, 10},
  {2, 10},
  {2, 10},
  {2, 10},
  {3, 10},
  {3, 10},
  {5, 10},
  {6, 10}
]
==

# These are similar to the previous COUNT(*) tests, but are COUNT(<expr>)
# instead.
[name=analytic_count_expr_total_1]
[labels=analytic_count_with_unbounded_window]
SELECT int64_val,
       COUNT(int64_val) OVER ()
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<int64_val INT64, INT64>>[known order:
  {NULL, 8},
  {NULL, 8},
  {1, 8},
  {1, 8},
  {1, 8},
  {2, 8},
  {2, 8},
  {2, 8},
  {3, 8},
  {4, 8}
]
==

# These are semantically equivalent to the previous test.  Since the window
# frame is the entire data set, the ORDER BY is irrelevant and ROWS/RANGE
# behave the same.
[name=analytic_count_expr_total_2a]
[labels=analytic_count_with_unbounded_window]
SELECT int64_val,
       COUNT(int64_val) OVER (
         ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<int64_val INT64, INT64>>[known order:
  {NULL, 8},
  {NULL, 8},
  {1, 8},
  {1, 8},
  {1, 8},
  {2, 8},
  {2, 8},
  {2, 8},
  {3, 8},
  {4, 8}
]
==

[name=analytic_count_expr_total_2b]
[labels=analytic_count_with_unbounded_window]
SELECT int64_val,
       COUNT(int64_val) OVER (
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<int64_val INT64, INT64>>[known order:
  {NULL, 8},
  {NULL, 8},
  {1, 8},
  {1, 8},
  {1, 8},
  {2, 8},
  {2, 8},
  {2, 8},
  {3, 8},
  {4, 8}
]
==

[name=analytic_count_expr_total_2c]
[labels=analytic_count_with_unbounded_window]
SELECT int64_val,
       COUNT(int64_val) OVER (
         ORDER BY int64_val
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<int64_val INT64, INT64>>[known order:
  {NULL, 8},
  {NULL, 8},
  {1, 8},
  {1, 8},
  {1, 8},
  {2, 8},
  {2, 8},
  {2, 8},
  {3, 8},
  {4, 8}
]
==

[name=analytic_count_expr_total_2d]
[labels=analytic_count_with_unbounded_window]
SELECT int64_val,
       COUNT(int64_val) OVER (
         ORDER BY int64_val
         ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<int64_val INT64, INT64>>[known order:
  {NULL, 8},
  {NULL, 8},
  {1, 8},
  {1, 8},
  {1, 8},
  {2, 8},
  {2, 8},
  {2, 8},
  {3, 8},
  {4, 8}
]
==

# The next few tests are similar to the previous, but they select and order
# by a different column types.
[name=analytic_count_expr_total_3]
[labels=analytic_count_with_unbounded_window]
SELECT uint64_val,
       COUNT(uint64_val) OVER (
         ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<uint64_val UINT64, INT64>>[known order:
  {NULL, 8},
  {NULL, 8},
  {1, 8},
  {2, 8},
  {2, 8},
  {2, 8},
  {3, 8},
  {3, 8},
  {5, 8},
  {6, 8}
]
==

[name=analytic_count_expr_total_4]
[labels=analytic_count_with_unbounded_window]
SELECT double_val,
       COUNT(double_val) OVER (
         ORDER BY double_val
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<double_val DOUBLE, INT64>>[known order:
  {NULL, 8},
  {NULL, 8},
  {-1.5, 8},
  {-0.5, 8},
  {1.5, 8},
  {1.5, 8},
  {1.5, 8},
  {2.5, 8},
  {2.5, 8},
  {3.5, 8}
]
==

[name=analytic_count_expr_total_5a]
[labels=analytic_count_with_unbounded_window]
SELECT str_val,
       COUNT(str_val) OVER (
         ORDER BY double_val
         ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<str_val STRING, INT64>>[known order:
  {NULL, 8},
  {NULL, 8},
  {"A", 8},
  {"A", 8},
  {"A", 8},
  {"A", 8},
  {"B", 8},
  {"B", 8},
  {"B", 8},
  {"C", 8}
]
==

[name=analytic_count_expr_total_5b]
[labels=analytic_count_with_unbounded_window]
SELECT str_val,
       COUNT(str_val) OVER (
         ORDER BY int64_val, str_val
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<str_val STRING, INT64>>[known order:
  {NULL, 8},
  {NULL, 8},
  {"A", 8},
  {"A", 8},
  {"A", 8},
  {"A", 8},
  {"B", 8},
  {"B", 8},
  {"B", 8},
  {"C", 8}
]
==

[name=analytic_count_expr_total_5c]
[labels=analytic_count_with_unbounded_window]
SELECT str_val,
       COUNT(str_val) OVER (
         ORDER BY str_val
         ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<str_val STRING, INT64>>[known order:
  {NULL, 8},
  {NULL, 8},
  {"A", 8},
  {"A", 8},
  {"A", 8},
  {"A", 8},
  {"B", 8},
  {"B", 8},
  {"B", 8},
  {"C", 8}
]
==

# Count of more interesting expressions, with and without final projections
[name=analytic_count_expr_total_6]
[labels=analytic_count_with_unbounded_window]
SELECT int64_val, double_val,
       COUNT(int64_val + double_val) OVER (
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       ),
       COUNT(int64_val + double_val) OVER (
         ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       ) + 2
FROM TestTable
ORDER BY 1, 2
--
ARRAY<STRUCT<int64_val INT64, double_val DOUBLE, INT64, INT64>>[known order:
  {NULL, NULL, 7, 9},
  {NULL, 2.5, 7, 9},
  {1, -0.5, 7, 9},
  {1, 1.5, 7, 9},
  {1, 3.5, 7, 9},
  {2, NULL, 7, 9},
  {2, 1.5, 7, 9},
  {2, 1.5, 7, 9},
  {3, 2.5, 7, 9},
  {4, -1.5, 7, 9}
]
==

# Subtotal counts, with PARTITION BY
[name=analytic_count_star_and_expr_subtotal_1]
[labels=analytic_count_with_unbounded_window]
SELECT bool_val, int64_val, double_val,
       COUNT(*) OVER (
         PARTITION BY bool_val
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       ),
       COUNT(int64_val) OVER (
         PARTITION BY bool_val
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       ),
       COUNT(double_val) OVER (
         PARTITION BY bool_val
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1, 2, 3
--
ARRAY<STRUCT<bool_val BOOL, int64_val INT64, double_val DOUBLE, INT64, INT64, INT64>>[known order:
  {NULL, NULL, NULL, 3, 1, 2},
  {NULL, NULL, 2.5, 3, 1, 2},
  {NULL, 1, -0.5, 3, 1, 2},
  {false, 1, 1.5, 3, 3, 3},
  {false, 1, 3.5, 3, 3, 3},
  {false, 2, 1.5, 3, 3, 3},
  {true, 2, NULL, 4, 4, 3},
  {true, 2, 1.5, 4, 4, 3},
  {true, 3, 2.5, 4, 4, 3},
  {true, 4, -1.5, 4, 4, 3}
]
==

[name=analytic_count_star_and_expr_subtotal_2]
[labels=analytic_count_with_unbounded_window]
SELECT str_val, int64_val, double_val,
       COUNT(*) OVER (
         PARTITION BY str_val
       ),
       COUNT(int64_val) OVER (
         PARTITION BY str_val
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       ),
       COUNT(double_val) OVER (
         PARTITION BY str_val
       ),
       COUNT(str_val) OVER (
         PARTITION BY str_val
         ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       ),
       COUNT(bool_val) OVER (
         PARTITION BY str_val
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1, 2, 3
--
ARRAY<STRUCT<str_val STRING,
             int64_val INT64,
             double_val DOUBLE,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[known order:
  {NULL, NULL, NULL, 2, 1, 1, 0, 0},
  {NULL, 1, -0.5, 2, 1, 1, 0, 0},
  {"A", 1, 1.5, 4, 4, 4, 4, 4},
  {"A", 1, 3.5, 4, 4, 4, 4, 4},
  {"A", 2, 1.5, 4, 4, 4, 4, 4},
  {"A", 4, -1.5, 4, 4, 4, 4, 4},
  {"B", NULL, 2.5, 3, 2, 3, 3, 2},
  {"B", 2, 1.5, 3, 2, 3, 3, 2},
  {"B", 3, 2.5, 3, 2, 3, 3, 2},
  {"C", 2, NULL, 1, 1, 0, 1, 1}
]
==

[name=analytic_count_star_and_expr_subtotal_3]
[labels=analytic_count_with_unbounded_window]
SELECT bool_val, str_val, int64_val, double_val,
       COUNT(*) OVER (
         PARTITION BY bool_val
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       ),
       COUNT(int64_val) OVER (
         PARTITION BY bool_val
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       ),
       COUNT(*) OVER (
         PARTITION BY str_val
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       ),
       COUNT(double_val) OVER (
         PARTITION BY str_val
         RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
       )
FROM TestTable
ORDER BY 1, 2, 3, 4
--
ARRAY<STRUCT<bool_val BOOL,
             str_val STRING,
             int64_val INT64,
             double_val DOUBLE,
             INT64,
             INT64,
             INT64,
             INT64>>
[known order:
  {NULL, NULL, NULL, NULL, 3, 1, 2, 1},
  {NULL, NULL, 1, -0.5, 3, 1, 2, 1},
  {NULL, "B", NULL, 2.5, 3, 1, 3, 3},
  {false, "A", 1, 1.5, 3, 3, 4, 4},
  {false, "A", 1, 3.5, 3, 3, 4, 4},
  {false, "B", 2, 1.5, 3, 3, 3, 3},
  {true, "A", 2, 1.5, 4, 4, 4, 4},
  {true, "A", 4, -1.5, 4, 4, 4, 4},
  {true, "B", 3, 2.5, 4, 4, 3, 3},
  {true, "C", 2, NULL, 4, 4, 1, 0}
]
==

[name=analytic_count_star_range_trailing_moving_1]
[parameters=9223372036854775807 as int64_max]
SELECT int64_val,
       COUNT(*) OVER (ORDER BY int64_val
                      RANGE BETWEEN 0 PRECEDING AND CURRENT ROW),
       COUNT(*) OVER (ORDER BY int64_val
                      RANGE BETWEEN 1 PRECEDING AND CURRENT ROW),
       COUNT(*) OVER (ORDER BY int64_val DESC
                      RANGE BETWEEN 2 PRECEDING AND CURRENT ROW),
       COUNT(*) OVER (ORDER BY int64_val
                      RANGE BETWEEN @int64_max PRECEDING AND CURRENT ROW)
FROM TestTable
--
ARRAY<STRUCT<int64_val INT64, INT64, INT64, INT64, INT64>>[unknown order:
  {NULL, 2, 2, 2, 2},
  {NULL, 2, 2, 2, 2},
  {1, 3, 3, 7, 3},
  {1, 3, 3, 7, 3},
  {1, 3, 3, 7, 3},
  {2, 3, 6, 5, 6},
  {2, 3, 6, 5, 6},
  {2, 3, 6, 5, 6},
  {3, 1, 4, 2, 7},
  {4, 1, 2, 1, 8}
]
==

[name=analytic_count_star_range_trailing_moving_2]
[parameters=cast(2147483647 as int32) as int32_max]
SELECT uint64_val,
       COUNT(*) OVER (ORDER BY uint64_val
                      RANGE BETWEEN 2 PRECEDING AND CURRENT ROW),
       COUNT(*) OVER (ORDER BY cast(uint64_val as uint32)
                      RANGE BETWEEN 3 PRECEDING AND CURRENT ROW),
       COUNT(*) OVER (ORDER BY cast(uint64_val as int32)
                      RANGE BETWEEN @int32_max PRECEDING AND CURRENT ROW)
FROM TestTable
--
ARRAY<STRUCT<uint64_val UINT64, INT64, INT64, INT64>>[unknown order:
  {NULL, 2, 2, 2},
  {NULL, 2, 2, 2},
  {1, 1, 1, 1},
  {2, 4, 4, 4},
  {2, 4, 4, 4},
  {2, 4, 4, 4},
  {3, 6, 6, 6},
  {3, 6, 6, 6},
  {5, 3, 6, 7},
  {6, 2, 4, 8}
]
==

[name=analytic_count_star_range_trailing_moving_3]
SELECT double_val,
       COUNT(*) OVER (ORDER BY double_val
                      RANGE BETWEEN 2.5 PRECEDING AND CURRENT ROW),
       COUNT(*) OVER (ORDER BY cast(double_val as float) DESC
                      RANGE BETWEEN 1.5 PRECEDING AND CURRENT ROW)
FROM TestTable
--
ARRAY<STRUCT<double_val DOUBLE, INT64, INT64>>[unknown order:
  {3.5, 6, 1},
  {2.5, 5, 3},
  {2.5, 5, 3},
  {1.5, 4, 5},
  {1.5, 4, 5},
  {1.5, 4, 5},
  {-0.5, 2, 1},
  {-1.5, 1, 2},
  {NULL, 2, 2},
  {NULL, 2, 2}
]
==

[name=analytic_count_star_range_trailing_moving_4]
[labels=analytic_count_star_over_range_between_preceding_and_following]
[parameters=-1 as offset]
SELECT int64_val,
       COUNT(*) OVER (ORDER BY int64_val
                      RANGE BETWEEN @offset PRECEDING AND CURRENT ROW)
FROM TestTable
--
ERROR: generic::out_of_range: Window frame offset for PRECEDING or FOLLOWING must be non-negative, but was -1
==

[name=analytic_count_star_negative_offset_following]
[labels=analytic_count_star_over_range_between_preceding_and_following]
[parameters=-1 as offset]
SELECT int64_val,
       COUNT(*) OVER (ORDER BY int64_val
                      RANGE BETWEEN 1 PRECEDING AND @offset FOLLOWING)
FROM TestTable
--
ERROR: generic::out_of_range: Window frame offset for PRECEDING or FOLLOWING must be non-negative, but was -1
==

[name=analytic_count_expr_negative_offset_following]
[parameters=-1 as offset]
SELECT int64_val,
       COUNT(int64_val) OVER (ORDER BY int64_val
                              RANGE BETWEEN 1 PRECEDING AND @offset FOLLOWING)
FROM TestTable
--
ERROR: generic::out_of_range: Window frame offset for PRECEDING or FOLLOWING must be non-negative, but was -1
==

[name=analytic_count_expr_range_trailing_moving_1]
[parameters=9223372036854775807 as int64_max]
SELECT int64_val,
       COUNT(int64_val) OVER (ORDER BY int64_val
                              RANGE BETWEEN 0 PRECEDING AND CURRENT ROW),
       COUNT(int64_val) OVER (ORDER BY int64_val
                              RANGE BETWEEN 1 PRECEDING AND CURRENT ROW),
       COUNT(int64_val) OVER (ORDER BY int64_val
                              RANGE BETWEEN 2 PRECEDING AND CURRENT ROW),
       COUNT(int64_val) OVER (ORDER BY int64_val
                              RANGE BETWEEN @int64_max PRECEDING AND
                                            CURRENT ROW)
FROM TestTable
--
ARRAY<STRUCT<int64_val INT64, INT64, INT64, INT64, INT64>>[unknown order:
  {NULL, 0, 0, 0, 0},
  {NULL, 0, 0, 0, 0},
  {1, 3, 3, 3, 3},
  {1, 3, 3, 3, 3},
  {1, 3, 3, 3, 3},
  {2, 3, 6, 6, 6},
  {2, 3, 6, 6, 6},
  {2, 3, 6, 6, 6},
  {3, 1, 4, 7, 7},
  {4, 1, 2, 5, 8}
]
==

[name=analytic_count_expr_range_trailing_moving_2]
[parameters=cast(2147483647 as int32) as int32_max]
SELECT uint64_val,
       COUNT(uint64_val) OVER (ORDER BY uint64_val
                               RANGE BETWEEN 2 PRECEDING AND CURRENT ROW),
       COUNT(uint64_val) OVER (ORDER BY cast(uint64_val as uint32)
                               RANGE BETWEEN 3 PRECEDING AND CURRENT ROW),
       COUNT(uint64_val) OVER (ORDER BY cast(uint64_val as int32)
                               RANGE BETWEEN @int32_max PRECEDING AND
                                             CURRENT ROW)
FROM TestTable
--
ARRAY<STRUCT<uint64_val UINT64, INT64, INT64, INT64>>[unknown order:
  {NULL, 0, 0, 0},
  {NULL, 0, 0, 0},
  {1, 1, 1, 1},
  {2, 4, 4, 4},
  {2, 4, 4, 4},
  {2, 4, 4, 4},
  {3, 6, 6, 6},
  {3, 6, 6, 6},
  {5, 3, 6, 7},
  {6, 2, 4, 8}
]
==

[name=analytic_count_expr_range_trailing_moving_3]
SELECT double_val, bool_val,
       COUNT(bool_val) OVER (ORDER BY double_val
                             RANGE BETWEEN 2.5 PRECEDING AND CURRENT ROW),
       COUNT(bool_val) OVER (ORDER BY cast(double_val as float) DESC
                             RANGE BETWEEN 1.0 PRECEDING AND CURRENT ROW)
FROM TestTable
--
ARRAY<STRUCT<double_val DOUBLE, bool_val BOOL, INT64, INT64>>[unknown order:
  {3.5, false, 5, 1},
  {2.5, true, 4, 2},
  {2.5, NULL, 4, 2},
  {1.5, false, 3, 4},
  {1.5, true, 3, 4},
  {1.5, false, 3, 4},
  {-0.5, NULL, 1, 0},
  {-1.5, true, 1, 1},
  {NULL, NULL, 1, 1},
  {NULL, true, 1, 1}
]
==

[name=analytic_count_expr_range_trailing_moving_4]
[parameters=-1 as offset]
SELECT int64_val,
       COUNT(*) OVER (ORDER BY int64_val
                      RANGE BETWEEN @offset PRECEDING AND CURRENT ROW)
FROM TestTable
--
ERROR: generic::out_of_range: Window frame offset for PRECEDING or FOLLOWING must be non-negative, but was -1
==

[name=analytic_count_over_range_between_preceding_and_following_order_by_double_asc]
[labels=analytic_count_star_over_range_between_preceding_and_following,analytic_count_expr_over_range_between_preceding_and_following]
SELECT double_val, int64_val,
       COUNT(int64_val + double_val) OVER (
         ORDER BY double_val
         RANGE BETWEEN 1.5 PRECEDING AND 1.5 FOLLOWING
       ),
       COUNT(*) OVER (
         ORDER BY double_val
         RANGE BETWEEN 2.5 PRECEDING AND 1.0 FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64, INT64>>[unknown order:
  {NULL, 2, 0, 2},
  {NULL, NULL, 0, 2},
  {-1.5, 4, 2, 2},
  {-0.5, 1, 2, 2},
  {1.5, 2, 4, 6},
  {1.5, 1, 4, 6},
  {1.5, 2, 4, 6},
  {2.5, 3, 5, 6},
  {2.5, NULL, 5, 6},
  {3.5, 1, 2, 6}
]
==

[name=analytic_count_over_range_between_preceding_and_following_order_by_double_desc]
[labels=analytic_count_star_over_range_between_preceding_and_following,analytic_count_expr_over_range_between_preceding_and_following]
SELECT double_val, int64_val,
       COUNT(int64_val + double_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 1.5 PRECEDING AND 1.5 FOLLOWING
       ),
       COUNT(*) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 2.5 PRECEDING AND 1.0 FOLLOWING
       )
FROM TestTable
ORDER BY 1 DESC
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64, INT64>>[unknown order:
  {3.5, 1, 2, 3},
  {2.5, 3, 5, 6},
  {2.5, NULL, 5, 6},
  {1.5, 1, 4, 6},
  {1.5, 2, 4, 6},
  {1.5, 2, 4, 6},
  {-0.5, 1, 2, 5},
  {-1.5, 4, 2, 2},
  {NULL, 2, 0, 2},
  {NULL, NULL, 0, 2}
]
==

[name=analytic_count_over_range_between_preceding_and_following_order_by_int64_asc]
[labels=analytic_count_star_over_range_between_preceding_and_following,analytic_count_expr_over_range_between_preceding_and_following]
SELECT int64_val, double_val,
       COUNT(int64_val + double_val) OVER (
         ORDER BY int64_val
         RANGE BETWEEN 0 PRECEDING AND 100 FOLLOWING
       ),
       COUNT(int64_val + double_val) OVER (
         ORDER BY int64_val
         RANGE BETWEEN 2 PRECEDING AND 3 FOLLOWING
       ),
       COUNT(*) OVER (
         ORDER BY int64_val
         RANGE BETWEEN 100 PRECEDING AND 0 FOLLOWING
       ),
       COUNT(*) OVER (
         ORDER BY int64_val
         RANGE BETWEEN 3 PRECEDING AND 1 FOLLOWING
       )
FROM TestTable
ORDER BY 1
--
ARRAY<STRUCT<int64_val INT64, double_val DOUBLE, INT64, INT64, INT64, INT64>>[unknown order:
  {NULL, 2.5, 0, 0, 2, 2},
  {NULL, NULL, 0, 0, 2, 2},
  {1, 1.5, 7, 7, 3, 6},
  {1, 3.5, 7, 7, 3, 6},
  {1, -0.5, 7, 7, 3, 6},
  {2, NULL, 4, 7, 6, 7},
  {2, 1.5, 4, 7, 6, 7},
  {2, 1.5, 4, 7, 6, 7},
  {3, 2.5, 2, 7, 7, 8},
  {4, -1.5, 1, 4, 8, 8}
]
==

[name=analytic_count_over_range_between_preceding_and_following_order_by_int64_desc]
[labels=analytic_count_star_over_range_between_preceding_and_following,analytic_count_expr_over_range_between_preceding_and_following]
SELECT int64_val, double_val,
       COUNT(int64_val + double_val) OVER (
         ORDER BY int64_val DESC
         RANGE BETWEEN 0 PRECEDING AND 100 FOLLOWING
       ),
       COUNT(int64_val + double_val) OVER (
         ORDER BY int64_val DESC
         RANGE BETWEEN 2 PRECEDING AND 3 FOLLOWING
       ),
       COUNT(*) OVER (
         ORDER BY int64_val DESC
         RANGE BETWEEN 100 PRECEDING AND 0 FOLLOWING
       ),
       COUNT(*) OVER (
         ORDER BY int64_val DESC
         RANGE BETWEEN 3 PRECEDING AND 1 FOLLOWING
       )
FROM TestTable
ORDER BY 1 DESC
--
ARRAY<STRUCT<int64_val INT64, double_val DOUBLE, INT64, INT64, INT64, INT64>>[unknown order:
  {4, -1.5, 7, 7, 1, 2},
  {3, 2.5, 6, 7, 2, 5},
  {2, 1.5, 5, 7, 5, 8},
  {2, NULL, 5, 7, 5, 8},
  {2, 1.5, 5, 7, 5, 8},
  {1, 3.5, 3, 6, 8, 8},
  {1, -0.5, 3, 6, 8, 8},
  {1, 1.5, 3, 6, 8, 8},
  {NULL, 2.5, 0, 0, 2, 2},
  {NULL, NULL, 0, 0, 2, 2}
]
==

[name=analytic_count_over_range_between_preceding_and_following_with_partition_by]
[labels=analytic_count_star_over_range_between_preceding_and_following,analytic_count_expr_over_range_between_preceding_and_following]
SELECT bool_val, int64_val, double_val,
       COUNT(*) OVER (
         PARTITION BY bool_val
         ORDER BY int64_val
         RANGE BETWEEN 3 PRECEDING AND 4 FOLLOWING
       ),
       COUNT(double_val) OVER (
         PARTITION BY bool_val
         ORDER BY int64_val
         RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING
       ),
       COUNT(double_val) OVER (
         PARTITION BY bool_val
         ORDER BY int64_val
         RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING
       )
FROM TestTable
ORDER BY 1, 2, 3
--
ARRAY<STRUCT<bool_val BOOL, int64_val INT64, double_val DOUBLE, INT64, INT64, INT64>>[known order:
  {NULL, NULL, NULL, 2, 1, 1},
  {NULL, NULL, 2.5, 2, 1, 1},
  {NULL, 1, -0.5, 1, 1, 1},
  {false, 1, 1.5, 3, 3, 2},
  {false, 1, 3.5, 3, 3, 2},
  {false, 2, 1.5, 3, 3, 1},
  {true, 2, NULL, 4, 2, 1},
  {true, 2, 1.5, 4, 2, 1},
  {true, 3, 2.5, 4, 3, 1},
  {true, 4, -1.5, 4, 3, 1}
]
==

[name=analytic_count_over_range_between_preceding_and_following_with_large_offsets_asc]
[labels=analytic_count_star_over_range_between_preceding_and_following,analytic_count_expr_over_range_between_preceding_and_following]
[parameters=9223372036854775807 as int64_max]
SELECT int64_val, double_val,
       COUNT(*) OVER (
         ORDER BY int64_val
         RANGE BETWEEN @int64_max PRECEDING AND 0 FOLLOWING
       ),
       COUNT(double_val) OVER (
         ORDER BY int64_val
         RANGE BETWEEN 0 PRECEDING AND @int64_max FOLLOWING
       ),
       COUNT(double_val) OVER (
         ORDER BY int64_val
         RANGE BETWEEN @int64_max PRECEDING AND @int64_max FOLLOWING
       )
FROM TestTable
ORDER BY 1, 2
--
ARRAY<STRUCT<int64_val INT64, double_val DOUBLE, INT64, INT64, INT64>>[known order:
  {NULL, NULL, 2, 1, 1},
  {NULL, 2.5, 2, 1, 1},
  {1, -0.5, 3, 7, 7},
  {1, 1.5, 3, 7, 7},
  {1, 3.5, 3, 7, 7},
  {2, NULL, 6, 4, 7},
  {2, 1.5, 6, 4, 7},
  {2, 1.5, 6, 4, 7},
  {3, 2.5, 7, 2, 7},
  {4, -1.5, 8, 1, 7}
]
==

[name=analytic_count_over_range_between_preceding_and_following_with_large_offsets_desc]
[labels=analytic_count_star_over_range_between_preceding_and_following,analytic_count_expr_over_range_between_preceding_and_following]
[parameters=9223372036854775807 as int64_max]
SELECT int64_val, double_val,
       COUNT(*) OVER (
         ORDER BY int64_val DESC
         RANGE BETWEEN @int64_max PRECEDING AND 0 FOLLOWING
       ),
       COUNT(double_val) OVER (
         ORDER BY int64_val DESC
         RANGE BETWEEN 0 PRECEDING AND @int64_max FOLLOWING
       ),
       COUNT(double_val) OVER (
         ORDER BY int64_val DESC
         RANGE BETWEEN @int64_max PRECEDING AND @int64_max FOLLOWING
       )
FROM TestTable
ORDER BY 1 DESC, 2
--
ARRAY<STRUCT<int64_val INT64, double_val DOUBLE, INT64, INT64, INT64>>[known order:
  {4, -1.5, 1, 7, 7},
  {3, 2.5, 2, 6, 7},
  {2, NULL, 5, 5, 7},
  {2, 1.5, 5, 5, 7},
  {2, 1.5, 5, 5, 7},
  {1, -0.5, 8, 3, 7},
  {1, 1.5, 8, 3, 7},
  {1, 3.5, 8, 3, 7},
  {NULL, NULL, 2, 1, 1},
  {NULL, 2.5, 2, 1, 1}
]
==

[name=analytic_count_over_range_between_preceding_and_following_orderby_uint32_desc_with_small_values]
[labels=analytic_count_star_over_range_between_preceding_and_following,analytic_count_expr_over_range_between_preceding_and_following]
SELECT uint32_val, double_val,
       COUNT(double_val) OVER (
         ORDER BY uint32_val DESC
         RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING
       ),
       COUNT(*) OVER (
         ORDER BY uint32_val DESC
         RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING
       )
FROM (SELECT CAST(0 AS uint32) uint32_val, NULL double_val UNION ALL
      SELECT CAST(1 AS uint32),            1.0 UNION ALL
      SELECT CAST(2 AS uint32),            2.0 UNION ALL
      SELECT CAST(3 AS uint32),            3.0 UNION ALL
      SELECT NULL,                         4.0)
ORDER BY 1 DESC
--
ARRAY<STRUCT<uint32_val UINT32, double_val DOUBLE, INT64, INT64>>[known order:
  {3, 3, 3, 3},
  {2, 2, 3, 4},
  {1, 1, 2, 3},
  {0, NULL, 1, 2},
  {NULL, 4, 1, 1}
]
==

[name=analytic_count_over_range_between_preceding_and_following_orderby_float_desc_with_neg_inf]
[labels=analytic_count_star_over_range_between_preceding_and_following,analytic_count_expr_over_range_between_preceding_and_following]
[parameters=-1.79769e+308 as min_double_val,
            cast("-inf" as double) as neg_inf]
SELECT double_val, int64_val,
       COUNT(int64_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       ),
       COUNT(*) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       )
FROM (SELECT @min_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @neg_inf,                   4 UNION ALL
      SELECT @neg_inf,                   4)
ORDER BY 1 DESC
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64, INT64>>[known order:
  {3, 3, 3, 3},
  {2, 2, 3, 3},
  {1, 1, 2, 2},
  {-1.79769e+308, NULL, 0, 1},
  {-inf, 4, 2, 2},
  {-inf, 4, 2, 2}
]
==

[name=analytic_count_over_range_between_preceding_and_following_orderby_float_desc_with_nan]
[labels=analytic_count_star_over_range_between_preceding_and_following,analytic_count_expr_over_range_between_preceding_and_following]
[parameters=-1.79769e+308 as min_double_val,
            cast("nan" as double) as nan]
SELECT double_val, int64_val,
       COUNT(int64_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       ),
       COUNT(*) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       )
FROM (SELECT @min_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @nan,                       4)
ORDER BY 1 DESC
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64, INT64>>[known order:
  {3, 3, 3, 3},
  {2, 2, 3, 3},
  {1, 1, 2, 2},
  {-1.79769e+308, NULL, 0, 1},
  {nan, 4, 1, 1}
]
==

[name=analytic_count_over_range_between_preceding_and_following_orderby_float_desc_with_special_values]
[labels=analytic_count_star_over_range_between_preceding_and_following,analytic_count_expr_over_range_between_preceding_and_following]
[parameters=-1.79769e+308 as min_double_val,
            cast("nan" as double) as nan,
            cast("-inf" as double) as neg_inf]
SELECT double_val, int64_val,
       COUNT(int64_val) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       ),
       COUNT(*) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       )
FROM (SELECT @min_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @nan,                       4 UNION ALL
      SELECT @neg_inf,                   5 UNION ALL
      SELECT @neg_inf,                   6 UNION ALL
      SELECT NULL,                       8)
ORDER BY 1 DESC
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64, INT64>>[unknown order:
  {3, 3, 3, 3},
  {2, 2, 3, 3},
  {1, 1, 2, 2},
  {-1.79769e+308, NULL, 0, 1},
  {-inf, 5, 2, 2},
  {-inf, 6, 2, 2},
  {nan, 4, 1, 1},
  {NULL, 8, 1, 1}
]
==

[name=analytic_count_over_range_between_preceding_and_following_orderby_asc_with_large_values]
[labels=analytic_count_star_over_range_between_preceding_and_following,analytic_count_expr_over_range_between_preceding_and_following]
[parameters=1.79769e+308 as max_double_val,
            cast("+inf" as double) as pos_inf]
SELECT double_val, int64_val,
       COUNT(int64_val) OVER (
         ORDER BY double_val
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       ),
       COUNT(*) OVER (
         ORDER BY double_val
         RANGE BETWEEN 1 PRECEDING AND 9223372036854775807 FOLLOWING
       )
FROM (SELECT @max_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1 UNION ALL
      SELECT 2,                          2 UNION ALL
      SELECT 3,                          3 UNION ALL
      SELECT @pos_inf,                   4)
ORDER BY 1
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64, INT64>>[known order:
  {1, 1, 3, 3},
  {2, 2, 3, 3},
  {3, 3, 2, 2},
  {1.79769e+308, NULL, 0, 1},
  {inf, 4, 1, 1}
]
==

[name=analytic_count_range_current_row_and_offset_following_asc]
[labels=analytic_count_star_over_range_between_current_and_following,analytic_count_expr_over_range_between_current_and_following]
[parameters=9223372036854775807 as int64_max]
SELECT int64_val, double_val,
       COUNT(*) OVER (
         ORDER BY int64_val
         RANGE BETWEEN CURRENT ROW AND 0 FOLLOWING
       ),
       COUNT(double_val) OVER (
         ORDER BY int64_val
         RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING
       ),
       COUNT(double_val) OVER (
         ORDER BY int64_val
         RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING
       ),
       COUNT(double_val) OVER (
         ORDER BY int64_val
         RANGE BETWEEN CURRENT ROW AND 3 FOLLOWING
       ),
       COUNT(double_val) OVER (
         ORDER BY int64_val
         RANGE BETWEEN CURRENT ROW AND 100 FOLLOWING
       ),
       COUNT(double_val) OVER (
         ORDER BY int64_val
         RANGE BETWEEN CURRENT ROW AND @int64_max FOLLOWING
       )
FROM TestTable
--
ARRAY<STRUCT<int64_val INT64,
             double_val DOUBLE,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[unknown order:
  {NULL, 2.5, 2, 1, 1, 1, 1, 1},
  {NULL, NULL, 2, 1, 1, 1, 1, 1},
  {1, 1.5, 3, 5, 6, 7, 7, 7},
  {1, 3.5, 3, 5, 6, 7, 7, 7},
  {1, -0.5, 3, 5, 6, 7, 7, 7},
  {2, NULL, 3, 3, 4, 4, 4, 4},
  {2, 1.5, 3, 3, 4, 4, 4, 4},
  {2, 1.5, 3, 3, 4, 4, 4, 4},
  {3, 2.5, 1, 2, 2, 2, 2, 2},
  {4, -1.5, 1, 1, 1, 1, 1, 1}
]
==

[name=analytic_count_range_current_row_and_offset_following_desc]
[labels=analytic_count_star_over_range_between_current_and_following,analytic_count_expr_over_range_between_current_and_following]
[parameters=9223372036854775807 as int64_max]
SELECT int64_val, double_val,
       COUNT(*) OVER (
         ORDER BY int64_val DESC
         RANGE BETWEEN CURRENT ROW AND 0 FOLLOWING
       ),
       COUNT(double_val) OVER (
         ORDER BY int64_val DESC
         RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING
       ),
       COUNT(double_val) OVER (
         ORDER BY int64_val DESC
         RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING
       ),
       COUNT(double_val) OVER (
         ORDER BY int64_val DESC
         RANGE BETWEEN CURRENT ROW AND 3 FOLLOWING
       ),
       COUNT(double_val) OVER (
         ORDER BY int64_val DESC
         RANGE BETWEEN CURRENT ROW AND 100 FOLLOWING
       ),
       COUNT(double_val) OVER (
         ORDER BY int64_val DESC
         RANGE BETWEEN CURRENT ROW AND @int64_max FOLLOWING
       )
FROM TestTable
--
ARRAY<STRUCT<int64_val INT64,
             double_val DOUBLE,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64,
             INT64>>
[unknown order:
  {4, -1.5, 1, 2, 4, 7, 7, 7},
  {3, 2.5, 1, 3, 6, 6, 6, 6},
  {2, 1.5, 3, 5, 5, 5, 5, 5},
  {2, NULL, 3, 5, 5, 5, 5, 5},
  {2, 1.5, 3, 5, 5, 5, 5, 5},
  {1, 3.5, 3, 3, 3, 3, 3, 3},
  {1, -0.5, 3, 3, 3, 3, 3, 3},
  {1, 1.5, 3, 3, 3, 3, 3, 3},
  {NULL, 2.5, 2, 1, 1, 1, 1, 1},
  {NULL, NULL, 2, 1, 1, 1, 1, 1}
]
==

[name=analytic_count_range_current_row_and_offset_following_special_double_order_keys_asc]
[labels=analytic_count_star_over_range_between_current_and_following,analytic_count_expr_over_range_between_current_and_following]
[parameters=-1.79769e+308 as min_double_val,
            1.79769e+308 as max_double_val,
            cast("nan" as double) as nan,
            cast("-inf" as double) as neg_inf]
SELECT double_val, int64_val,
       COUNT(*) OVER (
         ORDER BY double_val
         RANGE BETWEEN CURRENT ROW AND 9223372036854775807 FOLLOWING
       )
FROM (SELECT @min_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1              UNION ALL
      SELECT 2,                          2              UNION ALL
      SELECT 3,                          NULL           UNION ALL
      SELECT @nan,                       NULL           UNION ALL
      SELECT @neg_inf,                   5              UNION ALL
      SELECT @neg_inf,                   6              UNION ALL
      SELECT NULL,                       NULL           UNION ALL
      SELECT @nan,                       7              UNION ALL
      SELECT @nan,                       1              UNION ALL
      SELECT @max_double_val,            1              UNION ALL
      SELECT NULL,                       8)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[unknown order:
  {NULL, 8, 2},
  {NULL, NULL, 2},
  {nan, NULL, 3},
  {nan, 1, 3},
  {nan, 7, 3},
  {-inf, 6, 2},
  {-inf, 5, 2},
  {-1.79769e+308, NULL, 1},
  {1, 1, 3},
  {2, 2, 2},
  {3, NULL, 1},
  {1.79769e+308, 1, 1}
]
==

[name=analytic_count_range_current_row_and_offset_following_special_double_order_keys_desc]
[labels=analytic_count_star_over_range_between_current_and_following,analytic_count_expr_over_range_between_current_and_following]
[parameters=-1.79769e+308 as min_double_val,
            1.79769e+308 as max_double_val,
            cast("nan" as double) as nan,
            cast("-inf" as double) as neg_inf]
SELECT double_val, int64_val,
       COUNT(*) OVER (
         ORDER BY double_val DESC
         RANGE BETWEEN CURRENT ROW AND 9223372036854775807 FOLLOWING
       )
FROM (SELECT @min_double_val double_val, NULL int64_val UNION ALL
      SELECT 1,                          1              UNION ALL
      SELECT 2,                          2              UNION ALL
      SELECT 3,                          NULL           UNION ALL
      SELECT @nan,                       NULL           UNION ALL
      SELECT @neg_inf,                   5              UNION ALL
      SELECT @neg_inf,                   6              UNION ALL
      SELECT NULL,                       NULL           UNION ALL
      SELECT @nan,                       7              UNION ALL
      SELECT @nan,                       1              UNION ALL
      SELECT @max_double_val,            1              UNION ALL
      SELECT NULL,                       8)
--
ARRAY<STRUCT<double_val DOUBLE, int64_val INT64, INT64>>[unknown order:
  {1.79769e+308, 1, 1},
  {3, NULL, 3},
  {2, 2, 2},
  {1, 1, 1},
  {-1.79769e+308, NULL, 1},
  {-inf, 6, 2},
  {-inf, 5, 2},
  {nan, NULL, 3},
  {nan, 1, 3},
  {nan, 7, 3},
  {NULL, 8, 2},
  {NULL, NULL, 2}
]
==

[name=analytic_count_range_current_row_and_offset_following_special_uint32_order_keys_asc]
[labels=analytic_count_star_over_range_between_current_and_following,analytic_count_expr_over_range_between_current_and_following]
[parameters=4294967295 as max_uint32]
SELECT uint32_val, int64_val,
       COUNT(*) OVER (
         ORDER BY uint32_val
         RANGE BETWEEN CURRENT ROW AND 0 FOLLOWING
       ),
       COUNT(*) OVER (
         ORDER BY uint32_val
         RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING
       ),
       COUNT(int64_val) OVER (
         ORDER BY uint32_val
         RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING
       ),
       COUNT(int64_val) OVER (
         ORDER BY uint32_val
         RANGE BETWEEN CURRENT ROW AND 3 FOLLOWING
       ),
       COUNT(int64_val) OVER (
         ORDER BY uint32_val
         RANGE BETWEEN CURRENT ROW AND 4294967290 FOLLOWING
       )
FROM (SELECT CAST(0 AS UINT32) uint32_val, NULL int64_val UNION ALL
      SELECT NULL,                         8              UNION ALL
      SELECT CAST(1 AS UINT32),            1              UNION ALL
      SELECT CAST(1 AS UINT32),            2              UNION ALL
      SELECT CAST(3 AS UINT32),            NULL           UNION ALL
      SELECT CAST(2 AS UINT32),            NULL           UNION ALL
      SELECT CAST(3 AS UINT32),            5              UNION ALL
      SELECT CAST(1 AS UINT32),            6              UNION ALL
      SELECT CAST(5 AS UINT32),            2              UNION ALL
      SELECT CAST(6 AS UINT32),            7              UNION ALL
      SELECT @max_uint32,                  1              UNION ALL
      SELECT CAST(0 AS UINT32),            1              UNION ALL
      SELECT NULL,                         5              UNION ALL
      SELECT @max_uint32,                  5              UNION ALL
      SELECT NULL,                         8)
--
ARRAY<STRUCT<uint32_val INT64, int64_val INT64, INT64, INT64, INT64, INT64, INT64>>[unknown order:
  {NULL, 8, 3, 3, 3, 3, 3},
  {NULL, 5, 3, 3, 3, 3, 3},
  {NULL, 8, 3, 3, 3, 3, 3},
  {0, NULL, 2, 5, 4, 5, 7},
  {0, 1, 2, 5, 4, 5, 7},
  {1, 6, 3, 4, 4, 4, 6},
  {1, 1, 3, 4, 4, 4, 6},
  {1, 2, 3, 4, 4, 4, 6},
  {2, NULL, 1, 3, 1, 2, 3},
  {3, 5, 2, 2, 2, 3, 3},
  {3, NULL, 2, 2, 2, 3, 3},
  {5, 2, 1, 2, 2, 2, 4},
  {6, 7, 1, 1, 1, 1, 3},
  {4294967295, 1, 2, 2, 2, 2, 2},
  {4294967295, 5, 2, 2, 2, 2, 2}
]
==

[name=analytic_count_range_current_row_and_offset_following_special_uint32_order_keys_desc]
[labels=analytic_count_star_over_range_between_current_and_following,analytic_count_expr_over_range_between_current_and_following]
[parameters=4294967295 as max_uint32]
SELECT uint32_val, int64_val,
       COUNT(*) OVER (
         ORDER BY uint32_val DESC
         RANGE BETWEEN CURRENT ROW AND 0 FOLLOWING
       ),
       COUNT(*) OVER (
         ORDER BY uint32_val DESC
         RANGE BETWEEN CURRENT ROW AND 1 FOLLOWING
       ),
       COUNT(int64_val) OVER (
         ORDER BY uint32_val DESC
         RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING
       ),
       COUNT(int64_val) OVER (
         ORDER BY uint32_val DESC
         RANGE BETWEEN CURRENT ROW AND 3 FOLLOWING
       ),
       COUNT(int64_val) OVER (
         ORDER BY uint32_val DESC
         RANGE BETWEEN CURRENT ROW AND 4294967290 FOLLOWING
       )
FROM (SELECT CAST(0 AS UINT32) uint32_val, NULL int64_val UNION ALL
      SELECT NULL,                         8              UNION ALL
      SELECT CAST(1 AS UINT32),            1              UNION ALL
      SELECT CAST(1 AS UINT32),            2              UNION ALL
      SELECT CAST(3 AS UINT32),            NULL           UNION ALL
      SELECT CAST(2 AS UINT32),            NULL           UNION ALL
      SELECT CAST(3 AS UINT32),            5              UNION ALL
      SELECT CAST(1 AS UINT32),            6              UNION ALL
      SELECT CAST(5 AS UINT32),            2              UNION ALL
      SELECT CAST(6 AS UINT32),            7              UNION ALL
      SELECT @max_uint32,                  1              UNION ALL
      SELECT CAST(0 AS UINT32),            1              UNION ALL
      SELECT NULL,                         5              UNION ALL
      SELECT @max_uint32,                  5              UNION ALL
      SELECT NULL,                         8)
--
ARRAY<STRUCT<uint32_val INT64, int64_val INT64, INT64, INT64, INT64, INT64, INT64>>[unknown order:
  {4294967295, 5, 2, 2, 2, 2, 4},
  {4294967295, 1, 2, 2, 2, 2, 4},
  {6, 7, 1, 2, 2, 3, 7},
  {5, 2, 1, 1, 2, 2, 6},
  {3, NULL, 2, 3, 4, 5, 5},
  {3, 5, 2, 3, 4, 5, 5},
  {2, NULL, 1, 4, 4, 4, 4},
  {1, 6, 3, 5, 4, 4, 4},
  {1, 1, 3, 5, 4, 4, 4},
  {1, 2, 3, 5, 4, 4, 4},
  {0, 1, 2, 2, 1, 1, 1},
  {0, NULL, 2, 2, 1, 1, 1},
  {NULL, 8, 3, 3, 3, 3, 3},
  {NULL, 5, 3, 3, 3, 3, 3},
  {NULL, 8, 3, 3, 3, 3, 3}
]
