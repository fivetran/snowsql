[load_proto_files=zetasql/testdata/test_schema.proto]
[load_enum_names=zetasql_test__.TestEnum, zetasql_test__.AnotherTestEnum, zetasql_test__.TestEnumWithAlias, zetasql_test__.TestEnumWithAnnotations]
[name=enum_1]
SELECT CAST(0 AS "zetasql_test__.TestEnum") enum_value0,
       CAST(1 AS "zetasql_test__.TestEnum") enum_value1,
       CAST(2 AS "zetasql_test__.TestEnum") enum_value2,
       CAST(2147483647 AS "zetasql_test__.TestEnum") enum_value2147483647
--
ARRAY<STRUCT<
        enum_value0 ENUM<zetasql_test__.TestEnum>,
        enum_value1 ENUM<zetasql_test__.TestEnum>,
        enum_value2 ENUM<zetasql_test__.TestEnum>,
        enum_value2147483647 ENUM<zetasql_test__.TestEnum>
      >>[{TESTENUM0, TESTENUM1, TESTENUM2, TESTENUM2147483647}]
==
[name=enum_2]
SELECT CAST(10 AS "zetasql_test__.TestEnum") invalid_enum_value
--
ERROR: generic::out_of_range: Out of range cast of integer 10 to enum type zetasql_test__.TestEnum
==
[name=enum_3]
SELECT CAST(0 AS "zetasql_test__.TestEnum") enum_value,
       CAST(1 AS "zetasql_test__.AnotherTestEnum") another_enum_value
--
ARRAY<STRUCT<
        enum_value ENUM<zetasql_test__.TestEnum>,
        another_enum_value ENUM<zetasql_test__.AnotherTestEnum>
      >>[{TESTENUM0, ANOTHERTESTENUM1}]
==
[name=enum_4]
SELECT IF(FALSE, CAST(1 AS "zetasql_test__.TestEnum"), NULL) enum_value
--
ARRAY<STRUCT<enum_value ENUM<zetasql_test__.TestEnum>>>[{NULL}]
==
[name=enum_5]
SELECT [CAST(1 AS "zetasql_test__.TestEnum"), NULL] enum_value
--
ARRAY<STRUCT<enum_value ARRAY<>>>[
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[known order:TESTENUM1, NULL]}
]
==
[name=enum_6]
SELECT (SELECT AS STRUCT CAST(0 AS "zetasql_test__.TestEnum") enum_value,
                         CAST(1 AS "zetasql_test__.AnotherTestEnum") another_enum_value)
       struct_val
--
ARRAY<STRUCT<
        struct_val STRUCT<
               enum_value ENUM<zetasql_test__.TestEnum>,
               another_enum_value ENUM<zetasql_test__.AnotherTestEnum>
             >
      >>[{{TESTENUM0, ANOTHERTESTENUM1}}]
==
[name=enum_from_string]
SELECT CAST("TESTENUM0" AS "zetasql_test__.TestEnum") enum_value
--
ARRAY<STRUCT<enum_value ENUM<zetasql_test__.TestEnum>>>[{TESTENUM0}]
==
[name=enum_from_string_case_sensitive]
SELECT CAST("TeStEnUm0" AS "zetasql_test__.TestEnum") enum_value
--
ERROR: generic::out_of_range: Out of range cast of string 'TeStEnUm0' to enum type zetasql_test__.TestEnum; Did you mean 'TESTENUM0'? (Note: ENUM values are case sensitive)
==
[name=enum_from_string_invalid]
SELECT CAST("invalid_enum_name" AS "zetasql_test__.TestEnum") enum_value
--
ERROR: generic::out_of_range: Out of range cast of string 'invalid_enum_name' to enum type zetasql_test__.TestEnum
==
[name=enum_to_string]
SELECT CAST(CAST(0 AS "zetasql_test__.TestEnum") AS STRING) string_value
--
ARRAY<STRUCT<string_value STRING>>[{"TESTENUM0"}]
==
[name=enum_to_int32]
SELECT CAST(CAST(1 AS "zetasql_test__.TestEnum") AS INT32) int32_value
--
ARRAY<STRUCT<int32_value INT32>>[{1}]
==
[name=enum_to_int64]
SELECT CAST(CAST(1 AS "zetasql_test__.TestEnum") AS INT64) int64_value
--
ARRAY<STRUCT<int64_value INT64>>[{1}]
==
[name=enum_to_uint32]
SELECT CAST(CAST(1 AS "zetasql_test__.TestEnum") AS UINT32) uint32_value
--
ARRAY<STRUCT<uint32_value UINT32>>[{1}]
==
[name=enum_to_uint32_out_of_range]
SELECT
  CAST(CAST(COALESCE(-1) AS "zetasql_test__.TestEnum") AS UINT32) uint32_value
--
ERROR: generic::out_of_range: uint32 out of range: -1
==
[name=enum_to_uint64]
SELECT CAST(CAST(1 AS "zetasql_test__.TestEnum") AS UINT64) uint64_value
--
ARRAY<STRUCT<uint64_value UINT64>>[{1}]
==
[name=enum_to_uint64_out_of_range]
SELECT
  CAST(CAST(COALESCE(-1) AS "zetasql_test__.TestEnum") AS UINT64) uint64_value
--
ERROR: generic::out_of_range: uint64 out of range: -1
==
[name=enum_with_all_values]
SELECT enum_value FROM (
  SELECT CAST(2147483647 AS "zetasql_test__.TestEnum") enum_value UNION ALL
  SELECT CAST(1 AS "zetasql_test__.TestEnum") UNION ALL
  SELECT CAST(2 AS "zetasql_test__.TestEnum") UNION ALL
  SELECT CAST(-1 AS "zetasql_test__.TestEnum") UNION ALL
  SELECT CAST(0 AS "zetasql_test__.TestEnum"))
  ORDER BY enum_value
--
ARRAY<STRUCT<enum_value ENUM<zetasql_test__.TestEnum>>>[known order:
  {TESTENUMNEGATIVE},
  {TESTENUM0},
  {TESTENUM1},
  {TESTENUM2},
  {TESTENUM2147483647}
]
==
[name=enum_from_string_alias]
SELECT CAST("FIRSTENUM" AS "zetasql_test__.TestEnumWithAlias") enum_value
--
ARRAY<STRUCT<enum_value ENUM<zetasql_test__.TestEnumWithAlias>>>[{FIRSTENUM}]
==
[name=enum_from_string_using_alias]
SELECT
    CAST("FIRSTENUM_WITHALIAS" AS "zetasql_test__.TestEnumWithAlias") enum_value
--
ARRAY<STRUCT<enum_value ENUM<zetasql_test__.TestEnumWithAlias>>>[{FIRSTENUM}]
==
[name=enum_from_string_to_string]
SELECT cast(CAST("FIRSTENUM_WITHALIAS" AS "zetasql_test__.TestEnumWithAlias") as string)
       string_value
--
ARRAY<STRUCT<string_value STRING>>[{"FIRSTENUM"}]
==
[name=enum_from_string_to_string_using_alias]
SELECT cast(
    CAST("FIRSTENUM_WITHSECONDALIAS" AS "zetasql_test__.TestEnumWithAlias") as string)
    string_value
--
ARRAY<STRUCT<string_value STRING>>[{"FIRSTENUM"}]
==

[required_features=V_1_3_ENUM_VALUE_DESCRIPTOR_PROTO]
[name=enum_value_desc_proto]
SELECT
  ENUM_VALUE_DESCRIPTOR_PROTO(
    CAST(NULL as "zetasql_test__.TestEnumWithAnnotations")
  ),
  ENUM_VALUE_DESCRIPTOR_PROTO(
    CAST(
      "TESTENUM_STRING_ANNOTATED" as "zetasql_test__.TestEnumWithAnnotations"
    )
  ),
  ENUM_VALUE_DESCRIPTOR_PROTO(
    CAST(
      3 as "zetasql_test__.TestEnumWithAnnotations"
    )
  )
--
ARRAY<STRUCT<
        PROTO<proto2.EnumValueDescriptorProto>,
        PROTO<proto2.EnumValueDescriptorProto>,
        PROTO<proto2.EnumValueDescriptorProto>
      >>
[{NULL,
  {
    name: "TESTENUM_STRING_ANNOTATED"
    number: 2
    options {
      [zetasql_test__.string_annotation]: "some_name"
    }
  },
  {
    name: "TESTENUM_INT64_ANNOTATED"
    number: 3
    options {
      [zetasql_test__.int64_annotation]: 123
    }
  }}]
==

[required_features=V_1_3_ENUM_VALUE_DESCRIPTOR_PROTO]
[name=enum_value_desc_multiple_annotations]
SELECT
  ENUM_VALUE_DESCRIPTOR_PROTO(
    CAST(
      "TESTENUM_MULTIPLE_ANNOTATION" as "zetasql_test__.TestEnumWithAnnotations"
    )
  )
--
ARRAY<STRUCT<PROTO<proto2.EnumValueDescriptorProto>>>[
  {{
     name: "TESTENUM_MULTIPLE_ANNOTATION"
     number: 4
     options {
       [zetasql_test__.int32_annotation]: 321
       [zetasql_test__.bool_annotation]: true
     }
   }}
]
==

[required_features=V_1_3_ENUM_VALUE_DESCRIPTOR_PROTO]
[name=enum_value_desc_primitive_annotation]
SELECT
  ENUM_VALUE_DESCRIPTOR_PROTO(
    CAST(
      "TESTENUM_STRING_ANNOTATED" as "zetasql_test__.TestEnumWithAnnotations"
    )
  ).options.(zetasql_test__.string_annotation),
  ENUM_VALUE_DESCRIPTOR_PROTO(
    CAST("TESTENUM_INT64_ANNOTATED" as "zetasql_test__.TestEnumWithAnnotations")
  ).options.(zetasql_test__.int64_annotation)
--
ARRAY<STRUCT<STRING, INT64>>[{"some_name", 123}]
==

[required_features=V_1_3_ENUM_VALUE_DESCRIPTOR_PROTO]
[name=enum_value_desc_formatted_annotation]
SELECT
  ENUM_VALUE_DESCRIPTOR_PROTO(
    CAST(
      "ANOTHERTESTENUM_DATE_ANNOTATED"
        as "zetasql_test__.TestEnumWithAnnotations"
    )
  ).options.(zetasql_test__.date_annotation)
--
ARRAY<STRUCT<DATE>>[{1998-04-30}]
==

[required_features=V_1_3_ENUM_VALUE_DESCRIPTOR_PROTO]
[name=enum_value_desc_message_annotation]
SELECT
  ENUM_VALUE_DESCRIPTOR_PROTO(
    CAST(
      "ANOTHERTESTENUM_MESSAGE_ANNOTATED"
        as "zetasql_test__.TestEnumWithAnnotations"
    )
  ).options.(zetasql_test__.nested_message_annotation)
--
ARRAY<STRUCT<PROTO<zetasql_test__.EnumAnnotations>>>[
  {{
     nested_string_annotation: "abc"
     nested_bool_annotation: true
   }}
]
==

[required_features=V_1_3_ENUM_VALUE_DESCRIPTOR_PROTO]
[name=enum_value_desc_message_annotation_field]
SELECT
  ENUM_VALUE_DESCRIPTOR_PROTO(
    CAST(
      "ANOTHERTESTENUM_MESSAGE_ANNOTATED"
        as "zetasql_test__.TestEnumWithAnnotations"
    )
  ).options.(zetasql_test__.nested_message_annotation).nested_string_annotation
--
ARRAY<STRUCT<nested_string_annotation STRING>>[{"abc"}]
