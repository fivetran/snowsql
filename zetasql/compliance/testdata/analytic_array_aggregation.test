# ARRAY_AGG queries with nulls

[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]
[load_enum_names=zetasql_test__.TestEnum]
[default required_features=ANALYTIC_FUNCTIONS]
[name=array_agg_with_null_BOOL_analytic]
SELECT ARRAY_AGG(elem) OVER()
FROM UNNEST(ARRAY<BOOL>[true, false, null, true]) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<BOOL>[unknown order:false, true, true, NULL]},
  {ARRAY<BOOL>[unknown order:false, true, true, NULL]},
  {ARRAY<BOOL>[unknown order:false, true, true, NULL]},
  {ARRAY<BOOL>[unknown order:false, true, true, NULL]}
]
==
[name=array_agg_with_null_INT32_analytic]
SELECT
  elem,
  ARRAY_AGG(elem)
    OVER(ORDER BY elem RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem RANGE BETWEEN 1 FOLLOWING AND 10 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING)
FROM UNNEST(ARRAY<INT32>[1, 0, -10, null]) elem;
--
ARRAY<STRUCT<elem INT32, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>>>[unknown order:
  {NULL,
   ARRAY<INT32>[NULL],
   ARRAY<INT32>[NULL],
   ARRAY<INT32>[NULL],
   ARRAY<INT32>[NULL],
   ARRAY<INT32>[NULL]},
  {
    -10,
    ARRAY<INT32>[unknown order:NULL, -10],
    ARRAY<INT32>[-10],
    ARRAY<INT32>[-10],
    ARRAY<INT32>[0],
    ARRAY<INT32>(NULL)
  },
  {
    0,
    ARRAY<INT32>[unknown order:NULL, -10, 0, 1],
    ARRAY<INT32>[unknown order:0, 1],
    ARRAY<INT32>[unknown order:0, 1],
    ARRAY<INT32>[1],
    ARRAY<INT32>(NULL)
  },
  {
    1,
    ARRAY<INT32>[unknown order:NULL, -10, 0, 1],
    ARRAY<INT32>[unknown order:0, 1],
    ARRAY<INT32>[1],
    ARRAY<INT32>(NULL),
    ARRAY<INT32>(NULL)
  }
]
==
[name=array_agg_with_null_UINT32_analytic]
SELECT
  elem,
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC RANGE BETWEEN 1 PRECEDING AND 3 PRECEDING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC RANGE BETWEEN 3 PRECEDING AND 1 PRECEDING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC RANGE BETWEEN 1 PRECEDING AND CURRENT ROW),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC RANGE BETWEEN 2 PRECEDING AND 2 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC RANGE BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING)
FROM UNNEST(ARRAY<UINT32>[2, null, 0, 1]) elem;
--
ARRAY<STRUCT<elem UINT32, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>>>[unknown order:
  {
    2,
    ARRAY<UINT32>(NULL),
    ARRAY<UINT32>(NULL),
    ARRAY<UINT32>[2],
    ARRAY<UINT32>[unknown order:2, 1, 0],
    ARRAY<UINT32>[unknown order:2, 1, 0, NULL]
  },
  {
    1,
    ARRAY<UINT32>(NULL),
    ARRAY<UINT32>[2],
    ARRAY<UINT32>[unknown order:2, 1],
    ARRAY<UINT32>[unknown order:2, 1, 0],
    ARRAY<UINT32>[unknown order:2, 1, 0, NULL]
  },
  {
    0,
    ARRAY<UINT32>(NULL),
    ARRAY<UINT32>[unknown order:2, 1],
    ARRAY<UINT32>[unknown order:1, 0],
    ARRAY<UINT32>[unknown order:2, 1, 0],
    ARRAY<UINT32>[unknown order:1, 0, NULL]
  },
  {NULL,
   ARRAY<UINT32>[NULL],
   ARRAY<UINT32>[NULL],
   ARRAY<UINT32>[NULL],
   ARRAY<UINT32>[NULL],
   ARRAY<UINT32>[NULL]}
]
==
[name=array_agg_with_null_INT64_analytic]
SELECT
  elem,
  ARRAY_AGG(elem)
    OVER(ORDER BY elem ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM UNNEST(ARRAY<INT64>[null, 8589934592, 0, -8589934592]) elem;
--
ARRAY<STRUCT<elem INT64, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>>>[unknown order:
  {
    NULL,
    ARRAY<INT64>(NULL),
    ARRAY<INT64>[NULL],
    ARRAY<INT64>[unknown order:NULL, -8589934592],
    ARRAY<INT64>[unknown order:NULL, -8589934592, 0, 8589934592]
  },
  {
    -8589934592,
    ARRAY<INT64>[NULL],
    ARRAY<INT64>[unknown order:NULL, -8589934592],
    ARRAY<INT64>[unknown order:NULL, -8589934592, 0],
    ARRAY<INT64>[unknown order:NULL, -8589934592, 0, 8589934592]
  },
  {
    0,
    ARRAY<INT64>[unknown order:NULL, -8589934592],
    ARRAY<INT64>[unknown order:NULL, -8589934592, 0],
    ARRAY<INT64>[unknown order:NULL, -8589934592, 0, 8589934592],
    ARRAY<INT64>[unknown order:NULL, -8589934592, 0, 8589934592]
  },
  {
    8589934592,
    ARRAY<INT64>[unknown order:NULL, -8589934592, 0],
    ARRAY<INT64>[unknown order:NULL, -8589934592, 0, 8589934592],
    ARRAY<INT64>[unknown order:NULL, -8589934592, 0, 8589934592],
    ARRAY<INT64>[unknown order:NULL, -8589934592, 0, 8589934592]
  }
]
==
[name=array_agg_with_null_UINT64_analytic]
SELECT
  elem,
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 1 PRECEDING AND 2 PRECEDING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 2 PRECEDING AND UNBOUNDED FOLLOWING)
FROM UNNEST(ARRAY<UINT64>[8589934592, 1, null, null, 0]) elem;
--
ARRAY<STRUCT<elem UINT64, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>>>[unknown order:
  {
    8589934592,
    ARRAY<UINT64>(NULL),
    ARRAY<UINT64>(NULL),
    ARRAY<UINT64>[8589934592],
    ARRAY<UINT64>[unknown order:8589934592, 1],
    ARRAY<UINT64>[unknown order:8589934592, 1, 0, NULL, NULL]
  },
  {
    1,
    ARRAY<UINT64>(NULL),
    ARRAY<UINT64>[8589934592],
    ARRAY<UINT64>[unknown order:8589934592, 1],
    ARRAY<UINT64>[unknown order:8589934592, 1, 0],
    ARRAY<UINT64>[unknown order:8589934592, 1, 0, NULL, NULL]
  },
  {
    0,
    ARRAY<UINT64>(NULL),
    ARRAY<UINT64>[unknown order:8589934592, 1],
    ARRAY<UINT64>[unknown order:8589934592, 1, 0],
    ARRAY<UINT64>[unknown order:8589934592, 1, 0, NULL],
    ARRAY<UINT64>[unknown order:8589934592, 1, 0, NULL, NULL]
  },
  {
    NULL,
    ARRAY<UINT64>(NULL),
    ARRAY<UINT64>[unknown order:1, 0],
    ARRAY<UINT64>[unknown order:1, 0, NULL],
    ARRAY<UINT64>[unknown order:1, 0, NULL, NULL],
    ARRAY<UINT64>[unknown order:1, 0, NULL, NULL]
  },
  {
    NULL,
    ARRAY<UINT64>(NULL),
    ARRAY<UINT64>[unknown order:0, NULL],
    ARRAY<UINT64>[unknown order:0, NULL, NULL],
    ARRAY<UINT64>[unknown order:0, NULL, NULL],
    ARRAY<UINT64>[unknown order:0, NULL, NULL]
  }
]

NOTE: Reference implementation reports non-determinism.
==
[name=array_agg_with_null_FLOAT_analytic]
SELECT
  elem,
  ARRAY_AGG(elem)
    OVER(ORDER BY elem ASC ROWS BETWEEN CURRENT ROW AND CURRENT ROW),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem ASC ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM UNNEST(ARRAY<FLOAT>[1.1, 0.0, -1.1, null]) elem;
--
ARRAY<STRUCT<elem FLOAT, ARRAY<>, ARRAY<>, ARRAY<>>>[unknown order:
  {
    NULL,
    ARRAY<FLOAT>[NULL],
    ARRAY<FLOAT>[unknown order:NULL, -1.1],
    ARRAY<FLOAT>[unknown order:NULL, -1.1, 0, 1.1]
  },
  {
    -1.1,
    ARRAY<FLOAT>[-1.1],
    ARRAY<FLOAT>[unknown order:-1.1, 0],
    ARRAY<FLOAT>[unknown order:-1.1, 0, 1.1]
  },
  {
    0,
    ARRAY<FLOAT>[0],
    ARRAY<FLOAT>[unknown order:0, 1.1],
    ARRAY<FLOAT>[unknown order:0, 1.1]
  },
  {1.1, ARRAY<FLOAT>[1.1], ARRAY<FLOAT>[1.1], ARRAY<FLOAT>[1.1]}
]
==
[name=array_agg_with_null_DOUBLE_analytic]
SELECT
  elem,
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 2 FOLLOWING AND 1 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 2 FOLLOWING AND 2 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 2 FOLLOWING AND UNBOUNDED FOLLOWING)
FROM UNNEST(ARRAY<DOUBLE>[1.1, 0.0, -1.1]) elem;
--
ARRAY<STRUCT<elem DOUBLE, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>>>[unknown order:
  {
    1.1,
    ARRAY<DOUBLE>(NULL),
    ARRAY<DOUBLE>[-1.1],
    ARRAY<DOUBLE>[unknown order:0, -1.1],
    ARRAY<DOUBLE>[-1.1]
  },
  {0,
   ARRAY<DOUBLE>(NULL),
   ARRAY<DOUBLE>(NULL),
   ARRAY<DOUBLE>[-1.1],
   ARRAY<DOUBLE>(NULL)},
  {-1.1,
   ARRAY<DOUBLE>(NULL),
   ARRAY<DOUBLE>(NULL),
   ARRAY<DOUBLE>(NULL),
   ARRAY<DOUBLE>(NULL)}
]
==
[name=array_agg_with_null_STRING_analytic]
SELECT ARRAY_AGG(elem)
  OVER(PARTITION BY LENGTH(elem) ORDER BY elem)
FROM UNNEST(ARRAY<STRING>['aσ', 'bcπ', 'd⨝']) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<STRING>["aσ"]},
  {ARRAY<STRING>[unknown order:"aσ", "d⨝"]},
  {ARRAY<STRING>["bcπ"]}
]
==
[name=array_agg_with_null_BYTES_analytic]
SELECT ARRAY_AGG(elem)
  OVER(PARTITION BY LENGTH(elem) ORDER BY elem DESC)
FROM UNNEST(ARRAY<BYTES>[b"a", b"bc", b"A"]) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<BYTES>[b"a"]},
  {ARRAY<BYTES>[unknown order:b"a", b"A"]},
  {ARRAY<BYTES>[b"bc"]}
]
==
[name=array_agg_with_null_DATE_analytic]
SELECT ARRAY_AGG(elem)
  OVER(PARTITION BY (elem >= DATE '2000-01-01')
     ORDER BY elem ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM UNNEST(ARRAY<DATE>['2000-01-01', '1984-08-02', '2014-09-11']) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<DATE>[1984-08-02]},
  {ARRAY<DATE>[2000-01-01]},
  {ARRAY<DATE>[unknown order:2000-01-01, 2014-09-11]}
]
==
[name=array_agg_with_null_TIMESTAMP_analytic]
SELECT ARRAY_AGG(elem)
  OVER(PARTITION BY EXTRACT(MONTH FROM elem)
     ORDER BY elem ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM UNNEST(ARRAY<TIMESTAMP>["1984-08-02 01:01:01.001001 UTC",
                             "2000-01-01 01:01:01.001001 UTC",
                             "2014-08-11 01:01:01.001001 UTC"]) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<TIMESTAMP>[unknown order:
     1984-08-02 01:01:01.001001+00,
     2014-08-11 01:01:01.001001+00
   ]},
  {ARRAY<TIMESTAMP>[2014-08-11 01:01:01.001001+00]},
  {ARRAY<TIMESTAMP>[2000-01-01 01:01:01.001001+00]}
]
==
[name=array_agg_with_null_enum_analytic]
SELECT ARRAY_AGG(elem) OVER(PARTITION BY elem)
FROM UNNEST(ARRAY<zetasql_test__.TestEnum>[
    'TESTENUM0', 'TESTENUM1', 'TESTENUM0', 'TESTENUM2', 'TESTENUM2']) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[unknown order:TESTENUM0, TESTENUM0]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[unknown order:TESTENUM0, TESTENUM0]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM1]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[unknown order:TESTENUM2, TESTENUM2]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[unknown order:TESTENUM2, TESTENUM2]}
]
==
[name=array_agg_with_null_proto_analytic]
SELECT ARRAY_AGG(elem)
  OVER(PARTITION BY elem.int64_key_1 ORDER BY elem.int_with_no_default_nullable
     ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING)
FROM UNNEST(ARRAY<"zetasql_test__.KitchenSinkPB">[
  '''
    int64_key_1: 0
    int64_key_2: 100
    int_with_no_default_nullable: 10
  ''',
  '''
    int64_key_1: 2
    int64_key_2: 102
    int_with_no_default_nullable: 0
  ''',
  '''
    int64_key_1: 0
    int64_key_2: 100
    int_with_no_default_nullable: 0
  ''',
  '''
    int64_key_1: 0
    int64_key_2: 100
    int_with_no_default_nullable: -10
  ''',
  '''
    int64_key_1: 3
    int64_key_2: 103
  ''',
  '''
    int64_key_1: 0
    int64_key_2: 100
  ''',
  '''
    int64_key_1: 2
    int64_key_2: 102
    int_with_no_default_nullable: 10
  ''']) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[unknown order:
     {
       int64_key_1: 0
       int64_key_2: 100
     },
     {
       int64_key_1: 0
       int64_key_2: 100
       int_with_no_default_nullable: -10
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[unknown order:
     {
       int64_key_1: 0
       int64_key_2: 100
       int_with_no_default_nullable: -10
     },
     {
       int64_key_1: 0
       int64_key_2: 100
       int_with_no_default_nullable: 0
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[unknown order:
     {
       int64_key_1: 0
       int64_key_2: 100
       int_with_no_default_nullable: 0
     },
     {
       int64_key_1: 0
       int64_key_2: 100
       int_with_no_default_nullable: 10
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
     {
       int64_key_1: 0
       int64_key_2: 100
       int_with_no_default_nullable: 10
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[unknown order:
     {
       int64_key_1: 2
       int64_key_2: 102
       int_with_no_default_nullable: 0
     },
     {
       int64_key_1: 2
       int64_key_2: 102
       int_with_no_default_nullable: 10
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
     {
       int64_key_1: 2
       int64_key_2: 102
       int_with_no_default_nullable: 10
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
     {
       int64_key_1: 3
       int64_key_2: 103
     }
   ]}
]
==
[name=array_agg_with_null_STRUCT_analytic]
SELECT ARRAY_AGG(elem)
  OVER(PARTITION BY y ORDER BY x DESC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM UNNEST(ARRAY<STRUCT<x int64, y int64>>[
  (11, 12), (21, 0), (31, null), (-10, 0), (10, 0), (3, 12), (2, null)]) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<STRUCT<x INT64, y INT64>>[unknown order:{31, NULL}, {2, NULL}]},
  {ARRAY<STRUCT<x INT64, y INT64>>[unknown order:{31, NULL}, {2, NULL}]},
  {ARRAY<STRUCT<x INT64, y INT64>>[unknown order:{21, 0}, {10, 0}]},
  {ARRAY<STRUCT<x INT64, y INT64>>[unknown order:{21, 0}, {10, 0}, {-10, 0}]},
  {ARRAY<STRUCT<x INT64, y INT64>>[unknown order:{10, 0}, {-10, 0}]},
  {ARRAY<STRUCT<x INT64, y INT64>>[unknown order:{11, 12}, {3, 12}]},
  {ARRAY<STRUCT<x INT64, y INT64>>[unknown order:{11, 12}, {3, 12}]}
]
==

[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=array_agg_with_null_numeric_analytic]
SELECT row_id, numeric_val, ARRAY_AGG(numeric_val) OVER test_window
FROM (SELECT 1 row_id, CAST(NULL as NUMERIC) numeric_val UNION ALL
      SELECT 2, 0.01 UNION ALL
      SELECT 3, 3.5  UNION ALL
      SELECT 4, -1.230000001)
WINDOW test_window AS (ORDER BY row_id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
--
ARRAY<STRUCT<row_id INT64, numeric_val NUMERIC, ARRAY<>>>[unknown order:
  {
    1,
    NULL,
    ARRAY<NUMERIC>[unknown order:NULL, 0.01]
  },
  {
    2,
    0.01,
    ARRAY<NUMERIC>[unknown order:NULL, 0.01, 3.5]
  },
  {
    3,
    3.5,
    ARRAY<NUMERIC>[unknown order:0.01, 3.5, -1.230000001]
  },
  {
    4,
    -1.230000001,
    ARRAY<NUMERIC>[unknown order:3.5, -1.230000001]
  }
]
==

[required_features=ANALYTIC_FUNCTIONS,BIGNUMERIC_TYPE]
[name=array_agg_with_null_bignumeric_analytic]
SELECT row_id, bignumeric_val, ARRAY_AGG(bignumeric_val) OVER test_window
FROM (SELECT 1 row_id, CAST(NULL as BIGNUMERIC) bignumeric_val UNION ALL
      SELECT 2, BIGNUMERIC "123456789012345678901234567890123456789.12345678901234567890123456789012345678" UNION ALL
      SELECT 3, 3.5  UNION ALL
      SELECT 4, -1.23000000000000000000000000000000000001)
WINDOW test_window AS (ORDER BY row_id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
--
ARRAY<STRUCT<
        row_id INT64,
        bignumeric_val BIGNUMERIC,
        ARRAY<>
      >>
[unknown order:
  {
    1,
    NULL,
    ARRAY<BIGNUMERIC>[unknown order:
      NULL,
      123456789012345678901234567890123456789.12345678901234567890123456789012345678
    ]
  },
  {
    2,
    123456789012345678901234567890123456789.12345678901234567890123456789012345678,
    ARRAY<BIGNUMERIC>[unknown order:
      NULL,
      123456789012345678901234567890123456789.12345678901234567890123456789012345678,
      3.5
    ]
  },
  {
    3,
    3.5,
    ARRAY<BIGNUMERIC>[unknown order:
      123456789012345678901234567890123456789.12345678901234567890123456789012345678,
      3.5,
      -1.23000000000000000000000000000000000001
    ]
  },
  {4,
   -1.23000000000000000000000000000000000001,
   ARRAY<BIGNUMERIC>[unknown order:
     3.5,
     -1.23000000000000000000000000000000000001
   ]}
]
==

# ARRAY_AGG queries without nulls

[name=array_agg_without_null_BOOL_analytic]
SELECT ARRAY_AGG(elem) OVER()
FROM UNNEST(ARRAY<BOOL>[true, false, true]) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<BOOL>[unknown order:false, true, true]},
  {ARRAY<BOOL>[unknown order:false, true, true]},
  {ARRAY<BOOL>[unknown order:false, true, true]}
]
==
[name=array_agg_without_null_INT32_analytic]
SELECT
  elem,
  ARRAY_AGG(elem)
    OVER(ORDER BY elem RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem RANGE BETWEEN 1 FOLLOWING AND 10 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem RANGE BETWEEN 2 FOLLOWING AND 1 FOLLOWING)
FROM UNNEST(ARRAY<INT32>[1, 0, -10]) elem;
--
ARRAY<STRUCT<elem INT32, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>>>[unknown order:
  {-10,
   ARRAY<INT32>[-10],
   ARRAY<INT32>[-10],
   ARRAY<INT32>[-10],
   ARRAY<INT32>[0],
   ARRAY<INT32>(NULL)},
  {
    0,
    ARRAY<INT32>[unknown order:-10, 0, 1],
    ARRAY<INT32>[unknown order:0, 1],
    ARRAY<INT32>[unknown order:0, 1],
    ARRAY<INT32>[1],
    ARRAY<INT32>(NULL)
  },
  {
    1,
    ARRAY<INT32>[unknown order:-10, 0, 1],
    ARRAY<INT32>[unknown order:0, 1],
    ARRAY<INT32>[1],
    ARRAY<INT32>(NULL),
    ARRAY<INT32>(NULL)
  }
]
==
[name=array_agg_without_null_UINT32_analytic]
SELECT
  elem,
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC RANGE BETWEEN 1 PRECEDING AND 3 PRECEDING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC RANGE BETWEEN 3 PRECEDING AND 1 PRECEDING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC RANGE BETWEEN 1 PRECEDING AND CURRENT ROW),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC RANGE BETWEEN 2 PRECEDING AND 2 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC RANGE BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING)
FROM UNNEST(ARRAY<UINT32>[2, 0, 1]) elem;
--
ARRAY<STRUCT<elem UINT32, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>>>[unknown order:
  {
    2,
    ARRAY<UINT32>(NULL),
    ARRAY<UINT32>(NULL),
    ARRAY<UINT32>[2],
    ARRAY<UINT32>[unknown order:2, 1, 0],
    ARRAY<UINT32>[unknown order:2, 1, 0]
  },
  {
    1,
    ARRAY<UINT32>(NULL),
    ARRAY<UINT32>[2],
    ARRAY<UINT32>[unknown order:2, 1],
    ARRAY<UINT32>[unknown order:2, 1, 0],
    ARRAY<UINT32>[unknown order:2, 1, 0]
  },
  {
    0,
    ARRAY<UINT32>(NULL),
    ARRAY<UINT32>[unknown order:2, 1],
    ARRAY<UINT32>[unknown order:1, 0],
    ARRAY<UINT32>[unknown order:2, 1, 0],
    ARRAY<UINT32>[unknown order:1, 0]
  }
]
==
[name=array_agg_without_null_INT64_analytic]
SELECT
  elem,
  ARRAY_AGG(elem)
    OVER(ORDER BY elem ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM UNNEST(ARRAY<INT64>[8589934592, 0, -8589934592]) elem;
--
ARRAY<STRUCT<elem INT64, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>>>[unknown order:
  {
    -8589934592,
    ARRAY<INT64>(NULL),
    ARRAY<INT64>[-8589934592],
    ARRAY<INT64>[unknown order:-8589934592, 0],
    ARRAY<INT64>[unknown order:-8589934592, 0, 8589934592]
  },
  {
    0,
    ARRAY<INT64>[-8589934592],
    ARRAY<INT64>[unknown order:-8589934592, 0],
    ARRAY<INT64>[unknown order:-8589934592, 0, 8589934592],
    ARRAY<INT64>[unknown order:-8589934592, 0, 8589934592]
  },
  {
    8589934592,
    ARRAY<INT64>[unknown order:-8589934592, 0],
    ARRAY<INT64>[unknown order:-8589934592, 0, 8589934592],
    ARRAY<INT64>[unknown order:-8589934592, 0, 8589934592],
    ARRAY<INT64>[unknown order:-8589934592, 0, 8589934592]
  }
]
==
[name=array_agg_without_null_UINT64_analytic]
SELECT
  elem,
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 1 PRECEDING AND 2 PRECEDING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 2 PRECEDING AND UNBOUNDED FOLLOWING)
FROM UNNEST(ARRAY<UINT64>[8589934592, 1, 0]) elem;
--
ARRAY<STRUCT<elem UINT64, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>>>[unknown order:
  {
    8589934592,
    ARRAY<UINT64>(NULL),
    ARRAY<UINT64>(NULL),
    ARRAY<UINT64>[8589934592],
    ARRAY<UINT64>[unknown order:8589934592, 1],
    ARRAY<UINT64>[unknown order:8589934592, 1, 0]
  },
  {
    1,
    ARRAY<UINT64>(NULL),
    ARRAY<UINT64>[8589934592],
    ARRAY<UINT64>[unknown order:8589934592, 1],
    ARRAY<UINT64>[unknown order:8589934592, 1, 0],
    ARRAY<UINT64>[unknown order:8589934592, 1, 0]
  },
  {
    0,
    ARRAY<UINT64>(NULL),
    ARRAY<UINT64>[unknown order:8589934592, 1],
    ARRAY<UINT64>[unknown order:8589934592, 1, 0],
    ARRAY<UINT64>[unknown order:8589934592, 1, 0],
    ARRAY<UINT64>[unknown order:8589934592, 1, 0]
  }
]
==
[name=array_agg_without_null_FLOAT_analytic]
SELECT
  elem,
  ARRAY_AGG(elem)
    OVER(ORDER BY elem ASC ROWS BETWEEN CURRENT ROW AND CURRENT ROW),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem ASC ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM UNNEST(ARRAY<FLOAT>[1.1, 0.0, -1.1]) elem;
--
ARRAY<STRUCT<elem FLOAT, ARRAY<>, ARRAY<>, ARRAY<>>>[unknown order:
  {
    -1.1,
    ARRAY<FLOAT>[-1.1],
    ARRAY<FLOAT>[unknown order:-1.1, 0],
    ARRAY<FLOAT>[unknown order:-1.1, 0, 1.1]
  },
  {
    0,
    ARRAY<FLOAT>[0],
    ARRAY<FLOAT>[unknown order:0, 1.1],
    ARRAY<FLOAT>[unknown order:0, 1.1]
  },
  {1.1, ARRAY<FLOAT>[1.1], ARRAY<FLOAT>[1.1], ARRAY<FLOAT>[1.1]}
]
==
[name=array_agg_without_null_DOUBLE_analytic]
SELECT
  elem,
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 2 FOLLOWING AND 1 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 2 FOLLOWING AND 2 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING),
  ARRAY_AGG(elem)
    OVER(ORDER BY elem DESC ROWS BETWEEN 2 FOLLOWING AND UNBOUNDED FOLLOWING)
FROM UNNEST(ARRAY<DOUBLE>[1.1, 0.0, -1.1]) elem;
--
ARRAY<STRUCT<elem DOUBLE, ARRAY<>, ARRAY<>, ARRAY<>, ARRAY<>>>[unknown order:
  {
    1.1,
    ARRAY<DOUBLE>(NULL),
    ARRAY<DOUBLE>[-1.1],
    ARRAY<DOUBLE>[unknown order:0, -1.1],
    ARRAY<DOUBLE>[-1.1]
  },
  {0,
   ARRAY<DOUBLE>(NULL),
   ARRAY<DOUBLE>(NULL),
   ARRAY<DOUBLE>[-1.1],
   ARRAY<DOUBLE>(NULL)},
  {-1.1,
   ARRAY<DOUBLE>(NULL),
   ARRAY<DOUBLE>(NULL),
   ARRAY<DOUBLE>(NULL),
   ARRAY<DOUBLE>(NULL)}
]
==
[name=array_agg_without_null_STRING_analytic]
SELECT ARRAY_AGG(elem)
  OVER(PARTITION BY LENGTH(elem) ORDER BY elem)
FROM UNNEST(ARRAY<STRING>['aσ', 'bcπ', 'd⨝']) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<STRING>["aσ"]},
  {ARRAY<STRING>[unknown order:"aσ", "d⨝"]},
  {ARRAY<STRING>["bcπ"]}
]
==
[name=array_agg_without_null_BYTES_analytic]
SELECT ARRAY_AGG(elem)
  OVER(PARTITION BY LENGTH(elem) ORDER BY elem DESC)
FROM UNNEST(ARRAY<BYTES>[b"a", b"bc", b"A"]) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<BYTES>[b"a"]},
  {ARRAY<BYTES>[unknown order:b"a", b"A"]},
  {ARRAY<BYTES>[b"bc"]}
]
==
[name=array_agg_without_null_DATE_analytic]
SELECT ARRAY_AGG(elem)
  OVER(PARTITION BY (elem >= DATE '2000-01-01')
     ORDER BY elem ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM UNNEST(ARRAY<DATE>['2000-01-01', '1984-08-02', '2014-09-11']) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<DATE>[1984-08-02]},
  {ARRAY<DATE>[2000-01-01]},
  {ARRAY<DATE>[unknown order:2000-01-01, 2014-09-11]}
]
==
[name=array_agg_without_null_TIMESTAMP_analytic]
SELECT ARRAY_AGG(elem)
  OVER(PARTITION BY EXTRACT(MONTH FROM elem)
     ORDER BY elem ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM UNNEST(ARRAY<TIMESTAMP>["1984-08-02 01:01:01.001001 UTC",
                             "2000-01-01 01:01:01.001001 UTC",
                             "2014-08-11 01:01:01.001001 UTC"]) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<TIMESTAMP>[unknown order:
     1984-08-02 01:01:01.001001+00,
     2014-08-11 01:01:01.001001+00
   ]},
  {ARRAY<TIMESTAMP>[2014-08-11 01:01:01.001001+00]},
  {ARRAY<TIMESTAMP>[2000-01-01 01:01:01.001001+00]}
]
==
[name=array_agg_without_null_enum_analytic]
SELECT ARRAY_AGG(elem) OVER(PARTITION BY elem)
FROM UNNEST(ARRAY<zetasql_test__.TestEnum>[
    'TESTENUM0', 'TESTENUM1', 'TESTENUM0', 'TESTENUM2', 'TESTENUM2']) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[unknown order:TESTENUM0, TESTENUM0]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[unknown order:TESTENUM0, TESTENUM0]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM1]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[unknown order:TESTENUM2, TESTENUM2]},
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[unknown order:TESTENUM2, TESTENUM2]}
]
==
[name=array_agg_without_null_proto_analytic]
SELECT ARRAY_AGG(elem)
  OVER(PARTITION BY elem.int64_key_1 ORDER BY elem.int_with_no_default_nullable
     ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING)
FROM UNNEST(ARRAY<"zetasql_test__.KitchenSinkPB">[
  '''
    int64_key_1: 0
    int64_key_2: 100
    int_with_no_default_nullable: 10
  ''',
  '''
    int64_key_1: 2
    int64_key_2: 102
    int_with_no_default_nullable: 0
  ''',
  '''
    int64_key_1: 0
    int64_key_2: 100
    int_with_no_default_nullable: 0
  ''',
  '''
    int64_key_1: 0
    int64_key_2: 100
    int_with_no_default_nullable: -10
  ''',
  '''
    int64_key_1: 3
    int64_key_2: 103
  ''',
  '''
    int64_key_1: 0
    int64_key_2: 100
  ''',
  '''
    int64_key_1: 2
    int64_key_2: 102
    int_with_no_default_nullable: 10
  ''']) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[unknown order:
     {
       int64_key_1: 0
       int64_key_2: 100
     },
     {
       int64_key_1: 0
       int64_key_2: 100
       int_with_no_default_nullable: -10
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[unknown order:
     {
       int64_key_1: 0
       int64_key_2: 100
       int_with_no_default_nullable: -10
     },
     {
       int64_key_1: 0
       int64_key_2: 100
       int_with_no_default_nullable: 0
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[unknown order:
     {
       int64_key_1: 0
       int64_key_2: 100
       int_with_no_default_nullable: 0
     },
     {
       int64_key_1: 0
       int64_key_2: 100
       int_with_no_default_nullable: 10
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
     {
       int64_key_1: 0
       int64_key_2: 100
       int_with_no_default_nullable: 10
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[unknown order:
     {
       int64_key_1: 2
       int64_key_2: 102
       int_with_no_default_nullable: 0
     },
     {
       int64_key_1: 2
       int64_key_2: 102
       int_with_no_default_nullable: 10
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
     {
       int64_key_1: 2
       int64_key_2: 102
       int_with_no_default_nullable: 10
     }
   ]},
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
     {
       int64_key_1: 3
       int64_key_2: 103
     }
   ]}
]
==
[name=array_agg_without_null_STRUCT_analytic]
SELECT ARRAY_AGG(elem)
  OVER(PARTITION BY y ORDER BY x DESC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM UNNEST(ARRAY<STRUCT<x int64, y int64>>[
  (11, 12), (21, 0), (31, 0), (-10, 0), (10, 0), (3, 12), (2, 0)]) elem;
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<STRUCT<x INT64, y INT64>>[unknown order:{31, 0}, {21, 0}]},
  {ARRAY<STRUCT<x INT64, y INT64>>[unknown order:{31, 0}, {21, 0}, {10, 0}]},
  {ARRAY<STRUCT<x INT64, y INT64>>[unknown order:{21, 0}, {10, 0}, {2, 0}]},
  {ARRAY<STRUCT<x INT64, y INT64>>[unknown order:{10, 0}, {2, 0}, {-10, 0}]},
  {ARRAY<STRUCT<x INT64, y INT64>>[unknown order:{2, 0}, {-10, 0}]},
  {ARRAY<STRUCT<x INT64, y INT64>>[unknown order:{11, 12}, {3, 12}]},
  {ARRAY<STRUCT<x INT64, y INT64>>[unknown order:{11, 12}, {3, 12}]}
]
==

[required_features=ANALYTIC_FUNCTIONS]
[name=array_agg_without_null_numeric_analytic]
SELECT row_id, numeric_val, ARRAY_AGG(numeric_val) OVER test_window
FROM (SELECT 1 row_id, 5 numeric_val UNION ALL
      SELECT 2, 0.01 UNION ALL
      SELECT 3, 3.5  UNION ALL
      SELECT 4, -1.230000001)
WINDOW test_window AS (ORDER BY row_id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
--
ARRAY<STRUCT<row_id INT64, numeric_val DOUBLE, ARRAY<>>>[unknown order:
  {
    1,
    5,
    ARRAY<DOUBLE>[unknown order:5, 0.01]
  },
  {
    2,
    0.01,
    ARRAY<DOUBLE>[unknown order:5, 0.01, 3.5]
  },
  {
    3,
    3.5,
    ARRAY<DOUBLE>[unknown order:0.01, 3.5, -1.230000001]
  },
  {
    4,
    -1.230000001,
    ARRAY<DOUBLE>[unknown order:3.5, -1.230000001]
  }
]
==

[required_features=ANALYTIC_FUNCTIONS,BIGNUMERIC_TYPE]
[name=array_agg_without_null_bignumeric_analytic]
SELECT row_id, bignumeric_val, ARRAY_AGG(bignumeric_val) OVER test_window
FROM (SELECT 1 row_id, 5 bignumeric_val UNION ALL
      SELECT 2, BIGNUMERIC "123456789012345678901234567890123456789.12345678901234567890123456789012345678" UNION ALL
      SELECT 3, 3.5  UNION ALL
      SELECT 4, -1.23000000000000000000000000000000000001)
WINDOW test_window AS (ORDER BY row_id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
--
ARRAY<STRUCT<
        row_id INT64,
        bignumeric_val BIGNUMERIC,
        ARRAY<>
      >>
[unknown order:
  {
    1,
    5,
    ARRAY<BIGNUMERIC>[unknown order:
      5,
      123456789012345678901234567890123456789.12345678901234567890123456789012345678
    ]
  },
  {
    2,
    123456789012345678901234567890123456789.12345678901234567890123456789012345678,
    ARRAY<BIGNUMERIC>[unknown order:
      5,
      123456789012345678901234567890123456789.12345678901234567890123456789012345678,
      3.5
    ]
  },
  {
    3,
    3.5,
    ARRAY<BIGNUMERIC>[unknown order:
      123456789012345678901234567890123456789.12345678901234567890123456789012345678,
      3.5,
      -1.23000000000000000000000000000000000001
    ]
  },
  {4,
   -1.23000000000000000000000000000000000001,
   ARRAY<BIGNUMERIC>[unknown order:
     3.5,
     -1.23000000000000000000000000000000000001
   ]}
]
