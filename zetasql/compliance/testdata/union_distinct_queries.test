# The "set_operations" label applies to all set operations except UNION ALL.
#
# Table1 contains a column for each primitive data type.
# This means no enums, structs and arrays.
# Each column has 8 rows of data with different repeated counts.
# 1, 1, 1, 2, 2, 3, 4, and NULL
[default global_labels=set_operations]

[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]
[load_enum_names=zetasql_test__.TestEnum]

[prepare_database]
CREATE TABLE Table1 AS
SELECT cast(1 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-1 as int32) as int32_val, cast(-1 as int64) as int64_val,
       cast(1 as uint32) as uint32_val, cast(1 as uint64) as uint64_val,
       cast(0.1 as float) as float_val, cast(0.1 as double) as double_val,
       cast("1" as string) as str_val, CAST("1" as bytes) as bytes_val
UNION ALL
SELECT cast(2 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-1 as int32) as int32_val, cast(-1 as int64) as int64_val,
       cast(1 as uint32) as uint32_val, cast(1 as uint64) as uint64_val,
       cast(0.1 as float) as float_val, cast(0.1 as double) as double_val,
       cast("1" as string) as str_val, CAST("1" as bytes) as bytes_val
UNION ALL
SELECT cast(3 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-1 as int32) as int32_val, cast(-1 as int64) as int64_val,
       cast(1 as uint32) as uint32_val, cast(1 as uint64) as uint64_val,
       cast(0.1 as float) as float_val, cast(0.1 as double) as double_val,
       cast("1" as string) as str_val, CAST("1" as bytes) as bytes_val
UNION ALL
SELECT cast(4 as int64) as primary_key, cast(false as bool) as bool_val,
       cast(-2 as int32) as int32_val, cast(-2 as int64) as int64_val,
       cast(2 as uint32) as uint32_val, cast(2 as uint64) as uint64_val,
       cast(0.2 as float) as float_val, cast(0.2 as double) as double_val,
       cast("2" as string) as str_val, CAST("2" as bytes) as bytes_val
UNION ALL
SELECT cast(5 as int64) as primary_key, cast(false as bool) as bool_val,
       cast(-2 as int32) as int32_val, cast(-2 as int64) as int64_val,
       cast(2 as uint32) as uint32_val, cast(2 as uint64) as uint64_val,
       cast(0.2 as float) as float_val, cast(0.2 as double) as double_val,
       cast("2" as string) as str_val, CAST("2" as bytes) as bytes_val
UNION ALL
SELECT cast(6 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-3 as int32) as int32_val, cast(-3 as int64) as int64_val,
       cast(3 as uint32) as uint32_val, cast(3 as uint64) as uint64_val,
       cast(0.3 as float) as float_val, cast(0.3 as double) as double_val,
       cast("3" as string) as str_val, CAST("3" as bytes) as bytes_val
UNION ALL
SELECT cast(7 as int64) as primary_key, cast(false as bool) as bool_val,
       cast(-4 as int32) as int32_val, cast(-4 as int64) as int64_val,
       cast(4 as uint32) as uint32_val, cast(4 as uint64) as uint64_val,
       cast(0.4 as float) as float_val, cast(0.4 as double) as double_val,
       cast("4" as string) as str_val, CAST("4" as bytes) as bytes_val
UNION ALL
SELECT cast(8 as int64) as primary_key, cast(NULL as bool) as bool_val,
       cast(NULL as int32) as int32_val, cast(NULL as int64) as int64_val,
       cast(NULL as uint32) as uint32_val, cast(NULL as uint64) as uint64_val,
       cast(NULL as float) as float_val, cast(NULL as double) as double_val,
       cast(NULL as string) as str_val, CAST(NULL as bytes) as bytes_val
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             int32_val INT32,
             int64_val INT64,
             uint32_val UINT32,
             uint64_val UINT64,
             float_val FLOAT,
             double_val DOUBLE,
             str_val STRING,
             bytes_val BYTES>>
[
  {1, true, -1, -1, 1, 1, 0.1, 0.1, "1", b"1"},
  {2, true, -1, -1, 1, 1, 0.1, 0.1, "1", b"1"},
  {3, true, -1, -1, 1, 1, 0.1, 0.1, "1", b"1"},
  {4, false, -2, -2, 2, 2, 0.2, 0.2, "2", b"2"},
  {5, false, -2, -2, 2, 2, 0.2, 0.2, "2", b"2"},
  {6, true, -3, -3, 3, 3, 0.3, 0.3, "3", b"3"},
  {7, false, -4, -4, 4, 4, 0.4, 0.4, "4", b"4"},
  {8, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}
]
==
# Table with enums, arrays, structs (both values and nulls)
[prepare_database]
CREATE TABLE TableComplex1 AS
SELECT cast(1 as int64) as primary_key, CAST(0 AS "zetasql_test__.TestEnum") as enum_val,
       [0, 0, 0] AS array_val,
       (0, 0) AS struct_val
UNION ALL
SELECT 2, CAST(1 AS "zetasql_test__.TestEnum"), [1, 1, 1], (1, 1)
UNION ALL
SELECT 3, CAST(1 AS "zetasql_test__.TestEnum"), [1, 1, 1], (1, 1)
UNION ALL
SELECT 4, CAST(1 AS "zetasql_test__.TestEnum"), [1, 1, 1], (1, 1)
UNION ALL
SELECT 5, NULL, NULL, NULL
UNION ALL
SELECT 6, NULL, NULL, NULL
--
ARRAY<STRUCT<
        primary_key INT64,
        enum_val ENUM<zetasql_test__.TestEnum>,
        array_val ARRAY<>,
        struct_val STRUCT<INT64, INT64>
      >>
[{
   1,
   TESTENUM0,
   ARRAY<INT64>[0, 0, 0],
   {0, 0}
 },
 {
   2,
   TESTENUM1,
   ARRAY<INT64>[1, 1, 1],
   {1, 1}
 },
 {
   3,
   TESTENUM1,
   ARRAY<INT64>[1, 1, 1],
   {1, 1}
 },
 {
   4,
   TESTENUM1,
   ARRAY<INT64>[1, 1, 1],
   {1, 1}
 },
 {5, NULL, ARRAY<INT64>(NULL), NULL},
 {6, NULL, ARRAY<INT64>(NULL), NULL}]
==
[prepare_database]
CREATE TABLE TableComplex2 AS
SELECT cast(1 as int64) as primary_key, CAST(0 AS "zetasql_test__.TestEnum") as enum_val,
       [0, 0, 0] AS array_val,
       (0, 0) AS struct_val
UNION ALL
SELECT 2, CAST(1 AS "zetasql_test__.TestEnum"), [1, 1, 1], (1, 1)
UNION ALL
SELECT 3, NULL, NULL, NULL
UNION ALL
SELECT 4, NULL, NULL, NULL
--
ARRAY<STRUCT<
        primary_key INT64,
        enum_val ENUM<zetasql_test__.TestEnum>,
        array_val ARRAY<>,
        struct_val STRUCT<INT64, INT64>
      >>
[{
   1,
   TESTENUM0,
   ARRAY<INT64>[0, 0, 0],
   {0, 0}
 },
 {
   2,
   TESTENUM1,
   ARRAY<INT64>[1, 1, 1],
   {1, 1}
 },
 {3, NULL, ARRAY<INT64>(NULL), NULL},
 {4, NULL, ARRAY<INT64>(NULL), NULL}]
==
# Table2 contains a column for each primitive data type.
# This means no enums, structs and arrays.
# Each column has 8 rows of data with different repeated counts.
# 3, 3, 3, 2, 2, 1, 0, NULL
[prepare_database]
CREATE TABLE Table2 AS
SELECT cast(1 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-3 as int32) as int32_val, cast(-3 as int64) as int64_val,
       cast(3 as uint32) as uint32_val, cast(3 as uint64) as uint64_val,
       cast(0.3 as float) as float_val, cast(0.3 as double) as double_val,
       cast("3" as string) as str_val, CAST("3" as bytes) as bytes_val
UNION ALL
SELECT cast(2 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-3 as int32) as int32_val, cast(-3 as int64) as int64_val,
       cast(3 as uint32) as uint32_val, cast(3 as uint64) as uint64_val,
       cast(0.3 as float) as float_val, cast(0.3 as double) as double_val,
       cast("3" as string) as str_val, CAST("3" as bytes) as bytes_val
UNION ALL
SELECT cast(3 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-3 as int32) as int32_val, cast(-3 as int64) as int64_val,
       cast(3 as uint32) as uint32_val, cast(3 as uint64) as uint64_val,
       cast(0.3 as float) as float_val, cast(0.3 as double) as double_val,
       cast("3" as string) as str_val, CAST("3" as bytes) as bytes_val
UNION ALL
SELECT cast(4 as int64) as primary_key, cast(false as bool) as bool_val,
       cast(-2 as int32) as int32_val, cast(-2 as int64) as int64_val,
       cast(2 as uint32) as uint32_val, cast(2 as uint64) as uint64_val,
       cast(0.2 as float) as float_val, cast(0.2 as double) as double_val,
       cast("2" as string) as str_val, CAST("2" as bytes) as bytes_val
UNION ALL
SELECT cast(5 as int64) as primary_key, cast(false as bool) as bool_val,
       cast(-2 as int32) as int32_val, cast(-2 as int64) as int64_val,
       cast(2 as uint32) as uint32_val, cast(2 as uint64) as uint64_val,
       cast(0.2 as float) as float_val, cast(0.2 as double) as double_val,
       cast("2" as string) as str_val, CAST("2" as bytes) as bytes_val
UNION ALL
SELECT cast(6 as int64) as primary_key, cast(true as bool) as bool_val,
       cast(-1 as int32) as int32_val, cast(-1 as int64) as int64_val,
       cast(1 as uint32) as uint32_val, cast(1 as uint64) as uint64_val,
       cast(0.1 as float) as float_val, cast(0.1 as double) as double_val,
       cast("1" as string) as str_val, CAST("1" as bytes) as bytes_val
UNION ALL
SELECT cast(7 as int64) as primary_key, cast(false as bool) as bool_val,
       cast(0 as int32) as int32_val, cast(0 as int64) as int64_val,
       cast(0 as uint32) as uint32_val, cast(0 as uint64) as uint64_val,
       cast(0.0 as float) as float_val, cast(0.0 as double) as double_val,
       cast("0" as string) as str_val, CAST("0" as bytes) as bytes_val
UNION ALL
SELECT cast(8 as int64) as primary_key, cast(NULL as bool) as bool_val,
       cast(NULL as int32) as int32_val, cast(NULL as int64) as int64_val,
       cast(NULL as uint32) as uint32_val, cast(NULL as uint64) as uint64_val,
       cast(NULL as float) as float_val, cast(NULL as double) as double_val,
       cast(NULL as string) as str_val, CAST(NULL as bytes) as bytes_val
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             int32_val INT32,
             int64_val INT64,
             uint32_val UINT32,
             uint64_val UINT64,
             float_val FLOAT,
             double_val DOUBLE,
             str_val STRING,
             bytes_val BYTES>>
[
  {1, true, -3, -3, 3, 3, 0.3, 0.3, "3", b"3"},
  {2, true, -3, -3, 3, 3, 0.3, 0.3, "3", b"3"},
  {3, true, -3, -3, 3, 3, 0.3, 0.3, "3", b"3"},
  {4, false, -2, -2, 2, 2, 0.2, 0.2, "2", b"2"},
  {5, false, -2, -2, 2, 2, 0.2, 0.2, "2", b"2"},
  {6, true, -1, -1, 1, 1, 0.1, 0.1, "1", b"1"},
  {7, false, 0, 0, 0, 0, 0, 0, "0", b"0"},
  {8, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}
]
==
[prepare_database]
CREATE TABLE TestDistinct AS
SELECT CAST(1 AS INT64) AS primary_key, CAST(-2 AS INT32) AS int32_val,
  CAST(-2 AS INT64) AS int64_val, CAST(2 AS UINT32) AS uint32_val
UNION ALL
SELECT CAST(2 AS INT64) AS primary_key, CAST(-2 AS INT32) AS int32_val,
  CAST(-2 AS INT64) AS int64_val, CAST(2 AS UINT32) AS uint32_val
UNION ALL
SELECT CAST(3 AS INT64) AS primary_key, CAST(100 AS INT32) AS int32_val,
  CAST(100 AS INT64) AS int64_val, CAST(100 AS UINT32) AS uint32_val
UNION ALL
SELECT CAST(4 AS INT64) AS primary_key, CAST(100 AS INT32) AS int32_val,
  CAST(100 AS INT64) AS int64_val, CAST(100 AS UINT32) AS uint32_val
--
ARRAY<STRUCT<primary_key INT64, int32_val INT32, int64_val INT64, uint32_val UINT32>>[
  {1, -2, -2, 2},
  {2, -2, -2, 2},
  {3, 100, 100, 100},
  {4, 100, 100, 100}
]
==
# UNION DISTINCT over same simple constants
[name=union_distinct_constants_simple_same]
SELECT 1 UNION DISTINCT SELECT 1
--
ARRAY<STRUCT<INT64>>[{1}]
==
# UNION DISTINCT over different simple constants
[name=union_distinct_constants_simple_distinct]
SELECT 1 UNION DISTINCT SELECT 1 UNION DISTINCT SELECT 2
--
ARRAY<STRUCT<INT64>>[unknown order:{1}, {2}]
==
# UNION DISTINCT over multi-column same constants
[name=union_distinct_constants_complex_same]
SELECT 1, 2 UNION DISTINCT SELECT 1, 2
--
ARRAY<STRUCT<INT64, INT64>>[{1, 2}]
==
# UNION DISTINCT over multi-column different constants
[name=union_distinct_constants_complex_distinct]
SELECT 1, 0 UNION DISTINCT
SELECT 1, 1 UNION DISTINCT
SELECT 1, 1 UNION DISTINCT
SELECT 1, 2
--
ARRAY<STRUCT<INT64, INT64>>[unknown order:{1, 0}, {1, 1}, {1, 2}]
==
# UNION DISTINCT over multi-column constants with null values
[name=union_distinct_constants_null]
SELECT 1, 0 UNION DISTINCT
SELECT 1, NULL UNION DISTINCT
SELECT 1, NULL UNION DISTINCT
SELECT 2, NULL UNION DISTINCT
SELECT NULL, 0 UNION DISTINCT
SELECT NULL, 0 UNION DISTINCT
SELECT NULL, 1 UNION DISTINCT
SELECT NULL, NULL UNION DISTINCT
SELECT NULL, NULL
--
ARRAY<STRUCT<INT64, INT64>>[unknown order:
  {NULL, NULL},
  {NULL, 0},
  {NULL, 1},
  {1, NULL},
  {1, 0},
  {2, NULL}
]
==
# UNION DISTINCT on enum column
[name=union_distinct_datatype_enum]
SELECT CAST(0 AS "zetasql_test__.TestEnum") as enum_val
UNION DISTINCT
SELECT CAST(0 AS "zetasql_test__.TestEnum")
UNION DISTINCT
SELECT CAST(1 AS "zetasql_test__.TestEnum");
--
ARRAY<STRUCT<enum_val ENUM<zetasql_test__.TestEnum>>>[unknown order:
  {TESTENUM0},
  {TESTENUM1}
]
==
# UNION DISTINCT on struct column
[name=union_distinct_datatype_struct]
[required_features=V_1_2_GROUP_BY_STRUCT]
SELECT AS STRUCT 1, 2
UNION DISTINCT
SELECT AS STRUCT 1, 2
UNION DISTINCT
SELECT AS STRUCT 1, 3
--
ARRAY<STRUCT<INT64, INT64>>[unknown order:{1, 2}, {1, 3}]
==
# UNION DISTINCT on differently typed columns from multiple Tables
[name=union_all_multiple_columns_multiple_tables]
SELECT bool_val, int32_val, int64_val, uint32_val, uint64_val,
       str_val, bytes_val FROM Table1
UNION DISTINCT
SELECT bool_val, int32_val, int64_val, uint32_val, uint64_val,
       str_val, bytes_val FROM Table2
UNION DISTINCT
SELECT bool_val, int32_val, int64_val, uint32_val, uint64_val,
       str_val, bytes_val FROM Table1
--
ARRAY<STRUCT<bool_val BOOL,
             int32_val INT32,
             int64_val INT64,
             uint32_val UINT32,
             uint64_val UINT64,
             str_val STRING,
             bytes_val BYTES>>
[unknown order:
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {false, -4, -4, 4, 4, "4", b"4"},
  {false, -2, -2, 2, 2, "2", b"2"},
  {false, 0, 0, 0, 0, "0", b"0"},
  {true, -3, -3, 3, 3, "3", b"3"},
  {true, -1, -1, 1, 1, "1", b"1"}
]
==
[name=union_all_multiple_columns_multiple_tables_float]
[forbidden_features=DISALLOW_GROUP_BY_FLOAT]
SELECT int32_val, float_val, double_val FROM Table1
UNION DISTINCT
SELECT int32_val, float_val, double_val FROM Table2
UNION DISTINCT
SELECT int32_val, float_val, double_val FROM Table1
--
ARRAY<STRUCT<int32_val INT32, float_val FLOAT, double_val DOUBLE>>[unknown order:
  {NULL, NULL, NULL},
  {-4, 0.4, 0.4},
  {-3, 0.3, 0.3},
  {-2, 0.2, 0.2},
  {-1, 0.1, 0.1},
  {0, 0, 0}
]

NOTE: Reference implementation reports non-determinism.
==
# @nan_01 and @nan02 are both nans with different bitwise representation.
[name=union_distinct_nan_different_bitwise_representation]
[parameters=CAST(b"\x08\x00\x10\x00\x49\x01\x00\x00\x00\x00\x00\xf0\x7f" as zetasql_test__.KitchenSinkPB).double_val as nan_01, CAST(b"\x08\x00\x10\x00\x49\x02\x00\x00\x00\x00\x00\xf0\x7f" as zetasql_test__.KitchenSinkPB).double_val as nan_02]
SELECT * FROM UNNEST([@nan_01])
UNION DISTINCT
SELECT * FROM UNNEST([@nan_02]);
--
ARRAY<STRUCT<DOUBLE>>[{nan}]

NOTE: Reference implementation reports non-determinism.
==
[name=union_distinct_corresponding_parenthesized_multiple_operands]
[required_features=V_1_4_CORRESPONDING]
SELECT int64_val, bool_val, int32_val
FROM Table1
UNION DISTINCT CORRESPONDING
(
  SELECT bool_val, int32_val, int64_val, float_val
  FROM Table2
  UNION DISTINCT CORRESPONDING
  SELECT int32_val, bool_val, float_val, int64_val
  FROM Table1
)
--
ARRAY<STRUCT<int64_val INT64, bool_val BOOL, int32_val INT32>>[unknown order:
  {NULL, NULL, NULL},
  {-4, false, -4},
  {-3, true, -3},
  {-2, false, -2},
  {-1, true, -1},
  {0, false, 0}
]

NOTE: Reference implementation reports non-determinism.
==
[name=union_distinct_corresponding_multiple_operands]
[required_features=V_1_4_CORRESPONDING]
SELECT int64_val, bool_val, int32_val
FROM Table1
UNION DISTINCT CORRESPONDING
SELECT bool_val, int32_val, int64_val, float_val
FROM Table2
UNION DISTINCT CORRESPONDING
SELECT int32_val, bool_val, float_val, int64_val
FROM Table1
--
ARRAY<STRUCT<int64_val INT64, bool_val BOOL, int32_val INT32>>[unknown order:
  {NULL, NULL, NULL},
  {-4, false, -4},
  {-3, true, -3},
  {-2, false, -2},
  {-1, true, -1},
  {0, false, 0}
]
==
[name=union_distinct_corresponding_type_coercion]
[required_features=V_1_4_CORRESPONDING]
SELECT int64_val AS col1, bool_val AS col2, int32_val AS col3
FROM Table1
UNION DISTINCT CORRESPONDING
SELECT int64_val AS col3, int32_val AS col1, bool_val AS col2
FROM Table2
UNION DISTINCT CORRESPONDING
SELECT int32_val AS col1, bool_val AS col2, float_val AS col3
FROM Table1
--
ARRAY<STRUCT<col1 INT64, col2 BOOL, col3 DOUBLE>>[unknown order:
  {NULL, NULL, NULL},
  {-4, false, -4},
  {-4, false, 0.40000000596046448},
  {-3, true, -3},
  {-3, true, 0.30000001192092896},
  {-2, false, -2},
  {-2, false, 0.20000000298023224},
  {-1, true, -1},
  {-1, true, 0.10000000149011612},
  {0, false, 0}
]

NOTE: Reference implementation reports non-determinism.
==
[name=union_distinct_with_corresponding_with_extra_columns_in_first_table_scan]
[required_features=V_1_4_CORRESPONDING]
SELECT primary_key, int32_val, int64_val FROM Table1
UNION DISTINCT CORRESPONDING
SELECT int64_val, int32_val FROM TestDistinct
--
ARRAY<STRUCT<int32_val INT32, int64_val INT64>>[unknown order:
  {NULL, NULL},
  {-4, -4},
  {-3, -3},
  {-2, -2},
  {-1, -1},
  {100, 100}
]
==
[name=union_distinct_with_corresponding_with_extra_columns_in_first_single_scan]
[required_features=V_1_4_CORRESPONDING]
SELECT primary_key, int32_val, int64_val FROM Table1
UNION DISTINCT CORRESPONDING
SELECT CAST(-2 AS INT64) AS int64_val, CAST(-2 AS INT32) AS int32_val
--
ARRAY<STRUCT<int32_val INT32, int64_val INT64>>[unknown order:
  {NULL, NULL},
  {-4, -4},
  {-3, -3},
  {-2, -2},
  {-1, -1}
]
==
[name=union_distinct_with_corresponding_extra_columns_in_second]
[required_features=V_1_4_CORRESPONDING]
SELECT int32_val, int64_val FROM Table1
UNION DISTINCT CORRESPONDING
SELECT CAST(-2 AS INT64) AS int64_val, CAST(-2 AS INT32) AS int32_val, 1 AS extra
--
ARRAY<STRUCT<int32_val INT32, int64_val INT64>>[unknown order:
  {NULL, NULL},
  {-4, -4},
  {-3, -3},
  {-2, -2},
  {-1, -1}
]
==
[name=union_distinct_with_corresponding_no_extra_columns]
[required_features=V_1_4_CORRESPONDING]
SELECT int32_val, int64_val FROM Table1
UNION DISTINCT CORRESPONDING
SELECT CAST(-2 AS INT64) AS int64_val, CAST(-2 AS INT32) AS int32_val FROM Table1
--
ARRAY<STRUCT<int32_val INT32, int64_val INT64>>[unknown order:
  {NULL, NULL},
  {-4, -4},
  {-3, -3},
  {-2, -2},
  {-1, -1}
]
==
[name=union_distinct_with_corresponding_type_coercion]
[required_features=V_1_4_CORRESPONDING]
SELECT int32_val AS a, uint32_val AS b FROM Table1
UNION DISTINCT CORRESPONDING
SELECT int64_val AS b FROM TestDistinct
--
ARRAY<STRUCT<b INT64>>[unknown order:{NULL}, {-2}, {1}, {2}, {3}, {4}, {100}]
==
[name=union_distinct_with_corresponding_nested_operations]
[required_features=V_1_4_CORRESPONDING]
(
  SELECT int32_val, int64_val, uint32_val FROM Table1
  UNION ALL
  SELECT int32_val, int64_val, CAST(uint32_val + 1 AS UINT32) AS uint32_val
  FROM Table1
)
UNION DISTINCT CORRESPONDING
SELECT int64_val, int32_val FROM TestDistinct
--
ARRAY<STRUCT<int32_val INT32, int64_val INT64>>[unknown order:
  {NULL, NULL},
  {-4, -4},
  {-3, -3},
  {-2, -2},
  {-1, -1},
  {100, 100}
]
==
[name=union_distinct_with_corresponding_nested_operations_single_row_scan]
[required_features=V_1_4_CORRESPONDING]
(
  SELECT int32_val, int64_val, uint32_val FROM Table1
  UNION ALL
  SELECT CAST(-1 AS INT32), CAST(-1 AS INT64), CAST(100 AS UINT32)
)
UNION DISTINCT CORRESPONDING
SELECT int64_val, int32_val FROM TestDistinct
--
ARRAY<STRUCT<int32_val INT32, int64_val INT64>>[unknown order:
  {NULL, NULL},
  {-4, -4},
  {-3, -3},
  {-2, -2},
  {-1, -1},
  {100, 100}
]
==
[name=union_distinct_with_corresponding_nested_operation_with_project_scan]
[required_features=V_1_4_CORRESPONDING]
SELECT *
FROM (
  (
    SELECT int32_val, int64_val, uint32_val FROM Table1
    UNION ALL
    SELECT int32_val, int64_val, CAST(uint32_val + 1 AS UINT32) AS uint32_val
    FROM Table1
  )
)
UNION DISTINCT CORRESPONDING
SELECT int64_val, int32_val FROM TestDistinct
--
ARRAY<STRUCT<int32_val INT32, int64_val INT64>>[unknown order:
  {NULL, NULL},
  {-4, -4},
  {-3, -3},
  {-2, -2},
  {-1, -1},
  {100, 100}
]
==
[name=union_distinct_with_corresponding_multiple_expressions]
[required_features=V_1_4_CORRESPONDING]
SELECT int64_val, int32_val, primary_key FROM Table1
UNION DISTINCT CORRESPONDING
SELECT int32_val, int64_val FROM TestDistinct
UNION DISTINCT CORRESPONDING
SELECT -100 AS int64_val, CAST(-100 AS INT32) AS int32_val, "random str" AS extra_col
--
ARRAY<STRUCT<int64_val INT64, int32_val INT32>>[unknown order:
  {NULL, NULL},
  {-100, -100},
  {-4, -4},
  {-3, -3},
  {-2, -2},
  {-1, -1},
  {100, 100}
]
