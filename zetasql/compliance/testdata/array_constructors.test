[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB, zetasql_test__.TestExtraPB, zetasql_test__.KitchenSinkPB.Nested, zetasql_test__.RepeatedHolderPB, zetasql_test__.EmptyMessage]
[load_enum_names=zetasql_test__.TestEnum]

[name=construct_BOOL_array_basic]
SELECT ARRAY<BOOL>[true, false, true];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BOOL>[known order:true, false, true]}]
==
[name=construct_INT32_array_basic]
SELECT ARRAY<INT32>[1, 0, -1];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT32>[known order:1, 0, -1]}]
==
[name=construct_UINT32_array_basic]
SELECT ARRAY<UINT32>[2, 1, 0];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT32>[known order:2, 1, 0]}]
==
[name=construct_INT64_array_basic]
SELECT ARRAY<INT64>[8589934592, 0, -8589934592];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[known order:8589934592, 0, -8589934592]}]
==
[name=construct_UINT64_array_basic]
SELECT ARRAY<UINT64>[8589934592, 1, 0];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT64>[known order:8589934592, 1, 0]}]
==
[name=construct_FLOAT_array_basic]
SELECT ARRAY<FLOAT>[1.1, 0.0, -1.1];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<FLOAT>[known order:1.1, 0, -1.1]}]
==
[name=construct_DOUBLE_array_basic]
SELECT ARRAY<DOUBLE>[1.1, 0.0, -1.1];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DOUBLE>[known order:1.1, 0, -1.1]}]
==
[name=construct_STRING_array_basic]
SELECT ARRAY<STRING>['σ', 'π', '⨝'];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>[known order:"σ", "π", "⨝"]}]
==
[name=construct_BYTES_array_basic]
SELECT ARRAY<BYTES>[b"a", b"b", b"c"];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BYTES>[known order:b"a", b"b", b"c"]}]
==
[name=construct_DATE_array_basic]
SELECT ARRAY<DATE>['1984-08-02', '2000-01-01', '2014-09-11'];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<DATE>[known order:1984-08-02, 2000-01-01, 2014-09-11]}
]
==
[name=construct_TIMESTAMP_array_basic]
SELECT ARRAY<TIMESTAMP>['1984-08-02 01:01:01.001001 UTC',
                        '2000-01-01 01:01:01.001001 UTC',
                        '2014-09-11 01:01:01.001001 UTC'];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<TIMESTAMP>[known order:
     1984-08-02 01:01:01.001001+00,
     2000-01-01 01:01:01.001001+00,
     2014-09-11 01:01:01.001001+00
   ]}
]
==
[name=construct_enum_array_basic]
SELECT ARRAY<zetasql_test__.TestEnum>['TESTENUM0', 'TESTENUM1', 'TESTENUM2'];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[known order:
     TESTENUM0,
     TESTENUM1,
     TESTENUM2
   ]}
]
==
[name=construct_proto_array_basic]
SELECT ARRAY<"zetasql_test__.KitchenSinkPB">[
  '''
    int64_key_1: 11
    int64_key_2: 12
  ''',
  '''
    int64_key_1: 21
    int64_key_2: 22
  ''',
  '''
    int64_key_1: 31
    int64_key_2: 32
  '''];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
     {
       int64_key_1: 11
       int64_key_2: 12
     },
     {
       int64_key_1: 21
       int64_key_2: 22
     },
     {
       int64_key_1: 31
       int64_key_2: 32
     }
   ]}
]
==
[name=construct_STRUCT_array_basic]
SELECT ARRAY<STRUCT<int64, int64>>[(11, 12), (21, 22), (31, 32)];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<STRUCT<INT64, INT64>>[known order:{11, 12}, {21, 22}, {31, 32}]}
]
==
[name=construct_BOOL_array_from_params]
[parameters=true a, false b, cast(NULL as bool) c]
SELECT ARRAY<BOOL>[@a, @b, @c];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BOOL>[known order:true, false, NULL]}]
==
[name=construct_INT32_array_from_params]
[parameters=cast(1 as int32) a, cast(-1 as int32) b, cast(NULL as int32) c]
SELECT ARRAY<INT32>[@a, @b, @c];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT32>[known order:1, -1, NULL]}]
==
[name=construct_UINT32_array_from_params]
[parameters=cast(1 as uint32) a, cast(2 as uint32) b, cast(NULL as uint32) c]
SELECT ARRAY<UINT32>[@a, @b, @c];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT32>[known order:1, 2, NULL]}]
==
[name=construct_INT64_array_from_params]
[parameters=cast(1 as int64) a, cast(-1 as int64) b, cast(NULL as int64) c]
SELECT ARRAY<INT64>[@a, @b, @c];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[known order:1, -1, NULL]}]
==
[name=construct_UINT64_array_from_params]
[parameters=cast(1 as uint64) a, cast(2 as uint64) b, cast(NULL as uint64) c]
SELECT ARRAY<UINT64>[@a, @b, @c];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT64>[known order:1, 2, NULL]}]
==
[name=construct_FLOAT_array_from_params]
[parameters=cast(1.1 as float) a, cast(0.0 as float) b, cast(NULL as float) c]
SELECT ARRAY<FLOAT>[@a, @b, @c];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<FLOAT>[known order:1.1, 0, NULL]}]
==
[name=construct_DOUBLE_array_from_params]
[parameters=cast(1.1 as double) a, cast(0.0 as double) b, cast(NULL as double) c]
SELECT ARRAY<DOUBLE>[@a, @b, @c];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DOUBLE>[known order:1.1, 0, NULL]}]
==
[name=construct_STRING_array_from_params]
[parameters='σ' a, 'π' b, cast(NULL as string) c]
SELECT ARRAY<STRING>[@a, @b, @c];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>[known order:"σ", "π", NULL]}]
==
[name=construct_BYTES_array_from_params]
[parameters=b"a" a, b"b" b, cast(NULL as bytes) c]
SELECT ARRAY<BYTES>[@a, @b, @c];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BYTES>[known order:b"a", b"b", NULL]}]
==
[name=construct_DATE_array_from_params]
[parameters=cast('1984-08-02' as date) a,
            cast('2000-01-01' as date) b,
            cast(NULL as date) c]
SELECT ARRAY<DATE>[@a, @b, @c];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<DATE>[known order:1984-08-02, 2000-01-01, NULL]}
]
==
[name=construct_TIMESTAMP_array_from_params]
[parameters=cast('1984-08-02 01:01:01.001001 UTC' as TIMESTAMP) a,
            cast('2000-01-01 01:01:01.001001 UTC' as TIMESTAMP) b,
            cast(NULL as TIMESTAMP) c]
SELECT ARRAY<TIMESTAMP>[@a, @b, @c];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<TIMESTAMP>[known order:
     1984-08-02 01:01:01.001001+00,
     2000-01-01 01:01:01.001001+00,
     NULL
   ]}
]
==
[name=construct_enum_array_from_params]
[parameters=cast('TESTENUM0' as zetasql_test__.TestEnum) a,
            cast('TESTENUM1' as zetasql_test__.TestEnum) b,
            cast(NULL as zetasql_test__.TestEnum) c]
SELECT ARRAY<zetasql_test__.TestEnum>[@a, @b, @c];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[known order:TESTENUM0, TESTENUM1, NULL]}
]
==
[name=construct_proto_array_from_params]
[parameters=
  cast('''
         int64_key_1: 11
         int64_key_2: 12
       ''' as zetasql_test__.KitchenSinkPB) a,
  cast('''
         int64_key_1: 21
         int64_key_2: 22
       ''' as zetasql_test__.KitchenSinkPB) b,
  cast(NULL as zetasql_test__.KitchenSinkPB) c]
SELECT ARRAY<"zetasql_test__.KitchenSinkPB">[@a, @b, @c];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
     {
       int64_key_1: 11
       int64_key_2: 12
     },
     {
       int64_key_1: 21
       int64_key_2: 22
     },
     NULL
   ]}
]
==
[name=construct_STRUCT_array_from_params]
[parameters=(11, 12) a, (21, 22) b, cast(NULL as STRUCT<INT64, INT64>) c]
SELECT ARRAY<STRUCT<int64, int64>>[@a, @b, @c];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<STRUCT<INT64, INT64>>[known order:{11, 12}, {21, 22}, NULL]}
]
==
[name=construct_BOOL_array_from_non_literals]
SELECT ARRAY<BOOL>[1 IS NULL, true OR false, a] FROM (SELECT true a);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BOOL>[known order:false, true, true]}]
==
[name=construct_INT32_array_from_non_literals]
SELECT ARRAY<INT32>[CAST(1 + 1 AS INT32), a] FROM (SELECT cast(1 as int32) a);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT32>[known order:2, 1]}]
==
[name=construct_UINT32_array_from_non_literals]
SELECT ARRAY<UINT32>[CAST(0 * 0 AS UINT32), CAST(99 + 1 - 100 AS UINT32), a]
FROM (SELECT cast(1 as uint32) a);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT32>[known order:0, 0, 1]}]
==
[name=construct_INT64_array_from_non_literals]
SELECT ARRAY<INT64>[4000 * 4000, 1000000 + 5000000, a] FROM (SELECT 100 a);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[known order:16000000, 6000000, 100]}]
==
[name=construct_UINT64_array_from_non_literals]
SELECT ARRAY<UINT64>[CAST(0 * 0 AS UINT64),
                     CAST(99000000 + 1000000 - 100000000 AS UINT64), a]
FROM (SELECT cast(100 as uint64) a);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT64>[known order:0, 0, 100]}]
==
[name=construct_FLOAT_array_from_non_literals]
SELECT ARRAY<FLOAT>[CAST(1.1 * 1000 AS FLOAT), a]
FROM (SELECT cast(100.1 as float) a);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<FLOAT>[known order:1100, 100.1]}]
==
[name=construct_DOUBLE_array_from_non_literals]
SELECT ARRAY<DOUBLE>[1.1 * 1000, 1000 / 1.1, a] FROM (SELECT 2.2 a);
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<DOUBLE>[known order:1100, 909.090909090909, 2.2]}
]
==
[name=construct_STRING_array_from_non_literals]
SELECT ARRAY<STRING>[SUBSTR('σπ⨝', 3), a] FROM (SELECT 'σ' a);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>[known order:"⨝", "σ"]}]
==
[name=construct_BYTES_array_from_non_literals]
SELECT ARRAY<BYTES>[SUBSTR(b"abc", 2), a] FROM (SELECT b'def' a);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BYTES>[known order:b"bc", b"def"]}]
==
[name=construct_DATE_array_from_non_literals]
SELECT ARRAY<DATE>[CAST(SUBSTR('1984-08-02', 0) AS DATE), a]
FROM (SELECT cast('1984-08-02' AS DATE) a);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DATE>[known order:1984-08-02, 1984-08-02]}]
==
[name=construct_TIMESTAMP_array_from_non_literals]
SELECT ARRAY<TIMESTAMP>[a]
FROM (SELECT cast('1984-08-02 01:01:01.001001 UTC' AS TIMESTAMP) a);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<TIMESTAMP>[1984-08-02 01:01:01.001001+00]}]
==
[name=construct_enum_array_from_non_literals]
SELECT ARRAY<zetasql_test__.TestEnum>[
    cast(SUBSTR('TESTENUM0', 0) AS zetasql_test__.TestEnum), a]
FROM (SELECT cast('TESTENUM1' AS zetasql_test__.TestEnum) a);
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[known order:TESTENUM0, TESTENUM1]}
]
==
[name=construct_proto_array_from_non_literals]
SELECT ARRAY<zetasql_test__.KitchenSinkPB>[
  IF(1 IS NULL,
  CAST('''
         int64_key_1: 21
         int64_key_2: 22
       ''' AS zetasql_test__.KitchenSinkPB),
  CAST('''
         int64_key_1: 31
         int64_key_2: 32
       ''' AS zetasql_test__.KitchenSinkPB)), a]
FROM (SELECT cast('''
         int64_key_1: 21
         int64_key_2: 22
       ''' AS zetasql_test__.KitchenSinkPB) a);
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
     {
       int64_key_1: 31
       int64_key_2: 32
     },
     {
       int64_key_1: 21
       int64_key_2: 22
     }
   ]}
]
==
[name=construct_STRUCT_array_from_non_literals]
SELECT ARRAY<STRUCT<int64, int64>>[IF ((11, 12) IS NULL, (21, 22), (31, 32)), a]
FROM (SELECT (41, 42) AS a);
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<STRUCT<INT64, INT64>>[known order:{31, 32}, {41, 42}]}
]
==
[name=construct_BOOL_array_with_null]
SELECT ARRAY<BOOL>[true, NULL, true];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BOOL>[known order:true, NULL, true]}]
==
[name=construct_INT32_array_with_null]
SELECT ARRAY<INT32>[1, NULL, -1];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT32>[known order:1, NULL, -1]}]
==
[name=construct_UINT32_array_with_null]
SELECT ARRAY<UINT32>[2, NULL, 0];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT32>[known order:2, NULL, 0]}]
==
[name=construct_INT64_array_with_null]
SELECT ARRAY<INT64>[8589934592, NULL, -8589934592];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<INT64>[known order:8589934592, NULL, -8589934592]}
]
==
[name=construct_UINT64_array_with_null]
SELECT ARRAY<UINT64>[8589934592, NULL, 0];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT64>[known order:8589934592, NULL, 0]}]
==
[name=construct_FLOAT_array_with_null]
SELECT ARRAY<FLOAT>[1.1, NULL, -1.1];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<FLOAT>[known order:1.1, NULL, -1.1]}]
==
[name=construct_DOUBLE_array_with_null]
SELECT ARRAY<DOUBLE>[1.1, NULL, -1.1];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DOUBLE>[known order:1.1, NULL, -1.1]}]
==
[name=construct_STRING_array_with_null]
SELECT ARRAY<STRING>['σ', NULL, '⨝'];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>[known order:"σ", NULL, "⨝"]}]
==
[name=construct_BYTES_array_with_null]
SELECT ARRAY<BYTES>[b"a", NULL, b"c"];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BYTES>[known order:b"a", NULL, b"c"]}]
==
[name=construct_DATE_array_with_null]
SELECT ARRAY<DATE>['1984-08-02', NULL, '2014-09-11'];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<DATE>[known order:1984-08-02, NULL, 2014-09-11]}
]
==
[name=construct_TIMESTAMP_array_with_null]
SELECT ARRAY<TIMESTAMP>['1984-08-02 01:01:01.001001 UTC', NULL,
                        '2014-09-11 01:01:01.001001 UTC'];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<TIMESTAMP>[known order:
     1984-08-02 01:01:01.001001+00,
     NULL,
     2014-09-11 01:01:01.001001+00
   ]}
]
==
[name=construct_enum_array_with_null]
SELECT ARRAY<zetasql_test__.TestEnum>['TESTENUM0', NULL, 'TESTENUM2'];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[known order:TESTENUM0, NULL, TESTENUM2]}
]
==
[name=construct_proto_array_with_null]
SELECT ARRAY<"zetasql_test__.KitchenSinkPB">[
  '''
    int64_key_1: 11
    int64_key_2: 12
  ''',
  NULL,
  '''
    int64_key_1: 31
    int64_key_2: 32
  '''];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
     {
       int64_key_1: 11
       int64_key_2: 12
     },
     NULL,
     {
       int64_key_1: 31
       int64_key_2: 32
     }
   ]}
]
==
[name=construct_STRUCT_array_with_null]
SELECT ARRAY<STRUCT<int64, int64>>[(11, 12), NULL, (31, 32)];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<STRUCT<INT64, INT64>>[known order:{11, 12}, NULL, {31, 32}]}
]
==
[name=select_BOOL_array_all_null]
SELECT ARRAY<BOOL>[NULL, NULL];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BOOL>[known order:NULL, NULL]}]
==
[name=select_INT32_array_all_null]
SELECT ARRAY<INT32>[NULL, NULL];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT32>[known order:NULL, NULL]}]
==
[name=select_UINT32_array_all_null]
SELECT ARRAY<UINT32>[NULL, NULL];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT32>[known order:NULL, NULL]}]
==
[name=select_INT64_array_all_null]
SELECT ARRAY<INT64>[NULL, NULL];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[known order:NULL, NULL]}]
==
[name=select_UINT64_array_all_null]
SELECT ARRAY<UINT64>[NULL, NULL];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT64>[known order:NULL, NULL]}]
==
[name=select_FLOAT_array_all_null]
SELECT ARRAY<FLOAT>[NULL, NULL];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<FLOAT>[known order:NULL, NULL]}]
==
[name=select_DOUBLE_array_all_null]
SELECT ARRAY<DOUBLE>[NULL, NULL];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DOUBLE>[known order:NULL, NULL]}]
==
[name=select_STRING_array_all_null]
SELECT ARRAY<STRING>[NULL, NULL];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>[known order:NULL, NULL]}]
==
[name=select_BYTES_array_all_null]
SELECT ARRAY<BYTES>[NULL, NULL];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BYTES>[known order:NULL, NULL]}]
==
[name=select_DATE_array_all_null]
SELECT ARRAY<DATE>[NULL, NULL];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DATE>[known order:NULL, NULL]}]
==
[name=select_TIMESTAMP_array_all_null]
SELECT ARRAY<TIMESTAMP>[NULL, NULL];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<TIMESTAMP>[known order:NULL, NULL]}]
==
[name=construct_enum_array_all_null]
SELECT ARRAY<zetasql_test__.TestEnum>[NULL, NULL];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<ENUM<zetasql_test__.TestEnum>>[known order:NULL, NULL]}
]
==
[name=select_proto_array_all_null]
SELECT ARRAY<"zetasql_test__.KitchenSinkPB">[NULL, NULL];
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:NULL, NULL]}
]
==
[name=select_STRUCT_array_all_null]
SELECT ARRAY<STRUCT<int64, int64>>[NULL, NULL];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRUCT<INT64, INT64>>[known order:NULL, NULL]}]
==
[name=select_BOOL_array_empty]
SELECT ARRAY<BOOL>[];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BOOL>[]}]
==
[name=select_INT32_array_empty]
SELECT ARRAY<INT32>[];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT32>[]}]
==
[name=select_UINT32_array_empty]
SELECT ARRAY<UINT32>[];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT32>[]}]
==
[name=select_INT64_array_empty]
SELECT ARRAY<INT64>[];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[]}]
==
[name=select_UINT64_array_empty]
SELECT ARRAY<UINT64>[];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT64>[]}]
==
[name=select_FLOAT_array_empty]
SELECT ARRAY<FLOAT>[];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<FLOAT>[]}]
==
[name=select_DOUBLE_array_empty]
SELECT ARRAY<DOUBLE>[];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DOUBLE>[]}]
==
[name=select_STRING_array_empty]
SELECT ARRAY<STRING>[];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>[]}]
==
[name=select_BYTES_array_empty]
SELECT ARRAY<BYTES>[];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BYTES>[]}]
==
[name=select_DATE_array_empty]
SELECT ARRAY<DATE>[];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DATE>[]}]
==
[name=select_TIMESTAMP_array_empty]
SELECT ARRAY<TIMESTAMP>[];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<TIMESTAMP>[]}]
==
[name=construct_enum_array_empty]
SELECT ARRAY<zetasql_test__.TestEnum>[];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<ENUM<zetasql_test__.TestEnum>>[]}]
==
[name=select_proto_array_empty]
SELECT ARRAY<"zetasql_test__.KitchenSinkPB">[];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[]}]
==
[name=select_STRUCT_array_empty]
SELECT ARRAY<STRUCT<int64, int64>>[];
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRUCT<INT64, INT64>>[]}]
==
[name=select_cast_null_to_BOOL_array]
SELECT CAST(NULL AS ARRAY<BOOL>);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BOOL>(NULL)}]
==
[name=select_cast_null_to_INT32_array]
SELECT CAST(NULL AS ARRAY<INT32>);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT32>(NULL)}]
==
[name=select_cast_null_to_UINT32_array]
SELECT CAST(NULL AS ARRAY<UINT32>);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT32>(NULL)}]
==
[name=select_cast_null_to_INT64_array]
SELECT CAST(NULL AS ARRAY<INT64>);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>(NULL)}]
==
[name=select_cast_null_to_UINT64_array]
SELECT CAST(NULL AS ARRAY<UINT64>);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<UINT64>(NULL)}]
==
[name=select_cast_null_to_FLOAT_array]
SELECT CAST(NULL AS ARRAY<FLOAT>);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<FLOAT>(NULL)}]
==
[name=select_cast_null_to_DOUBLE_array]
SELECT CAST(NULL AS ARRAY<DOUBLE>);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DOUBLE>(NULL)}]
==
[name=select_cast_null_to_STRING_array]
SELECT CAST(NULL AS ARRAY<STRING>);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>(NULL)}]
==
[name=select_cast_null_to_BYTES_array]
SELECT CAST(NULL AS ARRAY<BYTES>);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<BYTES>(NULL)}]
==
[name=select_cast_null_to_DATE_array]
SELECT CAST(NULL AS ARRAY<DATE>);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<DATE>(NULL)}]
==
[name=select_cast_null_to_TIMESTAMP_array]
SELECT CAST(NULL AS ARRAY<TIMESTAMP>);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<TIMESTAMP>(NULL)}]
==
[name=construct_cast_null_to_enum_array]
SELECT CAST(NULL AS ARRAY<zetasql_test__.TestEnum>)
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<ENUM<zetasql_test__.TestEnum>>(NULL)}]
==
[name=select_cast_null_to_proto_array]
SELECT CAST(NULL AS ARRAY<"zetasql_test__.KitchenSinkPB">);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>(NULL)}]
==
[name=select_cast_null_to_STRUCT_array]
SELECT CAST(NULL AS ARRAY<STRUCT<int64, int64>>);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRUCT<INT64, INT64>>(NULL)}]
==
##
## Queries that tests explicit unnest. This time we do not require a full
## matrix.
##
[name=select_string_array_constructed_unnest_explicit]
SELECT elem FROM UNNEST(ARRAY<STRING>["σ", NULL, "⨝"]) AS elem
--
ARRAY<STRUCT<elem STRING>>[unknown order:{"σ"}, {NULL}, {"⨝"}]
==
[name=select_unnest_explicit_of_empty_array]
SELECT elem FROM UNNEST(ARRAY<STRING>[]) AS elem
--
ARRAY<STRUCT<elem STRING>>[]
==
[name=select_unnest_explicit_of_null_array]
SELECT elem FROM UNNEST(CAST(NULL AS ARRAY<STRING>)) AS elem
--
ARRAY<STRUCT<elem STRING>>[]
==
##
## From here, several queries to test offset/ordinality without joins.
##
[name=select_string_array_constructed_unnest_with_offset]
SELECT elem, offset FROM UNNEST(ARRAY<STRING>["σ", NULL, "⨝"]) elem WITH OFFSET
--
ARRAY<STRUCT<elem STRING, offset INT64>>[unknown order:
  {"σ", 0},
  {NULL, 1},
  {"⨝", 2}
]
==
[name=select_string_array_constructed_unnest_with_offset_aliased]
SELECT elem, off FROM UNNEST(ARRAY<STRING>["σ", NULL, "⨝"]) elem WITH OFFSET off
--
ARRAY<STRUCT<elem STRING, off INT64>>[unknown order:
  {"σ", 0},
  {NULL, 1},
  {"⨝", 2}
]
==
[name=select_string_array_constructed_unnest_with_offset_sorted]
SELECT elem, offset
FROM UNNEST(ARRAY<STRING>["σ", NULL, "⨝"]) elem WITH OFFSET
ORDER BY offset desc
--
ARRAY<STRUCT<elem STRING, offset INT64>>[known order:
  {"⨝", 2},
  {NULL, 1},
  {"σ", 0}
]
==
[name=select_string_array_constructed_unnest_with_offset_alaised_sorted]
SELECT elem, off
FROM UNNEST(ARRAY<STRING>["σ", NULL, "⨝"]) elem WITH OFFSET off
ORDER BY off desc
--
ARRAY<STRUCT<elem STRING, off INT64>>[known order:
  {"⨝", 2},
  {NULL, 1},
  {"σ", 0}
]
==
# TODO: Introduce these queries to test WITH ORDINALITY
# [name=select_string_array_constructed_unnest_with_ordinality]
# SELECT arr
# FROM UNNEST(ARRAY<STRING>["σ", NULL, "⨝"]) WITH ORDINALITY arr
# --
# false
# ==
# [name=select_string_array_constructed_unnest_with_ordinality_aliased]
# SELECT arr.elem, arr.ord, elem, ord
# FROM UNNEST(ARRAY<STRING>["σ", NULL, "⨝"]) WITH ORDINALITY arr(elem, ord)
# --
# false
# ==
# [name=select_string_array_constructed_unnest_with_ordinality_sorted]
# SELECT arr
# FROM UNNEST(ARRAY<STRING>["σ", NULL, "⨝"]) WITH ORDINALITY arr(elem, ord)
# ORDER BY arr.ord
# --
# false
# ==

