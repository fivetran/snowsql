[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]
[load_enum_names=zetasql_test__.TestEnum]
[prepare_database]
CREATE TABLE TestTable AS
SELECT cast(1 as int64) as row_id,
       cast(null as bool) as bool_val,
       cast(null as int64) as int64_val,
       cast(null as int32) as int32_val,
       cast(null as string) as str_val UNION ALL
  SELECT 2,  true,  null, null,  null  UNION ALL
  SELECT 3,  false, 1,    6,     "A"   UNION ALL
  SELECT 4,  true,  2,    2,     "A"   UNION ALL
  SELECT 5,  false, 1,    3,     "aA"   UNION ALL
  SELECT 6,  true,  2,    2,     "Aa"   UNION ALL
  SELECT 7,  false, 1,    5,     'a'   UNION ALL
  SELECT 8,  true,  4,    2,     "a"   UNION ALL
  SELECT 9,  false, 2,    3,     "b"   UNION ALL
  SELECT 10, true,  3,    1,     "B"
--
ARRAY<STRUCT<row_id INT64,
             bool_val BOOL,
             int64_val INT64,
             int32_val INT32,
             str_val STRING>>
[
  {1, NULL, NULL, NULL, NULL},
  {2, true, NULL, NULL, NULL},
  {3, false, 1, 6, "A"},
  {4, true, 2, 2, "A"},
  {5, false, 1, 3, "aA"},
  {6, true, 2, 2, "Aa"},
  {7, false, 1, 5, "a"},
  {8, true, 4, 2, "a"},
  {9, false, 2, 3, "b"},
  {10, true, 3, 1, "B"}
]
==

[prepare_database]
CREATE TABLE TableDateTimeBytes AS
SELECT cast(1 as int64) as row_id,
       cast(null as date) as date_val,
       cast(null as timestamp) as timestamp_val,
       cast(null as bytes) as bytes_val UNION ALL
SELECT 2,
       cast('2014-01-01' as date),
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC',
       cast("1" as bytes) UNION ALL
SELECT 3,
       cast('2014-01-01' as date),
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC',
       cast("2" as bytes) UNION ALL
SELECT 4,
       cast('2015-01-01' as date),
       TIMESTAMP '2014-01-01 00:00:01.011011 UTC',
       cast("1" as bytes) UNION ALL
SELECT 5,
       cast('2015-01-01' as date),
       TIMESTAMP '2013-01-01 00:00:01.011011 UTC',
       cast("2" as bytes) UNION ALL
SELECT 6,
       cast('2014-01-01' as date),
       TIMESTAMP '2015-01-01 00:00:01.011011 UTC',
       cast("5" as bytes)
--
ARRAY<STRUCT<
        row_id INT64,
        date_val DATE,
        timestamp_val TIMESTAMP,
        bytes_val BYTES
      >>
[{1, NULL, NULL, NULL},
 {
   2,
   2014-01-01,
   2014-01-01 00:00:01.011011+00,
   b"1"
 },
 {
   3,
   2014-01-01,
   2014-01-01 00:00:01.011011+00,
   b"2"
 },
 {
   4,
   2015-01-01,
   2014-01-01 00:00:01.011011+00,
   b"1"
 },
 {
   5,
   2015-01-01,
   2013-01-01 00:00:01.011011+00,
   b"2"
 },
 {
   6,
   2014-01-01,
   2015-01-01 00:00:01.011011+00,
   b"5"
 }]
==

[prepare_database]
CREATE TABLE TableEnumStructProto AS
SELECT cast(1 as int64) as row_id,
       cast(null as "zetasql_test__.TestEnum") as enum_val,
       cast(null as STRUCT<a int64, b int64>) as struct_val,
       cast(null as "zetasql_test__.KitchenSinkPB") as proto_val UNION ALL
SELECT 2, 1, struct(2, 4),
       NEW zetasql_test__.KitchenSinkPB(6 AS int64_key_1,
                                        6 AS int64_key_2) UNION ALL
SELECT 3, 1, struct(2, 4),
       NEW zetasql_test__.KitchenSinkPB(5 AS int64_key_1,
                                        6 AS int64_key_2) UNION ALL
SELECT 4, 2, struct(3, 4),
       NEW zetasql_test__.KitchenSinkPB(6 AS int64_key_1,
                                        6 AS int64_key_2) UNION ALL
SELECT 5, 0, struct(2, cast(null as int64)),
       NEW zetasql_test__.KitchenSinkPB(5 AS int64_key_1,
                                        7 AS int64_key_2)
--
ARRAY<STRUCT<
        row_id INT64,
        enum_val ENUM<zetasql_test__.TestEnum>,
        struct_val STRUCT<a INT64, b INT64>,
        proto_val PROTO<zetasql_test__.KitchenSinkPB>
      >>
[{1, NULL, NULL, NULL},
 {2,
  TESTENUM1,
  {2, 4},
  {
    int64_key_1: 6
    int64_key_2: 6
  }},
 {3,
  TESTENUM1,
  {2, 4},
  {
    int64_key_1: 5
    int64_key_2: 6
  }},
 {4,
  TESTENUM2,
  {3, 4},
  {
    int64_key_1: 6
    int64_key_2: 6
  }},
 {5,
  TESTENUM0,
  {2, NULL},
  {
    int64_key_1: 5
    int64_key_2: 7
  }}]
==

[default required_features=ANALYTIC_FUNCTIONS]
[name=lead_offset_zero_offset]
SELECT row_id, LEAD(row_id, 0) OVER test_window
FROM TestTable
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, INT64>>[unknown order:
  {1, 1},
  {2, 2},
  {3, 3},
  {4, 4},
  {5, 5},
  {6, 6},
  {7, 7},
  {8, 8},
  {9, 9},
  {10, 10}
]
==

[name=lead_default_offset]
SELECT row_id,
       LEAD(row_id) OVER test_window,
       LEAD(row_id, 1) OVER test_window
FROM TestTable
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, INT64, INT64>>[unknown order:
  {1, 2, 2},
  {2, 3, 3},
  {3, 4, 4},
  {4, 5, 5},
  {5, 6, 6},
  {6, 7, 7},
  {7, 8, 8},
  {8, 9, 9},
  {9, 10, 10},
  {10, NULL, NULL}
]
==

[name=lead_small_offset]
SELECT row_id,
       LEAD(row_id, 3) OVER test_window,
       LEAD(row_id, 4) OVER test_window,
       LEAD(row_id, 100) OVER test_window
FROM TestTable
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, INT64, INT64, INT64>>[unknown order:
  {1, 4, 5, NULL},
  {2, 5, 6, NULL},
  {3, 6, 7, NULL},
  {4, 7, 8, NULL},
  {5, 8, 9, NULL},
  {6, 9, 10, NULL},
  {7, 10, NULL, NULL},
  {8, NULL, NULL, NULL},
  {9, NULL, NULL, NULL},
  {10, NULL, NULL, NULL}
]
==

[name=lead_large_offset]
SELECT row_id,
       LEAD(row_id, 9223372036854775807) OVER test_window
FROM TestTable
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, INT64>>[unknown order:
  {1, NULL},
  {2, NULL},
  {3, NULL},
  {4, NULL},
  {5, NULL},
  {6, NULL},
  {7, NULL},
  {8, NULL},
  {9, NULL},
  {10, NULL}
]
==

[name=lead_negative_offset]
[parameters=-1 as offset]
SELECT LEAD(row_id, @offset) OVER test_window
FROM TestTable
WINDOW test_window AS (ORDER BY row_id)
--
ERROR: generic::invalid_argument: The offset to the function LEAD must not be negative
==

[name=lead_null_offset]
[parameters=cast(null as INT64) as offset]
SELECT LEAD(row_id, @offset) OVER test_window
FROM TestTable
WINDOW test_window AS (ORDER BY row_id)
--
ERROR: generic::invalid_argument: The offset to the function LEAD must not be null
==

[name=lead_bool]
SELECT row_id, bool_val,
       LEAD(bool_val, 1, false) OVER test_window,
       LEAD(bool_val, 2) OVER test_window
FROM TestTable
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, bool_val BOOL, BOOL, BOOL>>[unknown order:
  {1, NULL, true, false},
  {2, true, false, true},
  {3, false, true, false},
  {4, true, false, true},
  {5, false, true, false},
  {6, true, false, true},
  {7, false, true, false},
  {8, true, false, true},
  {9, false, true, NULL},
  {10, true, false, NULL}
]
==

[name=lead_int32_uint32]
SELECT row_id, int32_val,
       LEAD(int32_val, 5, -1) OVER test_window,
       LEAD(CAST(int32_val as uint32), 2, 100000) OVER test_window
FROM TestTable
WINDOW test_window AS (ORDER BY row_id DESC)
ORDER BY row_id DESC
--
ARRAY<STRUCT<row_id INT64, int32_val INT32, INT32, UINT32>>[known order:
  {10, 1, 3, 2},
  {9, 3, 2, 5},
  {8, 2, 6, 2},
  {7, 5, NULL, 3},
  {6, 2, NULL, 2},
  {5, 3, -1, 6},
  {4, 2, -1, NULL},
  {3, 6, -1, NULL},
  {2, NULL, -1, 100000},
  {1, NULL, -1, 100000}
]
==

[name=lead_int64_uint64]
SELECT row_id, int64_val,
       LEAD(int64_val * 2, 6, 9223372036854775807) OVER test_window,
       LEAD(CAST(int64_val as uint64), 6, 18446744073709551615) OVER test_window
FROM TestTable
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, int64_val INT64, INT64, UINT64>>[unknown order:
  {1, NULL, 2, 1},
  {2, NULL, 8, 4},
  {3, 1, 4, 2},
  {4, 2, 6, 3},
  {5, 1, 9223372036854775807, 18446744073709551615},
  {6, 2, 9223372036854775807, 18446744073709551615},
  {7, 1, 9223372036854775807, 18446744073709551615},
  {8, 4, 9223372036854775807, 18446744073709551615},
  {9, 2, 9223372036854775807, 18446744073709551615},
  {10, 3, 9223372036854775807, 18446744073709551615}
]
==

[name=lead_double_float]
[parameters=cast("inf" as float) as float_inf,
            cast("NaN" as double) as double_nan]
SELECT row_id, int64_val,
       LEAD(CAST(int64_val as float), 7, @float_inf) OVER test_window,
       LEAD(CAST(int64_val as double), 7, @double_nan) OVER test_window
FROM TestTable
WINDOW test_window AS (ORDER BY row_id DESC)
ORDER BY row_id DESC
--
ARRAY<STRUCT<row_id INT64, int64_val INT64, FLOAT, DOUBLE>>[known order:
  {10, 3, 1, 1},
  {9, 2, NULL, NULL},
  {8, 4, NULL, NULL},
  {7, 1, inf, nan},
  {6, 2, inf, nan},
  {5, 1, inf, nan},
  {4, 2, inf, nan},
  {3, 1, inf, nan},
  {2, NULL, inf, nan},
  {1, NULL, inf, nan}
]
==

[name=lead_string]
SELECT row_id, str_val,
       LEAD(str_val, 2, "default string value") OVER (ORDER BY row_id)
FROM TestTable
--
ARRAY<STRUCT<row_id INT64, str_val STRING, STRING>>[unknown order:
  {1, NULL, "A"},
  {2, NULL, "A"},
  {3, "A", "aA"},
  {4, "A", "Aa"},
  {5, "aA", "a"},
  {6, "Aa", "a"},
  {7, "a", "b"},
  {8, "a", "B"},
  {
    9,
    "b",
    "default string value"
  },
  {
    10,
    "B",
    "default string value"
  }
]
==

[name=lead_date]
SELECT row_id, date_val,
       LEAD(date_val) OVER test_window
FROM TableDateTimeBytes
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, date_val DATE, DATE>>[unknown order:
  {1, NULL, 2014-01-01},
  {2, 2014-01-01, 2014-01-01},
  {3, 2014-01-01, 2015-01-01},
  {4, 2015-01-01, 2015-01-01},
  {5, 2015-01-01, 2014-01-01},
  {6, 2014-01-01, NULL}
]
==

[name=lead_date_default_expression]
SELECT row_id, date_val,
       LEAD(date_val, 2, DATE '5555-11-22') OVER test_window
FROM TableDateTimeBytes
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, date_val DATE, DATE>>[unknown order:
  {1, NULL, 2014-01-01},
  {2, 2014-01-01, 2015-01-01},
  {3, 2014-01-01, 2015-01-01},
  {4, 2015-01-01, 2014-01-01},
  {5, 2015-01-01, 5555-11-22},
  {6, 2014-01-01, 5555-11-22}
]
==

[name=lead_timestamp]
SELECT row_id, timestamp_val,
       LEAD(timestamp_val) OVER test_window
FROM TableDateTimeBytes
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<
        row_id INT64,
        timestamp_val TIMESTAMP,
        TIMESTAMP
      >>
[unknown order:{
                 1,
                 NULL,
                 2014-01-01 00:00:01.011011+00
               },
               {
                 2,
                 2014-01-01 00:00:01.011011+00,
                 2014-01-01 00:00:01.011011+00
               },
               {
                 3,
                 2014-01-01 00:00:01.011011+00,
                 2014-01-01 00:00:01.011011+00
               },
               {
                 4,
                 2014-01-01 00:00:01.011011+00,
                 2013-01-01 00:00:01.011011+00
               },
               {
                 5,
                 2013-01-01 00:00:01.011011+00,
                 2015-01-01 00:00:01.011011+00
               },
               {
                 6,
                 2015-01-01 00:00:01.011011+00,
                 NULL
               }]
==

[name=lead_timestamp_default_expression]
SELECT row_id, timestamp_val,
       LEAD(timestamp_val, 2, TIMESTAMP '7777-11-11 22:33:44.888888') OVER test_window
FROM TableDateTimeBytes
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<
        row_id INT64,
        timestamp_val TIMESTAMP,
        TIMESTAMP
      >>
[unknown order:{
                 1,
                 NULL,
                 2014-01-01 00:00:01.011011+00
               },
               {
                 2,
                 2014-01-01 00:00:01.011011+00,
                 2014-01-01 00:00:01.011011+00
               },
               {
                 3,
                 2014-01-01 00:00:01.011011+00,
                 2013-01-01 00:00:01.011011+00
               },
               {
                 4,
                 2014-01-01 00:00:01.011011+00,
                 2015-01-01 00:00:01.011011+00
               },
               {
                 5,
                 2013-01-01 00:00:01.011011+00,
                 7777-11-12 06:33:44.888888+00
               },
               {
                 6,
                 2015-01-01 00:00:01.011011+00,
                 7777-11-12 06:33:44.888888+00
               }]
==

[name=lead_bytes]
SELECT row_id, bytes_val,
       LEAD(bytes_val) OVER test_window
FROM TableDateTimeBytes
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, bytes_val BYTES, BYTES>>[unknown order:
  {1, NULL, b"1"},
  {2, b"1", b"2"},
  {3, b"2", b"1"},
  {4, b"1", b"2"},
  {5, b"2", b"5"},
  {6, b"5", NULL}
]
==

[name=lead_bytes_default_expression]
SELECT row_id, bytes_val,
       LEAD(bytes_val, 2, b"xxx") OVER test_window
FROM TableDateTimeBytes
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<row_id INT64, bytes_val BYTES, BYTES>>[unknown order:
  {1, NULL, b"2"},
  {2, b"1", b"1"},
  {3, b"2", b"2"},
  {4, b"1", b"5"},
  {5, b"2", b"xxx"},
  {6, b"5", b"xxx"}
]
==

[name=lead_enum]
SELECT row_id, enum_val,
       LEAD(enum_val) OVER test_window
FROM TableEnumStructProto
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<
        row_id INT64,
        enum_val ENUM<zetasql_test__.TestEnum>,
        ENUM<zetasql_test__.TestEnum>
      >>
[unknown order:
  {1, NULL, TESTENUM1},
  {2, TESTENUM1, TESTENUM1},
  {3, TESTENUM1, TESTENUM2},
  {4, TESTENUM2, TESTENUM0},
  {5, TESTENUM0, NULL}
]
==

[name=lead_enum_default_expression]
SELECT row_id, enum_val,
       LEAD(enum_val, 2, 'TESTENUM1') OVER test_window
FROM TableEnumStructProto
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<
        row_id INT64,
        enum_val ENUM<zetasql_test__.TestEnum>,
        ENUM<zetasql_test__.TestEnum>
      >>
[unknown order:
  {1, NULL, TESTENUM1},
  {2, TESTENUM1, TESTENUM2},
  {3, TESTENUM1, TESTENUM0},
  {4, TESTENUM2, TESTENUM1},
  {5, TESTENUM0, TESTENUM1}
]
==

[name=lead_proto]
SELECT row_id, proto_val,
       LEAD(proto_val) OVER test_window
FROM TableEnumStructProto
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<
        row_id INT64,
        proto_val PROTO<zetasql_test__.KitchenSinkPB>,
        PROTO<zetasql_test__.KitchenSinkPB>
      >>
[unknown order:{1,
                NULL,
                {
                  int64_key_1: 6
                  int64_key_2: 6
                }},
               {2,
                {
                  int64_key_1: 6
                  int64_key_2: 6
                },
                {
                  int64_key_1: 5
                  int64_key_2: 6
                }},
               {3,
                {
                  int64_key_1: 5
                  int64_key_2: 6
                },
                {
                  int64_key_1: 6
                  int64_key_2: 6
                }},
               {4,
                {
                  int64_key_1: 6
                  int64_key_2: 6
                },
                {
                  int64_key_1: 5
                  int64_key_2: 7
                }},
               {5,
                {
                  int64_key_1: 5
                  int64_key_2: 7
                },
                NULL}]
==

[name=lead_proto_default_expression]
[parameters=CAST("int64_key_1: 999 int64_key_2: 999" AS "zetasql_test__.KitchenSinkPB") AS proto_default_expression]
SELECT row_id, proto_val,
       LEAD(proto_val, 2, @proto_default_expression) OVER test_window
FROM TableEnumStructProto
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<
        row_id INT64,
        proto_val PROTO<zetasql_test__.KitchenSinkPB>,
        PROTO<zetasql_test__.KitchenSinkPB>
      >>
[unknown order:{1,
                NULL,
                {
                  int64_key_1: 5
                  int64_key_2: 6
                }},
               {2,
                {
                  int64_key_1: 6
                  int64_key_2: 6
                },
                {
                  int64_key_1: 6
                  int64_key_2: 6
                }},
               {3,
                {
                  int64_key_1: 5
                  int64_key_2: 6
                },
                {
                  int64_key_1: 5
                  int64_key_2: 7
                }},
               {4,
                {
                  int64_key_1: 6
                  int64_key_2: 6
                },
                {
                  int64_key_1: 999
                  int64_key_2: 999
                }},
               {5,
                {
                  int64_key_1: 5
                  int64_key_2: 7
                },
                {
                  int64_key_1: 999
                  int64_key_2: 999
                }}]
==

[name=lead_struct]
SELECT row_id, struct_val,
       LEAD(struct_val) OVER test_window lead_struct_val
FROM TableEnumStructProto
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<
        row_id INT64,
        struct_val STRUCT<a INT64, b INT64>,
        lead_struct_val STRUCT<a INT64, b INT64>
      >>
[unknown order:
  {1, NULL, {2, 4}},
  {2, {2, 4}, {2, 4}},
  {3, {2, 4}, {3, 4}},
  {4, {3, 4}, {2, NULL}},
  {5, {2, NULL}, NULL}
]
==

[required_features=ANALYTIC_FUNCTIONS,NUMERIC_TYPE]
[name=lead__numeric]
[parameters="99999999999999999999999999999.999999999" as max_val,
            "-99999999999999999999999999999.999999999" as min_val]
SELECT LEAD(numeric_val) OVER(ORDER BY numeric_val)
FROM (SELECT CAST(NULL as NUMERIC) numeric_val UNION ALL
      SELECT 0                                 UNION ALL
      SELECT 3.5                               UNION ALL
      SELECT -1.230000001                      UNION ALL
      SELECT CAST(@max_val AS NUMERIC)         UNION ALL
      SELECT CAST(@min_val AS NUMERIC))
--
ARRAY<STRUCT<NUMERIC>>[unknown order:
  {-99999999999999999999999999999.999999999},
  {-1.230000001},
  {0},
  {3.5},
  {99999999999999999999999999999.999999999},
  {NULL}
]
==

[name=lead_struct_default_expression]
[parameters=STRUCT<a INT64, b INT64>(999, 999) AS struct_default_value]
SELECT row_id, struct_val,
       LEAD(struct_val, 2, @struct_default_value) OVER test_window lead_struct_val
FROM TableEnumStructProto
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<
        row_id INT64,
        struct_val STRUCT<a INT64, b INT64>,
        lead_struct_val STRUCT<a INT64, b INT64>
      >>
[unknown order:
  {1, NULL, {2, 4}},
  {2, {2, 4}, {3, 4}},
  {3, {2, 4}, {2, NULL}},
  {4, {3, 4}, {999, 999}},
  {5, {2, NULL}, {999, 999}}
]
==

[name=lead_struct_fields]
SELECT row_id, struct_val.a, struct_val.b, lead_struct_val.a, lead_struct_val.b
FROM (
  SELECT row_id, struct_val,
         LEAD(struct_val) OVER test_window lead_struct_val
  FROM TableEnumStructProto
  WINDOW test_window AS (ORDER BY row_id)
)
--
ARRAY<STRUCT<row_id INT64, a INT64, b INT64, a INT64, b INT64>>[unknown order:
  {2, 2, 4, 2, 4},
  {4, 3, 4, 2, NULL},
  {1, NULL, NULL, 2, 4},
  {3, 2, 4, 3, 4},
  {5, 2, NULL, NULL, NULL}
]
==

[name=lead_array]
SELECT row_id, array_val,
       LEAD(array_val) OVER (ORDER BY row_id)
FROM (SELECT 1 row_id, [1, 2, 3] array_val UNION ALL
      SELECT 2, [2, 3, 4] UNION ALL
      SELECT 3, [3, 4, 5] UNION ALL
      SELECT 5, CAST(null as ARRAY<int64>) UNION ALL
      SELECT 6, [6, 5] UNION ALL
      SELECT 7, CAST(null as ARRAY<int64>))
--
ARRAY<STRUCT<row_id INT64, array_val ARRAY<>, ARRAY<>>>[unknown order:
  {
    1,
    ARRAY<INT64>[known order:1, 2, 3],
    ARRAY<INT64>[known order:2, 3, 4]
  },
  {
    2,
    ARRAY<INT64>[known order:2, 3, 4],
    ARRAY<INT64>[known order:3, 4, 5]
  },
  {
    3,
    ARRAY<INT64>[known order:3, 4, 5],
    ARRAY<INT64>(NULL)
  },
  {
    5,
    ARRAY<INT64>(NULL),
    ARRAY<INT64>[known order:6, 5]
  },
  {
    6,
    ARRAY<INT64>[known order:6, 5],
    ARRAY<INT64>(NULL)
  },
  {7, ARRAY<INT64>(NULL), ARRAY<INT64>(NULL)}
]
==

[name=lead_array_default_expression]
SELECT row_id, array_val,
       LEAD(array_val, 2, [-1, -1, -1]) OVER (ORDER BY row_id)
FROM (SELECT 1 row_id, [1, 2, 3] array_val UNION ALL
      SELECT 2, [2, 3, 4] UNION ALL
      SELECT 3, [3, 4, 5] UNION ALL
      SELECT 5, CAST(null as ARRAY<int64>) UNION ALL
      SELECT 6, [6, 5] UNION ALL
      SELECT 7, CAST(null as ARRAY<int64>))
--
ARRAY<STRUCT<row_id INT64, array_val ARRAY<>, ARRAY<>>>[unknown order:
  {
    1,
    ARRAY<INT64>[known order:1, 2, 3],
    ARRAY<INT64>[known order:3, 4, 5]
  },
  {
    2,
    ARRAY<INT64>[known order:2, 3, 4],
    ARRAY<INT64>(NULL)
  },
  {
    3,
    ARRAY<INT64>[known order:3, 4, 5],
    ARRAY<INT64>[known order:6, 5]
  },
  {5, ARRAY<INT64>(NULL), ARRAY<INT64>(NULL)},
  {
    6,
    ARRAY<INT64>[known order:6, 5],
    ARRAY<INT64>[known order:-1, -1, -1]
  },
  {
    7,
    ARRAY<INT64>(NULL),
    ARRAY<INT64>[known order:-1, -1, -1]
  }
]
==

[name=lead_partitionby]
SELECT bool_val, row_id, int64_val,
       LEAD(int64_val) OVER test_window
FROM TestTable
WINDOW test_window AS (PARTITION BY bool_val ORDER BY row_id)
--
ARRAY<STRUCT<bool_val BOOL, row_id INT64, int64_val INT64, INT64>>[unknown order:
  {NULL, 1, NULL, NULL},
  {false, 3, 1, 1},
  {false, 5, 1, 1},
  {false, 7, 1, 2},
  {false, 9, 2, NULL},
  {true, 2, NULL, 2},
  {true, 4, 2, 2},
  {true, 6, 2, 4},
  {true, 8, 4, 3},
  {true, 10, 3, NULL}
]
==

[name=lead_empty_input]
SELECT bool_val, row_id, int64_val,
       LEAD(int64_val) OVER test_window
FROM TestTable WHERE row_id < 0
WINDOW test_window AS (ORDER BY row_id)
--
ARRAY<STRUCT<bool_val BOOL, row_id INT64, int64_val INT64, INT64>>[]
==

[name=lead_null_default_expr]
SELECT LEAD(int64_val, 2, NULL) OVER (ORDER BY int64_val)
FROM TestTable
--
ARRAY<STRUCT<INT64>>[unknown order:
  {1},
  {1},
  {1},
  {2},
  {2},
  {2},
  {3},
  {4},
  {NULL},
  {NULL}
]

NOTE: Reference implementation reports non-determinism.
==

[name=lead_non_constant_default_expr]
SELECT LEAD(int64_val, 2, row_id) OVER (ORDER BY int64_val)
FROM TestTable
--
ERROR: generic::invalid_argument: The third argument (the default expression) to LEAD must be constant
==

[name=lead_window_frame]
SELECT row_id, LEAD(row_id, 2) OVER window_frame
FROM TestTable
WINDOW window_frame AS (ORDER BY row_id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
--
ERROR: generic::invalid_argument: Window framing clause is not allowed for analytic function lead [at 3:41]
WINDOW window_frame AS (ORDER BY row_id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOW...
                                        ^
==

[name=order_by_nulls_last_analytic_lead]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT int64_val, LEAD(int64_val, 1) OVER (ORDER BY int64_val DESC NULLS LAST)
FROM TestTable t
--
ARRAY<STRUCT<int64_val INT64, INT64>>[unknown order:
  {4, 3},
  {3, 2},
  {2, 2},
  {2, 2},
  {2, 1},
  {1, 1},
  {1, 1},
  {1, NULL},
  {NULL, NULL},
  {NULL, NULL}
]

NOTE: Reference implementation reports non-determinism.
==

[name=order_by_nulls_first_analytic_lead]
[required_features=ANALYTIC_FUNCTIONS,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY]
SELECT int64_val, LEAD(int64_val, 1) OVER (ORDER BY int64_val DESC NULLS FIRST)
FROM TestTable t
--
ARRAY<STRUCT<int64_val INT64, INT64>>[unknown order:
  {NULL, NULL},
  {NULL, 4},
  {4, 3},
  {3, 2},
  {2, 2},
  {2, 2},
  {2, 1},
  {1, 1},
  {1, 1},
  {1, NULL}
]

NOTE: Reference implementation reports non-determinism.
