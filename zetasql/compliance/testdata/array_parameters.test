[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB, zetasql_test__.TestExtraPB, zetasql_test__.KitchenSinkPB.Nested, zetasql_test__.RepeatedHolderPB, zetasql_test__.EmptyMessage]
[load_enum_names=zetasql_test__.TestEnum]

[name=select_array_parameters]
[parameters=
    ARRAY<BOOL>[true, false, true] as bool_arr,
    ARRAY<INT32>[1, 0, -1] int32_arr,
    ARRAY<UINT32>[2, 1, 0] uint32_arr,
    ARRAY<INT64>[8589934592, 0, -8589934592] int64_arr,
    ARRAY<UINT64>[8589934592, 1, 0] uint64_arr,
    ARRAY<FLOAT>[1.1, 0.0, -1.1] float_arr,
    ARRAY<DOUBLE>[1.1, 0.0, -1.1] double_arr,
    ARRAY<STRING>['σ', 'π', '⨝'] string_arr,
    ARRAY<BYTES>[b"a", b"b", b"c"] bytes_arr,
    ARRAY<DATE>['1984-08-02', '2000-01-01', '2014-09-11'] date_arr,
    ARRAY<TIMESTAMP>["1984-08-02 01:01:01.001001 UTC",
                     "2000-01-01 01:01:01.001001 UTC",
                     "2014-09-11 01:01:01.001001 UTC"] micros_arr,
    ARRAY<zetasql_test__.TestEnum>[
      'TESTENUM0', 'TESTENUM1', 'TESTENUM2'] enum_arr,
    ARRAY<zetasql_test__.KitchenSinkPB>[
      '''
        int64_key_1: 11
        int64_key_2: 12
      ''',
      '''
        int64_key_1: 21
        int64_key_2: 22
      ''',
      '''
        int64_key_1: 31
        int64_key_2: 32
      ''' ] proto_arr,
    ARRAY<STRUCT<int64, int64>>[(11, 12), (21, 22), (31, 32)] struct_arr]
SELECT @bool_arr, @int32_arr, @uint32_arr, @int64_arr, @uint64_arr, @float_arr,
       @double_arr, @string_arr, @bytes_arr, @date_arr, @micros_arr, @enum_arr,
       @proto_arr, @struct_arr;
--
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>>>
[{ARRAY<BOOL>[known order:true, false, true],
  ARRAY<INT32>[known order:1, 0, -1],
  ARRAY<UINT32>[known order:2, 1, 0],
  ARRAY<INT64>[known order:8589934592, 0, -8589934592],
  ARRAY<UINT64>[known order:8589934592, 1, 0],
  ARRAY<FLOAT>[known order:1.1, 0, -1.1],
  ARRAY<DOUBLE>[known order:1.1, 0, -1.1],
  ARRAY<STRING>[known order:"σ", "π", "⨝"],
  ARRAY<BYTES>[known order:b"a", b"b", b"c"],
  ARRAY<DATE>[known order:1984-08-02, 2000-01-01, 2014-09-11],
  ARRAY<TIMESTAMP>[known order:
    1984-08-02 01:01:01.001001+00,
    2000-01-01 01:01:01.001001+00,
    2014-09-11 01:01:01.001001+00
  ],
  ARRAY<ENUM<zetasql_test__.TestEnum>>[known order:
    TESTENUM0,
    TESTENUM1,
    TESTENUM2
  ],
  ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
    {
      int64_key_1: 11
      int64_key_2: 12
    },
    {
      int64_key_1: 21
      int64_key_2: 22
    },
    {
      int64_key_1: 31
      int64_key_2: 32
    }
  ],
  ARRAY<STRUCT<INT64, INT64>>[known order:{11, 12}, {21, 22}, {31, 32}]}]
==
[name=select_array_parameters_with_null]
[parameters=
    ARRAY<BOOL>[true, NULL, true] as bool_arr,
    ARRAY<INT32>[1, NULL, -1] as int32_arr,
    ARRAY<UINT32>[2, NULL, 0] as uint32_arr,
    ARRAY<INT64>[8589934592, NULL, -8589934592] as int64_arr,
    ARRAY<UINT64>[8589934592, NULL, 0] as uint64_arr,
    ARRAY<FLOAT>[1.1, NULL, -1.1] as float_arr,
    ARRAY<DOUBLE>[1.1, NULL, -1.1] as double_arr,
    ARRAY<STRING>['σ', NULL, '⨝'] as string_arr,
    ARRAY<BYTES>[b"a", NULL, b"c"] as bytes_arr,
    ARRAY<DATE>['1984-08-02', NULL, '2014-09-11'] as date_arr,
    ARRAY<TIMESTAMP>["1984-08-02 01:01:01.001001 UTC", NULL,
                     "2014-09-11 01:01:01.001001 UTC"] as micros_arr,
    ARRAY<zetasql_test__.TestEnum>['TESTENUM0', NULL, 'TESTENUM2'] enum_arr,
    ARRAY<zetasql_test__.KitchenSinkPB>[
      '''
        int64_key_1: 11
        int64_key_2: 12
      ''',
      NULL,
      '''
        int64_key_1: 31
        int64_key_2: 32
      ''' ] as proto_arr,
    ARRAY<STRUCT<int64, int64>>[(11, 12), NULL, (31, 32)] as struct_arr]
SELECT @bool_arr, @int32_arr, @uint32_arr, @int64_arr, @uint64_arr, @float_arr,
       @double_arr, @string_arr, @bytes_arr, @date_arr, @micros_arr, @enum_arr,
       @proto_arr, @struct_arr;
--
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>>>
[
  {
    ARRAY<BOOL>[known order:true, NULL, true],
    ARRAY<INT32>[known order:1, NULL, -1],
    ARRAY<UINT32>[known order:2, NULL, 0],
    ARRAY<INT64>[known order:8589934592, NULL, -8589934592],
    ARRAY<UINT64>[known order:8589934592, NULL, 0],
    ARRAY<FLOAT>[known order:1.1, NULL, -1.1],
    ARRAY<DOUBLE>[known order:1.1, NULL, -1.1],
    ARRAY<STRING>[known order:"σ", NULL, "⨝"],
    ARRAY<BYTES>[known order:b"a", NULL, b"c"],
    ARRAY<DATE>[known order:1984-08-02, NULL, 2014-09-11],
    ARRAY<TIMESTAMP>[known order:
      1984-08-02 01:01:01.001001+00,
      NULL,
      2014-09-11 01:01:01.001001+00
    ],
    ARRAY<ENUM<zetasql_test__.TestEnum>>[known order:TESTENUM0, NULL, TESTENUM2],
    ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
      {
        int64_key_1: 11
        int64_key_2: 12
      },
      NULL,
      {
        int64_key_1: 31
        int64_key_2: 32
      }
    ],
    ARRAY<STRUCT<INT64, INT64>>[known order:{11, 12}, NULL, {31, 32}]
  }
]
==
[name=select_array_parameters_with_null_prefix]
[parameters=
    ARRAY<BOOL>[NULL, true] bool_arr,
    ARRAY<INT32>[NULL, -1] int32_arr,
    ARRAY<UINT32>[NULL, 0] uint32_arr,
    ARRAY<INT64>[NULL, -8589934592] int64_arr,
    ARRAY<UINT64>[NULL, 0] uint64_arr,
    ARRAY<FLOAT>[NULL, -1.1] float_arr,
    ARRAY<DOUBLE>[NULL, -1.1] double_arr,
    ARRAY<STRING>[NULL, '⨝'] string_arr,
    ARRAY<BYTES>[NULL, b"c"] bytes_arr,
    ARRAY<DATE>[NULL, '2014-09-11'] date_arr,
    ARRAY<TIMESTAMP>[NULL, "2014-09-11 01:01:01.001001 UTC"] micros_arr,
    ARRAY<zetasql_test__.TestEnum>[NULL, 'TESTENUM2'] enum_arr,
    ARRAY<zetasql_test__.KitchenSinkPB>[
      NULL,
      '''
        int64_key_1: 31
        int64_key_2: 32
      ''' ] proto_arr,
    ARRAY<STRUCT<int64, int64>>[NULL, (31, 32)] struct_arr]
SELECT @bool_arr, @int32_arr, @uint32_arr, @int64_arr, @uint64_arr, @float_arr,
       @double_arr, @string_arr, @bytes_arr, @date_arr, @micros_arr, @enum_arr,
       @proto_arr, @struct_arr;
--
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>>>
[{ARRAY<BOOL>[known order:NULL, true],
  ARRAY<INT32>[known order:NULL, -1],
  ARRAY<UINT32>[known order:NULL, 0],
  ARRAY<INT64>[known order:NULL, -8589934592],
  ARRAY<UINT64>[known order:NULL, 0],
  ARRAY<FLOAT>[known order:NULL, -1.1],
  ARRAY<DOUBLE>[known order:NULL, -1.1],
  ARRAY<STRING>[known order:NULL, "⨝"],
  ARRAY<BYTES>[known order:NULL, b"c"],
  ARRAY<DATE>[known order:NULL, 2014-09-11],
  ARRAY<TIMESTAMP>[known order:
    NULL,
    2014-09-11 01:01:01.001001+00
  ],
  ARRAY<ENUM<zetasql_test__.TestEnum>>[known order:NULL, TESTENUM2],
  ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
    NULL,
    {
      int64_key_1: 31
      int64_key_2: 32
    }
  ],
  ARRAY<STRUCT<INT64, INT64>>[known order:NULL, {31, 32}]}]
==
[name=select_array_parameters_with_null_suffix]
[parameters=
    ARRAY<BOOL>[true, NULL] bool_arr,
    ARRAY<INT32>[1, NULL] int32_arr,
    ARRAY<UINT32>[2, NULL] uint32_arr,
    ARRAY<INT64>[8589934592, NULL] int64_arr,
    ARRAY<UINT64>[8589934592, NULL] uint64_arr,
    ARRAY<FLOAT>[1.1, NULL] float_arr,
    ARRAY<DOUBLE>[1.1, NULL] double_arr,
    ARRAY<STRING>['σ', NULL] string_arr,
    ARRAY<BYTES>[b"a", NULL] bytes_arr,
    ARRAY<DATE>['1984-08-02', NULL] date_arr,
    ARRAY<TIMESTAMP>["1984-08-02 01:01:01.001001 UTC", NULL] micros_arr,
    ARRAY<zetasql_test__.TestEnum>['TESTENUM0', NULL] enum_arr,
    ARRAY<zetasql_test__.KitchenSinkPB>[
      '''
        int64_key_1: 11
        int64_key_2: 12
      ''',
      NULL] proto_arr,
    ARRAY<STRUCT<int64, int64>>[(11, 12), NULL] struct_arr]
SELECT @bool_arr, @int32_arr, @uint32_arr, @int64_arr, @uint64_arr, @float_arr,
       @double_arr, @string_arr, @bytes_arr, @date_arr, @micros_arr, @enum_arr,
       @proto_arr, @struct_arr;
--
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>>>
[{ARRAY<BOOL>[known order:true, NULL],
  ARRAY<INT32>[known order:1, NULL],
  ARRAY<UINT32>[known order:2, NULL],
  ARRAY<INT64>[known order:8589934592, NULL],
  ARRAY<UINT64>[known order:8589934592, NULL],
  ARRAY<FLOAT>[known order:1.1, NULL],
  ARRAY<DOUBLE>[known order:1.1, NULL],
  ARRAY<STRING>[known order:"σ", NULL],
  ARRAY<BYTES>[known order:b"a", NULL],
  ARRAY<DATE>[known order:1984-08-02, NULL],
  ARRAY<TIMESTAMP>[known order:
    1984-08-02 01:01:01.001001+00,
    NULL
  ],
  ARRAY<ENUM<zetasql_test__.TestEnum>>[known order:TESTENUM0, NULL],
  ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
    {
      int64_key_1: 11
      int64_key_2: 12
    },
    NULL
  ],
  ARRAY<STRUCT<INT64, INT64>>[known order:{11, 12}, NULL]}]
==
[name=select_array_parameters_all_nulls]
[parameters=
    ARRAY<BOOL>[NULL, NULL] bool_arr,
    ARRAY<INT32>[NULL, NULL] int32_arr,
    ARRAY<UINT32>[NULL, NULL] uint32_arr,
    ARRAY<INT64>[NULL, NULL] int64_arr,
    ARRAY<UINT64>[NULL, NULL] uint64_arr,
    ARRAY<FLOAT>[NULL, NULL] float_arr,
    ARRAY<DOUBLE>[NULL, NULL] double_arr,
    ARRAY<STRING>[NULL, NULL] string_arr,
    ARRAY<BYTES>[NULL, NULL] bytes_arr,
    ARRAY<DATE>[NULL, NULL] date_arr,
    ARRAY<TIMESTAMP>[NULL, NULL] micros_arr,
    ARRAY<zetasql_test__.TestEnum>[NULL, NULL] enum_arr,
    ARRAY<zetasql_test__.KitchenSinkPB>[NULL, NULL] proto_arr,
    ARRAY<STRUCT<int64, int64>>[NULL, NULL] struct_arr]
SELECT @bool_arr, @int32_arr, @uint32_arr, @int64_arr, @uint64_arr, @float_arr,
       @double_arr, @string_arr, @bytes_arr, @date_arr, @micros_arr, @enum_arr,
       @proto_arr, @struct_arr;
--
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>>>
[{
   ARRAY<BOOL>[known order:NULL, NULL],
   ARRAY<INT32>[known order:NULL, NULL],
   ARRAY<UINT32>[known order:NULL, NULL],
   ARRAY<INT64>[known order:NULL, NULL],
   ARRAY<UINT64>[known order:NULL, NULL],
   ARRAY<FLOAT>[known order:NULL, NULL],
   ARRAY<DOUBLE>[known order:NULL, NULL],
   ARRAY<STRING>[known order:NULL, NULL],
   ARRAY<BYTES>[known order:NULL, NULL],
   ARRAY<DATE>[known order:NULL, NULL],
   ARRAY<TIMESTAMP>[known order:NULL, NULL],
   ARRAY<ENUM<zetasql_test__.TestEnum>>[known order:NULL, NULL],
   ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:NULL, NULL],
   ARRAY<STRUCT<INT64, INT64>>[known order:NULL, NULL]
 }]
==
[name=select_array_parameters_singleton_null]
[parameters=
    ARRAY<BOOL>[NULL] bool_arr,
    ARRAY<INT32>[NULL] int32_arr,
    ARRAY<UINT32>[NULL] uint32_arr,
    ARRAY<INT64>[NULL] int64_arr,
    ARRAY<UINT64>[NULL] uint64_arr,
    ARRAY<FLOAT>[NULL] float_arr,
    ARRAY<DOUBLE>[NULL] double_arr,
    ARRAY<STRING>[NULL] string_arr,
    ARRAY<BYTES>[NULL] bytes_arr,
    ARRAY<DATE>[NULL] date_arr,
    ARRAY<TIMESTAMP>[NULL] micros_arr,
    ARRAY<zetasql_test__.TestEnum>[NULL] enum_arr,
    ARRAY<zetasql_test__.KitchenSinkPB>[NULL] proto_arr,
    ARRAY<STRUCT<int64, int64>>[NULL] struct_arr]
SELECT @bool_arr, @int32_arr, @uint32_arr, @int64_arr, @uint64_arr, @float_arr,
       @double_arr, @string_arr, @bytes_arr, @date_arr, @micros_arr, @enum_arr,
       @proto_arr, @struct_arr;
--
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>>>
[{
   ARRAY<BOOL>[NULL],
   ARRAY<INT32>[NULL],
   ARRAY<UINT32>[NULL],
   ARRAY<INT64>[NULL],
   ARRAY<UINT64>[NULL],
   ARRAY<FLOAT>[NULL],
   ARRAY<DOUBLE>[NULL],
   ARRAY<STRING>[NULL],
   ARRAY<BYTES>[NULL],
   ARRAY<DATE>[NULL],
   ARRAY<TIMESTAMP>[NULL],
   ARRAY<ENUM<zetasql_test__.TestEnum>>[NULL],
   ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[NULL],
   ARRAY<STRUCT<INT64, INT64>>[NULL]
 }]
==
[name=select_array_parameters_singleton_value]
[parameters=
    ARRAY<BOOL>[true] bool_arr,
    ARRAY<INT32>[1] int32_arr,
    ARRAY<UINT32>[2] uint32_arr,
    ARRAY<INT64>[8589934592] int64_arr,
    ARRAY<UINT64>[8589934592] uint64_arr,
    ARRAY<FLOAT>[1.1] float_arr,
    ARRAY<DOUBLE>[1.1] double_arr,
    ARRAY<STRING>['σ'] string_arr,
    ARRAY<BYTES>[b"a"] bytes_arr,
    ARRAY<DATE>['1984-08-02'] date_arr,
    ARRAY<TIMESTAMP>["1984-08-02 01:01:01.001001 UTC"] micros_arr,
    ARRAY<zetasql_test__.TestEnum>['TESTENUM0'] enum_arr,
    ARRAY<zetasql_test__.KitchenSinkPB>[
      '''
        int64_key_1: 11
        int64_key_2: 12
      '''] proto_arr,
    ARRAY<STRUCT<int64, int64>>[(11, 12)] struct_arr]
SELECT @bool_arr, @int32_arr, @uint32_arr, @int64_arr, @uint64_arr, @float_arr,
       @double_arr, @string_arr, @bytes_arr, @date_arr, @micros_arr, @enum_arr,
       @proto_arr, @struct_arr;
--
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>>>
[{ARRAY<BOOL>[true],
  ARRAY<INT32>[1],
  ARRAY<UINT32>[2],
  ARRAY<INT64>[8589934592],
  ARRAY<UINT64>[8589934592],
  ARRAY<FLOAT>[1.1],
  ARRAY<DOUBLE>[1.1],
  ARRAY<STRING>["σ"],
  ARRAY<BYTES>[b"a"],
  ARRAY<DATE>[1984-08-02],
  ARRAY<TIMESTAMP>[1984-08-02 01:01:01.001001+00],
  ARRAY<ENUM<zetasql_test__.TestEnum>>[TESTENUM0],
  ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
    {
      int64_key_1: 11
      int64_key_2: 12
    }
  ],
  ARRAY<STRUCT<INT64, INT64>>[{11, 12}]}]
==
[name=select_array_parameters_empty]
[parameters=
    ARRAY<BOOL>[] bool_arr,
    ARRAY<INT32>[] int32_arr,
    ARRAY<UINT32>[] uint32_arr,
    ARRAY<INT64>[] int64_arr,
    ARRAY<UINT64>[] uint64_arr,
    ARRAY<FLOAT>[] float_arr,
    ARRAY<DOUBLE>[] double_arr,
    ARRAY<STRING>[] string_arr,
    ARRAY<BYTES>[] bytes_arr,
    ARRAY<DATE>[] date_arr,
    ARRAY<TIMESTAMP>[] micros_arr,
    ARRAY<zetasql_test__.TestEnum>[] enum_arr,
    ARRAY<zetasql_test__.KitchenSinkPB>[] proto_arr,
    ARRAY<STRUCT<int64, int64>>[] struct_arr]
SELECT @bool_arr, @int32_arr, @uint32_arr, @int64_arr, @uint64_arr, @float_arr,
       @double_arr, @string_arr, @bytes_arr, @date_arr, @micros_arr, @enum_arr,
       @proto_arr, @struct_arr;
--
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>>>
[{
   ARRAY<BOOL>[],
   ARRAY<INT32>[],
   ARRAY<UINT32>[],
   ARRAY<INT64>[],
   ARRAY<UINT64>[],
   ARRAY<FLOAT>[],
   ARRAY<DOUBLE>[],
   ARRAY<STRING>[],
   ARRAY<BYTES>[],
   ARRAY<DATE>[],
   ARRAY<TIMESTAMP>[],
   ARRAY<ENUM<zetasql_test__.TestEnum>>[],
   ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[],
   ARRAY<STRUCT<INT64, INT64>>[]
 }]
==
[name=select_array_parameters_null]
[parameters=
    CAST(NULL AS ARRAY<BOOL>) bool_arr,
    CAST(NULL AS ARRAY<INT32>) int32_arr,
    CAST(NULL AS ARRAY<UINT32>) uint32_arr,
    CAST(NULL AS ARRAY<INT64>) int64_arr,
    CAST(NULL AS ARRAY<UINT64>) uint64_arr,
    CAST(NULL AS ARRAY<FLOAT>) float_arr,
    CAST(NULL AS ARRAY<DOUBLE>) double_arr,
    CAST(NULL AS ARRAY<STRING>) string_arr,
    CAST(NULL AS ARRAY<BYTES>) bytes_arr,
    CAST(NULL AS ARRAY<DATE>) date_arr,
    CAST(NULL AS ARRAY<TIMESTAMP>) micros_arr,
    CAST(NULL AS ARRAY<zetasql_test__.TestEnum>) enum_arr,
    CAST(NULL AS ARRAY<zetasql_test__.KitchenSinkPB>) proto_arr,
    CAST(NULL AS ARRAY<STRUCT<int64, int64>>) struct_arr]
SELECT @bool_arr, @int32_arr, @uint32_arr, @int64_arr, @uint64_arr, @float_arr,
       @double_arr, @string_arr, @bytes_arr, @date_arr, @micros_arr, @enum_arr,
       @proto_arr, @struct_arr;
--
ARRAY<STRUCT<ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>,
             ARRAY<>>>
[{
   ARRAY<BOOL>(NULL),
   ARRAY<INT32>(NULL),
   ARRAY<UINT32>(NULL),
   ARRAY<INT64>(NULL),
   ARRAY<UINT64>(NULL),
   ARRAY<FLOAT>(NULL),
   ARRAY<DOUBLE>(NULL),
   ARRAY<STRING>(NULL),
   ARRAY<BYTES>(NULL),
   ARRAY<DATE>(NULL),
   ARRAY<TIMESTAMP>(NULL),
   ARRAY<ENUM<zetasql_test__.TestEnum>>(NULL),
   ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>(NULL),
   ARRAY<STRUCT<INT64, INT64>>(NULL)
 }]
==
##
## Queries that tests explicit unnest. This time we do not require a full
## matrix.
##
[name=select_string_array_parameter_unnest_explicit]
[parameters=ARRAY<STRING>['σ', 'π', '⨝'] string_arr]
SELECT elem FROM UNNEST(@string_arr) AS elem
--
ARRAY<STRUCT<elem STRING>>[unknown order:{"σ"}, {"π"}, {"⨝"}]
==
##
## From here, several queries to test offset/ordinality without joins.
##
[name=select_string_array_parameter_unnest_with_offset]
[parameters=ARRAY<STRING>['σ', 'π', '⨝', NULL] string_arr]
SELECT elem, offset FROM UNNEST(@string_arr) elem WITH OFFSET
--
ARRAY<STRUCT<elem STRING, offset INT64>>[unknown order:
  {"σ", 0},
  {"π", 1},
  {"⨝", 2},
  {NULL, 3}
]
==
[name=select_string_array_parameter_unnest_with_offset_aliased]
[parameters=ARRAY<STRING>['σ', 'π', '⨝', NULL] string_arr]
SELECT elem, off FROM UNNEST(@string_arr) elem WITH OFFSET off
--
ARRAY<STRUCT<elem STRING, off INT64>>[unknown order:
  {"σ", 0},
  {"π", 1},
  {"⨝", 2},
  {NULL, 3}
]
==
[name=select_string_array_parameter_unnest_with_offset_sorted]
[parameters=ARRAY<STRING>['σ', 'π', '⨝', NULL] string_arr]
SELECT elem, offset
FROM UNNEST(@string_arr) elem WITH OFFSET
ORDER BY offset desc
--
ARRAY<STRUCT<elem STRING, offset INT64>>[known order:
  {NULL, 3},
  {"⨝", 2},
  {"π", 1},
  {"σ", 0}
]
==
[name=select_string_array_parameter_unnest_with_offset_alaised_sorted]
[parameters=ARRAY<STRING>['σ', 'π', '⨝', NULL] string_arr]
SELECT elem, off
FROM UNNEST(@string_arr) elem WITH OFFSET off
ORDER BY off desc
--
ARRAY<STRUCT<elem STRING, off INT64>>[known order:
  {NULL, 3},
  {"⨝", 2},
  {"π", 1},
  {"σ", 0}
]
==
# TODO: Introduce these queries to test WITH ORDINALITY
#
# [name=select_string_array_parameter_unnest_with_ordinality]
# [parameters=ARRAY<STRING>['σ', 'π', '⨝'] string_arr]
# SELECT arr
# FROM AllArraysTable t, UNNEST(t.string_arrcol) WITH ORDINALITY arr
# --
# false
# ==
# [name=select_string_array_parameter_unnest_with_ordinality_aliased]
# [parameters=ARRAY<STRING>['σ', 'π', '⨝'] string_arr]
# SELECT arr.elem, arr.ord, elem, ord
# FROM UNNEST(@string_arr) WITH ORDINALITY arr(elem, ord)
# --
# false
# ==
# [name=select_string_array_parameter_unnest_with_ordinality_sorted]
# [parameters=ARRAY<STRING>['σ', 'π', '⨝'] string_arr]
# SELECT arr
# FROM UNNEST(@string_arr) WITH ORDINALITY arr(elem, ord)
# ORDER BY arr.ord
# --
# false
# ==
