# Tests for UPDATEs on proto columns. There are lots of test tables to keep the
# test output size small.

[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB,zetasql_test__.RecursivePB]

[prepare_database]
CREATE TABLE BasicProtoTable AS
SELECT cast(1 as int64) as primary_key,
       cast('''int64_key_1: 11
               int64_key_2: 12'''
            as "zetasql_test__.KitchenSinkPB") as proto_value
UNION ALL
SELECT 2,
  '''
  int64_key_1: 21
  int64_key_2: 22
  int64_val: 23
  repeated_int64_val: 100
  repeated_int64_val: 200
  repeated_int64_val: 300
  date: 5
  '''
--
ARRAY<STRUCT<
        primary_key INT64,
        proto_value PROTO<zetasql_test__.KitchenSinkPB>
      >>
[{1,
  {
    int64_key_1: 11
    int64_key_2: 12
  }},
 {2,
  {
    int64_key_1: 21
    int64_key_2: 22
    int64_val: 23
    repeated_int64_val: 100
    repeated_int64_val: 200
    repeated_int64_val: 300
    date: 5
  }}]
==

[prepare_database]
CREATE Table NullProtoTable AS
SELECT cast(1 as int64) as primary_key,
       cast(NULL as "zetasql_test__.KitchenSinkPB") as proto_value
--
ARRAY<STRUCT<
        primary_key INT64,
        proto_value PROTO<zetasql_test__.KitchenSinkPB>
      >>[{1, NULL}]
==

[prepare_database]
CREATE TABLE NestedProtoTable AS
SELECT cast(1 as int64) as primary_key,
       cast('''int64_key_1: 11
               int64_key_2: 12'''
            as "zetasql_test__.KitchenSinkPB") as proto_value
UNION ALL
SELECT 2,
  '''
  int64_key_1: 21
  int64_key_2: 22
  nested_value {
    nested_int64: 10
    nested_repeated_int64: 110
    nested_repeated_int64: 120
    nested_repeated_int64: 130
  }
  nested_repeated_value {
    nested_int64: 1010
  }
  nested_repeated_value {
    nested_int64: 1020
  }
  nested_repeated_value {
    nested_int64: 1030
  }
  '''
--
ARRAY<STRUCT<
        primary_key INT64,
        proto_value PROTO<zetasql_test__.KitchenSinkPB>
      >>
[{1,
  {
    int64_key_1: 11
    int64_key_2: 12
  }},
 {2,
  {
    int64_key_1: 21
    int64_key_2: 22
    nested_value {
      nested_int64: 10
      nested_repeated_int64: 110
      nested_repeated_int64: 120
      nested_repeated_int64: 130
    }
    nested_repeated_value {
      nested_int64: 1010
    }
    nested_repeated_value {
      nested_int64: 1020
    }
    nested_repeated_value {
      nested_int64: 1030
    }
  }}]
==

[prepare_database]
CREATE TABLE NullableProtoTable AS
SELECT cast(1 as int64) as primary_key,
       cast('''int64_key_1: 11
               int64_key_2: 12'''
            as "zetasql_test__.KitchenSinkPB") as proto_value
UNION ALL
SELECT 2,
  '''
  int64_key_1: 21
  int64_key_2: 22
  nullable_int {
    value: 50
  }
  nullable_int_array {
    value: 500
  }
  nullable_int_array {
    value: 501
  }
  '''
--
ARRAY<STRUCT<
        primary_key INT64,
        proto_value PROTO<zetasql_test__.KitchenSinkPB>
      >>
[{1,
  {
    int64_key_1: 11
    int64_key_2: 12
  }},
 {2,
  {
    int64_key_1: 21
    int64_key_2: 22
    nullable_int {
      value: 50
    }
    nullable_int_array {
      value: 500
    }
    nullable_int_array {
      value: 501
    }
  }}]
==

[prepare_database]
CREATE TABLE KeyValueProtoTable AS
SELECT cast(1 as int64) as primary_key,
       cast('''int64_key_1: 11
               int64_key_2: 12'''
            as "zetasql_test__.KitchenSinkPB") as proto_value
UNION ALL
SELECT 2,
  '''
  int64_key_1: 21
  int64_key_2: 22
  key_value {
    key: "key"
    value: 5000
  }
  key_value_array {
    key: "key1"
    value: 5001
  }
  key_value_array {
    key: "key2"
    value: 5002
  }
  '''
--
ARRAY<STRUCT<
        primary_key INT64,
        proto_value PROTO<zetasql_test__.KitchenSinkPB>
      >>
[{1,
  {
    int64_key_1: 11
    int64_key_2: 12
  }},
 {2,
  {
    int64_key_1: 21
    int64_key_2: 22
    key_value {
      key: "key"
      value: 5000
    }
    key_value_array {
      key: "key1"
      value: 5001
    }
    key_value_array {
      key: "key2"
      value: 5002
    }
  }}]
==

[prepare_database]
CREATE Table ExtensionProtoTable AS
SELECT cast(1 as int64) as primary_key,
       cast('''int64_key_1: 11
               int64_key_2: 12'''
            as "zetasql_test__.KitchenSinkPB") as proto_value
UNION ALL
SELECT 2,
  '''
  int64_key_1: 21
  int64_key_2: 22
  [zetasql_test__.int_top_level_extension]: 100
  [zetasql_test__.date_extension]: 5
  '''
--
ARRAY<STRUCT<
        primary_key INT64,
        proto_value PROTO<zetasql_test__.KitchenSinkPB>
      >>
[{1,
  {
    int64_key_1: 11
    int64_key_2: 12
  }},
 {2,
  {
    int64_key_1: 21
    int64_key_2: 22
    [zetasql_test__.int_top_level_extension]: 100
    [zetasql_test__.date_extension]: 5
  }}]
==

# For testing long paths of array accesses.
[prepare_database]
CREATE Table RecursiveArrayProtoTable AS
SELECT cast(1 as int64) as primary_key,
       cast('''repeated_recursive_pb {
                 repeated_recursive_pb {}
                 repeated_recursive_pb {
                   repeated_recursive_pb {}
                   repeated_recursive_pb {}
                   repeated_recursive_pb {
                     repeated_recursive_pb {}
                     repeated_recursive_pb {}
                     repeated_recursive_pb {}
                     repeated_recursive_pb {
                       int64_val: 100
                     }
                   }
                 }
               }''' as zetasql_test__.RecursivePB) as proto_value
--
ARRAY<STRUCT<
        primary_key INT64,
        proto_value PROTO<zetasql_test__.RecursivePB>
      >>
[{1,
  {
    repeated_recursive_pb {
      repeated_recursive_pb {
      }
      repeated_recursive_pb {
        repeated_recursive_pb {
        }
        repeated_recursive_pb {
        }
        repeated_recursive_pb {
          repeated_recursive_pb {
          }
          repeated_recursive_pb {
          }
          repeated_recursive_pb {
          }
          repeated_recursive_pb {
            int64_val: 100
          }
        }
      }
    }
  }}]
==

# For testing long paths of array/proto accesses.
[prepare_database]
CREATE Table RecursiveArrayProtoTable2 AS
SELECT cast(1 as int64) as primary_key,
       cast('''recursive_pb {
                 repeated_recursive_pb {
                   recursive_pb {
                     repeated_recursive_pb {}
                     repeated_recursive_pb {
                       recursive_pb {
                         repeated_recursive_pb {}
                         repeated_recursive_pb {}
                         repeated_recursive_pb {
                           recursive_pb {
                             repeated_recursive_pb {}
                             repeated_recursive_pb {}
                             repeated_recursive_pb {}
                             repeated_recursive_pb {
                               int64_val: 100
                             }
                           }
                         }
                       }
                     }
                   }
                 }
               }''' as zetasql_test__.RecursivePB) as proto_value
--
ARRAY<STRUCT<
        primary_key INT64,
        proto_value PROTO<zetasql_test__.RecursivePB>
      >>
[{1,
  {
    recursive_pb {
      repeated_recursive_pb {
        recursive_pb {
          repeated_recursive_pb {
          }
          repeated_recursive_pb {
            recursive_pb {
              repeated_recursive_pb {
              }
              repeated_recursive_pb {
              }
              repeated_recursive_pb {
                recursive_pb {
                  repeated_recursive_pb {
                  }
                  repeated_recursive_pb {
                  }
                  repeated_recursive_pb {
                  }
                  repeated_recursive_pb {
                    int64_val: 100
                  }
                }
              }
            }
          }
        }
      }
    }
  }}]
==

[prepare_database]
CREATE Table ArrayOfProtosTable AS
SELECT cast(1 as int64) as primary_key,
       [
         cast('''int64_key_1: 111
                 int64_key_2: 112
                 int64_val: 113'''
              as "zetasql_test__.KitchenSinkPB"),
         cast('''int64_key_1: 121
                 int64_key_2: 122
                 int64_val: 123'''
              as "zetasql_test__.KitchenSinkPB"),
         cast('''int64_key_1: 131
                 int64_key_2: 132
                 int64_val: 133'''
              as "zetasql_test__.KitchenSinkPB")
       ] as array_value
UNION ALL
SELECT 2,
       [
         cast('''int64_key_1: 211
                 int64_key_2: 212
                 int64_val: 213'''
              as "zetasql_test__.KitchenSinkPB"),
         cast('''int64_key_1: 221
                 int64_key_2: 222
                 int64_val: 223'''
              as "zetasql_test__.KitchenSinkPB"),
         cast('''int64_key_1: 321
                 int64_key_2: 322
                 int64_val: 323'''
              as "zetasql_test__.KitchenSinkPB")
       ]
UNION ALL
SELECT 3, NULL
--
ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[
  {1,
   ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
     {
       int64_key_1: 111
       int64_key_2: 112
       int64_val: 113
     },
     {
       int64_key_1: 121
       int64_key_2: 122
       int64_val: 123
     },
     {
       int64_key_1: 131
       int64_key_2: 132
       int64_val: 133
     }
   ]},
  {2,
   ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
     {
       int64_key_1: 211
       int64_key_2: 212
       int64_val: 213
     },
     {
       int64_key_1: 221
       int64_key_2: 222
       int64_val: 223
     },
     {
       int64_key_1: 321
       int64_key_2: 322
       int64_val: 323
     }
   ]},
  {
    3,
    ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>(NULL)
  }
]
==

[prepare_database]
CREATE Table ArrayOfProtosTable2 AS
SELECT cast(1 as int64) primary_key,
       [
         cast('''int64_key_1: 11
                 int64_key_2: 12
                 repeated_int64_val: 101
                 repeated_int64_val: 102
                 repeated_int64_val: 103
                 nested_repeated_value {
                   nested_int64: 201
                 }
                 nested_repeated_value {
                   nested_int64: 202
                 }
                 nested_repeated_value {
                   nested_int64: 203
                 }'''
              as "zetasql_test__.KitchenSinkPB"),
         NULL
       ] as array_value
--
ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[
  {1,
   ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[
     {
       int64_key_1: 11
       int64_key_2: 12
       repeated_int64_val: 101
       repeated_int64_val: 102
       repeated_int64_val: 103
       nested_repeated_value {
         nested_int64: 201
       }
       nested_repeated_value {
         nested_int64: 202
       }
       nested_repeated_value {
         nested_int64: 203
       }
     },
     NULL
   ]}
]
==

[name=assign_proto_column]
UPDATE BasicProtoTable
SET proto_value = "int64_key_1: 100 int64_key_2: 200"
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 100
       int64_key_2: 200
     }},
    {2,
     {
       int64_key_1: 100
       int64_key_2: 200
     }}
  ]}
==

[name=assign_proto_column_null]
UPDATE BasicProtoTable SET proto_value = NULL WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:{1, NULL}, {2, NULL}]}
==

[name=assign_proto_column_default]
UPDATE BasicProtoTable SET proto_value = DEFAULT WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:{1, NULL}, {2, NULL}]}
==

[name=assign_null_proto_column_subfield]
UPDATE NullProtoTable SET proto_value.int64_key_1 = 10 WHERE True
--
ERROR: generic::out_of_range: Cannot set field of NULL "zetasql_test__.KitchenSinkPB"
==

[name=assign_required_proto_field]
UPDATE BasicProtoTable SET proto_value.int64_key_1 = 100 WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 100
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 100
       int64_key_2: 22
       int64_val: 23
       repeated_int64_val: 100
       repeated_int64_val: 200
       repeated_int64_val: 300
       date: 5
     }}
  ]}
==

# Attempting to clear a required field is an error.
[name=clear_required_proto_field]
UPDATE BasicProtoTable SET proto_value.int64_key_1 = NULL WHERE True
--
ERROR: generic::out_of_range: Cannot clear required proto field zetasql_test__.KitchenSinkPB.int64_key_1
==

# Same as above, but there is no error because no rows are updated.
[name=clear_required_proto_field_does_not_run]
UPDATE BasicProtoTable SET proto_value.int64_key_1 = NULL WHERE False
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{0,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       int64_val: 23
       repeated_int64_val: 100
       repeated_int64_val: 200
       repeated_int64_val: 300
       date: 5
     }}
  ]}
==

# Assigning DEFAULT to a proto field clears it (same as assigning NULL).
[name=assign_required_proto_field_default]
UPDATE BasicProtoTable SET proto_value.int64_key_1 = DEFAULT WHERE True
--
ERROR: generic::out_of_range: Cannot clear required proto field zetasql_test__.KitchenSinkPB.int64_key_1
==

[name=assign_optional_proto_field]
UPDATE BasicProtoTable SET proto_value.int64_val = 100 WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
       int64_val: 100
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       int64_val: 100
       repeated_int64_val: 100
       repeated_int64_val: 200
       repeated_int64_val: 300
       date: 5
     }}
  ]}
==

# Setting an optional proto field to NULL clears it.
[name=clear_optional_proto_field]
UPDATE BasicProtoTable SET proto_value.int64_val = NULL WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       repeated_int64_val: 100
       repeated_int64_val: 200
       repeated_int64_val: 300
       date: 5
     }}
  ]}
==

# Setting an optional proto field to DEFAULT clears it.
[name=assign_optional_proto_field_default]
UPDATE BasicProtoTable SET proto_value.int64_val = DEFAULT WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       repeated_int64_val: 100
       repeated_int64_val: 200
       repeated_int64_val: 300
       date: 5
     }}
  ]}
==

[name=assign_extension_proto_field]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_SET]
UPDATE ExtensionProtoTable
  SET proto_value.(zetasql_test__.int_top_level_extension) =
      proto_value.(zetasql_test__.int_top_level_extension) + 1000
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
       [zetasql_test__.int_top_level_extension]: 1000
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       [zetasql_test__.int_top_level_extension]: 1100
       [zetasql_test__.date_extension]: 5
     }}
  ]}
==

[name=clear_extension_proto_field]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_SET]
UPDATE ExtensionProtoTable
  SET proto_value.(zetasql_test__.int_top_level_extension) = NULL
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       [zetasql_test__.date_extension]: 5
     }}
  ]}
==

[name=assign_extension_proto_field_default]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_SET]
UPDATE ExtensionProtoTable
  SET proto_value.(zetasql_test__.int_top_level_extension) = DEFAULT
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       [zetasql_test__.date_extension]: 5
     }}
  ]}
==

[name=assign_proto_field_with_format_annotation]
UPDATE BasicProtoTable SET proto_value.date = DATE '2017-12-15' WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
       date: 17515
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       int64_val: 23
       repeated_int64_val: 100
       repeated_int64_val: 200
       repeated_int64_val: 300
       date: 17515
     }}
  ]}
==

[name=assign_proto_field_with_format_annotation_null]
UPDATE BasicProtoTable SET proto_value.date = NULL WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       int64_val: 23
       repeated_int64_val: 100
       repeated_int64_val: 200
       repeated_int64_val: 300
     }}
  ]}
==

[name=assign_proto_field_with_format_annotation_default]
UPDATE BasicProtoTable SET proto_value.date = DEFAULT WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       int64_val: 23
       repeated_int64_val: 100
       repeated_int64_val: 200
       repeated_int64_val: 300
     }}
  ]}
==

[name=assign_extension_proto_field_with_format_annotation]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_SET]
UPDATE ExtensionProtoTable
  SET proto_value.(zetasql_test__.date_extension) = DATE '2017-12-15'
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
       [zetasql_test__.date_extension]: 17515
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       [zetasql_test__.int_top_level_extension]: 100
       [zetasql_test__.date_extension]: 17515
     }}
  ]}
==

[name=assign_extension_proto_field_with_format_annotation_null]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_SET]
UPDATE ExtensionProtoTable
  SET proto_value.(zetasql_test__.date_extension) = NULL
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       [zetasql_test__.int_top_level_extension]: 100
     }}
  ]}
==

[name=assign_extension_proto_field_with_format_annotation_default]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_SET]
UPDATE ExtensionProtoTable
  SET proto_value.(zetasql_test__.date_extension) = DEFAULT
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       [zetasql_test__.int_top_level_extension]: 100
     }}
  ]}
==

[name=assign_repeated_proto_field]
UPDATE BasicProtoTable
SET proto_value.repeated_int64_val = [1000, 2000, 3000]
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
       repeated_int64_val: 1000
       repeated_int64_val: 2000
       repeated_int64_val: 3000
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       int64_val: 23
       repeated_int64_val: 1000
       repeated_int64_val: 2000
       repeated_int64_val: 3000
       date: 5
     }}
  ]}
==

[name=assign_repeated_proto_field_null]
UPDATE BasicProtoTable SET proto_value.repeated_int64_val = NULL WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       int64_val: 23
       date: 5
     }}
  ]}
==

# Repeated fields cannot represent NULL elements.
[name=assign_repeated_proto_field_with_null_element]
UPDATE BasicProtoTable
SET proto_value.repeated_int64_val = [1, NULL, 3]
WHERE True
--
ERROR: generic::out_of_range: Cannot store a NULL element in repeated proto field zetasql_test__.KitchenSinkPB.repeated_int64_val
==

[name=assign_repeated_proto_field_default]
UPDATE BasicProtoTable SET proto_value.repeated_int64_val = DEFAULT WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       int64_val: 23
       date: 5
     }}
  ]}
==

[name=update_repeated_proto_field_first_element_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE BasicProtoTable SET proto_value.repeated_int64_val[OFFSET(0)] = 1000
WHERE primary_key = 2
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       int64_val: 23
       repeated_int64_val: 1000
       repeated_int64_val: 200
       repeated_int64_val: 300
       date: 5
     }}
  ]}
==

[name=update_repeated_proto_field_first_element_with_set_null_proto]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.nested_value.nested_repeated_int64[OFFSET(0)] = 1000
WHERE primary_key = 1
--
ERROR: generic::out_of_range: Cannot set field of NULL "zetasql_test__.KitchenSinkPB.Nested"
==

# Repeated fields cannot represent NULL elements.
[name=update_repeated_proto_field_first_element_to_null_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE BasicProtoTable SET proto_value.repeated_int64_val[OFFSET(0)] = NULL
WHERE primary_key = 2
--
ERROR: generic::out_of_range: Cannot store a NULL element in repeated proto field zetasql_test__.KitchenSinkPB.repeated_int64_val
==

[name=update_repeated_proto_field_second_element_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE BasicProtoTable SET proto_value.repeated_int64_val[OFFSET(1)] = 1000
WHERE primary_key = 2
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       int64_val: 23
       repeated_int64_val: 100
       repeated_int64_val: 1000
       repeated_int64_val: 300
       date: 5
     }}
  ]}
==

[name=update_repeated_proto_field_with_set_nonliteral_offset]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE BasicProtoTable
SET proto_value.repeated_int64_val[OFFSET(primary_key)] = 1000
WHERE primary_key = 2
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       int64_val: 23
       repeated_int64_val: 100
       repeated_int64_val: 200
       repeated_int64_val: 1000
       date: 5
     }}
  ]}
==

[name=update_two_elements_of_repeated_proto_field_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE BasicProtoTable
SET proto_value.repeated_int64_val[OFFSET(0)] = 1000,
    proto_value.repeated_int64_val[OFFSET(1)] = 2000
WHERE primary_key = 2
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       int64_val: 23
       repeated_int64_val: 1000
       repeated_int64_val: 2000
       repeated_int64_val: 300
       date: 5
     }}
  ]}
==

[name=update_duplicate_elements_of_repeated_proto_field_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE BasicProtoTable
SET proto_value.repeated_int64_val[OFFSET(0)] = 1000,
    proto_value.repeated_int64_val[OFFSET(0)] = 2000
WHERE primary_key = 2
--
ERROR: generic::out_of_range: Cannot perform multiple updates to offset 0 of an ARRAY<INT64>
==

[name=update_repeated_proto_field_with_set_null_index]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.repeated_int64_val[OFFSET(NULL)] = 1000
WHERE primary_key = 2
--
ERROR: generic::out_of_range: Cannot SET a NULL offset of an ARRAY<INT64>
==

[name=update_repeated_proto_field_with_set_negative_index]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.repeated_int64_val[OFFSET(-1)] = 1000
WHERE primary_key = 2
--
ERROR: generic::out_of_range: Cannot SET array offset -1 of an ARRAY<INT64> of size 0
==

[name=update_repeated_proto_field_with_set_index_too_large]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.repeated_int64_val[OFFSET(10000)] = 1000
WHERE primary_key = 2
--
ERROR: generic::out_of_range: Cannot SET array offset 10000 of an ARRAY<INT64> of size 0
==

[name=update_repeated_proto_field_with_set_index_barely_too_large]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.repeated_int64_val[OFFSET(3)] = 1000
WHERE primary_key = 2
--
ERROR: generic::out_of_range: Cannot SET array offset 3 of an ARRAY<INT64> of size 0
==

[name=update_repeated_proto_field_long_path_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE RecursiveArrayProtoTable
SET proto_value.repeated_recursive_pb[OFFSET(0)]
               .repeated_recursive_pb[OFFSET(1)]
               .repeated_recursive_pb[OFFSET(2)]
               .repeated_recursive_pb[OFFSET(3)].int64_val = 1000
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.RecursivePB>
        >>
  [{1,
      {
        repeated_recursive_pb {
          repeated_recursive_pb {
          }
          repeated_recursive_pb {
            repeated_recursive_pb {
            }
            repeated_recursive_pb {
            }
            repeated_recursive_pb {
              repeated_recursive_pb {
              }
              repeated_recursive_pb {
              }
              repeated_recursive_pb {
              }
              repeated_recursive_pb {
                int64_val: 1000
              }
            }
          }
        }
      }}]}
==

[name=update_repeated_proto_field_of_proto_type_first_element_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.nested_repeated_value[OFFSET(0)].nested_repeated_int64 = [10000]
WHERE primary_key = 2
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_int64: 10
         nested_repeated_int64: 110
         nested_repeated_int64: 120
         nested_repeated_int64: 130
       }
       nested_repeated_value {
         nested_int64: 1010
         nested_repeated_int64: 10000
       }
       nested_repeated_value {
         nested_int64: 1020
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
==

[name=update_repeated_proto_field_of_proto_type_first_element_to_null_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.nested_repeated_value[OFFSET(0)].nested_int64 = NULL
WHERE primary_key = 2
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_int64: 10
         nested_repeated_int64: 110
         nested_repeated_int64: 120
         nested_repeated_int64: 130
       }
       nested_repeated_value {
       }
       nested_repeated_value {
         nested_int64: 1020
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
==

[name=update_repeated_proto_field_of_proto_type_second_element_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.nested_repeated_value[OFFSET(1)].nested_repeated_int64 = [10000]
WHERE primary_key = 2
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_int64: 10
         nested_repeated_int64: 110
         nested_repeated_int64: 120
         nested_repeated_int64: 130
       }
       nested_repeated_value {
         nested_int64: 1010
       }
       nested_repeated_value {
         nested_int64: 1020
         nested_repeated_int64: 10000
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
==

[name=update_repeated_proto_field_of_proto_type_with_set_nonliteral_offset]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.nested_repeated_value[OFFSET(primary_key)]
               .nested_repeated_int64 = [10000]
WHERE primary_key = 2
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_int64: 10
         nested_repeated_int64: 110
         nested_repeated_int64: 120
         nested_repeated_int64: 130
       }
       nested_repeated_value {
         nested_int64: 1010
       }
       nested_repeated_value {
         nested_int64: 1020
       }
       nested_repeated_value {
         nested_int64: 1030
         nested_repeated_int64: 10000
       }
     }}
  ]}
==

[name=update_two_elements_of_repeated_proto_field_of_proto_type_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.nested_repeated_value[OFFSET(0)]
               .nested_repeated_int64 = [10000],
    proto_value.nested_repeated_value[OFFSET(1)]
               .nested_repeated_int64 = [20000]
WHERE primary_key = 2
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_int64: 10
         nested_repeated_int64: 110
         nested_repeated_int64: 120
         nested_repeated_int64: 130
       }
       nested_repeated_value {
         nested_int64: 1010
         nested_repeated_int64: 10000
       }
       nested_repeated_value {
         nested_int64: 1020
         nested_repeated_int64: 20000
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
==

[name=update_duplicate_elements_of_repeated_proto_field_of_proto_type_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.nested_repeated_value[OFFSET(0)]
               .nested_repeated_int64 = [10000],
    proto_value.nested_repeated_value[OFFSET(0)]
               .nested_repeated_int64 = [20000]
WHERE primary_key = 2
--
ERROR: generic::out_of_range: Cannot perform multiple updates to offset 0 of an ARRAY<"zetasql_test__.KitchenSinkPB.Nested">
==

# TODO: Ideally the spec would allow this. See the comments for
# ResolvedUpdateItem in gen_resolved_ast.py.
[name=update_duplicate_elements_of_repeated_field_of_proto_type_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.nested_repeated_value[OFFSET(0)]
               .nested_repeated_int64 = [10000],
    proto_value.nested_repeated_value[OFFSET(0)].nested_int64 = 20000
WHERE primary_key = 2
--
ERROR: generic::out_of_range: Cannot perform multiple updates to offset 0 of an ARRAY<"zetasql_test__.KitchenSinkPB.Nested">
==

[name=update_element_in_repeated_field_of_proto_type_with_set_null_index]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.nested_repeated_value[OFFSET(NULL)].nested_int64 = 10000
WHERE primary_key = 2
--
ERROR: generic::out_of_range: Cannot SET a NULL offset of an ARRAY<"zetasql_test__.KitchenSinkPB.Nested">
==

[name=update_element_in_repeated_field_of_proto_type_with_set_negative_index]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.nested_repeated_value[OFFSET(-1)].nested_int64 = 1000
WHERE primary_key = 2
--
ERROR: generic::out_of_range: Cannot SET array offset -1 of an ARRAY<"zetasql_test__.KitchenSinkPB.Nested"> of size 3
==

[name=update_element_in_repeated_field_of_proto_type_with_set_index_too_large]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.nested_repeated_value[OFFSET(1000)].nested_int64 = 1000
WHERE primary_key = 2
--
ERROR: generic::out_of_range: Cannot SET array offset 1000 of an ARRAY<"zetasql_test__.KitchenSinkPB.Nested"> of size 3
==

[name=update_element_in_repeated_of_proto_type_with_set_index_barely_too_large]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE NestedProtoTable
SET proto_value.nested_repeated_value[OFFSET(3)].nested_int64 = 1000
WHERE primary_key = 2
--
ERROR: generic::out_of_range: Cannot SET array offset 3 of an ARRAY<"zetasql_test__.KitchenSinkPB.Nested"> of size 3
==

[name=update_repeated_proto_field_complex_long_path_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE RecursiveArrayProtoTable2
SET proto_value.recursive_pb.repeated_recursive_pb[OFFSET(0)]
               .recursive_pb.repeated_recursive_pb[OFFSET(1)]
               .recursive_pb.repeated_recursive_pb[OFFSET(2)]
               .recursive_pb.repeated_recursive_pb[OFFSET(3)].int64_val = 1000
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.RecursivePB>
        >>
  [{1,
      {
        recursive_pb {
          repeated_recursive_pb {
            recursive_pb {
              repeated_recursive_pb {
              }
              repeated_recursive_pb {
                recursive_pb {
                  repeated_recursive_pb {
                  }
                  repeated_recursive_pb {
                  }
                  repeated_recursive_pb {
                    recursive_pb {
                      repeated_recursive_pb {
                      }
                      repeated_recursive_pb {
                      }
                      repeated_recursive_pb {
                      }
                      repeated_recursive_pb {
                        int64_val: 1000
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }}]}
==

[name=update_array_of_protos_first_element_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ArrayOfProtosTable SET array_value[OFFSET(0)].int64_key_1 = 1000
WHERE primary_key != 3
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[unknown order:
    {1,
     ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
       {
         int64_key_1: 1000
         int64_key_2: 112
         int64_val: 113
       },
       {
         int64_key_1: 121
         int64_key_2: 122
         int64_val: 123
       },
       {
         int64_key_1: 131
         int64_key_2: 132
         int64_val: 133
       }
     ]},
    {2,
     ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
       {
         int64_key_1: 1000
         int64_key_2: 212
         int64_val: 213
       },
       {
         int64_key_1: 221
         int64_key_2: 222
         int64_val: 223
       },
       {
         int64_key_1: 321
         int64_key_2: 322
         int64_val: 323
       }
     ]},
    {
      3,
      ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>(NULL)
    }
  ]}
==

[name=update_array_of_protos_first_element_to_null_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ArrayOfProtosTable SET array_value[OFFSET(0)].int64_val = NULL
WHERE primary_key != 3
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[unknown order:
    {1,
     ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
       {
         int64_key_1: 111
         int64_key_2: 112
       },
       {
         int64_key_1: 121
         int64_key_2: 122
         int64_val: 123
       },
       {
         int64_key_1: 131
         int64_key_2: 132
         int64_val: 133
       }
     ]},
    {2,
     ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
       {
         int64_key_1: 211
         int64_key_2: 212
       },
       {
         int64_key_1: 221
         int64_key_2: 222
         int64_val: 223
       },
       {
         int64_key_1: 321
         int64_key_2: 322
         int64_val: 323
       }
     ]},
    {
      3,
      ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>(NULL)
    }
  ]}
==

[name=update_array_of_protos_second_element_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ArrayOfProtosTable SET array_value[OFFSET(1)].int64_key_1 = 1000
WHERE primary_key != 3
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[unknown order:
    {1,
     ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
       {
         int64_key_1: 111
         int64_key_2: 112
         int64_val: 113
       },
       {
         int64_key_1: 1000
         int64_key_2: 122
         int64_val: 123
       },
       {
         int64_key_1: 131
         int64_key_2: 132
         int64_val: 133
       }
     ]},
    {2,
     ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
       {
         int64_key_1: 211
         int64_key_2: 212
         int64_val: 213
       },
       {
         int64_key_1: 1000
         int64_key_2: 222
         int64_val: 223
       },
       {
         int64_key_1: 321
         int64_key_2: 322
         int64_val: 323
       }
     ]},
    {
      3,
      ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>(NULL)
    }
  ]}
==

[name=update_array_of_protos_with_set_nonliteral_offset]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ArrayOfProtosTable
SET array_value[OFFSET(primary_key)].int64_key_1 = 1000
WHERE primary_key != 3
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[unknown order:
    {1,
     ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
       {
         int64_key_1: 111
         int64_key_2: 112
         int64_val: 113
       },
       {
         int64_key_1: 1000
         int64_key_2: 122
         int64_val: 123
       },
       {
         int64_key_1: 131
         int64_key_2: 132
         int64_val: 133
       }
     ]},
    {2,
     ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
       {
         int64_key_1: 211
         int64_key_2: 212
         int64_val: 213
       },
       {
         int64_key_1: 221
         int64_key_2: 222
         int64_val: 223
       },
       {
         int64_key_1: 1000
         int64_key_2: 322
         int64_val: 323
       }
     ]},
    {
      3,
      ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>(NULL)
    }
  ]}
==

[name=update_two_elements_array_of_protos_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ArrayOfProtosTable
SET array_value[OFFSET(0)].int64_key_1 = 1000,
    array_value[OFFSET(1)].int64_key_1 = 2000
WHERE primary_key != 3
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[unknown order:
    {1,
     ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
       {
         int64_key_1: 1000
         int64_key_2: 112
         int64_val: 113
       },
       {
         int64_key_1: 2000
         int64_key_2: 122
         int64_val: 123
       },
       {
         int64_key_1: 131
         int64_key_2: 132
         int64_val: 133
       }
     ]},
    {2,
     ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
       {
         int64_key_1: 1000
         int64_key_2: 212
         int64_val: 213
       },
       {
         int64_key_1: 2000
         int64_key_2: 222
         int64_val: 223
       },
       {
         int64_key_1: 321
         int64_key_2: 322
         int64_val: 323
       }
     ]},
    {
      3,
      ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>(NULL)
    }
  ]}
==

[name=update_duplicate_elements_array_of_protos_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ArrayOfProtosTable
SET array_value[OFFSET(0)].int64_key_1 = 1000,
    array_value[OFFSET(0)].int64_key_1 = 2000
WHERE primary_key != 3
--
ERROR: generic::out_of_range: Cannot perform multiple updates to offset 0 of an ARRAY<"zetasql_test__.KitchenSinkPB">
==

# TODO: Ideally the spec would allow this. See the comments for
# ResolvedUpdateItem in gen_resolved_ast.py.
[name=update_duplicate_nonoverlapping_elements_array_of_protos_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ArrayOfProtosTable
SET array_value[OFFSET(0)].int64_key_1 = 1000,
    array_value[OFFSET(0)].int64_key_2 = 2000
WHERE primary_key != 3
--
ERROR: generic::out_of_range: Cannot perform multiple updates to offset 0 of an ARRAY<"zetasql_test__.KitchenSinkPB">
==

[name=update_null_element_in_array_of_protos_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ArrayOfProtosTable
SET array_value[OFFSET(0)].int64_key_1 = 1000
WHERE True
--
ERROR: generic::out_of_range: Cannot use [] to modify a NULL array of type ARRAY<"zetasql_test__.KitchenSinkPB">
==

[name=update_element_in_array_of_protos_with_set_null_index]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ArrayOfProtosTable
SET array_value[OFFSET(NULL)].int64_key_1 = 1000
WHERE primary_key != 3
--
ERROR: generic::out_of_range: Cannot SET a NULL offset of an ARRAY<"zetasql_test__.KitchenSinkPB">
==

[name=update_element_in_array_of_protos_with_set_negative_index]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ArrayOfProtosTable
SET array_value[OFFSET(-1)].int64_key_1 = 1000
WHERE primary_key != 3
--
ERROR: generic::out_of_range: Cannot SET array offset -1 of an ARRAY<"zetasql_test__.KitchenSinkPB"> of size 3
==

[name=update_element_in_array_of_protos_with_set_index_too_large]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ArrayOfProtosTable
SET array_value[OFFSET(1000)].int64_key_1 = 1000
WHERE primary_key != 3
--
ERROR: generic::out_of_range: Cannot SET array offset 1000 of an ARRAY<"zetasql_test__.KitchenSinkPB"> of size 3
==

[name=update_element_in_array_of_protos_with_set_index_barely_too_large]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ArrayOfProtosTable
SET array_value[OFFSET(3)].int64_key_1 = 1000
WHERE primary_key != 3
--
ERROR: generic::out_of_range: Cannot SET array offset 3 of an ARRAY<"zetasql_test__.KitchenSinkPB"> of size 3
==

# A brief, somewhat tortuous test involving an array of protos wrapping a
# repeated proto field.
[name=update_array_of_struct_with_proto_repeated_field_with_set]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ArrayOfProtosTable2
SET array_value[OFFSET(0)].repeated_int64_val[OFFSET(1)] = 1000
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[
    {1,
     ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
       {
         int64_key_1: 11
         int64_key_2: 12
         repeated_int64_val: 101
         repeated_int64_val: 1000
         repeated_int64_val: 103
         nested_repeated_value {
           nested_int64: 201
         }
         nested_repeated_value {
           nested_int64: 202
         }
         nested_repeated_value {
           nested_int64: 203
         }
       },
       NULL
     ]}
  ]}
==

# Another brief, somewhat tortuous test involving an array of protos with
# a repeated proto field that wraps another field.
[name=update_array_of_struct_with_proto_repeated_field_with_set_subfield]
[required_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ArrayOfProtosTable2
SET array_value[OFFSET(0)].nested_repeated_value[OFFSET(1)]
                          .nested_int64 = 1000
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<primary_key INT64, array_value ARRAY<>>>[
    {1,
     ARRAY<PROTO<zetasql_test__.KitchenSinkPB>>[known order:
       {
         int64_key_1: 11
         int64_key_2: 12
         repeated_int64_val: 101
         repeated_int64_val: 102
         repeated_int64_val: 103
         nested_repeated_value {
           nested_int64: 201
         }
         nested_repeated_value {
           nested_int64: 1000
         }
         nested_repeated_value {
           nested_int64: 203
         }
       },
       NULL
     ]}
  ]}
==

[name=assign_proto_message_field]
UPDATE NestedProtoTable
SET proto_value.nested_value = "nested_int64: 1000"
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
       nested_value {
         nested_int64: 1000
       }
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_int64: 1000
       }
       nested_repeated_value {
         nested_int64: 1010
       }
       nested_repeated_value {
         nested_int64: 1020
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
==

[name=assign_empty_proto_message_field]
UPDATE NestedProtoTable SET proto_value.nested_value = "" WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
       nested_value {
       }
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
       }
       nested_repeated_value {
         nested_int64: 1010
       }
       nested_repeated_value {
         nested_int64: 1020
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
==

[name=clear_proto_message_field]
UPDATE NestedProtoTable SET proto_value.nested_value = NULL WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_repeated_value {
         nested_int64: 1010
       }
       nested_repeated_value {
         nested_int64: 1020
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
==

[name=assign_proto_message_field_default]
UPDATE NestedProtoTable SET proto_value.nested_value = DEFAULT WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_repeated_value {
         nested_int64: 1010
       }
       nested_repeated_value {
         nested_int64: 1020
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
==

# Fails because proto_value.nested_value is not set in all rows.
[name=assign_null_proto_subfield]
UPDATE NestedProtoTable
SET proto_value.nested_value.nested_int64 = 1000
WHERE True
--
ERROR: generic::out_of_range: Cannot set field of NULL "zetasql_test__.KitchenSinkPB.Nested"
==

[name=assign_proto_subfield]
UPDATE NestedProtoTable SET proto_value.nested_value.nested_int64 = 1000
WHERE proto_value.nested_value IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_int64: 1000
         nested_repeated_int64: 110
         nested_repeated_int64: 120
         nested_repeated_int64: 130
       }
       nested_repeated_value {
         nested_int64: 1010
       }
       nested_repeated_value {
         nested_int64: 1020
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
==

[name=clear_proto_subfield]
UPDATE NestedProtoTable SET proto_value.nested_value.nested_int64 = NULL
WHERE proto_value.nested_value IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_repeated_int64: 110
         nested_repeated_int64: 120
         nested_repeated_int64: 130
       }
       nested_repeated_value {
         nested_int64: 1010
       }
       nested_repeated_value {
         nested_int64: 1020
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
==

[name=assign_proto_subfield_default]
UPDATE NestedProtoTable SET proto_value.nested_value.nested_int64 = DEFAULT
WHERE proto_value.nested_value IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_repeated_int64: 110
         nested_repeated_int64: 120
         nested_repeated_int64: 130
       }
       nested_repeated_value {
         nested_int64: 1010
       }
       nested_repeated_value {
         nested_int64: 1020
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
==

[name=assign_proto_repeated_subfield]
UPDATE NestedProtoTable
SET proto_value.nested_value.nested_repeated_int64 = [1001, 2001, 3001]
WHERE proto_value.nested_value IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_int64: 10
         nested_repeated_int64: 1001
         nested_repeated_int64: 2001
         nested_repeated_int64: 3001
       }
       nested_repeated_value {
         nested_int64: 1010
       }
       nested_repeated_value {
         nested_int64: 1020
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
==

[name=assign_proto_repeated_subfield_null]
UPDATE NestedProtoTable
SET proto_value.nested_value.nested_repeated_int64 = NULL
WHERE proto_value.nested_value IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_int64: 10
       }
       nested_repeated_value {
         nested_int64: 1010
       }
       nested_repeated_value {
         nested_int64: 1020
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
==

[name=assign_proto_repeated_subfield_default]
UPDATE NestedProtoTable
SET proto_value.nested_value.nested_repeated_int64 = DEFAULT
WHERE proto_value.nested_value IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_int64: 10
       }
       nested_repeated_value {
         nested_int64: 1010
       }
       nested_repeated_value {
         nested_int64: 1020
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
==

[name=assign_repeated_proto_message_field]
UPDATE NestedProtoTable SET proto_value.nested_repeated_value =
  [CAST("nested_int64: 50" AS "zetasql_test__.KitchenSinkPB.Nested"),
   CAST("nested_int64: 51" AS "zetasql_test__.KitchenSinkPB.Nested"),
   CAST("nested_int64: 52" AS "zetasql_test__.KitchenSinkPB.Nested")]
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
       nested_repeated_value {
         nested_int64: 50
       }
       nested_repeated_value {
         nested_int64: 51
       }
       nested_repeated_value {
         nested_int64: 52
       }
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_int64: 10
         nested_repeated_int64: 110
         nested_repeated_int64: 120
         nested_repeated_int64: 130
       }
       nested_repeated_value {
         nested_int64: 50
       }
       nested_repeated_value {
         nested_int64: 51
       }
       nested_repeated_value {
         nested_int64: 52
       }
     }}
  ]}
==

[name=assign_repeated_proto_message_field_null]
UPDATE NestedProtoTable SET proto_value.nested_repeated_value = NULL WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_int64: 10
         nested_repeated_int64: 110
         nested_repeated_int64: 120
         nested_repeated_int64: 130
       }
     }}
  ]}
==

[name=assign_repeated_proto_message_field_default]
UPDATE NestedProtoTable
SET proto_value.nested_repeated_value = DEFAULT
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nested_value {
         nested_int64: 10
         nested_repeated_int64: 110
         nested_repeated_int64: 120
         nested_repeated_int64: 130
       }
     }}
  ]}
==

# Wire format annotations have no effect on statement semantics.
[name=assign_proto_wrapper_message_field]
UPDATE NullableProtoTable SET proto_value.nullable_int = "value: 100" WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
       nullable_int {
         value: 100
       }
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nullable_int {
         value: 100
       }
       nullable_int_array {
         value: 500
       }
       nullable_int_array {
         value: 501
       }
     }}
  ]}
==

[name=assign_proto_wrapper_message_field_empty]
UPDATE NullableProtoTable SET proto_value.nullable_int = "" WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
       nullable_int {
       }
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nullable_int {
       }
       nullable_int_array {
         value: 500
       }
       nullable_int_array {
         value: 501
       }
     }}
  ]}
==

[name=clear_proto_wrapper_message_field]
UPDATE NullableProtoTable SET proto_value.nullable_int = NULL WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nullable_int_array {
         value: 500
       }
       nullable_int_array {
         value: 501
       }
     }}
  ]}
==

[name=assign_proto_wrapper_message_subfield]
UPDATE NullableProtoTable SET proto_value.nullable_int.value = 100
WHERE proto_value.nullable_int IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nullable_int {
         value: 100
       }
       nullable_int_array {
         value: 500
       }
       nullable_int_array {
         value: 501
       }
     }}
  ]}
==

[name=clear_proto_wrapper_message_subfield]
UPDATE NullableProtoTable SET proto_value.nullable_int.value = NULL
WHERE proto_value.nullable_int IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nullable_int {
       }
       nullable_int_array {
         value: 500
       }
       nullable_int_array {
         value: 501
       }
     }}
  ]}
==

# Wire format annotations have no effect on statement semantics.
[name=assign_repeated_proto_wrapper_message]
UPDATE NullableProtoTable SET proto_value.nullable_int_array =
  [CAST("value: 100" AS "zetasql_test__.NullableInt"),
   CAST("value: 101" AS "zetasql_test__.NullableInt"),
   CAST("value: 102" AS "zetasql_test__.NullableInt")]
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
       nullable_int_array {
         value: 100
       }
       nullable_int_array {
         value: 101
       }
       nullable_int_array {
         value: 102
       }
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nullable_int {
         value: 50
       }
       nullable_int_array {
         value: 100
       }
       nullable_int_array {
         value: 101
       }
       nullable_int_array {
         value: 102
       }
     }}
  ]}
==

[name=clear_repeated_proto_wrapper_message]
UPDATE NullableProtoTable SET proto_value.nullable_int_array = NULL WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       nullable_int {
         value: 50
       }
     }}
  ]}
==

# Wire format annotations have no effect on statement semantics.
[name=assign_proto_struct_message_subfield]
UPDATE KeyValueProtoTable
SET proto_value.key_value = 'key: "foo" value: 100'
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
       key_value {
         key: "foo"
         value: 100
       }
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       key_value {
         key: "foo"
         value: 100
       }
       key_value_array {
         key: "key1"
         value: 5001
       }
       key_value_array {
         key: "key2"
         value: 5002
       }
     }}
  ]}
==

[name=assign_proto_struct_message_subfield_empty]
UPDATE KeyValueProtoTable SET proto_value.key_value = '' WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
       key_value {
       }
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       key_value {
       }
       key_value_array {
         key: "key1"
         value: 5001
       }
       key_value_array {
         key: "key2"
         value: 5002
       }
     }}
  ]}
==

[name=clear_proto_struct_message_subfield]
UPDATE KeyValueProtoTable SET proto_value.key_value = NULL WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       key_value_array {
         key: "key1"
         value: 5001
       }
       key_value_array {
         key: "key2"
         value: 5002
       }
     }}
  ]}
==

[name=assign_proto_struct_message_sub_subfield]
UPDATE KeyValueProtoTable SET proto_value.key_value.key = "foo"
WHERE proto_value.key_value IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       key_value {
         key: "foo"
         value: 5000
       }
       key_value_array {
         key: "key1"
         value: 5001
       }
       key_value_array {
         key: "key2"
         value: 5002
       }
     }}
  ]}
==

[name=clear_proto_struct_message_sub_subfield]
UPDATE KeyValueProtoTable SET proto_value.key_value.key = NULL
WHERE proto_value.key_value IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       key_value {
         value: 5000
       }
       key_value_array {
         key: "key1"
         value: 5001
       }
       key_value_array {
         key: "key2"
         value: 5002
       }
     }}
  ]}
==

# Wire format annotations have no effect on statement semantics.
[name=assign_repeated_proto_struct_message]
UPDATE KeyValueProtoTable SET proto_value.key_value_array =
  [CAST('key: "foo1" value:1000' AS "zetasql_test__.KeyValueStruct"),
   CAST('key: "foo2" value:2000' AS "zetasql_test__.KeyValueStruct"),
   CAST('key: "foo3" value:3000' AS "zetasql_test__.KeyValueStruct")]
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
       key_value_array {
         key: "foo1"
         value: 1000
       }
       key_value_array {
         key: "foo2"
         value: 2000
       }
       key_value_array {
         key: "foo3"
         value: 3000
       }
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       key_value {
         key: "key"
         value: 5000
       }
       key_value_array {
         key: "foo1"
         value: 1000
       }
       key_value_array {
         key: "foo2"
         value: 2000
       }
       key_value_array {
         key: "foo3"
         value: 3000
       }
     }}
  ]}
==

[name=clear_repeated_proto_struct_message]
UPDATE KeyValueProtoTable SET proto_value.key_value_array = NULL WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 21
       int64_key_2: 22
       key_value {
         key: "key"
         value: 5000
       }
     }}
  ]}
==

[name=assign_two_proto_fields]
UPDATE BasicProtoTable SET
  proto_value.int64_key_1 = 1000,
  proto_value.int64_key_2 = 2000
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 1000
       int64_key_2: 2000
     }},
    {2,
     {
       int64_key_1: 1000
       int64_key_2: 2000
       int64_val: 23
       repeated_int64_val: 100
       repeated_int64_val: 200
       repeated_int64_val: 300
       date: 5
     }}
  ]}
==

[name=assign_extension_field_and_two_proto_fields]
[required_features=V_1_2_PROTO_EXTENSIONS_WITH_SET]
UPDATE ExtensionProtoTable SET
  proto_value.int64_key_1 = 1000,
  proto_value.int64_key_2 = 2000,
  proto_value.(zetasql_test__.int_top_level_extension) = 3000
WHERE True
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{2,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 1000
       int64_key_2: 2000
       [zetasql_test__.int_top_level_extension]: 3000
     }},
    {2,
     {
       int64_key_1: 1000
       int64_key_2: 2000
       [zetasql_test__.int_top_level_extension]: 3000
       [zetasql_test__.date_extension]: 5
     }}
  ]}
==

[name=assign_proto_field_and_two_subfields_of_another_field]
UPDATE NestedProtoTable SET
  proto_value.int64_key_1 = 1000,
  proto_value.nested_value.nested_int64 = 5000,
  proto_value.nested_value.nested_repeated_int64 = [5001, 5002]
WHERE proto_value.nested_value IS NOT NULL
--
STRUCT<
  num_rows_modified INT64,
  all_rows ARRAY<>
>{1,
  ARRAY<STRUCT<
          primary_key INT64,
          proto_value PROTO<zetasql_test__.KitchenSinkPB>
        >>
  [unknown order:
    {1,
     {
       int64_key_1: 11
       int64_key_2: 12
     }},
    {2,
     {
       int64_key_1: 1000
       int64_key_2: 22
       nested_value {
         nested_int64: 5000
         nested_repeated_int64: 5001
         nested_repeated_int64: 5002
       }
       nested_repeated_value {
         nested_int64: 1010
       }
       nested_repeated_value {
         nested_int64: 1020
       }
       nested_repeated_value {
         nested_int64: 1030
       }
     }}
  ]}
