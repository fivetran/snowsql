export data
options (format=sstable, filename='/tmp/file.ss')
as select * from KeyValue
--
ExportDataStmt
+-option_list=
| +-format := Literal(type=STRING, value="sstable")
| +-filename := Literal(type=STRING, value="/tmp/file.ss")
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# Export data without any options.  (Most engines probably reject this.)
export data
as select * from KeyValue
--
ExportDataStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# Export data with a WITH statement.
export data options(a=b) as
WITH t1 as (select 1 key),
     t2 as (select key from KeyValue),
     t3 as (select * from t1 union all select * from t2)
select * from t3 where key=5
--
ExportDataStmt
+-option_list=
| +-a := Literal(type=STRING, value="b")
+-output_column_list=
| +-t3.key#7 AS key [INT64]
+-query=
  +-WithScan
    +-column_list=[t3.key#7]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name='t1'
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[t1.key#1]
    | |     +-expr_list=
    | |     | +-key#1 := Literal(type=INT64, value=1)
    | |     +-input_scan=
    | |       +-SingleRowScan
    | +-WithEntry
    | | +-with_query_name='t2'
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[KeyValue.Key#2]
    | |     +-input_scan=
    | |       +-TableScan(column_list=[KeyValue.Key#2], table=KeyValue, column_index_list=[0])
    | +-WithEntry
    |   +-with_query_name='t3'
    |   +-with_subquery=
    |     +-SetOperationScan
    |       +-column_list=[$union_all.key#6]
    |       +-op_type=UNION_ALL
    |       +-input_item_list=
    |         +-SetOperationItem
    |         | +-scan=
    |         | | +-ProjectScan
    |         | |   +-column_list=[t1.key#4]
    |         | |   +-input_scan=
    |         | |     +-WithRefScan(column_list=[t1.key#4], with_query_name="t1")
    |         | +-output_column_list=[t1.key#4]
    |         +-SetOperationItem
    |           +-scan=
    |           | +-ProjectScan
    |           |   +-column_list=[t2.key#5]
    |           |   +-input_scan=
    |           |     +-WithRefScan(column_list=[t2.key#5], with_query_name="t2")
    |           +-output_column_list=[t2.key#5]
    +-query=
      +-ProjectScan
        +-column_list=[t3.key#7]
        +-input_scan=
          +-FilterScan
            +-column_list=[t3.key#7]
            +-input_scan=
            | +-WithRefScan(column_list=[t3.key#7], with_query_name="t3")
            +-filter_expr=
              +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                +-ColumnRef(type=INT64, column=t3.key#7)
                +-Literal(type=INT64, value=5)
==

# Export data with a WITH statement with an error in a with subquery.
export data as
WITH t1 as (select 1 key),
     t2 as (select key from xxx),
     t3 as (select * from t2)
select * from t3
--
ERROR: Table not found: xxx [at 3:29]
     t2 as (select key from xxx),
                            ^
==

# Export data with a WITH statement with an error in the final query.
export data as
WITH t1 as (select 1 key)
select * from xxx
--
ERROR: Table not found: xxx [at 3:15]
select * from xxx
              ^
==

# Create a value table with SELECT AS STRUCT.
# Duplicate and anonymous fields are allowed inside the struct.
export data
as select as struct 1 a, 2, 3 c, 4 c
--
ExportDataStmt
+-output_column_list=
| +-$make_struct.$struct#5 AS "$struct" [STRUCT<a INT64, INT64, c INT64, c INT64>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$make_struct.$struct#5]
    +-expr_list=
    | +-$struct#5 :=
    |   +-MakeStruct
    |     +-type=STRUCT<a INT64, INT64, c INT64, c INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=$create_as.a#1)
    |       +-ColumnRef(type=INT64, column=$create_as.$col2#2)
    |       +-ColumnRef(type=INT64, column=$create_as.c#3)
    |       +-ColumnRef(type=INT64, column=$create_as.c#4)
    +-input_scan=
      +-ProjectScan
        +-column_list=$create_as.[a#1, $col2#2, c#3, c#4]
        +-expr_list=
        | +-a#1 := Literal(type=INT64, value=1)
        | +-$col2#2 := Literal(type=INT64, value=2)
        | +-c#3 := Literal(type=INT64, value=3)
        | +-c#4 := Literal(type=INT64, value=4)
        +-input_scan=
          +-SingleRowScan
==

# Create a value table with SELECT AS ProtoName.
export data
as select as "zetasql_test__.TestExtraPB" 55 int32_val1
--
ExportDataStmt
+-output_column_list=
| +-$make_proto.$proto#2 AS "$proto" [PROTO<zetasql_test__.TestExtraPB>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$make_proto.$proto#2]
    +-expr_list=
    | +-$proto#2 :=
    |   +-MakeProto
    |     +-type=PROTO<zetasql_test__.TestExtraPB>
    |     +-field_list=
    |       +-int32_val1 := Literal(type=INT32, value=55)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$create_as.int32_val1#1]
        +-expr_list=
        | +-int32_val1#1 := Literal(type=INT64, value=55)
        +-input_scan=
          +-SingleRowScan
==

# Create a value table with UNION ALL of SELECT AS ProtoName.
export data as
select as "zetasql_test__.TestExtraPB" 55 int32_val1
union all
select as "zetasql_test__.TestExtraPB" 77 int32_val1
--
ExportDataStmt
+-output_column_list=
| +-$union_all.$proto#5 AS "$proto" [PROTO<zetasql_test__.TestExtraPB>]
+-is_value_table=TRUE
+-query=
  +-SetOperationScan
    +-column_list=[$union_all.$proto#5]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$make_proto.$proto#2]
      | |   +-expr_list=
      | |   | +-$proto#2 :=
      | |   |   +-MakeProto
      | |   |     +-type=PROTO<zetasql_test__.TestExtraPB>
      | |   |     +-field_list=
      | |   |       +-int32_val1 := Literal(type=INT32, value=55)
      | |   +-input_scan=
      | |     +-ProjectScan
      | |       +-column_list=[$union_all1.int32_val1#1]
      | |       +-expr_list=
      | |       | +-int32_val1#1 := Literal(type=INT64, value=55)
      | |       +-input_scan=
      | |         +-SingleRowScan
      | +-output_column_list=[$make_proto.$proto#2]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$make_proto.$proto#4]
        |   +-expr_list=
        |   | +-$proto#4 :=
        |   |   +-MakeProto
        |   |     +-type=PROTO<zetasql_test__.TestExtraPB>
        |   |     +-field_list=
        |   |       +-int32_val1 := Literal(type=INT32, value=77)
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=[$union_all2.int32_val1#3]
        |       +-expr_list=
        |       | +-int32_val1#3 := Literal(type=INT64, value=77)
        |       +-input_scan=
        |         +-SingleRowScan
        +-output_column_list=[$make_proto.$proto#4]
==

# Create a value table with UNION ALL of SELECT AS VALUE.
export data as
select as value
  new "zetasql_test__.TestExtraPB"(55 as int32_val1) f0_
union all
select as value
  new "zetasql_test__.TestExtraPB"(77 as int32_val1) f1_
--
ExportDataStmt
+-output_column_list=
| +-$union_all.$value_column#3 AS "$value_column" [PROTO<zetasql_test__.TestExtraPB>]
+-is_value_table=TRUE
+-query=
  +-SetOperationScan
    +-column_list=[$union_all.$value_column#3]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$union_all1.f0_#1]
      | |   +-expr_list=
      | |   | +-f0_#1 :=
      | |   |   +-MakeProto
      | |   |     +-type=PROTO<zetasql_test__.TestExtraPB>
      | |   |     +-field_list=
      | |   |       +-int32_val1 := Literal(type=INT32, value=55)
      | |   +-input_scan=
      | |     +-SingleRowScan
      | +-output_column_list=[$union_all1.f0_#1]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$union_all2.f1_#2]
        |   +-expr_list=
        |   | +-f1_#2 :=
        |   |   +-MakeProto
        |   |     +-type=PROTO<zetasql_test__.TestExtraPB>
        |   |     +-field_list=
        |   |       +-int32_val1 := Literal(type=INT32, value=77)
        |   +-input_scan=
        |     +-SingleRowScan
        +-output_column_list=[$union_all2.f1_#2]
==

[no_java]
export data with connection connection1
options (format=sstable, filename='/tmp/file.ss')
as select * from KeyValue
--
ExportDataStmt
+-connection=
| +-Connection(connection=connection1)
+-option_list=
| +-format := Literal(type=STRING, value="sstable")
| +-filename := Literal(type=STRING, value="/tmp/file.ss")
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
