[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select safe.concat("a")
--
ALTERNATION GROUP: <empty>
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select safe.concat("a")
       ^
--
ALTERNATION GROUP: V_1_2_SAFE_FUNCTION_CALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:concat(STRING, repeated(0) STRING) -> STRING)
    |     +-Literal(type=STRING, value='a')
    +-input_scan=
      +-SingleRowScan
==

[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select safe.safe.concat("a")
--
ALTERNATION GROUP: <empty>
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select safe.safe.concat("a")
       ^
--
ALTERNATION GROUP: V_1_2_SAFE_FUNCTION_CALL
--
ERROR: Function not found: safe.concat [at 1:8]
select safe.safe.concat("a")
       ^
==

[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select safe("a")
--
ERROR: Function not found: safe; Did you mean date? [at 1:8]
select safe("a")
       ^
==

[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select safe.sum(key) from KeyValue kv
--
ALTERNATION GROUP: <empty>
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select safe.sum(key) from KeyValue kv
       ^
--
ALTERNATION GROUP: V_1_2_SAFE_FUNCTION_CALL
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
        +-aggregate_list=
          +-$agg1#3 :=
            +-AggregateFunctionCall({SAFE_ERROR_MODE} ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
==

[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select safe.count(*) from KeyValue
--
ALTERNATION GROUP: <empty>
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select safe.count(*) from KeyValue
       ^
--
ALTERNATION GROUP: V_1_2_SAFE_FUNCTION_CALL
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-TableScan(table=KeyValue)
        +-aggregate_list=
          +-$agg1#3 := AggregateFunctionCall({SAFE_ERROR_MODE} ZetaSQL:$count_star() -> INT64)
==

[language_features=ANALYTIC_FUNCTIONS{{|,V_1_2_SAFE_FUNCTION_CALL}}]
select safe.sum(key) over () from KeyValue
--
ALTERNATION GROUP: <empty>
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select safe.sum(key) over () from KeyValue
       ^
--
ALTERNATION GROUP: ,V_1_2_SAFE_FUNCTION_CALL
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall({SAFE_ERROR_MODE} ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

# TABLESAMPLE is not relevant here, but allows the use of comma.
[language_features=TABLESAMPLE{{|,ANALYTIC_FUNCTIONS}}{{|,V_1_2_SAFE_FUNCTION_CALL}}]
select safe.rank() over (order by key) from KeyValue
--
ALTERNATION GROUPS:
    <empty>
    ,V_1_2_SAFE_FUNCTION_CALL
--
ERROR: Analytic functions not supported [at 1:8]
select safe.rank() over (order by key) from KeyValue
       ^
--
ALTERNATION GROUP: ,ANALYTIC_FUNCTIONS,
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select safe.rank() over (order by key) from KeyValue
       ^
--
ALTERNATION GROUP: ,ANALYTIC_FUNCTIONS,,V_1_2_SAFE_FUNCTION_CALL
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-order_by=
            | +-WindowOrdering
            |   +-order_by_item_list=
            |     +-OrderByItem
            |       +-column_ref=
            |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-analytic_function_list=
              +-$analytic1#4 := AnalyticFunctionCall({SAFE_ERROR_MODE} ZetaSQL:rank() -> INT64)
==

[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select safe.cast(1 as int64)
--
ERROR: Unexpected function call argument alias found at safe."cast" [at 1:20]
select safe.cast(1 as int64)
                   ^
==

[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select safe.timestamp_micros(12345)
--
ALTERNATION GROUP: <empty>
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select safe.timestamp_micros(12345)
       ^
--
ALTERNATION GROUP: V_1_2_SAFE_FUNCTION_CALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:timestamp_micros(INT64) -> TIMESTAMP)
    |     +-Literal(type=INT64, value=12345)
    +-input_scan=
      +-SingleRowScan
==

# IF is a parser special case for a reserved keyword that works as a function.
# We don't have an unparser special case for this, so it generates SAFE.IF(...),
# which won't re-parse.
[no_run_unparser]
[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select safe."if"(true, 1, 2)
--
ALTERNATION GROUP: <empty>
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select safe."if"(true, 1, 2)
       ^
--
ALTERNATION GROUP: V_1_2_SAFE_FUNCTION_CALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |     +-Literal(type=BOOL, value=true)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=INT64, value=2)
    +-input_scan=
      +-SingleRowScan
==

# Look up a SAFE function that doesn't exist.
[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select safe.bad_function_xxx()
--
ALTERNATION GROUP: <empty>
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select safe.bad_function_xxx()
       ^
--
ALTERNATION GROUP: V_1_2_SAFE_FUNCTION_CALL
--
ERROR: Function not found: bad_function_xxx [at 1:8]
select safe.bad_function_xxx()
       ^
==

# Show that suggestions still work with SAFE.
[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select saFE.Concav('abc')
--
ALTERNATION GROUP: <empty>
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select saFE.Concav('abc')
       ^
--
ALTERNATION GROUP: V_1_2_SAFE_FUNCTION_CALL
--
ERROR: Function not found: Concav; Did you mean saFE.concat? [at 1:8]
select saFE.Concav('abc')
       ^
==

# But suggestions don't work for an error in the SAFE keyword.
[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select sale.concat('abc')
--
ERROR: Function not found: sale.concat [at 1:8]
select sale.concat('abc')
       ^
==

[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select safe.net.parse_ip('abc')
--
ALTERNATION GROUP: <empty>
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select safe.net.parse_ip('abc')
       ^
--
ALTERNATION GROUP: V_1_2_SAFE_FUNCTION_CALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:net.parse_ip(STRING) -> INT64)
    |     +-Literal(type=STRING, value='abc')
    +-input_scan=
      +-SingleRowScan
==

[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select safe.timestamp_add(TIMESTAMP "2017-09-15 23:59:59.999999 UTC", INTERVAL 10 DAY)
--
ALTERNATION GROUP: <empty>
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select safe.timestamp_add(TIMESTAMP "2017-09-15 23:59:59.999999 UTC", INTERVA...
       ^
--
ALTERNATION GROUP: V_1_2_SAFE_FUNCTION_CALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:timestamp_add(TIMESTAMP, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIMESTAMP)
    |     +-Literal(type=TIMESTAMP, value=2017-09-15 23:59:59.999999+00, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=10)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    +-input_scan=
      +-SingleRowScan
==

[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select safe.safe_supported_function();
--
ALTERNATION GROUP: <empty>
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select safe.safe_supported_function();
       ^
--
ALTERNATION GROUP: V_1_2_SAFE_FUNCTION_CALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := FunctionCall({SAFE_ERROR_MODE} sample_functions:safe_supported_function() -> INT64)
    +-input_scan=
      +-SingleRowScan
==

[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
select safe.safe_unsupported_function();
--
ALTERNATION GROUP: <empty>
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select safe.safe_unsupported_function();
       ^
--
ALTERNATION GROUP: V_1_2_SAFE_FUNCTION_CALL
--
ERROR: Function safe_unsupported_function does not support SAFE error mode [at 1:8]
select safe.safe_unsupported_function();
       ^
==

# Test that the flag V_1_4_SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS is required
[language_features=V_1_2_SAFE_FUNCTION_CALL,V_1_3_INLINE_LAMBDA_ARGUMENT]
[enabled_ast_rewrites=NONE]
SELECT
  SAFE.ARRAY_TRANSFORM([-1, 0, 10], e -> 1/e)
--
ERROR: Function ARRAY_TRANSFORM does not support SAFE error mode [at 2:3]
  SAFE.ARRAY_TRANSFORM([-1, 0, 10], e -> 1/e)
  ^
==

# Test that the flag V_1_4_SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS is required
[language_features=V_1_2_SAFE_FUNCTION_CALL,V_1_3_INLINE_LAMBDA_ARGUMENT]
[enabled_ast_rewrites=NONE]
SELECT
  SAFE.ARRAY_FILTER([-1, 0, 10], e -> 1/e > 0)
--
ERROR: Function ARRAY_FILTER does not support SAFE error mode [at 2:3]
  SAFE.ARRAY_FILTER([-1, 0, 10], e -> 1/e > 0)
  ^
==

# Test that the flag V_1_4_SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS is required
[language_features=V_1_2_SAFE_FUNCTION_CALL,V_1_3_INLINE_LAMBDA_ARGUMENT]
[enabled_ast_rewrites=NONE]
SELECT
  SAFE.ARRAY_INCLUDES([-1, 0, 10], 0)
--
ERROR: Function ARRAY_INCLUDES does not support SAFE error mode [at 2:3]
  SAFE.ARRAY_INCLUDES([-1, 0, 10], 0)
  ^
==

# Test that the flag V_1_4_SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS is required
[language_features=V_1_2_SAFE_FUNCTION_CALL,V_1_3_INLINE_LAMBDA_ARGUMENT]
[enabled_ast_rewrites=NONE]
SELECT
  SAFE.ARRAY_INCLUDES([-1, 0, 10], e -> 1/e > 0)
--
ERROR: Function ARRAY_INCLUDES does not support SAFE error mode [at 2:3]
  SAFE.ARRAY_INCLUDES([-1, 0, 10], e -> 1/e > 0)
  ^
==

# Test that the flag V_1_4_SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS is required
[language_features=V_1_2_SAFE_FUNCTION_CALL,V_1_3_INLINE_LAMBDA_ARGUMENT]
[enabled_ast_rewrites=NONE]
SELECT
  SAFE.ARRAY_INCLUDES_ALL([-1, 0, 10], [1, 0])
--
ERROR: Function ARRAY_INCLUDES_ALL does not support SAFE error mode [at 2:3]
  SAFE.ARRAY_INCLUDES_ALL([-1, 0, 10], [1, 0])
  ^
==

# Test that the flag V_1_4_SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS is required
[language_features=V_1_2_SAFE_FUNCTION_CALL,V_1_3_INLINE_LAMBDA_ARGUMENT]
[enabled_ast_rewrites=NONE]
SELECT
  SAFE.ARRAY_INCLUDES_ANY([-1, 0, 10], [1, 0])
--
ERROR: Function ARRAY_INCLUDES_ANY does not support SAFE error mode [at 2:3]
  SAFE.ARRAY_INCLUDES_ANY([-1, 0, 10], [1, 0])
  ^
==

# Test all array functions with SAFE, with no rewrites
[language_features=V_1_2_SAFE_FUNCTION_CALL,V_1_3_INLINE_LAMBDA_ARGUMENT,V_1_4_SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS]
[enabled_ast_rewrites=NONE]
SELECT
  SAFE.ARRAY_TRANSFORM([-1, 0, 10], e -> 1/e),
  SAFE.ARRAY_FILTER([-1, 0, 10], e -> 1/e > 0),
  SAFE.ARRAY_INCLUDES([-1, 0, 10], 0),
  SAFE.ARRAY_INCLUDES([-1, 0, 10], e -> 1/e > 0),
  SAFE.ARRAY_INCLUDES_ALL([-1, 0, 10], [1, 0]),
  SAFE.ARRAY_INCLUDES_ANY([-1, 0, 10], [1, 0])
--

QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [ARRAY<DOUBLE>]
| +-$query.$col2#5 AS "$col2" [ARRAY<INT64>]
| +-$query.$col3#6 AS "$col3" [BOOL]
| +-$query.$col4#7 AS "$col4" [BOOL]
| +-$query.$col5#8 AS "$col5" [BOOL]
| +-$query.$col6#9 AS "$col6" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#4, $col2#5, $col3#6, $col4#7, $col5#8, $col6#9]
    +-expr_list=
    | +-$col1#4 :=
    | | +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->DOUBLE> transformation) -> ARRAY<DOUBLE>)
    | |   +-FunctionArgument
    | |   | +-expr=
    | |   |   +-Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |   +-FunctionArgument
    | |     +-inline_lambda=
    | |       +-InlineLambda
    | |         +-argument_list=[$lambda_arg.e#1]
    | |         +-body=
    | |           +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
    | |             +-Literal(type=DOUBLE, value=1)
    | |             +-Cast(INT64 -> DOUBLE)
    | |               +-ColumnRef(type=INT64, column=$lambda_arg.e#1)
    | +-$col2#5 :=
    | | +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_filter(ARRAY<INT64> array_to_filter, FUNCTION<INT64->BOOL> condition) -> ARRAY<INT64>)
    | |   +-FunctionArgument
    | |   | +-expr=
    | |   |   +-Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |   +-FunctionArgument
    | |     +-inline_lambda=
    | |       +-InlineLambda
    | |         +-argument_list=[$lambda_arg.e#2]
    | |         +-body=
    | |           +-FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
    | |             +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
    | |             | +-Literal(type=DOUBLE, value=1)
    | |             | +-Cast(INT64 -> DOUBLE)
    | |             |   +-ColumnRef(type=INT64, column=$lambda_arg.e#2)
    | |             +-Literal(type=DOUBLE, value=0)
    | +-$col3#6 :=
    | | +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_includes(ARRAY<INT64> array_to_search, INT64 search_value) -> BOOL)
    | |   +-Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |   +-Literal(type=INT64, value=0)
    | +-$col4#7 :=
    | | +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_includes(ARRAY<INT64> array_to_search, FUNCTION<INT64->BOOL> condition) -> BOOL)
    | |   +-FunctionArgument
    | |   | +-expr=
    | |   |   +-Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |   +-FunctionArgument
    | |     +-inline_lambda=
    | |       +-InlineLambda
    | |         +-argument_list=[$lambda_arg.e#3]
    | |         +-body=
    | |           +-FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
    | |             +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
    | |             | +-Literal(type=DOUBLE, value=1)
    | |             | +-Cast(INT64 -> DOUBLE)
    | |             |   +-ColumnRef(type=INT64, column=$lambda_arg.e#3)
    | |             +-Literal(type=DOUBLE, value=0)
    | +-$col5#8 :=
    | | +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_includes_all(ARRAY<INT64> array_to_search, ARRAY<INT64> search_values) -> BOOL)
    | |   +-Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |   +-Literal(type=ARRAY<INT64>, value=[1, 0])
    | +-$col6#9 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_includes_any(ARRAY<INT64> array_to_search, ARRAY<INT64> search_values) -> BOOL)
    |     +-Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    |     +-Literal(type=ARRAY<INT64>, value=[1, 0])
    +-input_scan=
      +-SingleRowScan
==

# Test all array functions with SAFE, with rewrites
[language_features=V_1_2_SAFE_FUNCTION_CALL,V_1_3_INLINE_LAMBDA_ARGUMENT,V_1_4_SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS]
[enabled_ast_rewrites=DEFAULTS]
SELECT
  SAFE.ARRAY_TRANSFORM([-1, 0, 10], e -> 1/e),
  SAFE.ARRAY_FILTER([-1, 0, 10], e -> 1/e > 0),
  SAFE.ARRAY_INCLUDES([-1, 0, 10], 0),
  SAFE.ARRAY_INCLUDES([-1, 0, 10], e -> 1/e > 0),
  SAFE.ARRAY_INCLUDES_ALL([-1, 0, 10], [1, 0]),
  SAFE.ARRAY_INCLUDES_ANY([-1, 0, 10], [1, 0])
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [ARRAY<DOUBLE>]
| +-$query.$col2#5 AS "$col2" [ARRAY<INT64>]
| +-$query.$col3#6 AS "$col3" [BOOL]
| +-$query.$col4#7 AS "$col4" [BOOL]
| +-$query.$col5#8 AS "$col5" [BOOL]
| +-$query.$col6#9 AS "$col6" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#4, $col2#5, $col3#6, $col4#7, $col5#8, $col6#9]
    +-expr_list=
    | +-$col1#4 :=
    | | +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->DOUBLE> transformation) -> ARRAY<DOUBLE>)
    | |   +-FunctionArgument
    | |   | +-expr=
    | |   |   +-Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |   +-FunctionArgument
    | |     +-inline_lambda=
    | |       +-InlineLambda
    | |         +-argument_list=[$lambda_arg.e#1]
    | |         +-body=
    | |           +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
    | |             +-Literal(type=DOUBLE, value=1)
    | |             +-Cast(INT64 -> DOUBLE)
    | |               +-ColumnRef(type=INT64, column=$lambda_arg.e#1)
    | +-$col2#5 :=
    | | +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_filter(ARRAY<INT64> array_to_filter, FUNCTION<INT64->BOOL> condition) -> ARRAY<INT64>)
    | |   +-FunctionArgument
    | |   | +-expr=
    | |   |   +-Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |   +-FunctionArgument
    | |     +-inline_lambda=
    | |       +-InlineLambda
    | |         +-argument_list=[$lambda_arg.e#2]
    | |         +-body=
    | |           +-FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
    | |             +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
    | |             | +-Literal(type=DOUBLE, value=1)
    | |             | +-Cast(INT64 -> DOUBLE)
    | |             |   +-ColumnRef(type=INT64, column=$lambda_arg.e#2)
    | |             +-Literal(type=DOUBLE, value=0)
    | +-$col3#6 :=
    | | +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_includes(ARRAY<INT64> array_to_search, INT64 search_value) -> BOOL)
    | |   +-Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |   +-Literal(type=INT64, value=0)
    | +-$col4#7 :=
    | | +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_includes(ARRAY<INT64> array_to_search, FUNCTION<INT64->BOOL> condition) -> BOOL)
    | |   +-FunctionArgument
    | |   | +-expr=
    | |   |   +-Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |   +-FunctionArgument
    | |     +-inline_lambda=
    | |       +-InlineLambda
    | |         +-argument_list=[$lambda_arg.e#3]
    | |         +-body=
    | |           +-FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
    | |             +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
    | |             | +-Literal(type=DOUBLE, value=1)
    | |             | +-Cast(INT64 -> DOUBLE)
    | |             |   +-ColumnRef(type=INT64, column=$lambda_arg.e#3)
    | |             +-Literal(type=DOUBLE, value=0)
    | +-$col5#8 :=
    | | +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_includes_all(ARRAY<INT64> array_to_search, ARRAY<INT64> search_values) -> BOOL)
    | |   +-Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |   +-Literal(type=ARRAY<INT64>, value=[1, 0])
    | +-$col6#9 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_includes_any(ARRAY<INT64> array_to_search, ARRAY<INT64> search_values) -> BOOL)
    |     +-Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    |     +-Literal(type=ARRAY<INT64>, value=[1, 0])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [ARRAY<DOUBLE>]
| +-$query.$col2#5 AS "$col2" [ARRAY<INT64>]
| +-$query.$col3#6 AS "$col3" [BOOL]
| +-$query.$col4#7 AS "$col4" [BOOL]
| +-$query.$col5#8 AS "$col5" [BOOL]
| +-$query.$col6#9 AS "$col6" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#4, $col2#5, $col3#6, $col4#7, $col5#8, $col6#9]
    +-expr_list=
    | +-$col1#4 :=
    | | +-SubqueryExpr
    | |   +-type=ARRAY<DOUBLE>
    | |   +-subquery_type=SCALAR
    | |   +-subquery=
    | |     +-ProjectScan
    | |       +-column_list=[$expr_subquery.$col1#14]
    | |       +-expr_list=
    | |       | +-$col1#14 :=
    | |       |   +-FunctionCall(ZetaSQL:iferror(ARRAY<DOUBLE>, ARRAY<DOUBLE>) -> ARRAY<DOUBLE>)
    | |       |     +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<DOUBLE>, ARRAY<DOUBLE>) -> ARRAY<DOUBLE>)
    | |       |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    | |       |     | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#10)
    | |       |     | +-Literal(type=ARRAY<DOUBLE>, value=NULL)
    | |       |     | +-SubqueryExpr
    | |       |     |   +-type=ARRAY<DOUBLE>
    | |       |     |   +-subquery_type=ARRAY
    | |       |     |   +-parameter_list=
    | |       |     |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#10)
    | |       |     |   +-subquery=
    | |       |     |     +-OrderByScan
    | |       |     |       +-column_list=[$expr_subquery.$col1#13]
    | |       |     |       +-is_ordered=TRUE
    | |       |     |       +-input_scan=
    | |       |     |       | +-ProjectScan
    | |       |     |       |   +-column_list=[$array.element#11, $array_offset.off#12, $expr_subquery.$col1#13]
    | |       |     |       |   +-expr_list=
    | |       |     |       |   | +-$col1#13 :=
    | |       |     |       |   |   +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
    | |       |     |       |   |     +-Literal(type=DOUBLE, value=1)
    | |       |     |       |   |     +-Cast(INT64 -> DOUBLE)
    | |       |     |       |   |       +-ColumnRef(type=INT64, column=$array.element#11)
    | |       |     |       |   +-input_scan=
    | |       |     |       |     +-ArrayScan
    | |       |     |       |       +-column_list=[$array.element#11, $array_offset.off#12]
    | |       |     |       |       +-array_expr=
    | |       |     |       |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#10, is_correlated=TRUE)
    | |       |     |       |       +-element_column=$array.element#11
    | |       |     |       |       +-array_offset_column=
    | |       |     |       |         +-ColumnHolder(column=$array_offset.off#12)
    | |       |     |       +-order_by_item_list=
    | |       |     |         +-OrderByItem
    | |       |     |           +-column_ref=
    | |       |     |             +-ColumnRef(type=INT64, column=$array_offset.off#12)
    | |       |     +-Literal(type=ARRAY<DOUBLE>, value=NULL, has_explicit_type=TRUE)
    | |       +-input_scan=
    | |         +-ProjectScan
    | |           +-column_list=[$subquery1.array_to_transform#10]
    | |           +-expr_list=
    | |           | +-array_to_transform#10 := Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |           +-input_scan=
    | |             +-SingleRowScan
    | +-$col2#5 :=
    | | +-SubqueryExpr
    | |   +-type=ARRAY<INT64>
    | |   +-subquery_type=SCALAR
    | |   +-subquery=
    | |     +-ProjectScan
    | |       +-column_list=[$expr_subquery.$col1#18]
    | |       +-expr_list=
    | |       | +-$col1#18 :=
    | |       |   +-FunctionCall(ZetaSQL:iferror(ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    | |       |     +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    | |       |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    | |       |     | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_filter#15)
    | |       |     | +-Literal(type=ARRAY<INT64>, value=NULL)
    | |       |     | +-SubqueryExpr
    | |       |     |   +-type=ARRAY<INT64>
    | |       |     |   +-subquery_type=ARRAY
    | |       |     |   +-parameter_list=
    | |       |     |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_filter#15)
    | |       |     |   +-subquery=
    | |       |     |     +-OrderByScan
    | |       |     |       +-column_list=[$array.element#16]
    | |       |     |       +-is_ordered=TRUE
    | |       |     |       +-input_scan=
    | |       |     |       | +-FilterScan
    | |       |     |       |   +-column_list=[$array.element#16, $array_offset.off#17]
    | |       |     |       |   +-input_scan=
    | |       |     |       |   | +-ArrayScan
    | |       |     |       |   |   +-column_list=[$array.element#16, $array_offset.off#17]
    | |       |     |       |   |   +-array_expr=
    | |       |     |       |   |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_filter#15, is_correlated=TRUE)
    | |       |     |       |   |   +-element_column=$array.element#16
    | |       |     |       |   |   +-array_offset_column=
    | |       |     |       |   |     +-ColumnHolder(column=$array_offset.off#17)
    | |       |     |       |   +-filter_expr=
    | |       |     |       |     +-FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
    | |       |     |       |       +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
    | |       |     |       |       | +-Literal(type=DOUBLE, value=1)
    | |       |     |       |       | +-Cast(INT64 -> DOUBLE)
    | |       |     |       |       |   +-ColumnRef(type=INT64, column=$array.element#16)
    | |       |     |       |       +-Literal(type=DOUBLE, value=0)
    | |       |     |       +-order_by_item_list=
    | |       |     |         +-OrderByItem
    | |       |     |           +-column_ref=
    | |       |     |             +-ColumnRef(type=INT64, column=$array_offset.off#17)
    | |       |     +-Literal(type=ARRAY<INT64>, value=NULL, has_explicit_type=TRUE)
    | |       +-input_scan=
    | |         +-ProjectScan
    | |           +-column_list=[$subquery1.array_to_filter#15]
    | |           +-expr_list=
    | |           | +-array_to_filter#15 := Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |           +-input_scan=
    | |             +-SingleRowScan
    | +-$col3#6 :=
    | | +-SubqueryExpr
    | |   +-type=BOOL
    | |   +-subquery_type=SCALAR
    | |   +-subquery=
    | |     +-ProjectScan
    | |       +-column_list=[$expr_subquery.$col1#23]
    | |       +-expr_list=
    | |       | +-$col1#23 :=
    | |       |   +-FunctionCall(ZetaSQL:iferror(BOOL, BOOL) -> BOOL)
    | |       |     +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
    | |       |     | +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    | |       |     | | +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    | |       |     | | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_search#19)
    | |       |     | | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
    | |       |     | |   +-ColumnRef(type=INT64, column=$subquery1.search_value#20)
    | |       |     | +-Literal(type=BOOL, value=NULL)
    | |       |     | +-SubqueryExpr
    | |       |     |   +-type=BOOL
    | |       |     |   +-subquery_type=EXISTS
    | |       |     |   +-parameter_list=
    | |       |     |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_search#19)
    | |       |     |   | +-ColumnRef(type=INT64, column=$subquery1.search_value#20)
    | |       |     |   +-subquery=
    | |       |     |     +-ProjectScan
    | |       |     |       +-column_list=[$expr_subquery.$col1#22]
    | |       |     |       +-expr_list=
    | |       |     |       | +-$col1#22 := Literal(type=INT64, value=1)
    | |       |     |       +-input_scan=
    | |       |     |         +-FilterScan
    | |       |     |           +-column_list=[$array.element#21]
    | |       |     |           +-input_scan=
    | |       |     |           | +-ArrayScan
    | |       |     |           |   +-column_list=[$array.element#21]
    | |       |     |           |   +-array_expr=
    | |       |     |           |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_search#19, is_correlated=TRUE)
    | |       |     |           |   +-element_column=$array.element#21
    | |       |     |           +-filter_expr=
    | |       |     |             +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    | |       |     |               +-ColumnRef(type=INT64, column=$array.element#21)
    | |       |     |               +-ColumnRef(type=INT64, column=$subquery1.search_value#20, is_correlated=TRUE)
    | |       |     +-Literal(type=BOOL, value=NULL, has_explicit_type=TRUE)
    | |       +-input_scan=
    | |         +-ProjectScan
    | |           +-column_list=$subquery1.[array_to_search#19, search_value#20]
    | |           +-expr_list=
    | |           | +-array_to_search#19 := Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |           | +-search_value#20 := Literal(type=INT64, value=0)
    | |           +-input_scan=
    | |             +-SingleRowScan
    | +-$col4#7 :=
    | | +-SubqueryExpr
    | |   +-type=BOOL
    | |   +-subquery_type=SCALAR
    | |   +-subquery=
    | |     +-ProjectScan
    | |       +-column_list=[$expr_subquery.$col1#27]
    | |       +-expr_list=
    | |       | +-$col1#27 :=
    | |       |   +-FunctionCall(ZetaSQL:iferror(BOOL, BOOL) -> BOOL)
    | |       |     +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
    | |       |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    | |       |     | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_search#24)
    | |       |     | +-Literal(type=BOOL, value=NULL)
    | |       |     | +-SubqueryExpr
    | |       |     |   +-type=BOOL
    | |       |     |   +-subquery_type=EXISTS
    | |       |     |   +-parameter_list=
    | |       |     |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_search#24)
    | |       |     |   +-subquery=
    | |       |     |     +-ProjectScan
    | |       |     |       +-column_list=[$expr_subquery.$col1#26]
    | |       |     |       +-expr_list=
    | |       |     |       | +-$col1#26 := Literal(type=INT64, value=1)
    | |       |     |       +-input_scan=
    | |       |     |         +-FilterScan
    | |       |     |           +-column_list=[$array.element#25]
    | |       |     |           +-input_scan=
    | |       |     |           | +-ArrayScan
    | |       |     |           |   +-column_list=[$array.element#25]
    | |       |     |           |   +-array_expr=
    | |       |     |           |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_search#24, is_correlated=TRUE)
    | |       |     |           |   +-element_column=$array.element#25
    | |       |     |           +-filter_expr=
    | |       |     |             +-FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
    | |       |     |               +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
    | |       |     |               | +-Literal(type=DOUBLE, value=1)
    | |       |     |               | +-Cast(INT64 -> DOUBLE)
    | |       |     |               |   +-ColumnRef(type=INT64, column=$array.element#25)
    | |       |     |               +-Literal(type=DOUBLE, value=0)
    | |       |     +-Literal(type=BOOL, value=NULL, has_explicit_type=TRUE)
    | |       +-input_scan=
    | |         +-ProjectScan
    | |           +-column_list=[$subquery1.array_to_search#24]
    | |           +-expr_list=
    | |           | +-array_to_search#24 := Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |           +-input_scan=
    | |             +-SingleRowScan
    | +-$col5#8 :=
    | | +-SubqueryExpr
    | |   +-type=BOOL
    | |   +-subquery_type=SCALAR
    | |   +-subquery=
    | |     +-ProjectScan
    | |       +-column_list=[$expr_subquery.$col1#32]
    | |       +-expr_list=
    | |       | +-$col1#32 :=
    | |       |   +-FunctionCall(ZetaSQL:iferror(BOOL, BOOL) -> BOOL)
    | |       |     +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
    | |       |     | +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    | |       |     | | +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    | |       |     | | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_search#28)
    | |       |     | | +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    | |       |     | |   +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.search_values#29)
    | |       |     | +-Literal(type=BOOL, value=NULL)
    | |       |     | +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
    | |       |     |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    | |       |     |   | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    | |       |     |   | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.search_values#29)
    | |       |     |   | +-Literal(type=INT64, value=0)
    | |       |     |   +-Literal(type=BOOL, value=true)
    | |       |     |   +-SubqueryExpr
    | |       |     |     +-type=BOOL
    | |       |     |     +-subquery_type=SCALAR
    | |       |     |     +-parameter_list=
    | |       |     |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_search#28)
    | |       |     |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.search_values#29)
    | |       |     |     +-subquery=
    | |       |     |       +-ProjectScan
    | |       |     |         +-column_list=[$aggregate.$agg1#31]
    | |       |     |         +-input_scan=
    | |       |     |           +-AggregateScan
    | |       |     |             +-column_list=[$aggregate.$agg1#31]
    | |       |     |             +-input_scan=
    | |       |     |             | +-ArrayScan
    | |       |     |             |   +-column_list=[$array.element#30]
    | |       |     |             |   +-array_expr=
    | |       |     |             |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.search_values#29, is_correlated=TRUE)
    | |       |     |             |   +-element_column=$array.element#30
    | |       |     |             +-aggregate_list=
    | |       |     |               +-$agg1#31 :=
    | |       |     |                 +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
    | |       |     |                   +-FunctionCall(ZetaSQL:ifnull(BOOL, BOOL) -> BOOL)
    | |       |     |                     +-FunctionCall(ZetaSQL:$in_array(INT64, ARRAY<INT64>) -> BOOL)
    | |       |     |                     | +-ColumnRef(type=INT64, column=$array.element#30)
    | |       |     |                     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_search#28, is_correlated=TRUE)
    | |       |     |                     +-Literal(type=BOOL, value=false)
    | |       |     +-Literal(type=BOOL, value=NULL, has_explicit_type=TRUE)
    | |       +-input_scan=
    | |         +-ProjectScan
    | |           +-column_list=$subquery1.[array_to_search#28, search_values#29]
    | |           +-expr_list=
    | |           | +-array_to_search#28 := Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    | |           | +-search_values#29 := Literal(type=ARRAY<INT64>, value=[1, 0])
    | |           +-input_scan=
    | |             +-SingleRowScan
    | +-$col6#9 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#37]
    |         +-expr_list=
    |         | +-$col1#37 :=
    |         |   +-FunctionCall(ZetaSQL:iferror(BOOL, BOOL) -> BOOL)
    |         |     +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
    |         |     | +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |     | | +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_search#33)
    |         |     | | +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | |   +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.search_values#34)
    |         |     | +-Literal(type=BOOL, value=NULL)
    |         |     | +-SubqueryExpr
    |         |     |   +-type=BOOL
    |         |     |   +-subquery_type=EXISTS
    |         |     |   +-parameter_list=
    |         |     |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_search#33)
    |         |     |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.search_values#34)
    |         |     |   +-subquery=
    |         |     |     +-ProjectScan
    |         |     |       +-column_list=[$expr_subquery.$col1#36]
    |         |     |       +-expr_list=
    |         |     |       | +-$col1#36 := Literal(type=INT64, value=1)
    |         |     |       +-input_scan=
    |         |     |         +-FilterScan
    |         |     |           +-column_list=[$array.element#35]
    |         |     |           +-input_scan=
    |         |     |           | +-ArrayScan
    |         |     |           |   +-column_list=[$array.element#35]
    |         |     |           |   +-array_expr=
    |         |     |           |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_search#33, is_correlated=TRUE)
    |         |     |           |   +-element_column=$array.element#35
    |         |     |           +-filter_expr=
    |         |     |             +-FunctionCall(ZetaSQL:$in_array(INT64, ARRAY<INT64>) -> BOOL)
    |         |     |               +-ColumnRef(type=INT64, column=$array.element#35)
    |         |     |               +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.search_values#34, is_correlated=TRUE)
    |         |     +-Literal(type=BOOL, value=NULL, has_explicit_type=TRUE)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[array_to_search#33, search_values#34]
    |             +-expr_list=
    |             | +-array_to_search#33 := Literal(type=ARRAY<INT64>, value=[-1, 0, 10])
    |             | +-search_values#34 := Literal(type=ARRAY<INT64>, value=[1, 0])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
