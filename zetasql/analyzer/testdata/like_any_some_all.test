[default enabled_ast_rewrites=DEFAULTS]
[default language_features=V_1_3_LIKE_ANY_SOME_ALL]

[no_java]
[language_features={{|V_1_3_LIKE_ANY_SOME_ALL}}]
select 'a' LIKE {{ANY|SOME|ALL}} ('a', 'b', 'c');
--
ALTERNATION GROUP: ANY
--
ERROR: LIKE ANY is not supported [at 1:17]
select 'a' LIKE ANY ('a', 'b', 'c');
                ^
--
ALTERNATION GROUP: SOME
--
ERROR: LIKE SOME is not supported [at 1:17]
select 'a' LIKE SOME ('a', 'b', 'c');
                ^
--
ALTERNATION GROUP: ALL
--
ERROR: LIKE ALL is not supported [at 1:17]
select 'a' LIKE ALL ('a', 'b', 'c');
                ^
--
ALTERNATION GROUPS:
    V_1_3_LIKE_ANY_SOME_ALL,ANY
    V_1_3_LIKE_ANY_SOME_ALL,SOME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$like_any(STRING, repeated(3) STRING) -> BOOL)
    |     +-Literal(type=STRING, value='a')
    |     +-Literal(type=STRING, value='a')
    |     +-Literal(type=STRING, value='b')
    |     +-Literal(type=STRING, value='c')
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#8]
    |         +-expr_list=
    |         | +-$col1#8 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#7]
    |         |         +-expr_list=
    |         |         | +-$col1#7 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#4]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#4
    |         |             +-aggregate_list=
    |         |               +-$agg1#5 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         |               +-$agg2#6 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#2, patterns#3]
    |             +-expr_list=
    |             | +-input#2 := Literal(type=STRING, value="a")
    |             | +-patterns#3 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) STRING) -> ARRAY<STRING>)
    |             |     +-Literal(type=STRING, value='a')
    |             |     +-Literal(type=STRING, value='b')
    |             |     +-Literal(type=STRING, value='c')
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_3_LIKE_ANY_SOME_ALL,ALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$like_all(STRING, repeated(3) STRING) -> BOOL)
    |     +-Literal(type=STRING, value='a')
    |     +-Literal(type=STRING, value='a')
    |     +-Literal(type=STRING, value='b')
    |     +-Literal(type=STRING, value='c')
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#8]
    |         +-expr_list=
    |         | +-$col1#8 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#7]
    |         |         +-expr_list=
    |         |         | +-$col1#7 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |         |     | +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#4]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#4
    |         |             +-aggregate_list=
    |         |               +-$agg1#5 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         |               +-$agg2#6 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#2, patterns#3]
    |             +-expr_list=
    |             | +-input#2 := Literal(type=STRING, value="a")
    |             | +-patterns#3 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) STRING) -> ARRAY<STRING>)
    |             |     +-Literal(type=STRING, value='a')
    |             |     +-Literal(type=STRING, value='b')
    |             |     +-Literal(type=STRING, value='c')
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

select 'a' LIKE {{ANY|SOME|ALL}} (1, 'b', 'c');
--
ALTERNATION GROUP: ANY
--
ERROR: No matching signature for operator LIKE ANY|SOME for argument types literal STRING and {INT64, STRING} [at 1:12]
select 'a' LIKE ANY (1, 'b', 'c');
           ^
--
ALTERNATION GROUP: SOME
--
ERROR: No matching signature for operator LIKE ANY|SOME for argument types literal STRING and {INT64, STRING} [at 1:12]
select 'a' LIKE SOME (1, 'b', 'c');
           ^
--
ALTERNATION GROUP: ALL
--
ERROR: No matching signature for operator LIKE ALL for argument types literal STRING and {INT64, STRING} [at 1:12]
select 'a' LIKE ALL (1, 'b', 'c');
           ^
==

select true LIKE ANY ('abc')
--
ERROR: No matching signature for operator LIKE ANY|SOME for argument types literal BOOL and {STRING} [at 1:13]
select true LIKE ANY ('abc')
            ^
==

select 'abc' NOT LIKE ANY ('abc')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |     +-FunctionCall(ZetaSQL:$like_any(STRING, repeated(1) STRING) -> BOOL)
    |       +-Literal(type=STRING, value='abc')
    |       +-Literal(type=STRING, value='abc')
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |     +-SubqueryExpr
    |       +-type=BOOL
    |       +-subquery_type=SCALAR
    |       +-subquery=
    |         +-ProjectScan
    |           +-column_list=[$expr_subquery.$col1#8]
    |           +-expr_list=
    |           | +-$col1#8 :=
    |           |   +-SubqueryExpr
    |           |     +-type=BOOL
    |           |     +-subquery_type=SCALAR
    |           |     +-parameter_list=
    |           |     | +-ColumnRef(type=STRING, column=$subquery1.input#2)
    |           |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3)
    |           |     +-subquery=
    |           |       +-ProjectScan
    |           |         +-column_list=[$expr_subquery.$col1#7]
    |           |         +-expr_list=
    |           |         | +-$col1#7 :=
    |           |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |           |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |           |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |           |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |           |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |           |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |           |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |           |         |     |   +-Literal(type=INT64, value=0)
    |           |         |     +-Literal(type=BOOL, value=false)
    |           |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |           |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |           |         |     +-Literal(type=BOOL, value=NULL)
    |           |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |           |         |     +-Literal(type=BOOL, value=true)
    |           |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |           |         |     +-Literal(type=BOOL, value=NULL)
    |           |         |     +-Literal(type=BOOL, value=false)
    |           |         +-input_scan=
    |           |           +-AggregateScan
    |           |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |           |             +-input_scan=
    |           |             | +-ArrayScan
    |           |             |   +-column_list=[$array.pattern#4]
    |           |             |   +-array_expr=
    |           |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |           |             |   +-element_column=$array.pattern#4
    |           |             +-aggregate_list=
    |           |               +-$agg1#5 :=
    |           |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |           |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |           |               |     +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |           |               |     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |           |               +-$agg2#6 :=
    |           |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |           |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |           |                     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |           +-input_scan=
    |             +-ProjectScan
    |               +-column_list=$subquery1.[input#2, patterns#3]
    |               +-expr_list=
    |               | +-input#2 := Literal(type=STRING, value="abc")
    |               | +-patterns#3 :=
    |               |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRING) -> ARRAY<STRING>)
    |               |     +-Literal(type=STRING, value='abc')
    |               +-input_scan=
    |                 +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

select 'abc' LIKE ANY 'abc'
--
ERROR: Syntax error: Expected "(" or keyword UNNEST but got string literal 'abc' [at 1:23]
select 'abc' LIKE ANY 'abc'
                      ^
==

SELECT 'Value1' LIKE {{ANY|SOME|ALL}} (Value, 'Value%') FROM KeyValue
--
ALTERNATION GROUPS:
    ANY
    SOME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:$like_any(STRING, repeated(2) STRING) -> BOOL)
    |     +-Literal(type=STRING, value='Value1')
    |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-Literal(type=STRING, value='Value%')
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#10]
    |         +-expr_list=
    |         | +-$col1#10 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#4)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#9]
    |         |         +-expr_list=
    |         |         | +-$col1#9 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#4, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#7)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#8)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#7, $agg2#8]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#6]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#6
    |         |             +-aggregate_list=
    |         |               +-$agg1#7 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#4, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#6)
    |         |               +-$agg2#8 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#6)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#4, patterns#5]
    |             +-expr_list=
    |             | +-input#4 := Literal(type=STRING, value="Value1")
    |             | +-patterns#5 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |             |     +-ColumnRef(type=STRING, column=KeyValue.Value#2, is_correlated=TRUE)
    |             |     +-Literal(type=STRING, value='Value%')
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:$like_all(STRING, repeated(2) STRING) -> BOOL)
    |     +-Literal(type=STRING, value='Value1')
    |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-Literal(type=STRING, value='Value%')
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#10]
    |         +-expr_list=
    |         | +-$col1#10 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#4)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#9]
    |         |         +-expr_list=
    |         |         | +-$col1#9 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#4, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |         |     | +-ColumnRef(type=BOOL, column=$aggregate.$agg1#7)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#8)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#7, $agg2#8]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#6]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#6
    |         |             +-aggregate_list=
    |         |               +-$agg1#7 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#4, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#6)
    |         |               +-$agg2#8 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#6)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#4, patterns#5]
    |             +-expr_list=
    |             | +-input#4 := Literal(type=STRING, value="Value1")
    |             | +-patterns#5 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |             |     +-ColumnRef(type=STRING, column=KeyValue.Value#2, is_correlated=TRUE)
    |             |     +-Literal(type=STRING, value='Value%')
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
==

select NULL LIKE {{ANY|SOME|ALL}} (NULL);
--
ALTERNATION GROUPS:
    ANY
    SOME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$like_any(STRING, repeated(1) STRING) -> BOOL)
    |     +-Literal(type=STRING, value=NULL)
    |     +-Literal(type=STRING, value=NULL)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#8]
    |         +-expr_list=
    |         | +-$col1#8 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#7]
    |         |         +-expr_list=
    |         |         | +-$col1#7 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#4]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#4
    |         |             +-aggregate_list=
    |         |               +-$agg1#5 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         |               +-$agg2#6 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#2, patterns#3]
    |             +-expr_list=
    |             | +-input#2 := Literal(type=STRING, value=NULL)
    |             | +-patterns#3 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRING) -> ARRAY<STRING>)
    |             |     +-Literal(type=STRING, value=NULL)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$like_all(STRING, repeated(1) STRING) -> BOOL)
    |     +-Literal(type=STRING, value=NULL)
    |     +-Literal(type=STRING, value=NULL)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#8]
    |         +-expr_list=
    |         | +-$col1#8 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#7]
    |         |         +-expr_list=
    |         |         | +-$col1#7 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |         |     | +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#4]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#4
    |         |             +-aggregate_list=
    |         |               +-$agg1#5 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         |               +-$agg2#6 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#2, patterns#3]
    |             +-expr_list=
    |             | +-input#2 := Literal(type=STRING, value=NULL)
    |             | +-patterns#3 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRING) -> ARRAY<STRING>)
    |             |     +-Literal(type=STRING, value=NULL)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL]
SELECT 'a' LIKE {{ANY|SOME|ALL}} UNNEST(['a','b','c'])
--
ALTERNATION GROUP: ANY
--
ERROR: The LIKE ANY|SOME|ALL operator does not support an array of patterns; did you mean LIKE ANY (pattern1, pattern2, ...)? [at 1:12]
SELECT 'a' LIKE ANY UNNEST(['a','b','c'])
           ^
--
ALTERNATION GROUP: SOME
--
ERROR: The LIKE ANY|SOME|ALL operator does not support an array of patterns; did you mean LIKE SOME (pattern1, pattern2, ...)? [at 1:12]
SELECT 'a' LIKE SOME UNNEST(['a','b','c'])
           ^
--
ALTERNATION GROUP: ALL
--
ERROR: The LIKE ANY|SOME|ALL operator does not support an array of patterns; did you mean LIKE ALL (pattern1, pattern2, ...)? [at 1:12]
SELECT 'a' LIKE ALL UNNEST(['a','b','c'])
           ^
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY]
select null like {{any|some|all}} unnest(null)
--
ALTERNATION GROUP: any
--
ERROR: Second argument of LIKE ANY|SOME|ALL UNNEST must be an array but was NULL [at 1:13]
select null like any unnest(null)
            ^
--
ALTERNATION GROUP: some
--
ERROR: Second argument of LIKE ANY|SOME|ALL UNNEST must be an array but was NULL [at 1:13]
select null like some unnest(null)
            ^
--
ALTERNATION GROUP: all
--
ERROR: Second argument of LIKE ANY|SOME|ALL UNNEST must be an array but was NULL [at 1:13]
select null like all unnest(null)
            ^
==

select 'a' LIKE {{ANY|SOME|ALL}} (b'a')
--
ALTERNATION GROUP: ANY
--
ERROR: No matching signature for operator LIKE ANY|SOME for argument types literal STRING and {BYTES}. STRING and BYTES are different types that are not directly comparable. To write a BYTES literal, use a b-prefixed literal such as b'bytes value' [at 1:12]
select 'a' LIKE ANY (b'a')
           ^
--
ALTERNATION GROUP: SOME
--
ERROR: No matching signature for operator LIKE ANY|SOME for argument types literal STRING and {BYTES}. STRING and BYTES are different types that are not directly comparable. To write a BYTES literal, use a b-prefixed literal such as b'bytes value' [at 1:12]
select 'a' LIKE SOME (b'a')
           ^
--
ALTERNATION GROUP: ALL
--
ERROR: No matching signature for operator LIKE ALL for argument types literal STRING and {BYTES}. STRING and BYTES are different types that are not directly comparable. To write a BYTES literal, use a b-prefixed literal such as b'bytes value' [at 1:12]
select 'a' LIKE ALL (b'a')
           ^
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY]
select 'a' LIKE {{ANY|SOME|ALL}} UNNEST('a')

--
ALTERNATION GROUP: ANY
--
ERROR: Second argument of LIKE ANY|SOME|ALL UNNEST must be an array but was literal STRING [at 1:12]
select 'a' LIKE ANY UNNEST('a')
           ^
--
ALTERNATION GROUP: SOME
--
ERROR: Second argument of LIKE ANY|SOME|ALL UNNEST must be an array but was literal STRING [at 1:12]
select 'a' LIKE SOME UNNEST('a')
           ^
--
ALTERNATION GROUP: ALL
--
ERROR: Second argument of LIKE ANY|SOME|ALL UNNEST must be an array but was literal STRING [at 1:12]
select 'a' LIKE ALL UNNEST('a')
           ^
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY]
select 'a' LIKE {{ANY|SOME|ALL}} UNNEST([b'a'])
--
ALTERNATION GROUP: ANY
--
ERROR: No matching signature for operator LIKE ANY|SOME UNNEST for argument types: STRING, ARRAY<BYTES>. STRING and BYTES are different types that are not directly comparable. To write a BYTES literal, use a b-prefixed literal such as b'bytes value' [at 1:12]
select 'a' LIKE ANY UNNEST([b'a'])
           ^
--
ALTERNATION GROUP: SOME
--
ERROR: No matching signature for operator LIKE ANY|SOME UNNEST for argument types: STRING, ARRAY<BYTES>. STRING and BYTES are different types that are not directly comparable. To write a BYTES literal, use a b-prefixed literal such as b'bytes value' [at 1:12]
select 'a' LIKE SOME UNNEST([b'a'])
           ^
--
ALTERNATION GROUP: ALL
--
ERROR: No matching signature for operator LIKE ALL UNNEST for argument types: STRING, ARRAY<BYTES>. STRING and BYTES are different types that are not directly comparable. To write a BYTES literal, use a b-prefixed literal such as b'bytes value' [at 1:12]
select 'a' LIKE ALL UNNEST([b'a'])
           ^
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY]
select 'a' LIKE {{ANY|SOME|ALL}} UNNEST(['a', 'b'])

--
ALTERNATION GROUPS:
    ANY
    SOME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$like_any_array(STRING, ARRAY<STRING>) -> BOOL)
    |     +-Literal(type=STRING, value='a')
    |     +-Literal(type=ARRAY<STRING>, value=["a", "b"])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#8]
    |         +-expr_list=
    |         | +-$col1#8 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#7]
    |         |         +-expr_list=
    |         |         | +-$col1#7 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#4]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#4
    |         |             +-aggregate_list=
    |         |               +-$agg1#5 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         |               +-$agg2#6 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#2, patterns#3]
    |             +-expr_list=
    |             | +-input#2 := Literal(type=STRING, value="a")
    |             | +-patterns#3 := Literal(type=ARRAY<STRING>, value=["a", "b"])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$like_all_array(STRING, ARRAY<STRING>) -> BOOL)
    |     +-Literal(type=STRING, value='a')
    |     +-Literal(type=ARRAY<STRING>, value=["a", "b"])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#8]
    |         +-expr_list=
    |         | +-$col1#8 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#7]
    |         |         +-expr_list=
    |         |         | +-$col1#7 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |         |     | +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#4]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#4
    |         |             +-aggregate_list=
    |         |               +-$agg1#5 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         |               +-$agg2#6 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#2, patterns#3]
    |             +-expr_list=
    |             | +-input#2 := Literal(type=STRING, value="a")
    |             | +-patterns#3 := Literal(type=ARRAY<STRING>, value=["a", "b"])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY]
select 'Value1' LIKE {{ANY|SOME|ALL}} UNNEST([Value, 'Value%']) From KeyValue

--
ALTERNATION GROUPS:
    ANY
    SOME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:$like_any_array(STRING, ARRAY<STRING>) -> BOOL)
    |     +-Literal(type=STRING, value='Value1')
    |     +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |       +-Literal(type=STRING, value='Value%')
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#10]
    |         +-expr_list=
    |         | +-$col1#10 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#4)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#9]
    |         |         +-expr_list=
    |         |         | +-$col1#9 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#4, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#7)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#8)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#7, $agg2#8]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#6]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#6
    |         |             +-aggregate_list=
    |         |               +-$agg1#7 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#4, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#6)
    |         |               +-$agg2#8 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#6)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#4, patterns#5]
    |             +-expr_list=
    |             | +-input#4 := Literal(type=STRING, value="Value1")
    |             | +-patterns#5 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |             |     +-ColumnRef(type=STRING, column=KeyValue.Value#2, is_correlated=TRUE)
    |             |     +-Literal(type=STRING, value='Value%')
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:$like_all_array(STRING, ARRAY<STRING>) -> BOOL)
    |     +-Literal(type=STRING, value='Value1')
    |     +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |       +-Literal(type=STRING, value='Value%')
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#10]
    |         +-expr_list=
    |         | +-$col1#10 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#4)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#9]
    |         |         +-expr_list=
    |         |         | +-$col1#9 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#4, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |         |     | +-ColumnRef(type=BOOL, column=$aggregate.$agg1#7)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#8)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#7, $agg2#8]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#6]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#6
    |         |             +-aggregate_list=
    |         |               +-$agg1#7 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#4, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#6)
    |         |               +-$agg2#8 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#6)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#4, patterns#5]
    |             +-expr_list=
    |             | +-input#4 := Literal(type=STRING, value="Value1")
    |             | +-patterns#5 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |             |     +-ColumnRef(type=STRING, column=KeyValue.Value#2, is_correlated=TRUE)
    |             |     +-Literal(type=STRING, value='Value%')
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY]
select 'a' NOT LIKE {{ANY|SOME|ALL}} UNNEST(['a', 'b'])

--
ALTERNATION GROUPS:
    ANY
    SOME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |     +-FunctionCall(ZetaSQL:$like_any_array(STRING, ARRAY<STRING>) -> BOOL)
    |       +-Literal(type=STRING, value='a')
    |       +-Literal(type=ARRAY<STRING>, value=["a", "b"])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |     +-SubqueryExpr
    |       +-type=BOOL
    |       +-subquery_type=SCALAR
    |       +-subquery=
    |         +-ProjectScan
    |           +-column_list=[$expr_subquery.$col1#8]
    |           +-expr_list=
    |           | +-$col1#8 :=
    |           |   +-SubqueryExpr
    |           |     +-type=BOOL
    |           |     +-subquery_type=SCALAR
    |           |     +-parameter_list=
    |           |     | +-ColumnRef(type=STRING, column=$subquery1.input#2)
    |           |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3)
    |           |     +-subquery=
    |           |       +-ProjectScan
    |           |         +-column_list=[$expr_subquery.$col1#7]
    |           |         +-expr_list=
    |           |         | +-$col1#7 :=
    |           |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |           |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |           |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |           |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |           |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |           |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |           |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |           |         |     |   +-Literal(type=INT64, value=0)
    |           |         |     +-Literal(type=BOOL, value=false)
    |           |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |           |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |           |         |     +-Literal(type=BOOL, value=NULL)
    |           |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |           |         |     +-Literal(type=BOOL, value=true)
    |           |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |           |         |     +-Literal(type=BOOL, value=NULL)
    |           |         |     +-Literal(type=BOOL, value=false)
    |           |         +-input_scan=
    |           |           +-AggregateScan
    |           |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |           |             +-input_scan=
    |           |             | +-ArrayScan
    |           |             |   +-column_list=[$array.pattern#4]
    |           |             |   +-array_expr=
    |           |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |           |             |   +-element_column=$array.pattern#4
    |           |             +-aggregate_list=
    |           |               +-$agg1#5 :=
    |           |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |           |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |           |               |     +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |           |               |     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |           |               +-$agg2#6 :=
    |           |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |           |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |           |                     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |           +-input_scan=
    |             +-ProjectScan
    |               +-column_list=$subquery1.[input#2, patterns#3]
    |               +-expr_list=
    |               | +-input#2 := Literal(type=STRING, value="a")
    |               | +-patterns#3 := Literal(type=ARRAY<STRING>, value=["a", "b"])
    |               +-input_scan=
    |                 +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |     +-FunctionCall(ZetaSQL:$like_all_array(STRING, ARRAY<STRING>) -> BOOL)
    |       +-Literal(type=STRING, value='a')
    |       +-Literal(type=ARRAY<STRING>, value=["a", "b"])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |     +-SubqueryExpr
    |       +-type=BOOL
    |       +-subquery_type=SCALAR
    |       +-subquery=
    |         +-ProjectScan
    |           +-column_list=[$expr_subquery.$col1#8]
    |           +-expr_list=
    |           | +-$col1#8 :=
    |           |   +-SubqueryExpr
    |           |     +-type=BOOL
    |           |     +-subquery_type=SCALAR
    |           |     +-parameter_list=
    |           |     | +-ColumnRef(type=STRING, column=$subquery1.input#2)
    |           |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3)
    |           |     +-subquery=
    |           |       +-ProjectScan
    |           |         +-column_list=[$expr_subquery.$col1#7]
    |           |         +-expr_list=
    |           |         | +-$col1#7 :=
    |           |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |           |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |           |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |           |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |           |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |           |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |           |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |           |         |     |   +-Literal(type=INT64, value=0)
    |           |         |     +-Literal(type=BOOL, value=true)
    |           |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |           |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |           |         |     +-Literal(type=BOOL, value=NULL)
    |           |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |           |         |     | +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |           |         |     +-Literal(type=BOOL, value=false)
    |           |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |           |         |     +-Literal(type=BOOL, value=NULL)
    |           |         |     +-Literal(type=BOOL, value=true)
    |           |         +-input_scan=
    |           |           +-AggregateScan
    |           |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |           |             +-input_scan=
    |           |             | +-ArrayScan
    |           |             |   +-column_list=[$array.pattern#4]
    |           |             |   +-array_expr=
    |           |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |           |             |   +-element_column=$array.pattern#4
    |           |             +-aggregate_list=
    |           |               +-$agg1#5 :=
    |           |               | +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
    |           |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |           |               |     +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |           |               |     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |           |               +-$agg2#6 :=
    |           |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |           |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |           |                     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |           +-input_scan=
    |             +-ProjectScan
    |               +-column_list=$subquery1.[input#2, patterns#3]
    |               +-expr_list=
    |               | +-input#2 := Literal(type=STRING, value="a")
    |               | +-patterns#3 := Literal(type=ARRAY<STRING>, value=["a", "b"])
    |               +-input_scan=
    |                 +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY]
select b'a' LIKE {{ANY|SOME|ALL}} UNNEST([b'a', b'b'])

--
ALTERNATION GROUPS:
    ANY
    SOME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$like_any_array(BYTES, ARRAY<BYTES>) -> BOOL)
    |     +-Literal(type=BYTES, value=b"a")
    |     +-Literal(type=ARRAY<BYTES>, value=[b"a", b"b"])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#8]
    |         +-expr_list=
    |         | +-$col1#8 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=BYTES, column=$subquery1.input#2)
    |         |     | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#3)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#7]
    |         |         +-expr_list=
    |         |         | +-$col1#7 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<BYTES>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<BYTES>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(BYTES) -> BOOL)
    |         |         |     | +-ColumnRef(type=BYTES, column=$subquery1.input#2, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#4]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#4
    |         |             +-aggregate_list=
    |         |               +-$agg1#5 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(BYTES, BYTES) -> BOOL)
    |         |               |     +-ColumnRef(type=BYTES, column=$subquery1.input#2, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=BYTES, column=$array.pattern#4)
    |         |               +-$agg2#6 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(BYTES) -> BOOL)
    |         |                     +-ColumnRef(type=BYTES, column=$array.pattern#4)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#2, patterns#3]
    |             +-expr_list=
    |             | +-input#2 := Literal(type=BYTES, value=b"a")
    |             | +-patterns#3 := Literal(type=ARRAY<BYTES>, value=[b"a", b"b"])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$like_all_array(BYTES, ARRAY<BYTES>) -> BOOL)
    |     +-Literal(type=BYTES, value=b"a")
    |     +-Literal(type=ARRAY<BYTES>, value=[b"a", b"b"])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#8]
    |         +-expr_list=
    |         | +-$col1#8 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=BYTES, column=$subquery1.input#2)
    |         |     | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#3)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#7]
    |         |         +-expr_list=
    |         |         | +-$col1#7 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<BYTES>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<BYTES>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(BYTES) -> BOOL)
    |         |         |     | +-ColumnRef(type=BYTES, column=$subquery1.input#2, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |         |     | +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#4]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#4
    |         |             +-aggregate_list=
    |         |               +-$agg1#5 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(BYTES, BYTES) -> BOOL)
    |         |               |     +-ColumnRef(type=BYTES, column=$subquery1.input#2, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=BYTES, column=$array.pattern#4)
    |         |               +-$agg2#6 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(BYTES) -> BOOL)
    |         |                     +-ColumnRef(type=BYTES, column=$array.pattern#4)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#2, patterns#3]
    |             +-expr_list=
    |             | +-input#2 := Literal(type=BYTES, value=b"a")
    |             | +-patterns#3 := Literal(type=ARRAY<BYTES>, value=[b"a", b"b"])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY]
select 'a' LIKE {{ANY|SOME|ALL}} UNNEST([1, 2, 3])
--
ALTERNATION GROUP: ANY
--
ERROR: No matching signature for operator LIKE ANY|SOME UNNEST for argument types: STRING, ARRAY<INT64> [at 1:12]
select 'a' LIKE ANY UNNEST([1, 2, 3])
           ^
--
ALTERNATION GROUP: SOME
--
ERROR: No matching signature for operator LIKE ANY|SOME UNNEST for argument types: STRING, ARRAY<INT64> [at 1:12]
select 'a' LIKE SOME UNNEST([1, 2, 3])
           ^
--
ALTERNATION GROUP: ALL
--
ERROR: No matching signature for operator LIKE ALL UNNEST for argument types: STRING, ARRAY<INT64> [at 1:12]
select 'a' LIKE ALL UNNEST([1, 2, 3])
           ^
==

select ('a', 'b') LIKE ANY ('a');
--
ERROR: No matching signature for operator LIKE ANY|SOME for argument types STRUCT<STRING, STRING> and {STRING} [at 1:19]
select ('a', 'b') LIKE ANY ('a');
                  ^
==

select 'a' LIKE {{ANY|SOME|ALL}} (select 'a')
--
ALTERNATION GROUP: ANY
--
ERROR: The LIKE ANY|SOME|ALL operator does not support subquery expression as patterns. Patterns must be string or bytes; did you mean LIKE ANY|SOME|ALL (pattern1, pattern2, ...)? [at 1:21]
select 'a' LIKE ANY (select 'a')
                    ^
--
ALTERNATION GROUP: SOME
--
ERROR: The LIKE ANY|SOME|ALL operator does not support subquery expression as patterns. Patterns must be string or bytes; did you mean LIKE ANY|SOME|ALL (pattern1, pattern2, ...)? [at 1:22]
select 'a' LIKE SOME (select 'a')
                     ^
--
ALTERNATION GROUP: ALL
--
ERROR: The LIKE ANY|SOME|ALL operator does not support subquery expression as patterns. Patterns must be string or bytes; did you mean LIKE ANY|SOME|ALL (pattern1, pattern2, ...)? [at 1:21]
select 'a' LIKE ALL (select 'a')
                    ^
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_SUBQUERY]
select 1 LIKE {{ANY|SOME|ALL}} (select 1)
--
ALTERNATION GROUP: ANY
--
ERROR: No matching signature for operator LIKE ANY|SOME for argument types literal INT64 and {INT64} [at 1:10]
select 1 LIKE ANY (select 1)
         ^
--
ALTERNATION GROUP: SOME
--
ERROR: No matching signature for operator LIKE ANY|SOME for argument types literal INT64 and {INT64} [at 1:10]
select 1 LIKE SOME (select 1)
         ^
--
ALTERNATION GROUP: ALL
--
ERROR: No matching signature for operator LIKE ALL for argument types literal INT64 and {INT64} [at 1:10]
select 1 LIKE ALL (select 1)
         ^
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_SUBQUERY]
select 'a' LIKE {{ANY|SOME|ALL}} (select 'a')
--
ALTERNATION GROUPS:
    ANY
    SOME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:$like_any(STRING, repeated(1) STRING) -> BOOL)
    |     +-Literal(type=STRING, value='a')
    |     +-SubqueryExpr
    |       +-type=STRING
    |       +-subquery_type=SCALAR
    |       +-subquery=
    |         +-ProjectScan
    |           +-column_list=[$expr_subquery.$col1#1]
    |           +-expr_list=
    |           | +-$col1#1 := Literal(type=STRING, value="a")
    |           +-input_scan=
    |             +-SingleRowScan
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#9]
    |         +-expr_list=
    |         | +-$col1#9 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#3)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#4)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#8]
    |         |         +-expr_list=
    |         |         | +-$col1#8 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#3, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#6)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#7)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#6, $agg2#7]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#5]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#5
    |         |             +-aggregate_list=
    |         |               +-$agg1#6 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#3, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#5)
    |         |               +-$agg2#7 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#5)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#3, patterns#4]
    |             +-expr_list=
    |             | +-input#3 := Literal(type=STRING, value="a")
    |             | +-patterns#4 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRING) -> ARRAY<STRING>)
    |             |     +-SubqueryExpr
    |             |       +-type=STRING
    |             |       +-subquery_type=SCALAR
    |             |       +-subquery=
    |             |         +-ProjectScan
    |             |           +-column_list=[$expr_subquery.$col1#1]
    |             |           +-expr_list=
    |             |           | +-$col1#1 := Literal(type=STRING, value="a")
    |             |           +-input_scan=
    |             |             +-SingleRowScan
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:$like_all(STRING, repeated(1) STRING) -> BOOL)
    |     +-Literal(type=STRING, value='a')
    |     +-SubqueryExpr
    |       +-type=STRING
    |       +-subquery_type=SCALAR
    |       +-subquery=
    |         +-ProjectScan
    |           +-column_list=[$expr_subquery.$col1#1]
    |           +-expr_list=
    |           | +-$col1#1 := Literal(type=STRING, value="a")
    |           +-input_scan=
    |             +-SingleRowScan
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#9]
    |         +-expr_list=
    |         | +-$col1#9 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#3)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#4)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#8]
    |         |         +-expr_list=
    |         |         | +-$col1#8 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#3, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |         |     | +-ColumnRef(type=BOOL, column=$aggregate.$agg1#6)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#7)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#6, $agg2#7]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#5]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#5
    |         |             +-aggregate_list=
    |         |               +-$agg1#6 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#3, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#5)
    |         |               +-$agg2#7 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#5)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#3, patterns#4]
    |             +-expr_list=
    |             | +-input#3 := Literal(type=STRING, value="a")
    |             | +-patterns#4 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRING) -> ARRAY<STRING>)
    |             |     +-SubqueryExpr
    |             |       +-type=STRING
    |             |       +-subquery_type=SCALAR
    |             |       +-subquery=
    |             |         +-ProjectScan
    |             |           +-column_list=[$expr_subquery.$col1#1]
    |             |           +-expr_list=
    |             |           | +-$col1#1 := Literal(type=STRING, value="a")
    |             |           +-input_scan=
    |             |             +-SingleRowScan
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_SUBQUERY]
select b'a' LIKE {{ANY|SOME|ALL}} (select b'a')
--
ALTERNATION GROUPS:
    ANY
    SOME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:$like_any(BYTES, repeated(1) BYTES) -> BOOL)
    |     +-Literal(type=BYTES, value=b"a")
    |     +-SubqueryExpr
    |       +-type=BYTES
    |       +-subquery_type=SCALAR
    |       +-subquery=
    |         +-ProjectScan
    |           +-column_list=[$expr_subquery.$col1#1]
    |           +-expr_list=
    |           | +-$col1#1 := Literal(type=BYTES, value=b"a")
    |           +-input_scan=
    |             +-SingleRowScan
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#9]
    |         +-expr_list=
    |         | +-$col1#9 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=BYTES, column=$subquery1.input#3)
    |         |     | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#4)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#8]
    |         |         +-expr_list=
    |         |         | +-$col1#8 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<BYTES>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<BYTES>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(BYTES) -> BOOL)
    |         |         |     | +-ColumnRef(type=BYTES, column=$subquery1.input#3, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#6)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#7)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#6, $agg2#7]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#5]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#5
    |         |             +-aggregate_list=
    |         |               +-$agg1#6 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(BYTES, BYTES) -> BOOL)
    |         |               |     +-ColumnRef(type=BYTES, column=$subquery1.input#3, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=BYTES, column=$array.pattern#5)
    |         |               +-$agg2#7 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(BYTES) -> BOOL)
    |         |                     +-ColumnRef(type=BYTES, column=$array.pattern#5)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#3, patterns#4]
    |             +-expr_list=
    |             | +-input#3 := Literal(type=BYTES, value=b"a")
    |             | +-patterns#4 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) BYTES) -> ARRAY<BYTES>)
    |             |     +-SubqueryExpr
    |             |       +-type=BYTES
    |             |       +-subquery_type=SCALAR
    |             |       +-subquery=
    |             |         +-ProjectScan
    |             |           +-column_list=[$expr_subquery.$col1#1]
    |             |           +-expr_list=
    |             |           | +-$col1#1 := Literal(type=BYTES, value=b"a")
    |             |           +-input_scan=
    |             |             +-SingleRowScan
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:$like_all(BYTES, repeated(1) BYTES) -> BOOL)
    |     +-Literal(type=BYTES, value=b"a")
    |     +-SubqueryExpr
    |       +-type=BYTES
    |       +-subquery_type=SCALAR
    |       +-subquery=
    |         +-ProjectScan
    |           +-column_list=[$expr_subquery.$col1#1]
    |           +-expr_list=
    |           | +-$col1#1 := Literal(type=BYTES, value=b"a")
    |           +-input_scan=
    |             +-SingleRowScan
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#9]
    |         +-expr_list=
    |         | +-$col1#9 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=BYTES, column=$subquery1.input#3)
    |         |     | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#4)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#8]
    |         |         +-expr_list=
    |         |         | +-$col1#8 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<BYTES>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<BYTES>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(BYTES) -> BOOL)
    |         |         |     | +-ColumnRef(type=BYTES, column=$subquery1.input#3, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |         |     | +-ColumnRef(type=BOOL, column=$aggregate.$agg1#6)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#7)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#6, $agg2#7]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#5]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<BYTES>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#5
    |         |             +-aggregate_list=
    |         |               +-$agg1#6 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(BYTES, BYTES) -> BOOL)
    |         |               |     +-ColumnRef(type=BYTES, column=$subquery1.input#3, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=BYTES, column=$array.pattern#5)
    |         |               +-$agg2#7 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(BYTES) -> BOOL)
    |         |                     +-ColumnRef(type=BYTES, column=$array.pattern#5)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#3, patterns#4]
    |             +-expr_list=
    |             | +-input#3 := Literal(type=BYTES, value=b"a")
    |             | +-patterns#4 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) BYTES) -> ARRAY<BYTES>)
    |             |     +-SubqueryExpr
    |             |       +-type=BYTES
    |             |       +-subquery_type=SCALAR
    |             |       +-subquery=
    |             |         +-ProjectScan
    |             |           +-column_list=[$expr_subquery.$col1#1]
    |             |           +-expr_list=
    |             |           | +-$col1#1 := Literal(type=BYTES, value=b"a")
    |             |           +-input_scan=
    |             |             +-SingleRowScan
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_SUBQUERY]
select b'a' LIKE {{ANY|SOME|ALL}} (select 'test')
--
ALTERNATION GROUP: ANY
--
ERROR: No matching signature for operator LIKE ANY|SOME for argument types literal BYTES and {STRING} [at 1:13]
select b'a' LIKE ANY (select 'test')
            ^
--
ALTERNATION GROUP: SOME
--
ERROR: No matching signature for operator LIKE ANY|SOME for argument types literal BYTES and {STRING} [at 1:13]
select b'a' LIKE SOME (select 'test')
            ^
--
ALTERNATION GROUP: ALL
--
ERROR: No matching signature for operator LIKE ALL for argument types literal BYTES and {STRING} [at 1:13]
select b'a' LIKE ALL (select 'test')
            ^
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_SUBQUERY]
select 'a' NOT LIKE ANY (select 'b')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |     +-FunctionCall(ZetaSQL:$like_any(STRING, repeated(1) STRING) -> BOOL)
    |       +-Literal(type=STRING, value='a')
    |       +-SubqueryExpr
    |         +-type=STRING
    |         +-subquery_type=SCALAR
    |         +-subquery=
    |           +-ProjectScan
    |             +-column_list=[$expr_subquery.$col1#1]
    |             +-expr_list=
    |             | +-$col1#1 := Literal(type=STRING, value="b")
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |     +-SubqueryExpr
    |       +-type=BOOL
    |       +-subquery_type=SCALAR
    |       +-subquery=
    |         +-ProjectScan
    |           +-column_list=[$expr_subquery.$col1#9]
    |           +-expr_list=
    |           | +-$col1#9 :=
    |           |   +-SubqueryExpr
    |           |     +-type=BOOL
    |           |     +-subquery_type=SCALAR
    |           |     +-parameter_list=
    |           |     | +-ColumnRef(type=STRING, column=$subquery1.input#3)
    |           |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#4)
    |           |     +-subquery=
    |           |       +-ProjectScan
    |           |         +-column_list=[$expr_subquery.$col1#8]
    |           |         +-expr_list=
    |           |         | +-$col1#8 :=
    |           |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |           |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |           |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |           |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |           |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |           |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |           |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |           |         |     |   +-Literal(type=INT64, value=0)
    |           |         |     +-Literal(type=BOOL, value=false)
    |           |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |           |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#3, is_correlated=TRUE)
    |           |         |     +-Literal(type=BOOL, value=NULL)
    |           |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#6)
    |           |         |     +-Literal(type=BOOL, value=true)
    |           |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#7)
    |           |         |     +-Literal(type=BOOL, value=NULL)
    |           |         |     +-Literal(type=BOOL, value=false)
    |           |         +-input_scan=
    |           |           +-AggregateScan
    |           |             +-column_list=$aggregate.[$agg1#6, $agg2#7]
    |           |             +-input_scan=
    |           |             | +-ArrayScan
    |           |             |   +-column_list=[$array.pattern#5]
    |           |             |   +-array_expr=
    |           |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#4, is_correlated=TRUE)
    |           |             |   +-element_column=$array.pattern#5
    |           |             +-aggregate_list=
    |           |               +-$agg1#6 :=
    |           |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |           |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |           |               |     +-ColumnRef(type=STRING, column=$subquery1.input#3, is_correlated=TRUE)
    |           |               |     +-ColumnRef(type=STRING, column=$array.pattern#5)
    |           |               +-$agg2#7 :=
    |           |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |           |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |           |                     +-ColumnRef(type=STRING, column=$array.pattern#5)
    |           +-input_scan=
    |             +-ProjectScan
    |               +-column_list=$subquery1.[input#3, patterns#4]
    |               +-expr_list=
    |               | +-input#3 := Literal(type=STRING, value="a")
    |               | +-patterns#4 :=
    |               |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRING) -> ARRAY<STRING>)
    |               |     +-SubqueryExpr
    |               |       +-type=STRING
    |               |       +-subquery_type=SCALAR
    |               |       +-subquery=
    |               |         +-ProjectScan
    |               |           +-column_list=[$expr_subquery.$col1#1]
    |               |           +-expr_list=
    |               |           | +-$col1#1 := Literal(type=STRING, value="b")
    |               |           +-input_scan=
    |               |             +-SingleRowScan
    |               +-input_scan=
    |                 +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_SUBQUERY]
select 'a' NOT LIKE {{ANY|SOME|ALL}} (select 'a', 'b')
--
ALTERNATION GROUP: ANY
--
ERROR: Scalar subquery cannot have more than one column unless using SELECT AS STRUCT to build STRUCT values [at 1:25]
select 'a' NOT LIKE ANY (select 'a', 'b')
                        ^
--
ALTERNATION GROUP: SOME
--
ERROR: Scalar subquery cannot have more than one column unless using SELECT AS STRUCT to build STRUCT values [at 1:26]
select 'a' NOT LIKE SOME (select 'a', 'b')
                         ^
--
ALTERNATION GROUP: ALL
--
ERROR: Scalar subquery cannot have more than one column unless using SELECT AS STRUCT to build STRUCT values [at 1:25]
select 'a' NOT LIKE ALL (select 'a', 'b')
                        ^
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_SUBQUERY]
select 'a' LIKE {{ANY|SOME|ALL}} ( (select 'a'), (select 'b') )
--
ALTERNATION GROUPS:
    ANY
    SOME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:$like_any(STRING, repeated(2) STRING) -> BOOL)
    |     +-Literal(type=STRING, value='a')
    |     +-SubqueryExpr
    |     | +-type=STRING
    |     | +-subquery_type=SCALAR
    |     | +-subquery=
    |     |   +-ProjectScan
    |     |     +-column_list=[$expr_subquery.$col1#1]
    |     |     +-expr_list=
    |     |     | +-$col1#1 := Literal(type=STRING, value="a")
    |     |     +-input_scan=
    |     |       +-SingleRowScan
    |     +-SubqueryExpr
    |       +-type=STRING
    |       +-subquery_type=SCALAR
    |       +-subquery=
    |         +-ProjectScan
    |           +-column_list=[$expr_subquery.$col1#2]
    |           +-expr_list=
    |           | +-$col1#2 := Literal(type=STRING, value="b")
    |           +-input_scan=
    |             +-SingleRowScan
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#10]
    |         +-expr_list=
    |         | +-$col1#10 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#4)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#9]
    |         |         +-expr_list=
    |         |         | +-$col1#9 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#4, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#7)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#8)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#7, $agg2#8]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#6]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#6
    |         |             +-aggregate_list=
    |         |               +-$agg1#7 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#4, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#6)
    |         |               +-$agg2#8 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#6)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#4, patterns#5]
    |             +-expr_list=
    |             | +-input#4 := Literal(type=STRING, value="a")
    |             | +-patterns#5 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |             |     +-SubqueryExpr
    |             |     | +-type=STRING
    |             |     | +-subquery_type=SCALAR
    |             |     | +-subquery=
    |             |     |   +-ProjectScan
    |             |     |     +-column_list=[$expr_subquery.$col1#1]
    |             |     |     +-expr_list=
    |             |     |     | +-$col1#1 := Literal(type=STRING, value="a")
    |             |     |     +-input_scan=
    |             |     |       +-SingleRowScan
    |             |     +-SubqueryExpr
    |             |       +-type=STRING
    |             |       +-subquery_type=SCALAR
    |             |       +-subquery=
    |             |         +-ProjectScan
    |             |           +-column_list=[$expr_subquery.$col1#2]
    |             |           +-expr_list=
    |             |           | +-$col1#2 := Literal(type=STRING, value="b")
    |             |           +-input_scan=
    |             |             +-SingleRowScan
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:$like_all(STRING, repeated(2) STRING) -> BOOL)
    |     +-Literal(type=STRING, value='a')
    |     +-SubqueryExpr
    |     | +-type=STRING
    |     | +-subquery_type=SCALAR
    |     | +-subquery=
    |     |   +-ProjectScan
    |     |     +-column_list=[$expr_subquery.$col1#1]
    |     |     +-expr_list=
    |     |     | +-$col1#1 := Literal(type=STRING, value="a")
    |     |     +-input_scan=
    |     |       +-SingleRowScan
    |     +-SubqueryExpr
    |       +-type=STRING
    |       +-subquery_type=SCALAR
    |       +-subquery=
    |         +-ProjectScan
    |           +-column_list=[$expr_subquery.$col1#2]
    |           +-expr_list=
    |           | +-$col1#2 := Literal(type=STRING, value="b")
    |           +-input_scan=
    |             +-SingleRowScan
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#10]
    |         +-expr_list=
    |         | +-$col1#10 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#4)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#9]
    |         |         +-expr_list=
    |         |         | +-$col1#9 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#4, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |         |     | +-ColumnRef(type=BOOL, column=$aggregate.$agg1#7)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#8)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#7, $agg2#8]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#6]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#5, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#6
    |         |             +-aggregate_list=
    |         |               +-$agg1#7 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#4, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#6)
    |         |               +-$agg2#8 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#6)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#4, patterns#5]
    |             +-expr_list=
    |             | +-input#4 := Literal(type=STRING, value="a")
    |             | +-patterns#5 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |             |     +-SubqueryExpr
    |             |     | +-type=STRING
    |             |     | +-subquery_type=SCALAR
    |             |     | +-subquery=
    |             |     |   +-ProjectScan
    |             |     |     +-column_list=[$expr_subquery.$col1#1]
    |             |     |     +-expr_list=
    |             |     |     | +-$col1#1 := Literal(type=STRING, value="a")
    |             |     |     +-input_scan=
    |             |     |       +-SingleRowScan
    |             |     +-SubqueryExpr
    |             |       +-type=STRING
    |             |       +-subquery_type=SCALAR
    |             |       +-subquery=
    |             |         +-ProjectScan
    |             |           +-column_list=[$expr_subquery.$col1#2]
    |             |           +-expr_list=
    |             |           | +-$col1#2 := Literal(type=STRING, value="b")
    |             |           +-input_scan=
    |             |             +-SingleRowScan
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_SUBQUERY]
select *
from TestTable T
where T.KitchenSink.string_val
      LIKE ANY
      (select * from T.KitchenSink.repeated_string_val)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2], alias="T")
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$like_any(STRING, repeated(1) STRING) -> BOOL)
            +-GetProtoField
            | +-type=STRING
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=string_val
            | +-default_value="default_name"
            +-SubqueryExpr
              +-type=STRING
              +-subquery_type=SCALAR
              +-parameter_list=
              | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
              +-subquery=
                +-ProjectScan
                  +-column_list=[$array.repeated_string_val#4]
                  +-input_scan=
                    +-ArrayScan
                      +-column_list=[$array.repeated_string_val#4]
                      +-array_expr=
                      | +-GetProtoField
                      |   +-type=ARRAY<STRING>
                      |   +-expr=
                      |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                      |   +-field_descriptor=repeated_string_val
                      |   +-default_value=[]
                      +-element_column=$array.repeated_string_val#4

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2], alias="T")
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=SCALAR
            +-parameter_list=
            | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            +-subquery=
              +-ProjectScan
                +-column_list=[$expr_subquery.$col1#11]
                +-expr_list=
                | +-$col1#11 :=
                |   +-SubqueryExpr
                |     +-type=BOOL
                |     +-subquery_type=SCALAR
                |     +-parameter_list=
                |     | +-ColumnRef(type=STRING, column=$subquery1.input#5)
                |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#6)
                |     +-subquery=
                |       +-ProjectScan
                |         +-column_list=[$expr_subquery.$col1#10]
                |         +-expr_list=
                |         | +-$col1#10 :=
                |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
                |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
                |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
                |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#6, is_correlated=TRUE)
                |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
                |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#6, is_correlated=TRUE)
                |         |     |   +-Literal(type=INT64, value=0)
                |         |     +-Literal(type=BOOL, value=false)
                |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
                |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#5, is_correlated=TRUE)
                |         |     +-Literal(type=BOOL, value=NULL)
                |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#8)
                |         |     +-Literal(type=BOOL, value=true)
                |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#9)
                |         |     +-Literal(type=BOOL, value=NULL)
                |         |     +-Literal(type=BOOL, value=false)
                |         +-input_scan=
                |           +-AggregateScan
                |             +-column_list=$aggregate.[$agg1#8, $agg2#9]
                |             +-input_scan=
                |             | +-ArrayScan
                |             |   +-column_list=[$array.pattern#7]
                |             |   +-array_expr=
                |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#6, is_correlated=TRUE)
                |             |   +-element_column=$array.pattern#7
                |             +-aggregate_list=
                |               +-$agg1#8 :=
                |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
                |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
                |               |     +-ColumnRef(type=STRING, column=$subquery1.input#5, is_correlated=TRUE)
                |               |     +-ColumnRef(type=STRING, column=$array.pattern#7)
                |               +-$agg2#9 :=
                |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
                |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
                |                     +-ColumnRef(type=STRING, column=$array.pattern#7)
                +-input_scan=
                  +-ProjectScan
                    +-column_list=$subquery1.[input#5, patterns#6]
                    +-expr_list=
                    | +-input#5 :=
                    | | +-GetProtoField
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                    | |   +-field_descriptor=string_val
                    | |   +-default_value="default_name"
                    | +-patterns#6 :=
                    |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRING) -> ARRAY<STRING>)
                    |     +-SubqueryExpr
                    |       +-type=STRING
                    |       +-subquery_type=SCALAR
                    |       +-parameter_list=
                    |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                    |       +-subquery=
                    |         +-ProjectScan
                    |           +-column_list=[$array.repeated_string_val#4]
                    |           +-input_scan=
                    |             +-ArrayScan
                    |               +-column_list=[$array.repeated_string_val#4]
                    |               +-array_expr=
                    |               | +-GetProtoField
                    |               |   +-type=ARRAY<STRING>
                    |               |   +-expr=
                    |               |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                    |               |   +-field_descriptor=repeated_string_val
                    |               |   +-default_value=[]
                    |               +-element_column=$array.repeated_string_val#4
                    +-input_scan=
                      +-SingleRowScan
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY]
select *
from TestTable T
where T.KitchenSink.string_val LIKE ANY UNNEST(ARRAY(select T.KitchenSink.repeated_string_val))
--
ERROR: Cannot use array subquery with column of type ARRAY<STRING> because nested arrays are not supported [at 3:48]
where T.KitchenSink.string_val LIKE ANY UNNEST(ARRAY(select T.KitchenSink.rep...
                                               ^
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY]
select *
from TestTable T
where T.KitchenSink.string_val LIKE ANY UNNEST(ARRAY(select T.KitchenSink.string_val))
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2], alias="T")
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$like_any_array(STRING, ARRAY<STRING>) -> BOOL)
            +-GetProtoField
            | +-type=STRING
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=string_val
            | +-default_value="default_name"
            +-SubqueryExpr
              +-type=ARRAY<STRING>
              +-subquery_type=ARRAY
              +-parameter_list=
              | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
              +-subquery=
                +-ProjectScan
                  +-column_list=[$expr_subquery.string_val#4]
                  +-expr_list=
                  | +-string_val#4 :=
                  |   +-GetProtoField
                  |     +-type=STRING
                  |     +-expr=
                  |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                  |     +-field_descriptor=string_val
                  |     +-default_value="default_name"
                  +-input_scan=
                    +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2], alias="T")
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=SCALAR
            +-parameter_list=
            | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            +-subquery=
              +-ProjectScan
                +-column_list=[$expr_subquery.$col1#11]
                +-expr_list=
                | +-$col1#11 :=
                |   +-SubqueryExpr
                |     +-type=BOOL
                |     +-subquery_type=SCALAR
                |     +-parameter_list=
                |     | +-ColumnRef(type=STRING, column=$subquery1.input#5)
                |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#6)
                |     +-subquery=
                |       +-ProjectScan
                |         +-column_list=[$expr_subquery.$col1#10]
                |         +-expr_list=
                |         | +-$col1#10 :=
                |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
                |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
                |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
                |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#6, is_correlated=TRUE)
                |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
                |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#6, is_correlated=TRUE)
                |         |     |   +-Literal(type=INT64, value=0)
                |         |     +-Literal(type=BOOL, value=false)
                |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
                |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#5, is_correlated=TRUE)
                |         |     +-Literal(type=BOOL, value=NULL)
                |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#8)
                |         |     +-Literal(type=BOOL, value=true)
                |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#9)
                |         |     +-Literal(type=BOOL, value=NULL)
                |         |     +-Literal(type=BOOL, value=false)
                |         +-input_scan=
                |           +-AggregateScan
                |             +-column_list=$aggregate.[$agg1#8, $agg2#9]
                |             +-input_scan=
                |             | +-ArrayScan
                |             |   +-column_list=[$array.pattern#7]
                |             |   +-array_expr=
                |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#6, is_correlated=TRUE)
                |             |   +-element_column=$array.pattern#7
                |             +-aggregate_list=
                |               +-$agg1#8 :=
                |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
                |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
                |               |     +-ColumnRef(type=STRING, column=$subquery1.input#5, is_correlated=TRUE)
                |               |     +-ColumnRef(type=STRING, column=$array.pattern#7)
                |               +-$agg2#9 :=
                |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
                |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
                |                     +-ColumnRef(type=STRING, column=$array.pattern#7)
                +-input_scan=
                  +-ProjectScan
                    +-column_list=$subquery1.[input#5, patterns#6]
                    +-expr_list=
                    | +-input#5 :=
                    | | +-GetProtoField
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                    | |   +-field_descriptor=string_val
                    | |   +-default_value="default_name"
                    | +-patterns#6 :=
                    |   +-SubqueryExpr
                    |     +-type=ARRAY<STRING>
                    |     +-subquery_type=ARRAY
                    |     +-parameter_list=
                    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                    |     +-subquery=
                    |       +-ProjectScan
                    |         +-column_list=[$expr_subquery.string_val#4]
                    |         +-expr_list=
                    |         | +-string_val#4 :=
                    |         |   +-GetProtoField
                    |         |     +-type=STRING
                    |         |     +-expr=
                    |         |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                    |         |     +-field_descriptor=string_val
                    |         |     +-default_value="default_name"
                    |         +-input_scan=
                    |           +-SingleRowScan
                    +-input_scan=
                      +-SingleRowScan
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_SUBQUERY]
select 'a' LIKE ANY (select NULL)
--
ERROR: No matching signature for operator LIKE ANY|SOME for argument types literal STRING and {INT64} [at 1:12]
select 'a' LIKE ANY (select NULL)
           ^
==

[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_SUBQUERY]
SELECT KitchenSink.string_val LIKE ANY (SELECT CONCAT(KitchenSink.string_val, TestTable.KitchenSink.MIXED_case)) FROM TestTable;

--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-FunctionCall(ZetaSQL:$like_any(STRING, repeated(1) STRING) -> BOOL)
    |     +-GetProtoField
    |     | +-type=STRING
    |     | +-expr=
    |     | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     | +-field_descriptor=string_val
    |     | +-default_value="default_name"
    |     +-SubqueryExpr
    |       +-type=STRING
    |       +-subquery_type=SCALAR
    |       +-parameter_list=
    |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |       +-subquery=
    |         +-ProjectScan
    |           +-column_list=[$expr_subquery.$col1#4]
    |           +-expr_list=
    |           | +-$col1#4 :=
    |           |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
    |           |     +-GetProtoField
    |           |     | +-type=STRING
    |           |     | +-expr=
    |           |     | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |           |     | +-field_descriptor=string_val
    |           |     | +-default_value="default_name"
    |           |     +-GetProtoField
    |           |       +-type=STRING
    |           |       +-expr=
    |           |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |           |       +-field_descriptor=MIXED_case
    |           |       +-default_value=""
    |           +-input_scan=
    |             +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#12]
    |         +-expr_list=
    |         | +-$col1#12 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#6)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#7)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#11]
    |         |         +-expr_list=
    |         |         | +-$col1#11 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#7, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#7, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#6, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#9)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#10)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#9, $agg2#10]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#8]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#7, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#8
    |         |             +-aggregate_list=
    |         |               +-$agg1#9 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#6, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#8)
    |         |               +-$agg2#10 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#8)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#6, patterns#7]
    |             +-expr_list=
    |             | +-input#6 :=
    |             | | +-GetProtoField
    |             | |   +-type=STRING
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |             | |   +-field_descriptor=string_val
    |             | |   +-default_value="default_name"
    |             | +-patterns#7 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRING) -> ARRAY<STRING>)
    |             |     +-SubqueryExpr
    |             |       +-type=STRING
    |             |       +-subquery_type=SCALAR
    |             |       +-parameter_list=
    |             |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |             |       +-subquery=
    |             |         +-ProjectScan
    |             |           +-column_list=[$expr_subquery.$col1#4]
    |             |           +-expr_list=
    |             |           | +-$col1#4 :=
    |             |           |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
    |             |           |     +-GetProtoField
    |             |           |     | +-type=STRING
    |             |           |     | +-expr=
    |             |           |     | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |             |           |     | +-field_descriptor=string_val
    |             |           |     | +-default_value="default_name"
    |             |           |     +-GetProtoField
    |             |           |       +-type=STRING
    |             |           |       +-expr=
    |             |           |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |             |           |       +-field_descriptor=MIXED_case
    |             |           |       +-default_value=""
    |             |           +-input_scan=
    |             |             +-SingleRowScan
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

# Test collation for LIKE ANY|SOME with CI collation on one of the RHS elements.
[no_java]
[language_features=V_1_3_ANNOTATION_FRAMEWORK,V_1_3_COLLATION_SUPPORT,V_1_3_LIKE_ANY_SOME_ALL]
[enabled_ast_rewrites=DEFAULTS]
SELECT 'Google' LIKE {{ANY|SOME}} (collate('%google%', 'und:ci'), 'XXX')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$like_any(STRING, repeated(2) STRING) -> BOOL)
    |     +-Literal(type=STRING, value='Google')
    |     +-FunctionCall(ZetaSQL:collate(STRING, STRING) -> STRING)
    |     | +-type_annotation_map={Collation:"und:ci"}
    |     | +-Literal(type=STRING, value='%google%')
    |     | +-Literal(type=STRING, value="und:ci", preserve_in_literal_remover=TRUE)
    |     +-Literal(type=STRING, value='XXX')
    |     +-collation_list=[und:ci]
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#8]
    |         +-expr_list=
    |         | +-$col1#8 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, type_annotation_map=[{Collation:"und:ci"}], column=$subquery1.patterns#3[{Collation:"und:ci"}])
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#7]
    |         |         +-expr_list=
    |         |         | +-$col1#7 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, type_annotation_map=[{Collation:"und:ci"}], column=$subquery1.patterns#3[{Collation:"und:ci"}], is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, type_annotation_map=[{Collation:"und:ci"}], column=$subquery1.patterns#3[{Collation:"und:ci"}], is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#4{Collation:"und:ci"}]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, type_annotation_map=[{Collation:"und:ci"}], column=$subquery1.patterns#3[{Collation:"und:ci"}], is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#4{Collation:"und:ci"}
    |         |             +-aggregate_list=
    |         |               +-$agg1#5 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, type_annotation_map={Collation:"und:ci"}, column=$array.pattern#4{Collation:"und:ci"})
    |         |               |     +-collation_list=[und:ci]
    |         |               +-$agg2#6 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, type_annotation_map={Collation:"und:ci"}, column=$array.pattern#4{Collation:"und:ci"})
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#2, patterns#3]
    |             +-expr_list=
    |             | +-input#2 := Literal(type=STRING, value="Google")
    |             | +-patterns#3 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |             |     +-type_annotation_map=[{Collation:"und:ci"}]
    |             |     +-FunctionCall(ZetaSQL:collate(STRING, STRING) -> STRING)
    |             |     | +-type_annotation_map={Collation:"und:ci"}
    |             |     | +-Literal(type=STRING, value='%google%')
    |             |     | +-Literal(type=STRING, value="und:ci", preserve_in_literal_remover=TRUE)
    |             |     +-Literal(type=STRING, value='XXX')
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan

==

# Test collation for LIKE ANY|SOME with CI collation on LHS element.
[no_java]
[language_features=V_1_3_ANNOTATION_FRAMEWORK,V_1_3_COLLATION_SUPPORT,V_1_3_LIKE_ANY_SOME_ALL]
[enabled_ast_rewrites=DEFAULTS]
SELECT collate('Google', 'und:ci') LIKE {{ANY|SOME}} ('%GoOgLe%', 'XXX')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$like_any(STRING, repeated(2) STRING) -> BOOL)
    |     +-FunctionCall(ZetaSQL:collate(STRING, STRING) -> STRING)
    |     | +-type_annotation_map={Collation:"und:ci"}
    |     | +-Literal(type=STRING, value='Google')
    |     | +-Literal(type=STRING, value="und:ci", preserve_in_literal_remover=TRUE)
    |     +-Literal(type=STRING, value='%GoOgLe%')
    |     +-Literal(type=STRING, value='XXX')
    |     +-collation_list=[und:ci]
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#8]
    |         +-expr_list=
    |         | +-$col1#8 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, type_annotation_map={Collation:"und:ci"}, column=$subquery1.input#2{Collation:"und:ci"})
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#7]
    |         |         +-expr_list=
    |         |         | +-$col1#7 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, type_annotation_map={Collation:"und:ci"}, column=$subquery1.input#2{Collation:"und:ci"}, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#4]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#4
    |         |             +-aggregate_list=
    |         |               +-$agg1#5 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, type_annotation_map={Collation:"und:ci"}, column=$subquery1.input#2{Collation:"und:ci"}, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         |               |     +-collation_list=[und:ci]
    |         |               +-$agg2#6 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#2, patterns#3]
    |             +-expr_list=
    |             | +-input#2 :=
    |             | | +-FunctionCall(ZetaSQL:collate(STRING, STRING) -> STRING)
    |             | |   +-type_annotation_map={Collation:"und:ci"}
    |             | |   +-Literal(type=STRING, value='Google')
    |             | |   +-Literal(type=STRING, value="und:ci", preserve_in_literal_remover=TRUE)
    |             | +-patterns#3 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |             |     +-Literal(type=STRING, value='%GoOgLe%')
    |             |     +-Literal(type=STRING, value='XXX')
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan

==

# Test collation for LIKE ALL with CI collation on one of the RHS elements.
[no_java]
[language_features=V_1_3_ANNOTATION_FRAMEWORK,V_1_3_COLLATION_SUPPORT,V_1_3_LIKE_ANY_SOME_ALL]
[enabled_ast_rewrites=DEFAULTS]
SELECT 'Google' LIKE ALL (collate('%google%', 'und:ci'), 'XXX')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$like_all(STRING, repeated(2) STRING) -> BOOL)
    |     +-Literal(type=STRING, value='Google')
    |     +-FunctionCall(ZetaSQL:collate(STRING, STRING) -> STRING)
    |     | +-type_annotation_map={Collation:"und:ci"}
    |     | +-Literal(type=STRING, value='%google%')
    |     | +-Literal(type=STRING, value="und:ci", preserve_in_literal_remover=TRUE)
    |     +-Literal(type=STRING, value='XXX')
    |     +-collation_list=[und:ci]
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#8]
    |         +-expr_list=
    |         | +-$col1#8 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, type_annotation_map=[{Collation:"und:ci"}], column=$subquery1.patterns#3[{Collation:"und:ci"}])
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#7]
    |         |         +-expr_list=
    |         |         | +-$col1#7 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, type_annotation_map=[{Collation:"und:ci"}], column=$subquery1.patterns#3[{Collation:"und:ci"}], is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, type_annotation_map=[{Collation:"und:ci"}], column=$subquery1.patterns#3[{Collation:"und:ci"}], is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |         |     | +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#4{Collation:"und:ci"}]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, type_annotation_map=[{Collation:"und:ci"}], column=$subquery1.patterns#3[{Collation:"und:ci"}], is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#4{Collation:"und:ci"}
    |         |             +-aggregate_list=
    |         |               +-$agg1#5 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, type_annotation_map={Collation:"und:ci"}, column=$array.pattern#4{Collation:"und:ci"})
    |         |               |     +-collation_list=[und:ci]
    |         |               +-$agg2#6 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, type_annotation_map={Collation:"und:ci"}, column=$array.pattern#4{Collation:"und:ci"})
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#2, patterns#3]
    |             +-expr_list=
    |             | +-input#2 := Literal(type=STRING, value="Google")
    |             | +-patterns#3 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |             |     +-type_annotation_map=[{Collation:"und:ci"}]
    |             |     +-FunctionCall(ZetaSQL:collate(STRING, STRING) -> STRING)
    |             |     | +-type_annotation_map={Collation:"und:ci"}
    |             |     | +-Literal(type=STRING, value='%google%')
    |             |     | +-Literal(type=STRING, value="und:ci", preserve_in_literal_remover=TRUE)
    |             |     +-Literal(type=STRING, value='XXX')
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

# Test collation for LIKE ALL with CI collation on LHS element.
[no_java]
[language_features=V_1_3_ANNOTATION_FRAMEWORK,V_1_3_COLLATION_SUPPORT,V_1_3_LIKE_ANY_SOME_ALL]
[enabled_ast_rewrites=DEFAULTS]
SELECT collate('Google', 'und:ci') LIKE ALL ('%GoOgLe%', 'XXX')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$like_all(STRING, repeated(2) STRING) -> BOOL)
    |     +-FunctionCall(ZetaSQL:collate(STRING, STRING) -> STRING)
    |     | +-type_annotation_map={Collation:"und:ci"}
    |     | +-Literal(type=STRING, value='Google')
    |     | +-Literal(type=STRING, value="und:ci", preserve_in_literal_remover=TRUE)
    |     +-Literal(type=STRING, value='%GoOgLe%')
    |     +-Literal(type=STRING, value='XXX')
    |     +-collation_list=[und:ci]
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#8]
    |         +-expr_list=
    |         | +-$col1#8 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, type_annotation_map={Collation:"und:ci"}, column=$subquery1.input#2{Collation:"und:ci"})
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#7]
    |         |         +-expr_list=
    |         |         | +-$col1#7 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, type_annotation_map={Collation:"und:ci"}, column=$subquery1.input#2{Collation:"und:ci"}, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |         |     | +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#4]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.patterns#3, is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#4
    |         |             +-aggregate_list=
    |         |               +-$agg1#5 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, type_annotation_map={Collation:"und:ci"}, column=$subquery1.input#2{Collation:"und:ci"}, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         |               |     +-collation_list=[und:ci]
    |         |               +-$agg2#6 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, column=$array.pattern#4)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#2, patterns#3]
    |             +-expr_list=
    |             | +-input#2 :=
    |             | | +-FunctionCall(ZetaSQL:collate(STRING, STRING) -> STRING)
    |             | |   +-type_annotation_map={Collation:"und:ci"}
    |             | |   +-Literal(type=STRING, value='Google')
    |             | |   +-Literal(type=STRING, value="und:ci", preserve_in_literal_remover=TRUE)
    |             | +-patterns#3 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |             |     +-Literal(type=STRING, value='%GoOgLe%')
    |             |     +-Literal(type=STRING, value='XXX')
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[no_java]
[language_features=V_1_3_ANNOTATION_FRAMEWORK,V_1_3_COLLATION_SUPPORT,V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY]
# Collation is disallowed on the function arguments
select
  string_ci LIKE ALL unnest(array_with_string_ci),
from CollatedTable
--
ERROR: Collation is not allowed on argument 1 ("und:ci"). Use COLLATE(arg, '') to remove collation [at 3:13]
  string_ci LIKE ALL unnest(array_with_string_ci),
            ^
==

[no_java]
[language_features=V_1_3_ANNOTATION_FRAMEWORK,V_1_3_COLLATION_SUPPORT,V_1_3_LIKE_ANY_SOME_ALL]
# Test collation for LIKE ALL
select 'a' LIKE ANY ('b', COLLATE('A', 'und:ci'))
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$like_any(STRING, repeated(2) STRING) -> BOOL)
    |     +-Literal(type=STRING, value='a')
    |     +-Literal(type=STRING, value='b')
    |     +-FunctionCall(ZetaSQL:collate(STRING, STRING) -> STRING)
    |       +-type_annotation_map={Collation:"und:ci"}
    |       +-Literal(type=STRING, value='A')
    |       +-Literal(type=STRING, value="und:ci", preserve_in_literal_remover=TRUE)
    |     +-collation_list=[und:ci]
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#8]
    |         +-expr_list=
    |         | +-$col1#8 :=
    |         |   +-SubqueryExpr
    |         |     +-type=BOOL
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, type_annotation_map=[{Collation:"und:ci"}], column=$subquery1.patterns#3[{Collation:"und:ci"}])
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#7]
    |         |         +-expr_list=
    |         |         | +-$col1#7 :=
    |         |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(4) BOOL, repeated(4) BOOL, BOOL) -> BOOL)
    |         |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
    |         |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |         |     | | +-ColumnRef(type=ARRAY<STRING>, type_annotation_map=[{Collation:"und:ci"}], column=$subquery1.patterns#3[{Collation:"und:ci"}], is_correlated=TRUE)
    |         |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |         |     |   | +-ColumnRef(type=ARRAY<STRING>, type_annotation_map=[{Collation:"und:ci"}], column=$subquery1.patterns#3[{Collation:"und:ci"}], is_correlated=TRUE)
    |         |         |     |   +-Literal(type=INT64, value=0)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |         |     | +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg1#5)
    |         |         |     +-Literal(type=BOOL, value=true)
    |         |         |     +-ColumnRef(type=BOOL, column=$aggregate.$agg2#6)
    |         |         |     +-Literal(type=BOOL, value=NULL)
    |         |         |     +-Literal(type=BOOL, value=false)
    |         |         +-input_scan=
    |         |           +-AggregateScan
    |         |             +-column_list=$aggregate.[$agg1#5, $agg2#6]
    |         |             +-input_scan=
    |         |             | +-ArrayScan
    |         |             |   +-column_list=[$array.pattern#4{Collation:"und:ci"}]
    |         |             |   +-array_expr=
    |         |             |   | +-ColumnRef(type=ARRAY<STRING>, type_annotation_map=[{Collation:"und:ci"}], column=$subquery1.patterns#3[{Collation:"und:ci"}], is_correlated=TRUE)
    |         |             |   +-element_column=$array.pattern#4{Collation:"und:ci"}
    |         |             +-aggregate_list=
    |         |               +-$agg1#5 :=
    |         |               | +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |               |   +-FunctionCall(ZetaSQL:$like(STRING, STRING) -> BOOL)
    |         |               |     +-ColumnRef(type=STRING, column=$subquery1.input#2, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=STRING, type_annotation_map={Collation:"und:ci"}, column=$array.pattern#4{Collation:"und:ci"})
    |         |               |     +-collation_list=[und:ci]
    |         |               +-$agg2#6 :=
    |         |                 +-AggregateFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
    |         |                   +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |                     +-ColumnRef(type=STRING, type_annotation_map={Collation:"und:ci"}, column=$array.pattern#4{Collation:"und:ci"})
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[input#2, patterns#3]
    |             +-expr_list=
    |             | +-input#2 := Literal(type=STRING, value="a")
    |             | +-patterns#3 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |             |     +-type_annotation_map=[{Collation:"und:ci"}]
    |             |     +-Literal(type=STRING, value='b')
    |             |     +-FunctionCall(ZetaSQL:collate(STRING, STRING) -> STRING)
    |             |       +-type_annotation_map={Collation:"und:ci"}
    |             |       +-Literal(type=STRING, value='A')
    |             |       +-Literal(type=STRING, value="und:ci", preserve_in_literal_remover=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

# TODO: Collation/Annotation specific ZetaSQL analyzer tests are not working as expected while executed in java mode
[no_java]
[language_features=V_1_3_ANNOTATION_FRAMEWORK,V_1_3_COLLATION_SUPPORT,V_1_3_LIKE_ANY_SOME_ALL]
# Test collation for LIKE {{ANY|SOME}} with "binary" and "ci" collation compare error
# TODO: Fix error message specifically indicating ANY or SOME operation. As of now,
# for both LIKE ANY and LIKE SOME, the error message indicates LIKE ANY.
select
  string_ci LIKE ANY (string_binary, COLLATE('a', 'und:ci'))
FROM CollatedTable
--
ERROR: Collation conflict: "binary" vs. "und:ci". Collation on argument 2 ("binary") in function LIKE ANY is not compatible with other arguments [at 5:13]
  string_ci LIKE ANY (string_binary, COLLATE('a', 'und:ci'))
            ^
==

# TODO: Collation/Annotation specific ZetaSQL analyzer tests are not working as expected while executed in java mode
[no_java]
[language_features=V_1_3_ANNOTATION_FRAMEWORK,V_1_3_COLLATION_SUPPORT,V_1_3_LIKE_ANY_SOME_ALL]
# Test collation for LIKE ALL with "binary" and "ci" collation compare error
select
  string_ci LIKE ALL (string_binary, COLLATE('a', 'und:ci'))
FROM CollatedTable
--
ERROR: Collation conflict: "binary" vs. "und:ci". Collation on argument 2 ("binary") in function LIKE ALL is not compatible with other arguments [at 3:13]
  string_ci LIKE ALL (string_binary, COLLATE('a', 'und:ci'))
            ^
==


# TODO: Collation/Annotation specific ZetaSQL analyzer tests are not working as expected while executed in java mode
[no_java]
[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY,V_1_3_ANNOTATION_FRAMEWORK,V_1_3_COLLATION_SUPPORT]
# Collation is disallowed on the function arguments
# TODO: As per discussion with shaokunz@, we might be able to allow collation on function arguments now
SELECT
  string_ci LIKE ANY UNNEST(array_with_string_ci)
FROM COLLATEdTable
--
ERROR: Collation is not allowed on argument 1 ("und:ci"). Use COLLATE(arg, '') to remove collation [at 4:13]
  string_ci LIKE ANY UNNEST(array_with_string_ci)
            ^

==

# TODO: Collation/Annotation specific ZetaSQL analyzer tests are not working as expected while executed in java mode
[no_java]
[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY,V_1_3_ANNOTATION_FRAMEWORK,V_1_3_COLLATION_SUPPORT]
# Collation is disallowed on the function arguments
# TODO: As per discussion with shaokunz@, we might be able to allow collation on function arguments now
SELECT
  string_ci LIKE ALL UNNEST(array_with_string_ci)
FROM COLLATEdTable
--
ERROR: Collation is not allowed on argument 1 ("und:ci"). Use COLLATE(arg, '') to remove collation [at 4:13]
  string_ci LIKE ALL UNNEST(array_with_string_ci)
            ^
==

# TODO: Collation/Annotation specific ZetaSQL analyzer tests are not working as expected while executed in java mode
[no_java]
[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY,V_1_3_ANNOTATION_FRAMEWORK,V_1_3_COLLATION_SUPPORT]
# Collation is disallowed on the function arguments
# TODO: As per discussion with shaokunz@, we might be able to allow collation on function arguments now
SELECT 'a' LIKE {{ANY|SOME|ALL}} UNNEST(['a', COLLATE('A', 'und:ci')])
--
ALTERNATION GROUP: ANY
--
ERROR: Collation is not allowed on argument 2 (["und:ci"]) [at 3:12]
SELECT 'a' LIKE ANY UNNEST(['a', COLLATE('A', 'und:ci')])
           ^
--
ALTERNATION GROUP: SOME
--
ERROR: Collation is not allowed on argument 2 (["und:ci"]) [at 3:12]
SELECT 'a' LIKE SOME UNNEST(['a', COLLATE('A', 'und:ci')])
           ^
--
ALTERNATION GROUP: ALL
--
ERROR: Collation is not allowed on argument 2 (["und:ci"]) [at 3:12]
SELECT 'a' LIKE ALL UNNEST(['a', COLLATE('A', 'und:ci')])
           ^
==

# TODO: Collation/Annotation specific ZetaSQL analyzer tests are not working as expected while executed in java mode
[no_java]
[language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_LIKE_ANY_SOME_ALL_ARRAY,V_1_3_ANNOTATION_FRAMEWORK,V_1_3_COLLATION_SUPPORT]
# Collation is disallowed on the function arguments
# TODO: As per discussion with shaokunz@, we might be able to allow collation on function arguments now
SELECT COLLATE('a', 'und:ci') LIKE {{ANY|SOME|ALL}} UNNEST(['a', 'A'])
--
ALTERNATION GROUP: ANY
--
ERROR: Collation is not allowed on argument 1 ("und:ci"). Use COLLATE(arg, '') to remove collation [at 3:31]
SELECT COLLATE('a', 'und:ci') LIKE ANY UNNEST(['a', 'A'])
                              ^
--
ALTERNATION GROUP: SOME
--
ERROR: Collation is not allowed on argument 1 ("und:ci"). Use COLLATE(arg, '') to remove collation [at 3:31]
SELECT COLLATE('a', 'und:ci') LIKE SOME UNNEST(['a', 'A'])
                              ^
--
ALTERNATION GROUP: ALL
--
ERROR: Collation is not allowed on argument 1 ("und:ci"). Use COLLATE(arg, '') to remove collation [at 3:31]
SELECT COLLATE('a', 'und:ci') LIKE ALL UNNEST(['a', 'A'])
                              ^
