# TODO: Enable view inlining for tests in this file.

# Because SQLView is not serialized.
[default no_java]
[default enabled_ast_rewrites=ALL]

# Scan various sets of columns from a view
SELECT {{*|v.*|a, b|b, a|a|b|1}} FROM TwoIntsView v;
--
ALTERNATION GROUPS:
    *
    v.*
    a, b

--
QueryStmt
+-output_column_list=
| +-TwoIntsView.a#1 AS a [INT64]
| +-TwoIntsView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=TwoIntsView.[a#1, b#2]
    +-input_scan=
      +-TableScan(column_list=TwoIntsView.[a#1, b#2], table=TwoIntsView, column_index_list=[0, 1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TwoIntsView.a#1 AS a [INT64]
| +-TwoIntsView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=TwoIntsView.[a#1, b#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=TwoIntsView.[a#1, b#2]
        +-expr_list=
        | +-a#1 := Literal(type=INT64, value=1)
        | +-b#2 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: b, a
--
QueryStmt
+-output_column_list=
| +-TwoIntsView.b#2 AS b [INT64]
| +-TwoIntsView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=TwoIntsView.[b#2, a#1]
    +-input_scan=
      +-TableScan(column_list=TwoIntsView.[a#1, b#2], table=TwoIntsView, column_index_list=[0, 1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TwoIntsView.b#2 AS b [INT64]
| +-TwoIntsView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=TwoIntsView.[b#2, a#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=TwoIntsView.[a#1, b#2]
        +-expr_list=
        | +-a#1 := Literal(type=INT64, value=1)
        | +-b#2 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: a
--
QueryStmt
+-output_column_list=
| +-TwoIntsView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TwoIntsView.a#1]
    +-input_scan=
      +-TableScan(column_list=[TwoIntsView.a#1], table=TwoIntsView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TwoIntsView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TwoIntsView.a#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TwoIntsView.a#1, $view.b#3]
        +-expr_list=
        | +-a#1 := Literal(type=INT64, value=1)
        | +-b#3 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: b
--
QueryStmt
+-output_column_list=
| +-TwoIntsView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TwoIntsView.b#2]
    +-input_scan=
      +-TableScan(column_list=[TwoIntsView.b#2], table=TwoIntsView, column_index_list=[1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TwoIntsView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TwoIntsView.b#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$view.a#3, TwoIntsView.b#2]
        +-expr_list=
        | +-a#3 := Literal(type=INT64, value=1)
        | +-b#2 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=TwoIntsView, alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=$view.[a#4, b#5]
        +-expr_list=
        | +-a#4 := Literal(type=INT64, value=1)
        | +-b#5 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
==

# Scan the same view twice in a join.
SELECT v1.a, v2.b FROM TwoIntsView v1, TwoIntsView v2;
--
QueryStmt
+-output_column_list=
| +-TwoIntsView.a#1 AS a [INT64]
| +-TwoIntsView.b#4 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=TwoIntsView.[a#1, b#4]
    +-input_scan=
      +-JoinScan
        +-column_list=TwoIntsView.[a#1, b#4]
        +-left_scan=
        | +-TableScan(column_list=[TwoIntsView.a#1], table=TwoIntsView, column_index_list=[0], alias='v1')
        +-right_scan=
          +-TableScan(column_list=[TwoIntsView.b#4], table=TwoIntsView, column_index_list=[1], alias='v2')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TwoIntsView.a#1 AS a [INT64]
| +-TwoIntsView.b#4 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=TwoIntsView.[a#1, b#4]
    +-input_scan=
      +-JoinScan
        +-column_list=TwoIntsView.[a#1, b#4]
        +-left_scan=
        | +-ProjectScan
        |   +-column_list=[TwoIntsView.a#1, $view.b#5]
        |   +-expr_list=
        |   | +-a#1 := Literal(type=INT64, value=1)
        |   | +-b#5 := Literal(type=INT64, value=2)
        |   +-input_scan=
        |     +-SingleRowScan
        +-right_scan=
          +-ProjectScan
            +-column_list=[$view.a#6, TwoIntsView.b#4]
            +-expr_list=
            | +-a#6 := Literal(type=INT64, value=1)
            | +-b#4 := Literal(type=INT64, value=2)
            +-input_scan=
              +-SingleRowScan
==

# Scan the same view twice in an array join.
SELECT v1.a, v2.b FROM TwoIntsView v1, UNNEST(ARRAY(SELECT AS STRUCT * FROM TwoIntsView)) v2
--
QueryStmt
+-output_column_list=
| +-TwoIntsView.a#1 AS a [INT64]
| +-$query.b#7 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TwoIntsView.a#1, $query.b#7]
    +-expr_list=
    | +-b#7 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=$array.v2#6)
    |     +-field_idx=1
    +-input_scan=
      +-ArrayScan
        +-column_list=[TwoIntsView.a#1, $array.v2#6]
        +-input_scan=
        | +-TableScan(column_list=[TwoIntsView.a#1], table=TwoIntsView, column_index_list=[0], alias='v1')
        +-array_expr=
        | +-SubqueryExpr
        |   +-type=ARRAY<STRUCT<a INT64, b INT64>>
        |   +-subquery_type=ARRAY
        |   +-subquery=
        |     +-ProjectScan
        |       +-column_list=[$make_struct.$struct#5]
        |       +-expr_list=
        |       | +-$struct#5 :=
        |       |   +-MakeStruct
        |       |     +-type=STRUCT<a INT64, b INT64>
        |       |     +-field_list=
        |       |       +-ColumnRef(type=INT64, column=TwoIntsView.a#3)
        |       |       +-ColumnRef(type=INT64, column=TwoIntsView.b#4)
        |       +-input_scan=
        |         +-ProjectScan
        |           +-column_list=TwoIntsView.[a#3, b#4]
        |           +-input_scan=
        |             +-TableScan(column_list=TwoIntsView.[a#3, b#4], table=TwoIntsView, column_index_list=[0, 1])
        +-element_column=$array.v2#6

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TwoIntsView.a#1 AS a [INT64]
| +-$query.b#7 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TwoIntsView.a#1, $query.b#7]
    +-expr_list=
    | +-b#7 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=$array.v2#6)
    |     +-field_idx=1
    +-input_scan=
      +-ArrayScan
        +-column_list=[TwoIntsView.a#1, $array.v2#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[TwoIntsView.a#1, $view.b#8]
        |   +-expr_list=
        |   | +-a#1 := Literal(type=INT64, value=1)
        |   | +-b#8 := Literal(type=INT64, value=2)
        |   +-input_scan=
        |     +-SingleRowScan
        +-array_expr=
        | +-SubqueryExpr
        |   +-type=ARRAY<STRUCT<a INT64, b INT64>>
        |   +-subquery_type=ARRAY
        |   +-subquery=
        |     +-ProjectScan
        |       +-column_list=[$make_struct.$struct#5]
        |       +-expr_list=
        |       | +-$struct#5 :=
        |       |   +-MakeStruct
        |       |     +-type=STRUCT<a INT64, b INT64>
        |       |     +-field_list=
        |       |       +-ColumnRef(type=INT64, column=TwoIntsView.a#3)
        |       |       +-ColumnRef(type=INT64, column=TwoIntsView.b#4)
        |       +-input_scan=
        |         +-ProjectScan
        |           +-column_list=TwoIntsView.[a#3, b#4]
        |           +-input_scan=
        |             +-ProjectScan
        |               +-column_list=TwoIntsView.[a#3, b#4]
        |               +-expr_list=
        |               | +-a#3 := Literal(type=INT64, value=1)
        |               | +-b#4 := Literal(type=INT64, value=2)
        |               +-input_scan=
        |                 +-SingleRowScan
        +-element_column=$array.v2#6
==

# Scan the same view twice in a set operation.
SELECT * FROM TwoIntsView v1 UNION ALL SELECT * FROM TwoIntsView v2;
--
QueryStmt
+-output_column_list=
| +-$union_all.a#5 AS a [INT64]
| +-$union_all.b#6 AS b [INT64]
+-query=
  +-SetOperationScan
    +-column_list=$union_all.[a#5, b#6]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=TwoIntsView.[a#1, b#2]
      | |   +-input_scan=
      | |     +-TableScan(column_list=TwoIntsView.[a#1, b#2], table=TwoIntsView, column_index_list=[0, 1], alias='v1')
      | +-output_column_list=TwoIntsView.[a#1, b#2]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=TwoIntsView.[a#3, b#4]
        |   +-input_scan=
        |     +-TableScan(column_list=TwoIntsView.[a#3, b#4], table=TwoIntsView, column_index_list=[0, 1], alias='v2')
        +-output_column_list=TwoIntsView.[a#3, b#4]

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$union_all.a#5 AS a [INT64]
| +-$union_all.b#6 AS b [INT64]
+-query=
  +-SetOperationScan
    +-column_list=$union_all.[a#5, b#6]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=TwoIntsView.[a#1, b#2]
      | |   +-input_scan=
      | |     +-ProjectScan
      | |       +-column_list=TwoIntsView.[a#1, b#2]
      | |       +-expr_list=
      | |       | +-a#1 := Literal(type=INT64, value=1)
      | |       | +-b#2 := Literal(type=INT64, value=2)
      | |       +-input_scan=
      | |         +-SingleRowScan
      | +-output_column_list=TwoIntsView.[a#1, b#2]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=TwoIntsView.[a#3, b#4]
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=TwoIntsView.[a#3, b#4]
        |       +-expr_list=
        |       | +-a#3 := Literal(type=INT64, value=1)
        |       | +-b#4 := Literal(type=INT64, value=2)
        |       +-input_scan=
        |         +-SingleRowScan
        +-output_column_list=TwoIntsView.[a#3, b#4]
==

# Scan all columns from a view that has internal columns
SELECT {{*|v.*|a, b|b, a|a|b|1}} FROM UnprojectedColumnView v;
--
ALTERNATION GROUPS:
    *
    v.*
    a, b
--
QueryStmt
+-output_column_list=
| +-UnprojectedColumnView.a#1 AS a [INT64]
| +-UnprojectedColumnView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=UnprojectedColumnView.[a#1, b#2]
    +-input_scan=
      +-TableScan(column_list=UnprojectedColumnView.[a#1, b#2], table=UnprojectedColumnView, column_index_list=[0, 1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-UnprojectedColumnView.a#1 AS a [INT64]
| +-UnprojectedColumnView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=UnprojectedColumnView.[a#1, b#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=UnprojectedColumnView.[a#1, b#2]
        +-input_scan=
          +-ProjectScan
            +-column_list=[UnprojectedColumnView.a#1, UnprojectedColumnView.b#2, $subquery1.c#3]
            +-expr_list=
            | +-a#1 := Literal(type=INT64, value=1)
            | +-b#2 := Literal(type=INT64, value=2)
            | +-c#3 := Literal(type=INT64, value=3)
            +-input_scan=
              +-SingleRowScan
--
ALTERNATION GROUP: b, a
--
QueryStmt
+-output_column_list=
| +-UnprojectedColumnView.b#2 AS b [INT64]
| +-UnprojectedColumnView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=UnprojectedColumnView.[b#2, a#1]
    +-input_scan=
      +-TableScan(column_list=UnprojectedColumnView.[a#1, b#2], table=UnprojectedColumnView, column_index_list=[0, 1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-UnprojectedColumnView.b#2 AS b [INT64]
| +-UnprojectedColumnView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=UnprojectedColumnView.[b#2, a#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=UnprojectedColumnView.[a#1, b#2]
        +-input_scan=
          +-ProjectScan
            +-column_list=[UnprojectedColumnView.a#1, UnprojectedColumnView.b#2, $subquery1.c#3]
            +-expr_list=
            | +-a#1 := Literal(type=INT64, value=1)
            | +-b#2 := Literal(type=INT64, value=2)
            | +-c#3 := Literal(type=INT64, value=3)
            +-input_scan=
              +-SingleRowScan
--
ALTERNATION GROUP: a
--
QueryStmt
+-output_column_list=
| +-UnprojectedColumnView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[UnprojectedColumnView.a#1]
    +-input_scan=
      +-TableScan(column_list=[UnprojectedColumnView.a#1], table=UnprojectedColumnView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-UnprojectedColumnView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[UnprojectedColumnView.a#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[UnprojectedColumnView.a#1, $subquery1.b#3]
        +-input_scan=
          +-ProjectScan
            +-column_list=[UnprojectedColumnView.a#1, $subquery1.b#3, $subquery1.c#4]
            +-expr_list=
            | +-a#1 := Literal(type=INT64, value=1)
            | +-b#3 := Literal(type=INT64, value=2)
            | +-c#4 := Literal(type=INT64, value=3)
            +-input_scan=
              +-SingleRowScan
--
ALTERNATION GROUP: b
--
QueryStmt
+-output_column_list=
| +-UnprojectedColumnView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[UnprojectedColumnView.b#2]
    +-input_scan=
      +-TableScan(column_list=[UnprojectedColumnView.b#2], table=UnprojectedColumnView, column_index_list=[1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-UnprojectedColumnView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[UnprojectedColumnView.b#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.a#3, UnprojectedColumnView.b#2]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$subquery1.a#3, UnprojectedColumnView.b#2, $subquery1.c#4]
            +-expr_list=
            | +-a#3 := Literal(type=INT64, value=1)
            | +-b#2 := Literal(type=INT64, value=2)
            | +-c#4 := Literal(type=INT64, value=3)
            +-input_scan=
              +-SingleRowScan
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=UnprojectedColumnView, alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=$subquery1.[a#4, b#5]
        +-input_scan=
          +-ProjectScan
            +-column_list=$subquery1.[a#4, b#5, c#6]
            +-expr_list=
            | +-a#4 := Literal(type=INT64, value=1)
            | +-b#5 := Literal(type=INT64, value=2)
            | +-c#6 := Literal(type=INT64, value=3)
            +-input_scan=
              +-SingleRowScan
==

# Scan various columns from a view that has an explicit column list.
SELECT {{*|v.*|a, b|b, a|a|b|1}} FROM ColumnListView v;
--
ALTERNATION GROUPS:
    *
    v.*
    a, b
--
QueryStmt
+-output_column_list=
| +-ColumnListView.a#1 AS a [INT64]
| +-ColumnListView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=ColumnListView.[a#1, b#2]
    +-input_scan=
      +-TableScan(column_list=ColumnListView.[a#1, b#2], table=ColumnListView, column_index_list=[0, 1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-ColumnListView.a#1 AS a [INT64]
| +-ColumnListView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=ColumnListView.[a#1, b#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=ColumnListView.[a#1, b#2]
        +-expr_list=
        | +-a#1 := Literal(type=INT64, value=1)
        | +-b#2 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: b, a
--
QueryStmt
+-output_column_list=
| +-ColumnListView.b#2 AS b [INT64]
| +-ColumnListView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=ColumnListView.[b#2, a#1]
    +-input_scan=
      +-TableScan(column_list=ColumnListView.[a#1, b#2], table=ColumnListView, column_index_list=[0, 1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-ColumnListView.b#2 AS b [INT64]
| +-ColumnListView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=ColumnListView.[b#2, a#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=ColumnListView.[a#1, b#2]
        +-expr_list=
        | +-a#1 := Literal(type=INT64, value=1)
        | +-b#2 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: a
--
QueryStmt
+-output_column_list=
| +-ColumnListView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[ColumnListView.a#1]
    +-input_scan=
      +-TableScan(column_list=[ColumnListView.a#1], table=ColumnListView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-ColumnListView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[ColumnListView.a#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[ColumnListView.a#1, $view.$col2#3]
        +-expr_list=
        | +-a#1 := Literal(type=INT64, value=1)
        | +-$col2#3 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: b
--
QueryStmt
+-output_column_list=
| +-ColumnListView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[ColumnListView.b#2]
    +-input_scan=
      +-TableScan(column_list=[ColumnListView.b#2], table=ColumnListView, column_index_list=[1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-ColumnListView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[ColumnListView.b#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$view.$col1#3, ColumnListView.b#2]
        +-expr_list=
        | +-$col1#3 := Literal(type=INT64, value=1)
        | +-b#2 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=ColumnListView, alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=$view.[$col1#4, $col2#5]
        +-expr_list=
        | +-$col1#4 := Literal(type=INT64, value=1)
        | +-$col2#5 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
==

# Scan various columns from a view that has a CTE in its definition
# Note that the invoking query *does not* have the with on subquery feature
# enabled.
SELECT {{*|v.*|a, b|b, a|a|b|1}} FROM CteView v;
--
ALTERNATION GROUPS:
    *
    v.*
    a, b
--
QueryStmt
+-output_column_list=
| +-CteView.a#1 AS a [INT64]
| +-CteView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=CteView.[a#1, b#2]
    +-input_scan=
      +-TableScan(column_list=CteView.[a#1, b#2], table=CteView, column_index_list=[0, 1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-CteView.a#1 AS a [INT64]
| +-CteView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=CteView.[a#1, b#2]
    +-input_scan=
      +-WithScan
        +-column_list=CteView.[a#1, b#2]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name='t'
        |   +-with_subquery=
        |     +-ProjectScan
        |       +-column_list=t.[a#3, b#4]
        |       +-expr_list=
        |       | +-a#3 := Literal(type=INT64, value=1)
        |       | +-b#4 := Literal(type=INT64, value=2)
        |       +-input_scan=
        |         +-SingleRowScan
        +-query=
          +-ProjectScan
            +-column_list=CteView.[a#1, b#2]
            +-input_scan=
              +-WithRefScan(column_list=CteView.[a#1, b#2], with_query_name='t')
--
ALTERNATION GROUP: b, a
--
QueryStmt
+-output_column_list=
| +-CteView.b#2 AS b [INT64]
| +-CteView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=CteView.[b#2, a#1]
    +-input_scan=
      +-TableScan(column_list=CteView.[a#1, b#2], table=CteView, column_index_list=[0, 1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-CteView.b#2 AS b [INT64]
| +-CteView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=CteView.[b#2, a#1]
    +-input_scan=
      +-WithScan
        +-column_list=CteView.[a#1, b#2]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name='t'
        |   +-with_subquery=
        |     +-ProjectScan
        |       +-column_list=t.[a#3, b#4]
        |       +-expr_list=
        |       | +-a#3 := Literal(type=INT64, value=1)
        |       | +-b#4 := Literal(type=INT64, value=2)
        |       +-input_scan=
        |         +-SingleRowScan
        +-query=
          +-ProjectScan
            +-column_list=CteView.[a#1, b#2]
            +-input_scan=
              +-WithRefScan(column_list=CteView.[a#1, b#2], with_query_name='t')
--
ALTERNATION GROUP: a
--
QueryStmt
+-output_column_list=
| +-CteView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[CteView.a#1]
    +-input_scan=
      +-TableScan(column_list=[CteView.a#1], table=CteView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-CteView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[CteView.a#1]
    +-input_scan=
      +-WithScan
        +-column_list=[CteView.a#1, t.b#5]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name='t'
        |   +-with_subquery=
        |     +-ProjectScan
        |       +-column_list=t.[a#3, b#4]
        |       +-expr_list=
        |       | +-a#3 := Literal(type=INT64, value=1)
        |       | +-b#4 := Literal(type=INT64, value=2)
        |       +-input_scan=
        |         +-SingleRowScan
        +-query=
          +-ProjectScan
            +-column_list=[CteView.a#1, t.b#5]
            +-input_scan=
              +-WithRefScan(column_list=[CteView.a#1, t.b#5], with_query_name='t')
--
ALTERNATION GROUP: b
--
QueryStmt
+-output_column_list=
| +-CteView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[CteView.b#2]
    +-input_scan=
      +-TableScan(column_list=[CteView.b#2], table=CteView, column_index_list=[1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-CteView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[CteView.b#2]
    +-input_scan=
      +-WithScan
        +-column_list=[t.a#5, CteView.b#2]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name='t'
        |   +-with_subquery=
        |     +-ProjectScan
        |       +-column_list=t.[a#3, b#4]
        |       +-expr_list=
        |       | +-a#3 := Literal(type=INT64, value=1)
        |       | +-b#4 := Literal(type=INT64, value=2)
        |       +-input_scan=
        |         +-SingleRowScan
        +-query=
          +-ProjectScan
            +-column_list=[t.a#5, CteView.b#2]
            +-input_scan=
              +-WithRefScan(column_list=[t.a#5, CteView.b#2], with_query_name='t')
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=CteView, alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-WithScan
        +-column_list=t.[a#6, b#7]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name='t'
        |   +-with_subquery=
        |     +-ProjectScan
        |       +-column_list=t.[a#4, b#5]
        |       +-expr_list=
        |       | +-a#4 := Literal(type=INT64, value=1)
        |       | +-b#5 := Literal(type=INT64, value=2)
        |       +-input_scan=
        |         +-SingleRowScan
        +-query=
          +-ProjectScan
            +-column_list=t.[a#6, b#7]
            +-input_scan=
              +-WithRefScan(column_list=t.[a#6, b#7], with_query_name='t')
==

# Scan columns from a view that either returns a SQL table with a single struct
# column or returns a value table with a struct type row.
SELECT {{*|v.*|v|a, b|b, a|a|b|ab|1}}
FROM {{OneStructView|AsStructView}} AS v;
--
ALTERNATION GROUPS:
    *,OneStructView
    v.*,OneStructView
    ab,OneStructView
--
QueryStmt
+-output_column_list=
| +-OneStructView.ab#1 AS ab [STRUCT<a INT64, b INT64>]
+-query=
  +-ProjectScan
    +-column_list=[OneStructView.ab#1]
    +-input_scan=
      +-TableScan(column_list=[OneStructView.ab#1], table=OneStructView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-OneStructView.ab#1 AS ab [STRUCT<a INT64, b INT64>]
+-query=
  +-ProjectScan
    +-column_list=[OneStructView.ab#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[OneStructView.ab#1]
        +-expr_list=
        | +-ab#1 := Literal(type=STRUCT<a INT64, b INT64>, value={a:1, b:2})
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUPS:
    *,AsStructView
    v.*,AsStructView
    a, b,AsStructView
--
QueryStmt
+-output_column_list=
| +-$query.a#2 AS a [INT64]
| +-$query.b#3 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[a#2, b#3]
    +-expr_list=
    | +-a#2 :=
    | | +-GetStructField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=AsStructView.$struct#1)
    | |   +-field_idx=0
    | +-b#3 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=AsStructView.$struct#1)
    |     +-field_idx=1
    +-input_scan=
      +-TableScan(column_list=[AsStructView.$struct#1], table=AsStructView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.a#2 AS a [INT64]
| +-$query.b#3 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[a#2, b#3]
    +-expr_list=
    | +-a#2 :=
    | | +-GetStructField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=AsStructView.$struct#1)
    | |   +-field_idx=0
    | +-b#3 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=AsStructView.$struct#1)
    |     +-field_idx=1
    +-input_scan=
      +-ProjectScan
        +-column_list=[AsStructView.$struct#1]
        +-expr_list=
        | +-$struct#1 :=
        |   +-MakeStruct
        |     +-type=STRUCT<a INT64, b INT64>
        |     +-field_list=
        |       +-ColumnRef(type=INT64, column=$view.a#4)
        |       +-ColumnRef(type=INT64, column=$view.b#5)
        +-input_scan=
          +-ProjectScan
            +-column_list=$view.[a#4, b#5]
            +-expr_list=
            | +-a#4 := Literal(type=INT64, value=1)
            | +-b#5 := Literal(type=INT64, value=2)
            +-input_scan=
              +-SingleRowScan
--
ALTERNATION GROUP: v,OneStructView
--
QueryStmt
+-output_column_list=
| +-$query.v#3 AS v [STRUCT<ab STRUCT<a INT64, b INT64>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.v#3]
    +-expr_list=
    | +-v#3 :=
    |   +-MakeStruct
    |     +-type=STRUCT<ab STRUCT<a INT64, b INT64>>
    |     +-field_list=
    |       +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=OneStructView.ab#1)
    +-input_scan=
      +-TableScan(column_list=[OneStructView.ab#1], table=OneStructView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.v#3 AS v [STRUCT<ab STRUCT<a INT64, b INT64>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.v#3]
    +-expr_list=
    | +-v#3 :=
    |   +-MakeStruct
    |     +-type=STRUCT<ab STRUCT<a INT64, b INT64>>
    |     +-field_list=
    |       +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=OneStructView.ab#1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[OneStructView.ab#1]
        +-expr_list=
        | +-ab#1 := Literal(type=STRUCT<a INT64, b INT64>, value={a:1, b:2})
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: v,AsStructView
--
QueryStmt
+-output_column_list=
| +-AsStructView.$struct#1 AS v [STRUCT<a INT64, b INT64>]
+-query=
  +-ProjectScan
    +-column_list=[AsStructView.$struct#1]
    +-input_scan=
      +-TableScan(column_list=[AsStructView.$struct#1], table=AsStructView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-AsStructView.$struct#1 AS v [STRUCT<a INT64, b INT64>]
+-query=
  +-ProjectScan
    +-column_list=[AsStructView.$struct#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[AsStructView.$struct#1]
        +-expr_list=
        | +-$struct#1 :=
        |   +-MakeStruct
        |     +-type=STRUCT<a INT64, b INT64>
        |     +-field_list=
        |       +-ColumnRef(type=INT64, column=$view.a#2)
        |       +-ColumnRef(type=INT64, column=$view.b#3)
        +-input_scan=
          +-ProjectScan
            +-column_list=$view.[a#2, b#3]
            +-expr_list=
            | +-a#2 := Literal(type=INT64, value=1)
            | +-b#3 := Literal(type=INT64, value=2)
            +-input_scan=
              +-SingleRowScan

--
ALTERNATION GROUP: a, b,OneStructView
--
ERROR: Unrecognized name: a [at 1:8]
SELECT a, b
       ^
--
ALTERNATION GROUP: b, a,OneStructView
--
ERROR: Unrecognized name: b [at 1:8]
SELECT b, a
       ^
--
ALTERNATION GROUP: b, a,AsStructView
--
QueryStmt
+-output_column_list=
| +-$query.b#2 AS b [INT64]
| +-$query.a#3 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[b#2, a#3]
    +-expr_list=
    | +-b#2 :=
    | | +-GetStructField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=AsStructView.$struct#1)
    | |   +-field_idx=1
    | +-a#3 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=AsStructView.$struct#1)
    |     +-field_idx=0
    +-input_scan=
      +-TableScan(column_list=[AsStructView.$struct#1], table=AsStructView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.b#2 AS b [INT64]
| +-$query.a#3 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[b#2, a#3]
    +-expr_list=
    | +-b#2 :=
    | | +-GetStructField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=AsStructView.$struct#1)
    | |   +-field_idx=1
    | +-a#3 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=AsStructView.$struct#1)
    |     +-field_idx=0
    +-input_scan=
      +-ProjectScan
        +-column_list=[AsStructView.$struct#1]
        +-expr_list=
        | +-$struct#1 :=
        |   +-MakeStruct
        |     +-type=STRUCT<a INT64, b INT64>
        |     +-field_list=
        |       +-ColumnRef(type=INT64, column=$view.a#4)
        |       +-ColumnRef(type=INT64, column=$view.b#5)
        +-input_scan=
          +-ProjectScan
            +-column_list=$view.[a#4, b#5]
            +-expr_list=
            | +-a#4 := Literal(type=INT64, value=1)
            | +-b#5 := Literal(type=INT64, value=2)
            +-input_scan=
              +-SingleRowScan
--
ALTERNATION GROUP: a,OneStructView
--
ERROR: Unrecognized name: a [at 1:8]
SELECT a
       ^
--
ALTERNATION GROUP: a,AsStructView
--
QueryStmt
+-output_column_list=
| +-$query.a#2 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.a#2]
    +-expr_list=
    | +-a#2 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=AsStructView.$struct#1)
    |     +-field_idx=0
    +-input_scan=
      +-TableScan(column_list=[AsStructView.$struct#1], table=AsStructView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.a#2 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.a#2]
    +-expr_list=
    | +-a#2 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=AsStructView.$struct#1)
    |     +-field_idx=0
    +-input_scan=
      +-ProjectScan
        +-column_list=[AsStructView.$struct#1]
        +-expr_list=
        | +-$struct#1 :=
        |   +-MakeStruct
        |     +-type=STRUCT<a INT64, b INT64>
        |     +-field_list=
        |       +-ColumnRef(type=INT64, column=$view.a#3)
        |       +-ColumnRef(type=INT64, column=$view.b#4)
        +-input_scan=
          +-ProjectScan
            +-column_list=$view.[a#3, b#4]
            +-expr_list=
            | +-a#3 := Literal(type=INT64, value=1)
            | +-b#4 := Literal(type=INT64, value=2)
            +-input_scan=
              +-SingleRowScan
--
ALTERNATION GROUP: b,OneStructView
--
ERROR: Unrecognized name: b [at 1:8]
SELECT b
       ^
--
ALTERNATION GROUP: b,AsStructView
--
QueryStmt
+-output_column_list=
| +-$query.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.b#2]
    +-expr_list=
    | +-b#2 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=AsStructView.$struct#1)
    |     +-field_idx=1
    +-input_scan=
      +-TableScan(column_list=[AsStructView.$struct#1], table=AsStructView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.b#2]
    +-expr_list=
    | +-b#2 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=AsStructView.$struct#1)
    |     +-field_idx=1
    +-input_scan=
      +-ProjectScan
        +-column_list=[AsStructView.$struct#1]
        +-expr_list=
        | +-$struct#1 :=
        |   +-MakeStruct
        |     +-type=STRUCT<a INT64, b INT64>
        |     +-field_list=
        |       +-ColumnRef(type=INT64, column=$view.a#3)
        |       +-ColumnRef(type=INT64, column=$view.b#4)
        +-input_scan=
          +-ProjectScan
            +-column_list=$view.[a#3, b#4]
            +-expr_list=
            | +-a#3 := Literal(type=INT64, value=1)
            | +-b#4 := Literal(type=INT64, value=2)
            +-input_scan=
              +-SingleRowScan
--
ALTERNATION GROUP: ab,AsStructView
--
ERROR: Unrecognized name: ab [at 1:8]
SELECT ab
       ^
--
ALTERNATION GROUP: 1,OneStructView
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 := Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=OneStructView, alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$view.ab#3]
        +-expr_list=
        | +-ab#3 := Literal(type=STRUCT<a INT64, b INT64>, value={a:1, b:2})
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: 1,AsStructView
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 := Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=AsStructView, alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$make_struct.$struct#3]
        +-expr_list=
        | +-$struct#3 :=
        |   +-MakeStruct
        |     +-type=STRUCT<a INT64, b INT64>
        |     +-field_list=
        |       +-ColumnRef(type=INT64, column=$view.a#4)
        |       +-ColumnRef(type=INT64, column=$view.b#5)
        +-input_scan=
          +-ProjectScan
            +-column_list=$view.[a#4, b#5]
            +-expr_list=
            | +-a#4 := Literal(type=INT64, value=1)
            | +-b#5 := Literal(type=INT64, value=2)
            +-input_scan=
              +-SingleRowScan
==

# Scan columns from a view that either returns a SQL table with a single scalar
# column or returns a value table with a scalar type row.
SELECT {{*|v.*|v|1}}
FROM {{OneScalarView|AsScalarView}} AS v;
--
ALTERNATION GROUPS:
    *,OneScalarView
    v.*,OneScalarView
--
QueryStmt
+-output_column_list=
| +-OneScalarView.ab#1 AS ab [STRING]
+-query=
  +-ProjectScan
    +-column_list=[OneScalarView.ab#1]
    +-input_scan=
      +-TableScan(column_list=[OneScalarView.ab#1], table=OneScalarView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-OneScalarView.ab#1 AS ab [STRING]
+-query=
  +-ProjectScan
    +-column_list=[OneScalarView.ab#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[OneScalarView.ab#1]
        +-expr_list=
        | +-ab#1 := Literal(type=STRING, value="123")
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUPS:
    *,AsScalarView
    v,AsScalarView
--
QueryStmt
+-output_column_list=
| +-AsScalarView.$value_column#1 AS v [STRING]
+-query=
  +-ProjectScan
    +-column_list=[AsScalarView.$value_column#1]
    +-input_scan=
      +-TableScan(column_list=[AsScalarView.$value_column#1], table=AsScalarView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-AsScalarView.$value_column#1 AS v [STRING]
+-query=
  +-ProjectScan
    +-column_list=[AsScalarView.$value_column#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[AsScalarView.$value_column#1]
        +-expr_list=
        | +-$value_column#1 := Literal(type=STRING, value="123")
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: v.*,AsScalarView
--
ERROR: Dot-star is not supported for type STRING [at 1:8]
SELECT v.*
       ^
--
ALTERNATION GROUP: v,OneScalarView
--
QueryStmt
+-output_column_list=
| +-$query.v#3 AS v [STRUCT<ab STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.v#3]
    +-expr_list=
    | +-v#3 :=
    |   +-MakeStruct
    |     +-type=STRUCT<ab STRING>
    |     +-field_list=
    |       +-ColumnRef(type=STRING, column=OneScalarView.ab#1)
    +-input_scan=
      +-TableScan(column_list=[OneScalarView.ab#1], table=OneScalarView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.v#3 AS v [STRUCT<ab STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.v#3]
    +-expr_list=
    | +-v#3 :=
    |   +-MakeStruct
    |     +-type=STRUCT<ab STRING>
    |     +-field_list=
    |       +-ColumnRef(type=STRING, column=OneScalarView.ab#1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[OneScalarView.ab#1]
        +-expr_list=
        | +-ab#1 := Literal(type=STRING, value="123")
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: 1,OneScalarView
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 := Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=OneScalarView, alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$view.ab#3]
        +-expr_list=
        | +-ab#3 := Literal(type=STRING, value="123")
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: 1,AsScalarView
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 := Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=AsScalarView, alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$view.$col1#3]
        +-expr_list=
        | +-$col1#3 := Literal(type=STRING, value="123")
        +-input_scan=
          +-SingleRowScan
==

# Scan columns from a view that reads data from an underlying table.
SELECT {{*|v.*|v|a, b|b, a|a|b|1}}
FROM ScanTableView AS v;
--
ALTERNATION GROUPS:
    *
    v.*
    a, b
--
QueryStmt
+-output_column_list=
| +-ScanTableView.a#1 AS a [INT64]
| +-ScanTableView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=ScanTableView.[a#1, b#2]
    +-input_scan=
      +-TableScan(column_list=ScanTableView.[a#1, b#2], table=ScanTableView, column_index_list=[0, 1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-ScanTableView.a#1 AS a [INT64]
| +-ScanTableView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=ScanTableView.[a#1, b#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=ScanTableView.[a#1, b#2]
        +-input_scan=
          +-TableScan(column_list=ScanTableView.[a#1, b#2], table=TwoIntegers, column_index_list=[0, 1])
--
ALTERNATION GROUP: v
--
QueryStmt
+-output_column_list=
| +-$query.v#4 AS v [STRUCT<a INT64, b INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.v#4]
    +-expr_list=
    | +-v#4 :=
    |   +-MakeStruct
    |     +-type=STRUCT<a INT64, b INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=ScanTableView.a#1)
    |       +-ColumnRef(type=INT64, column=ScanTableView.b#2)
    +-input_scan=
      +-TableScan(column_list=ScanTableView.[a#1, b#2], table=ScanTableView, column_index_list=[0, 1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.v#4 AS v [STRUCT<a INT64, b INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.v#4]
    +-expr_list=
    | +-v#4 :=
    |   +-MakeStruct
    |     +-type=STRUCT<a INT64, b INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=ScanTableView.a#1)
    |       +-ColumnRef(type=INT64, column=ScanTableView.b#2)
    +-input_scan=
      +-ProjectScan
        +-column_list=ScanTableView.[a#1, b#2]
        +-input_scan=
          +-TableScan(column_list=ScanTableView.[a#1, b#2], table=TwoIntegers, column_index_list=[0, 1])
--
ALTERNATION GROUP: b, a
--
QueryStmt
+-output_column_list=
| +-ScanTableView.b#2 AS b [INT64]
| +-ScanTableView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=ScanTableView.[b#2, a#1]
    +-input_scan=
      +-TableScan(column_list=ScanTableView.[a#1, b#2], table=ScanTableView, column_index_list=[0, 1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-ScanTableView.b#2 AS b [INT64]
| +-ScanTableView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=ScanTableView.[b#2, a#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=ScanTableView.[a#1, b#2]
        +-input_scan=
          +-TableScan(column_list=ScanTableView.[a#1, b#2], table=TwoIntegers, column_index_list=[0, 1])
--
ALTERNATION GROUP: a
--
QueryStmt
+-output_column_list=
| +-ScanTableView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[ScanTableView.a#1]
    +-input_scan=
      +-TableScan(column_list=[ScanTableView.a#1], table=ScanTableView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-ScanTableView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[ScanTableView.a#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[ScanTableView.a#1, TwoIntegers.value#3]
        +-input_scan=
          +-TableScan(column_list=[ScanTableView.a#1, TwoIntegers.value#3], table=TwoIntegers, column_index_list=[0, 1])
--
ALTERNATION GROUP: b
--
QueryStmt
+-output_column_list=
| +-ScanTableView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[ScanTableView.b#2]
    +-input_scan=
      +-TableScan(column_list=[ScanTableView.b#2], table=ScanTableView, column_index_list=[1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-ScanTableView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[ScanTableView.b#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TwoIntegers.key#3, ScanTableView.b#2]
        +-input_scan=
          +-TableScan(column_list=[TwoIntegers.key#3, ScanTableView.b#2], table=TwoIntegers, column_index_list=[0, 1])
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=ScanTableView, alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=TwoIntegers.[key#4, value#5]
        +-input_scan=
          +-TableScan(column_list=TwoIntegers.[key#4, value#5], table=TwoIntegers, column_index_list=[0, 1])
==

# Scan columns from a view that reads data from an underlying view.
SELECT {{*|v.*|v|a, b|b, a|a|b|1}}
FROM ScanViewView AS v;
--
ALTERNATION GROUPS:
    *
    v.*
    a, b
--
QueryStmt
+-output_column_list=
| +-ScanViewView.a#1 AS a [INT64]
| +-ScanViewView.b#2 AS b [STRING]
+-query=
  +-ProjectScan
    +-column_list=ScanViewView.[a#1, b#2]
    +-input_scan=
      +-TableScan(column_list=ScanViewView.[a#1, b#2], table=ScanViewView, column_index_list=[0, 1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-ScanViewView.a#1 AS a [INT64]
| +-ScanViewView.b#2 AS b [STRING]
+-query=
  +-ProjectScan
    +-column_list=ScanViewView.[a#1, b#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=ScanViewView.[a#1, b#2]
        +-expr_list=
        | +-b#2 := Literal(type=STRING, value="b")
        +-input_scan=
          +-ProjectScan
            +-column_list=[ScanViewView.a#1, ScanTableView.b#3]
            +-input_scan=
              +-TableScan(column_list=[ScanViewView.a#1, ScanTableView.b#3], table=TwoIntegers, column_index_list=[0, 1])
--
ALTERNATION GROUP: v
--
QueryStmt
+-output_column_list=
| +-$query.v#4 AS v [STRUCT<a INT64, b STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.v#4]
    +-expr_list=
    | +-v#4 :=
    |   +-MakeStruct
    |     +-type=STRUCT<a INT64, b STRING>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=ScanViewView.a#1)
    |       +-ColumnRef(type=STRING, column=ScanViewView.b#2)
    +-input_scan=
      +-TableScan(column_list=ScanViewView.[a#1, b#2], table=ScanViewView, column_index_list=[0, 1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.v#4 AS v [STRUCT<a INT64, b STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.v#4]
    +-expr_list=
    | +-v#4 :=
    |   +-MakeStruct
    |     +-type=STRUCT<a INT64, b STRING>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=ScanViewView.a#1)
    |       +-ColumnRef(type=STRING, column=ScanViewView.b#2)
    +-input_scan=
      +-ProjectScan
        +-column_list=ScanViewView.[a#1, b#2]
        +-expr_list=
        | +-b#2 := Literal(type=STRING, value="b")
        +-input_scan=
          +-ProjectScan
            +-column_list=[ScanViewView.a#1, ScanTableView.b#5]
            +-input_scan=
              +-TableScan(column_list=[ScanViewView.a#1, ScanTableView.b#5], table=TwoIntegers, column_index_list=[0, 1])
--
ALTERNATION GROUP: b, a
--
QueryStmt
+-output_column_list=
| +-ScanViewView.b#2 AS b [STRING]
| +-ScanViewView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=ScanViewView.[b#2, a#1]
    +-input_scan=
      +-TableScan(column_list=ScanViewView.[a#1, b#2], table=ScanViewView, column_index_list=[0, 1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-ScanViewView.b#2 AS b [STRING]
| +-ScanViewView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=ScanViewView.[b#2, a#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=ScanViewView.[a#1, b#2]
        +-expr_list=
        | +-b#2 := Literal(type=STRING, value="b")
        +-input_scan=
          +-ProjectScan
            +-column_list=[ScanViewView.a#1, ScanTableView.b#3]
            +-input_scan=
              +-TableScan(column_list=[ScanViewView.a#1, ScanTableView.b#3], table=TwoIntegers, column_index_list=[0, 1])
--
ALTERNATION GROUP: a
--
QueryStmt
+-output_column_list=
| +-ScanViewView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[ScanViewView.a#1]
    +-input_scan=
      +-TableScan(column_list=[ScanViewView.a#1], table=ScanViewView, column_index_list=[0], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-ScanViewView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[ScanViewView.a#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[ScanViewView.a#1, $view.b#3]
        +-expr_list=
        | +-b#3 := Literal(type=STRING, value="b")
        +-input_scan=
          +-ProjectScan
            +-column_list=[ScanViewView.a#1, ScanTableView.b#4]
            +-input_scan=
              +-TableScan(column_list=[ScanViewView.a#1, ScanTableView.b#4], table=TwoIntegers, column_index_list=[0, 1])
--
ALTERNATION GROUP: b
--
QueryStmt
+-output_column_list=
| +-ScanViewView.b#2 AS b [STRING]
+-query=
  +-ProjectScan
    +-column_list=[ScanViewView.b#2]
    +-input_scan=
      +-TableScan(column_list=[ScanViewView.b#2], table=ScanViewView, column_index_list=[1], alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-ScanViewView.b#2 AS b [STRING]
+-query=
  +-ProjectScan
    +-column_list=[ScanViewView.b#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=[ScanTableView.a#3, ScanViewView.b#2]
        +-expr_list=
        | +-b#2 := Literal(type=STRING, value="b")
        +-input_scan=
          +-ProjectScan
            +-column_list=ScanTableView.[a#3, b#4]
            +-input_scan=
              +-TableScan(column_list=ScanTableView.[a#3, b#4], table=TwoIntegers, column_index_list=[0, 1])
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=ScanViewView, alias='v')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[ScanTableView.a#5, $view.b#4]
        +-expr_list=
        | +-b#4 := Literal(type=STRING, value="b")
        +-input_scan=
          +-ProjectScan
            +-column_list=ScanTableView.[a#5, b#6]
            +-input_scan=
              +-TableScan(column_list=ScanTableView.[a#5, b#6], table=TwoIntegers, column_index_list=[0, 1])
==

[language_features=TABLE_VALUED_FUNCTIONS]
# Scan a view indirectly by providing it as a TVF argument.
SELECT *
FROM tvf_templated_select_relation_arg_using_select_star(TABLE TwoIntsView);
--
QueryStmt
+-output_column_list=
| +-tvf_templated_select_relation_arg_using_select_star.a#3 AS a [INT64]
| +-tvf_templated_select_relation_arg_using_select_star.b#4 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=tvf_templated_select_relation_arg_using_select_star.[a#3, b#4]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_templated_select_relation_arg_using_select_star.[a#3, b#4]
        +-tvf=tvf_templated_select_relation_arg_using_select_star((ANY TABLE) -> ANY TABLE)
        +-signature=(TABLE<a INT64, b INT64>) -> TABLE<a INT64, b INT64>
        +-argument_list=
        | +-FunctionArgument
        |   +-scan=
        |   | +-TableScan(column_list=TwoIntsView.[a#1, b#2], table=TwoIntsView, column_index_list=[0, 1])
        |   +-argument_column_list=TwoIntsView.[a#1, b#2]
        +-column_index_list=[0, 1]

With Templated SQL TVF signature:
  tvf_templated_select_relation_arg_using_select_star(TABLE<a INT64, b INT64>) -> TABLE<a INT64, b INT64>
containing resolved templated query:
QueryStmt
+-output_column_list=
| +-t.a#1 AS a [INT64]
| +-t.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=t.[a#1, b#2]
    +-input_scan=
      +-RelationArgumentScan(column_list=t.[a#1, b#2], name="t")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-tvf_templated_select_relation_arg_using_select_star.a#3 AS a [INT64]
| +-tvf_templated_select_relation_arg_using_select_star.b#4 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=tvf_templated_select_relation_arg_using_select_star.[a#3, b#4]
    +-input_scan=
      +-WithScan
        +-column_list=tvf_templated_select_relation_arg_using_select_star.[a#3, b#4]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name='t'
        |   +-with_subquery=
        |     +-ProjectScan
        |       +-column_list=TwoIntsView.[a#1, b#2]
        |       +-expr_list=
        |       | +-a#1 := Literal(type=INT64, value=1)
        |       | +-b#2 := Literal(type=INT64, value=2)
        |       +-input_scan=
        |         +-SingleRowScan
        +-query=
          +-ProjectScan
            +-column_list=tvf_templated_select_relation_arg_using_select_star.[a#3, b#4]
            +-input_scan=
              +-WithRefScan(column_list=tvf_templated_select_relation_arg_using_select_star.[a#3, b#4], with_query_name='t')
==

[no_run_unparser]
SELECT * FROM DefinerRightsView;
--
QueryStmt
+-output_column_list=
| +-DefinerRightsView.a#1 AS a [INT64]
| +-DefinerRightsView.b#2 AS b [STRING]
| +-DefinerRightsView.c#3 AS c [BOOL]
+-query=
  +-ProjectScan
    +-column_list=DefinerRightsView.[a#1, b#2, c#3]
    +-input_scan=
      +-TableScan(column_list=DefinerRightsView.[a#1, b#2, c#3], table=DefinerRightsView, column_index_list=[0, 1, 2])


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-DefinerRightsView.a#1 AS a [INT64]
| +-DefinerRightsView.b#2 AS b [STRING]
| +-DefinerRightsView.c#3 AS c [BOOL]
+-query=
  +-ProjectScan
    +-column_list=DefinerRightsView.[a#1, b#2, c#3]
    +-input_scan=
      +-ExecuteAsRoleScan
        +-column_list=DefinerRightsView.[a#1, b#2, c#3]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=DefinerRightsView.[a#4, b#5, c#6]
        |   +-expr_list=
        |   | +-a#4 := Literal(type=INT64, value=1)
        |   | +-b#5 := Literal(type=STRING, value="x")
        |   | +-c#6 := Literal(type=BOOL, value=false)
        |   +-input_scan=
        |     +-SingleRowScan
        +-original_inlined_view=DefinerRightsView
        +-original_inlined_tvf=<null>
==

[no_run_unparser]
SELECT * FROM UnspecifiedRightsView;
--
QueryStmt
+-output_column_list=
| +-UnspecifiedRightsView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[UnspecifiedRightsView.a#1]
    +-input_scan=
      +-TableScan(column_list=[UnspecifiedRightsView.a#1], table=UnspecifiedRightsView, column_index_list=[0])


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-UnspecifiedRightsView.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[UnspecifiedRightsView.a#1]
    +-input_scan=
      +-ExecuteAsRoleScan
        +-column_list=[UnspecifiedRightsView.a#1]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[UnspecifiedRightsView.a#2]
        |   +-expr_list=
        |   | +-a#2 := Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-original_inlined_view=UnspecifiedRightsView
        +-original_inlined_tvf=<null>
==

SELECT * FROM TwoIntsView@{scan_hint=whatever} v;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-TwoIntsView.a#1 AS a [INT64]
| +-TwoIntsView.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=TwoIntsView.[a#1, b#2]
    +-input_scan=
      +-TableScan
        +-column_list=TwoIntsView.[a#1, b#2]
        +-hint_list=
        | +-scan_hint := Literal(type=STRING, value="whatever")
        +-table=TwoIntsView
        +-column_index_list=[0, 1]
        +-alias="v"

Rewrite ERROR: generic::unimplemented: Hints are not supported on invocations of inlined views.
==

SELECT v1.a, v2.b FROM ScanTableView v1, ScanTableView v2;
--
QueryStmt
+-output_column_list=
| +-ScanTableView.a#1 AS a [INT64]
| +-ScanTableView.b#4 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=ScanTableView.[a#1, b#4]
    +-input_scan=
      +-JoinScan
        +-column_list=ScanTableView.[a#1, b#4]
        +-left_scan=
        | +-TableScan(column_list=[ScanTableView.a#1], table=ScanTableView, column_index_list=[0], alias='v1')
        +-right_scan=
          +-TableScan(column_list=[ScanTableView.b#4], table=ScanTableView, column_index_list=[1], alias='v2')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-ScanTableView.a#1 AS a [INT64]
| +-ScanTableView.b#4 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=ScanTableView.[a#1, b#4]
    +-input_scan=
      +-JoinScan
        +-column_list=ScanTableView.[a#1, b#4]
        +-left_scan=
        | +-ProjectScan
        |   +-column_list=[ScanTableView.a#1, TwoIntegers.value#5]
        |   +-input_scan=
        |     +-TableScan(column_list=[ScanTableView.a#1, TwoIntegers.value#5], table=TwoIntegers, column_index_list=[0, 1])
        +-right_scan=
          +-ProjectScan
            +-column_list=[TwoIntegers.key#6, ScanTableView.b#4]
            +-input_scan=
              +-TableScan(column_list=[TwoIntegers.key#6, ScanTableView.b#4], table=TwoIntegers, column_index_list=[0, 1])
