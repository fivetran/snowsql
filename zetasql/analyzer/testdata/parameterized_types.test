[default language_features=PARAMETERIZED_TYPES,NUMERIC_TYPE,BIGNUMERIC_TYPE,CREATE_TABLE_NOT_NULL,CREATE_TABLE_FIELD_ANNOTATIONS]

create table t (
  col_string            string(10),
  col_string_max        string(MAX)    not null,
  col_bytes             bytes(100),
  col_bytes_max         bytes(MAX),
  col_numeric1          numeric(20)    not null,
  col_numeric2          numeric(30, 5)  options(x=123),
  col_numeric3          numeric(30, 5)  options(ROUNDING_MODE="round_half_even"),
  col_numeric4          numeric(31, 5)  options(ROUNDING_MODE="round_half_away_from_zero"),
  col_bignumeric1       bignumeric(36),
  col_bignumeric2       bignumeric(75, 38),
  col_bignumeric3       bignumeric(70, 35) options(ROUNDING_MODE="round_half_even"),
  col_bignumeric4       bignumeric(71, 35) options(ROUNDING_MODE="round_half_away_from_zero"),
  col_bignumeric_max    bignumeric(MAX),
  col_bignumeric_max2   bignumeric(MAX, 30),
);
--
CreateTableStmt
+-name_path=t
+-column_definition_list=
  +-ColumnDefinition
  | +-name="col_string"
  | +-type=STRING
  | +-annotations=
  | | +-ColumnAnnotations(type_parameters=(max_length=10))
  | +-column=t.col_string#1
  +-ColumnDefinition
  | +-name="col_string_max"
  | +-type=STRING
  | +-annotations=
  | | +-ColumnAnnotations(not_null=TRUE, type_parameters=(max_length=MAX))
  | +-column=t.col_string_max#2
  +-ColumnDefinition
  | +-name="col_bytes"
  | +-type=BYTES
  | +-annotations=
  | | +-ColumnAnnotations(type_parameters=(max_length=100))
  | +-column=t.col_bytes#3
  +-ColumnDefinition
  | +-name="col_bytes_max"
  | +-type=BYTES
  | +-annotations=
  | | +-ColumnAnnotations(type_parameters=(max_length=MAX))
  | +-column=t.col_bytes_max#4
  +-ColumnDefinition
  | +-name="col_numeric1"
  | +-type=NUMERIC
  | +-annotations=
  | | +-ColumnAnnotations(not_null=TRUE, type_parameters=(precision=20,scale=0))
  | +-column=t.col_numeric1#5
  +-ColumnDefinition
  | +-name="col_numeric2"
  | +-type=NUMERIC
  | +-annotations=
  | | +-ColumnAnnotations
  | |   +-option_list=
  | |   | +-x := Literal(type=INT64, value=123)
  | |   +-type_parameters=(precision=30,scale=5)
  | +-column=t.col_numeric2#6
  +-ColumnDefinition
  | +-name="col_numeric3"
  | +-type=NUMERIC
  | +-annotations=
  | | +-ColumnAnnotations
  | |   +-option_list=
  | |   | +-ROUNDING_MODE := Literal(type=STRING, value="round_half_even")
  | |   +-type_parameters=(precision=30,scale=5)
  | +-column=t.col_numeric3#7
  +-ColumnDefinition
  | +-name="col_numeric4"
  | +-type=NUMERIC
  | +-annotations=
  | | +-ColumnAnnotations
  | |   +-option_list=
  | |   | +-ROUNDING_MODE := Literal(type=STRING, value="round_half_away_from_zero")
  | |   +-type_parameters=(precision=31,scale=5)
  | +-column=t.col_numeric4#8
  +-ColumnDefinition
  | +-name="col_bignumeric1"
  | +-type=BIGNUMERIC
  | +-annotations=
  | | +-ColumnAnnotations(type_parameters=(precision=36,scale=0))
  | +-column=t.col_bignumeric1#9
  +-ColumnDefinition
  | +-name="col_bignumeric2"
  | +-type=BIGNUMERIC
  | +-annotations=
  | | +-ColumnAnnotations(type_parameters=(precision=75,scale=38))
  | +-column=t.col_bignumeric2#10
  +-ColumnDefinition
  | +-name="col_bignumeric3"
  | +-type=BIGNUMERIC
  | +-annotations=
  | | +-ColumnAnnotations
  | |   +-option_list=
  | |   | +-ROUNDING_MODE := Literal(type=STRING, value="round_half_even")
  | |   +-type_parameters=(precision=70,scale=35)
  | +-column=t.col_bignumeric3#11
  +-ColumnDefinition
  | +-name="col_bignumeric4"
  | +-type=BIGNUMERIC
  | +-annotations=
  | | +-ColumnAnnotations
  | |   +-option_list=
  | |   | +-ROUNDING_MODE := Literal(type=STRING, value="round_half_away_from_zero")
  | |   +-type_parameters=(precision=71,scale=35)
  | +-column=t.col_bignumeric4#12
  +-ColumnDefinition
  | +-name="col_bignumeric_max"
  | +-type=BIGNUMERIC
  | +-annotations=
  | | +-ColumnAnnotations(type_parameters=(precision=MAX,scale=0))
  | +-column=t.col_bignumeric_max#13
  +-ColumnDefinition
    +-name="col_bignumeric_max2"
    +-type=BIGNUMERIC
    +-annotations=
    | +-ColumnAnnotations(type_parameters=(precision=MAX,scale=30))
    +-column=t.col_bignumeric_max2#14
==

# Parameterized types - complex types with parameters and annotations such as not null.
create table t (
  c1  struct<a1 numeric(10, 5) not null, a2 struct<bytes(10)>, a3 numeric(10, 5) options(ROUNDING_MODE="round_half_even")>,
  c2  array<struct<bytes(100)> options(x=456)>
);
--
CreateTableStmt
+-name_path=t
+-column_definition_list=
  +-ColumnDefinition
  | +-name="c1"
  | +-type=STRUCT<a1 NUMERIC, a2 STRUCT<BYTES>, a3 NUMERIC>
  | +-annotations=
  | | +-ColumnAnnotations
  | |   +-child_list=
  | |     +-ColumnAnnotations(not_null=TRUE, type_parameters=(precision=10,scale=5))
  | |     +-ColumnAnnotations
  | |     | +-child_list=
  | |     |   +-ColumnAnnotations(type_parameters=(max_length=10))
  | |     +-ColumnAnnotations
  | |       +-option_list=
  | |       | +-ROUNDING_MODE := Literal(type=STRING, value="round_half_even")
  | |       +-type_parameters=(precision=10,scale=5)
  | +-column=t.c1#1
  +-ColumnDefinition
    +-name="c2"
    +-type=ARRAY<STRUCT<BYTES>>
    +-annotations=
    | +-ColumnAnnotations
    |   +-child_list=
    |     +-ColumnAnnotations
    |       +-option_list=
    |       | +-x := Literal(type=INT64, value=456)
    |       +-child_list=
    |         +-ColumnAnnotations(type_parameters=(max_length=100))
    +-column=t.c2#2
==

# Parameterized types - deeply nested struct or array with parameters and round_half_even (>= 3 layers)
create table t (
  c1  struct<f1 array<struct<a1 numeric(10,5), b1 string>>,
             f2 struct<
               s1 struct<a1 bytes(10),
               a2 date,
               a3 bignumeric(60,30) options(ROUNDING_MODE="round_half_even"),
               a4 numeric(10,3) options(ROUNDING_MODE="round_half_away_from_zero"),
               a5 array<numeric(10,3) options(ROUNDING_MODE="round_half_even")>
             >>>,
  c2  array<struct<a1 array<string(666)>>>
);
--
CreateTableStmt
+-name_path=t
+-column_definition_list=
  +-ColumnDefinition
  | +-name="c1"
  | +-type=STRUCT<f1 ARRAY<STRUCT<a1 NUMERIC, b1 STRING>>, f2 STRUCT<s1 STRUCT<a1 BYTES, a2 DATE, a3 BIGNUMERIC, a4 NUMERIC, a5 ARRAY<NUMERIC>>>>
  | +-annotations=
  | | +-ColumnAnnotations
  | |   +-child_list=
  | |     +-ColumnAnnotations
  | |     | +-child_list=
  | |     |   +-ColumnAnnotations
  | |     |     +-child_list=
  | |     |       +-ColumnAnnotations(type_parameters=(precision=10,scale=5))
  | |     +-ColumnAnnotations
  | |       +-child_list=
  | |         +-ColumnAnnotations
  | |           +-child_list=
  | |             +-ColumnAnnotations(type_parameters=(max_length=10))
  | |             +-ColumnAnnotations
  | |             +-ColumnAnnotations
  | |             | +-option_list=
  | |             | | +-ROUNDING_MODE := Literal(type=STRING, value="round_half_even")
  | |             | +-type_parameters=(precision=60,scale=30)
  | |             +-ColumnAnnotations
  | |             | +-option_list=
  | |             | | +-ROUNDING_MODE := Literal(type=STRING, value="round_half_away_from_zero")
  | |             | +-type_parameters=(precision=10,scale=3)
  | |             +-ColumnAnnotations
  | |               +-child_list=
  | |                 +-ColumnAnnotations
  | |                   +-option_list=
  | |                   | +-ROUNDING_MODE := Literal(type=STRING, value="round_half_even")
  | |                   +-type_parameters=(precision=10,scale=3)
  | +-column=t.c1#1
  +-ColumnDefinition
    +-name="c2"
    +-type=ARRAY<STRUCT<a1 ARRAY<STRING>>>
    +-annotations=
    | +-ColumnAnnotations
    |   +-child_list=
    |     +-ColumnAnnotations
    |       +-child_list=
    |         +-ColumnAnnotations
    |           +-child_list=
    |             +-ColumnAnnotations(type_parameters=(max_length=666))
    +-column=t.c2#2
==

# Parameterized types - deeply nested struct or array with parameters (>= 3 layers)
create table t (
  c1  struct<f1 array<struct<a1 numeric(10,5), b1 string>>,
             f2 struct<s1 struct<a1 bytes(10), a2 date, a3 bignumeric(60,30)>>>,
  c2  array<struct<a1 array<string(666)>>>
);
--
CreateTableStmt
+-name_path=t
+-column_definition_list=
  +-ColumnDefinition
  | +-name="c1"
  | +-type=STRUCT<f1 ARRAY<STRUCT<a1 NUMERIC, b1 STRING>>, f2 STRUCT<s1 STRUCT<a1 BYTES, a2 DATE, a3 BIGNUMERIC>>>
  | +-annotations=
  | | +-ColumnAnnotations
  | |   +-child_list=
  | |     +-ColumnAnnotations
  | |     | +-child_list=
  | |     |   +-ColumnAnnotations
  | |     |     +-child_list=
  | |     |       +-ColumnAnnotations(type_parameters=(precision=10,scale=5))
  | |     +-ColumnAnnotations
  | |       +-child_list=
  | |         +-ColumnAnnotations
  | |           +-child_list=
  | |             +-ColumnAnnotations(type_parameters=(max_length=10))
  | |             +-ColumnAnnotations
  | |             +-ColumnAnnotations(type_parameters=(precision=60,scale=30))
  | +-column=t.c1#1
  +-ColumnDefinition
    +-name="c2"
    +-type=ARRAY<STRUCT<a1 ARRAY<STRING>>>
    +-annotations=
    | +-ColumnAnnotations
    |   +-child_list=
    |     +-ColumnAnnotations
    |       +-child_list=
    |         +-ColumnAnnotations
    |           +-child_list=
    |             +-ColumnAnnotations(type_parameters=(max_length=666))
    +-column=t.c2#2
==

[language_features={{|PARAMETERIZED_TYPES}}]
create table t (col_string string(10));
--
ALTERNATION GROUP: <empty>
--
ERROR: Parameterized types are not supported [at 1:34]
create table t (col_string string(10));
                                 ^
--
ALTERNATION GROUP: PARAMETERIZED_TYPES
--
CreateTableStmt
+-name_path=t
+-column_definition_list=
  +-ColumnDefinition
    +-name="col_string"
    +-type=STRING
    +-annotations=
    | +-ColumnAnnotations(type_parameters=(max_length=10))
    +-column=t.col_string#1
==

[language_features={{PARAMETERIZED_TYPES,NUMERIC_TYPE|NUMERIC_TYPE}}]
create table t (col_numeric numeric(10, 5));
--
ALTERNATION GROUP: PARAMETERIZED_TYPES,NUMERIC_TYPE
--
CreateTableStmt
+-name_path=t
+-column_definition_list=
  +-ColumnDefinition
    +-name="col_numeric"
    +-type=NUMERIC
    +-annotations=
    | +-ColumnAnnotations(type_parameters=(precision=10,scale=5))
    +-column=t.col_numeric#1
--
ALTERNATION GROUP: NUMERIC_TYPE
--
ERROR: Parameterized types are not supported [at 1:36]
create table t (col_numeric numeric(10, 5));
                                   ^
==

#
# Invalid parameterized types.
#
create table t (s1 array<string>(100));
--
ERROR: ARRAY<STRING> type cannot have type parameters by itself, it can only have type parameters on its element type [at 1:33]
create table t (s1 array<string>(100));
                                ^
==

create table t (s1 struct<f1 string>(200, 200));
--
ERROR: STRUCT<f1 STRING> type cannot have type parameters by itself, it can only have type parameters on its struct fields [at 1:37]
create table t (s1 struct<f1 string>(200, 200));
                                    ^
==

create table t (s1 string("abc"));
--
ERROR: STRING length parameter must be an integer or MAX keyword [at 1:26]
create table t (s1 string("abc"));
                         ^
==

create table t (s1 string(1, 2));
--
ERROR: STRING type can only have one parameter. Found 2 parameters [at 1:26]
create table t (s1 string(1, 2));
                         ^
==

create table t (s1 bytes(1, 2, 3));
--
ERROR: BYTES type can only have one parameter. Found 3 parameters [at 1:25]
create table t (s1 bytes(1, 2, 3));
                        ^
==

create table t (n1 numeric(100));
--
ERROR: In NUMERIC(P), P must be between 1 and 29 [at 1:27]
create table t (n1 numeric(100));
                          ^
==

create table t (n1 numeric(1, 2, 3));
--
ERROR: NUMERIC type can only have 1 or 2 parameters. Found 3 parameters [at 1:27]
create table t (n1 numeric(1, 2, 3));
                          ^
==

create table t (n1 numeric(20, 10));
--
ERROR: In NUMERIC(P, S), S must be between 0 and 9 [at 1:27]
create table t (n1 numeric(20, 10));
                          ^
==

create table t (n1 numeric(38, 3));
--
ERROR: In NUMERIC(P, 3), P must be between 3 and 32 [at 1:27]
create table t (n1 numeric(38, 3));
                          ^
==

create table t (n1 bignumeric(70));
--
ERROR: In BIGNUMERIC(P), P must be between 1 and 38 [at 1:30]
create table t (n1 bignumeric(70));
                             ^
==

create table t (n1 bignumeric(50, 40));
--
ERROR: In BIGNUMERIC(P, S), S must be between 0 and 38 [at 1:30]
create table t (n1 bignumeric(50, 40));
                             ^
==

create table t (n1 bignumeric(70, 30));
--
ERROR: In BIGNUMERIC(P, 30), P must be between 30 and 68 [at 1:30]
create table t (n1 bignumeric(70, 30));
                             ^
==

create table t (n1 numeric("random"));
--
ERROR: NUMERIC precision must be an integer [at 1:27]
create table t (n1 numeric("random"));
                          ^
==

create table t (a unknown_type(123));
--
ERROR: Type not found: unknown_type [at 1:19]
create table t (a unknown_type(123));
                  ^
==

[language_features={{PARAMETERIZED_TYPES,NUMERIC_TYPE|NUMERIC_TYPE}}]
select {{ try_cast|cast}}(1.2 as NUMERIC(8,2));
--
ALTERNATION GROUP: PARAMETERIZED_TYPES,NUMERIC_TYPE, try_cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(NUMERIC -> NUMERIC)
    |     +-Literal(type=NUMERIC, value=1.2, has_explicit_type=TRUE)
    |     +-return_null_on_error=TRUE
    |     +-type_modifiers=type_parameters:(precision=8,scale=2)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: PARAMETERIZED_TYPES,NUMERIC_TYPE,cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(NUMERIC -> NUMERIC)
    |     +-Literal(type=NUMERIC, value=1.2, has_explicit_type=TRUE)
    |     +-type_modifiers=type_parameters:(precision=8,scale=2)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: NUMERIC_TYPE, try_cast
--
ERROR: Parameterized types are not supported [at 1:32]
select  try_cast(1.2 as NUMERIC(8,2));
                               ^
--
ALTERNATION GROUP: NUMERIC_TYPE,cast
--
ERROR: Parameterized types are not supported [at 1:27]
select cast(1.2 as NUMERIC(8,2));
                          ^
==

# Test cast with a string Array with type parameters.
select cast(["hi", "hello", "hola"] as ARRAY<STRING(12)>);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(ARRAY<STRING> -> ARRAY<STRING>)
    |     +-Literal(type=ARRAY<STRING>, value=["hi", "hello", "hola"], has_explicit_type=TRUE)
    |     +-type_modifiers=type_parameters:[(max_length=12)]
    +-input_scan=
      +-SingleRowScan
==

# Test cast from int Array to string Array with type parameters.
[language_features={{|V_1_1_CAST_DIFFERENT_ARRAY_TYPES,PARAMETERIZED_TYPES}}]
select cast([0,1,2] as ARRAY<STRING(12)>);
--
ALTERNATION GROUP: <empty>
--
ERROR: Parameterized types are not supported [at 1:36]
select cast([0,1,2] as ARRAY<STRING(12)>);
                                   ^
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,PARAMETERIZED_TYPES
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(ARRAY<STRING> -> ARRAY<STRING>)
    |     +-Literal(type=ARRAY<STRING>, value=["0", "1", "2"], has_explicit_type=TRUE)
    |     +-type_modifiers=type_parameters:[(max_length=12)]
    +-input_scan=
      +-SingleRowScan
==

# Test cast with a nested struct with subfields having type parameters.
[language_features={{|V_1_1_CAST_DIFFERENT_ARRAY_TYPES,PARAMETERIZED_TYPES,NUMERIC_TYPE,BIGNUMERIC_TYPE}}]
select cast(struct(false, 2, struct(123, [5], struct(true, 1000)), "hello", ["123", "123456", "1"]) as
            STRUCT<BOOL, NUMERIC(8), STRUCT<BIGNUMERIC(MAX, 2), ARRAY<STRING(2)>, STRUCT<BOOL, NUMERIC(6, 1)>>, BYTES(10), ARRAY<STRING(5)>>);
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: NUMERIC [at 2:26]
            STRUCT<BOOL, NUMERIC(8), STRUCT<BIGNUMERIC(MAX, 2), ARRAY<STRING(...
                         ^
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,PARAMETERIZED_TYPES,NUMERIC_TYPE,BIGNUMERIC_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<BOOL, NUMERIC, STRUCT<BIGNUMERIC, ARRAY<STRING>, STRUCT<BOOL, NUMERIC>>, BYTES, ARRAY<STRING>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRUCT<BOOL, NUMERIC, STRUCT<BIGNUMERIC, ARRAY<STRING>, STRUCT<BOOL, NUMERIC>>, BYTES, ARRAY<STRING>> -> STRUCT<BOOL, NUMERIC, STRUCT<BIGNUMERIC, ARRAY<STRING>, STRUCT<BOOL, NUMERIC>>, BYTES, ARRAY<STRING>>)
    |     +-Literal(type=STRUCT<BOOL, NUMERIC, STRUCT<BIGNUMERIC, ARRAY<STRING>, STRUCT<BOOL, NUMERIC>>, BYTES, ARRAY<STRING>>, value={false, 2, {123, ["5"], {true, 1000}}, b"hello", ["123", "123456", "1"]}, has_explicit_type=TRUE)
    |     +-type_modifiers=type_parameters:[null,(precision=8,scale=0),[(precision=MAX,scale=2),[(max_length=2)],[null,(precision=6,scale=1)]],(max_length=10),[(max_length=5)]]
    +-input_scan=
      +-SingleRowScan
==

select cast(coalesce(struct(false, 1.23,
                            array<zetasql_test__.TestExtraPB>[""],
                            CAST(1 AS zetasql_test__.TestEnum))) AS
            STRUCT<BOOL, STRING(MAX), ARRAY<alt_descriptor_pool.zetasql_test__.TestExtraPB>,
                   alt_descriptor_pool.zetasql_test__.TestEnum>)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<BOOL, STRING, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRUCT<BOOL, DOUBLE, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>> -> STRUCT<BOOL, STRING, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>)
    |     +-FunctionCall(ZetaSQL:coalesce(repeated(1) STRUCT<BOOL, DOUBLE, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>) -> STRUCT<BOOL, DOUBLE, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>)
    |       +-MakeStruct
    |         +-type=STRUCT<BOOL, DOUBLE, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>
    |         +-field_list=
    |           +-Literal(type=BOOL, value=false)
    |           +-Literal(type=DOUBLE, value=1.23, float_literal_id=1)
    |           +-Literal(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, value=[{}], has_explicit_type=TRUE)
    |           +-Literal(type=ENUM<zetasql_test__.TestEnum>, value=TESTENUM1, has_explicit_type=TRUE)
    |     +-type_modifiers=type_parameters:[null,(max_length=MAX),null,null]
    +-input_scan=
      +-SingleRowScan
==

select cast((2, [("hello", 3, (Numeric "121", Numeric "4"))]) as
STRUCT<a NUMERIC(5), b ARRAY<STRUCT<STRING(5), INT64, STRUCT<NUMERIC(5), NUMERIC>>>>);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<a NUMERIC, b ARRAY<STRUCT<STRING, INT64, STRUCT<NUMERIC, NUMERIC>>>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-MakeStruct
    |     +-type=STRUCT<a NUMERIC, b ARRAY<STRUCT<STRING, INT64, STRUCT<NUMERIC, NUMERIC>>>>
    |     +-field_list=
    |       +-Cast(NUMERIC -> NUMERIC)
    |       | +-Literal(type=NUMERIC, value=2, has_explicit_type=TRUE)
    |       | +-type_modifiers=type_parameters:(precision=5,scale=0)
    |       +-Cast(ARRAY<STRUCT<STRING, INT64, STRUCT<NUMERIC, NUMERIC>>> -> ARRAY<STRUCT<STRING, INT64, STRUCT<NUMERIC, NUMERIC>>>)
    |         +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRUCT<STRING, INT64, STRUCT<NUMERIC, NUMERIC>>) -> ARRAY<STRUCT<STRING, INT64, STRUCT<NUMERIC, NUMERIC>>>)
    |           +-MakeStruct
    |             +-type=STRUCT<STRING, INT64, STRUCT<NUMERIC, NUMERIC>>
    |             +-field_list=
    |               +-Literal(type=STRING, value="hello")
    |               +-Literal(type=INT64, value=3)
    |               +-Literal(type=STRUCT<NUMERIC, NUMERIC>, value={121, 4}, has_explicit_type=TRUE)
    |         +-type_modifiers=type_parameters:[[(max_length=5),null,[(precision=5,scale=0),null]]]
    +-input_scan=
      +-SingleRowScan
==

select cast((2, cast("hello" as STRING(5))) as STRUCT<a INT32, b STRING(2)>);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<a INT32, b STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-MakeStruct
    |     +-type=STRUCT<a INT32, b STRING>
    |     +-field_list=
    |       +-Literal(type=INT32, value=2, has_explicit_type=TRUE)
    |       +-Cast(STRING -> STRING)
    |         +-Cast(STRING -> STRING)
    |           +-Literal(type=STRING, value="hello", has_explicit_type=TRUE)
    |           +-type_modifiers=type_parameters:(max_length=5)
    |         +-type_modifiers=type_parameters:(max_length=2)
    +-input_scan=
      +-SingleRowScan
==

select cast(10 as string(-1))
--
ERROR: Syntax error: Unexpected "-" [at 1:26]
select cast(10 as string(-1))
                         ^
==

select cast(10 as bytes(2, 4))
--
ERROR: BYTES type can only have one parameter. Found 2 parameters [at 1:24]
select cast(10 as bytes(2, 4))
                       ^
==

select cast(10 as numeric(2, 4))
--
ERROR: In NUMERIC(P, 4), P must be between 4 and 33 [at 1:26]
select cast(10 as numeric(2, 4))
                         ^
==

select cast(n1 as bignumeric(60, 40));
--
ERROR: In BIGNUMERIC(P, S), S must be between 0 and 38 [at 1:29]
select cast(n1 as bignumeric(60, 40));
                            ^
==

select cast(a1 as array<string>(10));
--
ERROR: ARRAY<STRING> type cannot have type parameters by itself, it can only have type parameters on its element type [at 1:32]
select cast(a1 as array<string>(10));
                               ^
==

select cast(s1 as struct<string, int64>(10));
--
ERROR: STRUCT<STRING, INT64> type cannot have type parameters by itself, it can only have type parameters on its struct fields [at 1:40]
select cast(s1 as struct<string, int64>(10));
                                       ^
==

select CAST(9999999999999999999999999999.999999999 as numeric(29, 1));
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(NUMERIC -> NUMERIC)
    |     +-Literal(type=NUMERIC, value=9999999999999999999999999999.999999999, has_explicit_type=TRUE)
    |     +-type_modifiers=type_parameters:(precision=29,scale=1)
    +-input_scan=
      +-SingleRowScan
==

# Ideally the input struct to the cast should be treated like a struct literal,
# but internally it is actually a struct constructor function.  We do fold the
# struct constructor into a literal, but the struct constructor fields are type
# DOUBLE so we lose precision when converting to the literal.
select cast((99999999999999999999999999.999999999, 99999999999999999999999999.999999999) as struct<numeric(29,1), bignumeric(29,1)>);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<NUMERIC, BIGNUMERIC>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRUCT<NUMERIC, BIGNUMERIC> -> STRUCT<NUMERIC, BIGNUMERIC>)
    |     +-Literal(type=STRUCT<NUMERIC, BIGNUMERIC>, value={100000000000000004764729344, 100000000000000004764729344}, has_explicit_type=TRUE)
    |     +-type_modifiers=type_parameters:[(precision=29,scale=1),(precision=29,scale=1)]
    +-input_scan=
      +-SingleRowScan
==

select cast([numeric '99999999999999999999999999.999999999'] as array<numeric(29,1)>);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<NUMERIC>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(ARRAY<NUMERIC> -> ARRAY<NUMERIC>)
    |     +-Literal(type=ARRAY<NUMERIC>, value=[99999999999999999999999999.999999999], has_explicit_type=TRUE)
    |     +-type_modifiers=type_parameters:[(precision=29,scale=1)]
    +-input_scan=
      +-SingleRowScan
