# Nested UPDATE whose WHERE clause needs to access another column in the table.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable t
SET (
  UPDATE t.KitchenSink.repeated_int32_val v
  SET v = 0
  WHERE v = {{|TestTable.|t.}}KitchenSink.int64_val)
WHERE true
--
ALTERNATION GROUP: <empty>
--
ERROR: Unrecognized name: KitchenSink [at 5:13]
  WHERE v = KitchenSink.int64_val)
            ^
--
ALTERNATION GROUPS:
    TestTable.
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,TestTable.
--
ERROR: Unrecognized name: TestTable [at 5:13]
  WHERE v = TestTable.KitchenSink.int64_val)
            ^
--
ALTERNATION GROUP: t.
--
ERROR: Unrecognized name: t [at 5:13]
  WHERE v = t.KitchenSink.int64_val)
            ^
--
ALTERNATION GROUPS:
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,t.
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.v#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   +-Cast(INT32 -> INT64)
        |   | +-ColumnRef(type=INT32, column=$array.v#4)
        |   +-GetProtoField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |     +-field_descriptor=int64_val
        |     +-default_value=0
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT32, column=$array.v#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=INT32, value=0)
==

# Nested INSERT that needs to access another column in the table.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable t
SET (
  INSERT t.KitchenSink.repeated_int32_val
  VALUES ({{|TestTable.|t.}}KitchenSink.int64_val))
WHERE true
--
ALTERNATION GROUP: <empty>
--
ERROR: Unrecognized name: KitchenSink [at 4:11]
  VALUES (KitchenSink.int64_val))
          ^
--
ALTERNATION GROUPS:
    TestTable.
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,TestTable.
--
ERROR: Unrecognized name: TestTable [at 4:11]
  VALUES (TestTable.KitchenSink.int64_val))
          ^
--
ALTERNATION GROUP: t.
--
ERROR: Unrecognized name: t [at 4:11]
  VALUES (t.KitchenSink.int64_val))
          ^
--
ALTERNATION GROUPS:
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,t.
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int32_val#4)
    +-insert_list=
      +-InsertStmt
        +-row_list=
          +-InsertRow
            +-value_list=
              +-DMLValue
                +-value=
                  +-Cast(INT64 -> INT32)
                    +-GetProtoField
                      +-type=INT64
                      +-expr=
                      | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                      +-field_descriptor=int64_val
                      +-default_value=0
==

# Nested INSERT with a query that needs to access another column in the table.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable t
SET (
  INSERT t.KitchenSink.repeated_int32_val
  SELECT * FROM {{|TestTable.|t.}}KitchenSink.repeated_int64_val)
WHERE true
--
ALTERNATION GROUP: <empty>
--
ERROR: Table not found: KitchenSink.repeated_int64_val [at 4:17]
  SELECT * FROM KitchenSink.repeated_int64_val)
                ^
--
ALTERNATION GROUPS:
    TestTable.
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,TestTable.
--
ERROR: Table not found: TestTable.KitchenSink.repeated_int64_val [at 4:17]
  SELECT * FROM TestTable.KitchenSink.repeated_int64_val)
                ^
--
ALTERNATION GROUP: t.
--
ERROR: Table not found: t.KitchenSink.repeated_int64_val [at 4:17]
  SELECT * FROM t.KitchenSink.repeated_int64_val)
                ^
--
ALTERNATION GROUP: V_1_2_CORRELATED_REFS_IN_NESTED_DML,
--
ERROR: Aliases referenced in the from clause must refer to preceding scans, and cannot refer to columns on those scans. KitchenSink refers to a column and must be qualified with a table name. [at 4:17]
  SELECT * FROM KitchenSink.repeated_int64_val)
                ^
--
ALTERNATION GROUP: V_1_2_CORRELATED_REFS_IN_NESTED_DML,t.
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int32_val#4)
    +-insert_list=
      +-InsertStmt
        +-query_parameter_list=
        | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        +-query=
        | +-ProjectScan
        |   +-column_list=[$insert_cast.repeated_int64_val#6]
        |   +-expr_list=
        |   | +-repeated_int64_val#6 :=
        |   |   +-Cast(INT64 -> INT32)
        |   |     +-ColumnRef(type=INT64, column=$array.repeated_int64_val#5)
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=[$array.repeated_int64_val#5]
        |       +-input_scan=
        |         +-ArrayScan
        |           +-column_list=[$array.repeated_int64_val#5]
        |           +-array_expr=
        |           | +-GetProtoField
        |           |   +-type=ARRAY<INT64>
        |           |   +-expr=
        |           |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
        |           |   +-field_descriptor=repeated_int64_val
        |           |   +-default_value=[]
        |           +-element_column=$array.repeated_int64_val#5
        +-query_output_column_list=[$insert_cast.repeated_int64_val#6]
==

# Triply-nested INSERT with query that references columns at the various levels.
[language_features=V_1_2_CORRELATED_REFS_IN_NESTED_DML]
UPDATE RecursivePBTable t SET (
  UPDATE t.RecursivePB.repeated_recursive_pb a SET (
    UPDATE a.repeated_recursive_pb b SET (
      INSERT b.repeated_recursive_pb
      SELECT NEW zetasql_test__.RecursivePB(
        (t.RecursivePB.int64_val + a.int64_val + b.int64_val + 10)
        AS int64_val))
    WHERE true)
  WHERE true)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[RecursivePBTable.RecursivePB#1], table=RecursivePBTable, column_index_list=[0], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
    |   +-field_descriptor=repeated_recursive_pb
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.a#2)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$array.a#2)
            |   +-field_descriptor=repeated_recursive_pb
            |   +-default_value=[]
            +-element_column=
            | +-ColumnHolder(column=$array.b#3)
            +-update_list=
              +-UpdateStmt
                +-where_expr=
                | +-Literal(type=BOOL, value=true)
                +-update_item_list=
                  +-UpdateItem
                    +-target=
                    | +-GetProtoField
                    |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                    |   +-expr=
                    |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$array.b#3)
                    |   +-field_descriptor=repeated_recursive_pb
                    |   +-default_value=[]
                    +-element_column=
                    | +-ColumnHolder(column=$array.repeated_recursive_pb#4)
                    +-insert_list=
                      +-InsertStmt
                        +-query_parameter_list=
                        | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
                        | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$array.a#2)
                        | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$array.b#3)
                        +-query=
                        | +-ProjectScan
                        |   +-column_list=[$insert.$col1#5]
                        |   +-expr_list=
                        |   | +-$col1#5 :=
                        |   |   +-MakeProto
                        |   |     +-type=PROTO<zetasql_test__.RecursivePB>
                        |   |     +-field_list=
                        |   |       +-int64_val :=
                        |   |         +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                        |   |           +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                        |   |           | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                        |   |           | | +-GetProtoField
                        |   |           | | | +-type=INT64
                        |   |           | | | +-expr=
                        |   |           | | | | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1, is_correlated=TRUE)
                        |   |           | | | +-field_descriptor=int64_val
                        |   |           | | | +-default_value=0
                        |   |           | | +-GetProtoField
                        |   |           | |   +-type=INT64
                        |   |           | |   +-expr=
                        |   |           | |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$array.a#2, is_correlated=TRUE)
                        |   |           | |   +-field_descriptor=int64_val
                        |   |           | |   +-default_value=0
                        |   |           | +-GetProtoField
                        |   |           |   +-type=INT64
                        |   |           |   +-expr=
                        |   |           |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$array.b#3, is_correlated=TRUE)
                        |   |           |   +-field_descriptor=int64_val
                        |   |           |   +-default_value=0
                        |   |           +-Literal(type=INT64, value=10)
                        |   +-input_scan=
                        |     +-SingleRowScan
                        +-query_output_column_list=[$insert.$col1#5]
==

# Nested INSERT with a query that needs to access another column in the table,
# and that also involves a subquery with correlated references.
[language_features=V_1_2_CORRELATED_REFS_IN_NESTED_DML]
UPDATE TestTable t SET
  (INSERT KitchenSink.repeated_int64_val
   SELECT t.KitchenSink.int32_val + (SELECT (SELECT Key) FROM KeyValue))
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int64_val#4)
    +-insert_list=
      +-InsertStmt
        +-query_parameter_list=
        | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        +-query=
        | +-ProjectScan
        |   +-column_list=[$insert.$col1#9]
        |   +-expr_list=
        |   | +-$col1#9 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-Cast(INT32 -> INT64)
        |   |     | +-GetProtoField
        |   |     |   +-type=INT32
        |   |     |   +-expr=
        |   |     |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
        |   |     |   +-field_descriptor=int32_val
        |   |     |   +-default_value=77
        |   |     +-SubqueryExpr
        |   |       +-type=INT64
        |   |       +-subquery_type=SCALAR
        |   |       +-subquery=
        |   |         +-ProjectScan
        |   |           +-column_list=[$expr_subquery.$col1#8]
        |   |           +-expr_list=
        |   |           | +-$col1#8 :=
        |   |           |   +-SubqueryExpr
        |   |           |     +-type=INT64
        |   |           |     +-subquery_type=SCALAR
        |   |           |     +-parameter_list=
        |   |           |     | +-ColumnRef(type=INT64, column=KeyValue.Key#5)
        |   |           |     +-subquery=
        |   |           |       +-ProjectScan
        |   |           |         +-column_list=[$expr_subquery.Key#7]
        |   |           |         +-expr_list=
        |   |           |         | +-Key#7 := ColumnRef(type=INT64, column=KeyValue.Key#5, is_correlated=TRUE)
        |   |           |         +-input_scan=
        |   |           |           +-SingleRowScan
        |   |           +-input_scan=
        |   |             +-TableScan(column_list=[KeyValue.Key#5], table=KeyValue, column_index_list=[0])
        |   +-input_scan=
        |     +-SingleRowScan
        +-query_output_column_list=[$insert.$col1#9]
==

# Nested DELETE whose WHERE clause needs to access another column in the table.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable T SET
  (DELETE T.KitchenSink.repeated_int32_val v
   WHERE v = {{|TestTable.|t.}}KitchenSink.int64_val)
WHERE true
--
ALTERNATION GROUP: <empty>
--
ERROR: Unrecognized name: KitchenSink [at 3:14]
   WHERE v = KitchenSink.int64_val)
             ^
--
ALTERNATION GROUPS:
    TestTable.
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,TestTable.
--
ERROR: Unrecognized name: TestTable [at 3:14]
   WHERE v = TestTable.KitchenSink.int64_val)
             ^
--
ALTERNATION GROUP: t.
--
ERROR: Unrecognized name: t [at 3:14]
   WHERE v = t.KitchenSink.int64_val)
             ^
--
ALTERNATION GROUPS:
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,t.
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="T")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.v#4)
    +-delete_list=
      +-DeleteStmt
        +-where_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-Cast(INT32 -> INT64)
            | +-ColumnRef(type=INT32, column=$array.v#4)
            +-GetProtoField
              +-type=INT64
              +-expr=
              | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
              +-field_descriptor=int64_val
              +-default_value=0
==

# Nested DELETE where the alias overrides the table alias.
[language_features=V_1_2_CORRELATED_REFS_IN_NESTED_DML]
UPDATE TestTable t
SET (
  DELETE t.KitchenSink.repeated_int32_val t
  WHERE t > 10)
WHERE t.KitchenSink.int32_val > 20
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-FunctionCall(ZetaSQL:$greater(INT32, INT32) -> BOOL)
|   +-GetProtoField
|   | +-type=INT32
|   | +-expr=
|   | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
|   | +-field_descriptor=int32_val
|   | +-default_value=77
|   +-Literal(type=INT32, value=20)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.t#4)
    +-delete_list=
      +-DeleteStmt
        +-where_expr=
          +-FunctionCall(ZetaSQL:$greater(INT32, INT32) -> BOOL)
            +-ColumnRef(type=INT32, column=$array.t#4)
            +-Literal(type=INT32, value=10)
==

# Nested UPDATE where the alias overrides the table alias.
[language_features=V_1_2_CORRELATED_REFS_IN_NESTED_DML]
UPDATE TestTable t
SET (
  UPDATE t.KitchenSink.repeated_int32_val t
  SET t = 1 + t{{|.int32_val}}
  WHERE t > 10)
WHERE t.KitchenSink.int32_val > 20
--
ALTERNATION GROUP: <empty>
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-FunctionCall(ZetaSQL:$greater(INT32, INT32) -> BOOL)
|   +-GetProtoField
|   | +-type=INT32
|   | +-expr=
|   | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
|   | +-field_descriptor=int32_val
|   | +-default_value=77
|   +-Literal(type=INT32, value=20)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.t#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$greater(INT32, INT32) -> BOOL)
        |   +-ColumnRef(type=INT32, column=$array.t#4)
        |   +-Literal(type=INT32, value=10)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT32, column=$array.t#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Cast(INT64 -> INT32)
                    +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                      +-Literal(type=INT64, value=1)
                      +-Cast(INT32 -> INT64)
                        +-ColumnRef(type=INT32, column=$array.t#4)
--
ALTERNATION GROUP: .int32_val
--
ERROR: Cannot access field int32_val on a value with type INT32 [at 4:17]
  SET t = 1 + t.int32_val
                ^
==

# Nested DELETE where the alias masks a column from the table.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable t
SET (
  DELETE t.KitchenSink.repeated_int32_val KitchenSink
  WHERE KitchenSink > 10)
WHERE KitchenSink.int32_val > 20
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-FunctionCall(ZetaSQL:$greater(INT32, INT32) -> BOOL)
|   +-GetProtoField
|   | +-type=INT32
|   | +-expr=
|   | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
|   | +-field_descriptor=int32_val
|   | +-default_value=77
|   +-Literal(type=INT32, value=20)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.KitchenSink#4)
    +-delete_list=
      +-DeleteStmt
        +-where_expr=
          +-FunctionCall(ZetaSQL:$greater(INT32, INT32) -> BOOL)
            +-ColumnRef(type=INT32, column=$array.KitchenSink#4)
            +-Literal(type=INT32, value=10)
==

# Nested UPDATE where the alias masks a column from the table.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable t
SET (
  UPDATE t.KitchenSink.repeated_int32_val KitchenSink
  SET KitchenSink = KitchenSink + 1
  WHERE KitchenSink > 10)
WHERE KitchenSink.int32_val > 20
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-FunctionCall(ZetaSQL:$greater(INT32, INT32) -> BOOL)
|   +-GetProtoField
|   | +-type=INT32
|   | +-expr=
|   | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
|   | +-field_descriptor=int32_val
|   | +-default_value=77
|   +-Literal(type=INT32, value=20)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.KitchenSink#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$greater(INT32, INT32) -> BOOL)
        |   +-ColumnRef(type=INT32, column=$array.KitchenSink#4)
        |   +-Literal(type=INT32, value=10)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT32, column=$array.KitchenSink#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Cast(INT64 -> INT32)
                    +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                      +-Cast(INT32 -> INT64)
                      | +-ColumnRef(type=INT32, column=$array.KitchenSink#4)
                      +-Literal(type=INT64, value=1)
==

# Nested UPDATE where we allow outside column names on the right hand side, and
# then incorrectly try to use one on the left hand side.
[language_features=V_1_2_CORRELATED_REFS_IN_NESTED_DML]
UPDATE TestTable t SET
  key = 0,
  (UPDATE KitchenSink.repeated_int32_val
   SET key = 5
   WHERE true)
WHERE true
--
ERROR: Unrecognized name: key [at 4:8]
   SET key = 5
       ^
==

# Nested UPDATE where we use the target on both sides of a SET.
[language_features=V_1_2_CORRELATED_REFS_IN_NESTED_DML]
UPDATE TestTable t SET
  (UPDATE KitchenSink.repeated_int32_val r
   SET r = r + 1
   WHERE true)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.r#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT32, column=$array.r#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Cast(INT64 -> INT32)
                    +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                      +-Cast(INT32 -> INT64)
                      | +-ColumnRef(type=INT32, column=$array.r#4)
                      +-Literal(type=INT64, value=1)
==

# Nested DELETE using a correlation reference in the FROM clause of a subquery.
[language_features=V_1_2_CORRELATED_REFS_IN_NESTED_DML]
UPDATE TestTable t SET
  (DELETE t.KitchenSink.repeated_int32_val v
   WHERE v = (SELECT MAX(val)
              FROM UNNEST(t.KitchenSink.repeated_int32_val) AS val))
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.v#4)
    +-delete_list=
      +-DeleteStmt
        +-where_expr=
          +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
            +-ColumnRef(type=INT32, column=$array.v#4)
            +-SubqueryExpr
              +-type=INT32
              +-subquery_type=SCALAR
              +-parameter_list=
              | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
              +-subquery=
                +-ProjectScan
                  +-column_list=[$aggregate.$agg1#6]
                  +-input_scan=
                    +-AggregateScan
                      +-column_list=[$aggregate.$agg1#6]
                      +-input_scan=
                      | +-ArrayScan
                      |   +-column_list=[$array.val#5]
                      |   +-array_expr=
                      |   | +-GetProtoField
                      |   |   +-type=ARRAY<INT32>
                      |   |   +-expr=
                      |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                      |   |   +-field_descriptor=repeated_int32_val
                      |   |   +-default_value=[]
                      |   +-element_column=$array.val#5
                      +-aggregate_list=
                        +-$agg1#6 :=
                          +-AggregateFunctionCall(ZetaSQL:max(INT32) -> INT32)
                            +-ColumnRef(type=INT32, column=$array.val#5)
==

# Nested UPDATE using a correlation reference in the FROM clause of a subquery.
[language_features=V_1_2_CORRELATED_REFS_IN_NESTED_DML]
UPDATE TestTable t SET
  (UPDATE t.KitchenSink.repeated_int32_val v
   SET v = (SELECT MAX(val)
            FROM UNNEST(t.KitchenSink.repeated_int32_val) AS val)
   WHERE true)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.v#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT32, column=$array.v#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-SubqueryExpr
                    +-type=INT32
                    +-subquery_type=SCALAR
                    +-parameter_list=
                    | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                    +-subquery=
                      +-ProjectScan
                        +-column_list=[$aggregate.$agg1#6]
                        +-input_scan=
                          +-AggregateScan
                            +-column_list=[$aggregate.$agg1#6]
                            +-input_scan=
                            | +-ArrayScan
                            |   +-column_list=[$array.val#5]
                            |   +-array_expr=
                            |   | +-GetProtoField
                            |   |   +-type=ARRAY<INT32>
                            |   |   +-expr=
                            |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                            |   |   +-field_descriptor=repeated_int32_val
                            |   |   +-default_value=[]
                            |   +-element_column=$array.val#5
                            +-aggregate_list=
                              +-$agg1#6 :=
                                +-AggregateFunctionCall(ZetaSQL:max(INT32) -> INT32)
                                  +-ColumnRef(type=INT32, column=$array.val#5)
==

# Nested INSERT using a correlation reference in the FROM clause of a subquery.
[language_features=V_1_2_CORRELATED_REFS_IN_NESTED_DML]
UPDATE TestTable t SET
  (INSERT t.KitchenSink.repeated_int32_val
   VALUES ((SELECT MAX(val)
            FROM UNNEST(t.KitchenSink.repeated_int32_val) AS val)))
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int32_val#4)
    +-insert_list=
      +-InsertStmt
        +-row_list=
          +-InsertRow
            +-value_list=
              +-DMLValue
                +-value=
                  +-SubqueryExpr
                    +-type=INT32
                    +-subquery_type=SCALAR
                    +-parameter_list=
                    | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                    +-subquery=
                      +-ProjectScan
                        +-column_list=[$aggregate.$agg1#6]
                        +-input_scan=
                          +-AggregateScan
                            +-column_list=[$aggregate.$agg1#6]
                            +-input_scan=
                            | +-ArrayScan
                            |   +-column_list=[$array.val#5]
                            |   +-array_expr=
                            |   | +-GetProtoField
                            |   |   +-type=ARRAY<INT32>
                            |   |   +-expr=
                            |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                            |   |   +-field_descriptor=repeated_int32_val
                            |   |   +-default_value=[]
                            |   +-element_column=$array.val#5
                            +-aggregate_list=
                              +-$agg1#6 :=
                                +-AggregateFunctionCall(ZetaSQL:max(INT32) -> INT32)
                                  +-ColumnRef(type=INT32, column=$array.val#5)
==

# Nested DELETE using a correlation reference that is multiple levels out.
[language_features=V_1_2_CORRELATED_REFS_IN_NESTED_DML]
UPDATE TestTable t SET
  (UPDATE t.KitchenSink.nested_repeated_value n SET
     (DELETE n.nested_repeated_int64 v
      WHERE v = {{t.|}}KitchenSink.int64_val)
   WHERE true)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=nested_repeated_value
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.n#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=ARRAY<INT64>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.n#4)
            |   +-field_descriptor=nested_repeated_int64
            |   +-default_value=[]
            +-element_column=
            | +-ColumnHolder(column=$array.v#5)
            +-delete_list=
              +-DeleteStmt
                +-where_expr=
                  +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                    +-ColumnRef(type=INT64, column=$array.v#5)
                    +-GetProtoField
                      +-type=INT64
                      +-expr=
                      | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                      +-field_descriptor=int64_val
                      +-default_value=0
==

# Nested UPDATE using a correlation reference that is multiple levels out.
[language_features=V_1_2_CORRELATED_REFS_IN_NESTED_DML]
UPDATE TestTable t SET
  (UPDATE t.KitchenSink.nested_repeated_value n SET
     (UPDATE n.nested_repeated_int64 v
      SET v = {{t.|}}KitchenSink.int64_val
      WHERE true)
   WHERE true)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=nested_repeated_value
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.n#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=ARRAY<INT64>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.n#4)
            |   +-field_descriptor=nested_repeated_int64
            |   +-default_value=[]
            +-element_column=
            | +-ColumnHolder(column=$array.v#5)
            +-update_list=
              +-UpdateStmt
                +-where_expr=
                | +-Literal(type=BOOL, value=true)
                +-update_item_list=
                  +-UpdateItem
                    +-target=
                    | +-ColumnRef(type=INT64, column=$array.v#5)
                    +-set_value=
                      +-DMLValue
                        +-value=
                          +-GetProtoField
                            +-type=INT64
                            +-expr=
                            | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                            +-field_descriptor=int64_val
                            +-default_value=0
==

# Nested INSERT using a correlation reference that is multiple levels out.
[language_features=V_1_2_CORRELATED_REFS_IN_NESTED_DML]
UPDATE TestTable t SET
  (UPDATE t.KitchenSink.nested_repeated_value n SET
     (INSERT n.nested_repeated_int64
      VALUES ({{t.|}}KitchenSink.int64_val))
   WHERE true)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=nested_repeated_value
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.n#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=ARRAY<INT64>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.n#4)
            |   +-field_descriptor=nested_repeated_int64
            |   +-default_value=[]
            +-element_column=
            | +-ColumnHolder(column=$array.nested_repeated_int64#5)
            +-insert_list=
              +-InsertStmt
                +-row_list=
                  +-InsertRow
                    +-value_list=
                      +-DMLValue
                        +-value=
                          +-GetProtoField
                            +-type=INT64
                            +-expr=
                            | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                            +-field_descriptor=int64_val
                            +-default_value=0
==

# Attempt to reference a field/column name (the latter from an outer scope)
# in the FROM clause of a subquery in a nested DELETE.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable t SET
  (DELETE KitchenSink.nested_repeated_value
   WHERE nested_int64 = (select max(key) from
                         {{nested_repeated_int64|KitchenSink}}))
WHERE true
--
ALTERNATION GROUPS:
    nested_repeated_int64
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,nested_repeated_int64
--
ERROR: Table not found: nested_repeated_int64 (Unqualified identifiers in a FROM clause are always resolved as tables. Identifier nested_repeated_int64 is in scope but unqualified names cannot be resolved here.) [at 4:26]
                         nested_repeated_int64))
                         ^
--
ALTERNATION GROUP: KitchenSink
--
ERROR: Table not found: KitchenSink [at 4:26]
                         KitchenSink))
                         ^
--
ALTERNATION GROUP: V_1_2_CORRELATED_REFS_IN_NESTED_DML,KitchenSink
--
ERROR: Table not found: KitchenSink (Unqualified identifiers in a FROM clause are always resolved as tables. Identifier KitchenSink is in scope but unqualified names cannot be resolved here.) [at 4:26]
                         KitchenSink))
                         ^
==

# Attempt to reference a field/column name (the latter from an outer scope)
# in the FROM clause of a subquery on the right hand side of a nested UPDATE
# item.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable t SET
  (UPDATE KitchenSink.nested_repeated_value
   SET nested_int64 = (select max(key) from
                       {{nested_repeated_int64|KitchenSink}})
   WHERE true)
WHERE true
--
ALTERNATION GROUPS:
    nested_repeated_int64
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,nested_repeated_int64
--
ERROR: Table not found: nested_repeated_int64 (Unqualified identifiers in a FROM clause are always resolved as tables. Identifier nested_repeated_int64 is in scope but unqualified names cannot be resolved here.) [at 4:24]
                       nested_repeated_int64)
                       ^
--
ALTERNATION GROUP: KitchenSink
--
ERROR: Table not found: KitchenSink [at 4:24]
                       KitchenSink)
                       ^
--
ALTERNATION GROUP: V_1_2_CORRELATED_REFS_IN_NESTED_DML,KitchenSink
--
ERROR: Table not found: KitchenSink (Unqualified identifiers in a FROM clause are always resolved as tables. Identifier KitchenSink is in scope but unqualified names cannot be resolved here.) [at 4:24]
                       KitchenSink)
                       ^
==

# Attempt to reference a field/column name (the latter from an outer scope)
# in the FROM clause of a subquery in a nested INSERT.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable t SET
  (INSERT KitchenSink.nested_repeated_value
   VALUES ((select max(key) from
            {{nested_repeated_int64|KitchenSink}})))
WHERE true
--
ALTERNATION GROUPS:
    nested_repeated_int64
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,nested_repeated_int64
--
ERROR: Table not found: nested_repeated_int64 [at 4:13]
            nested_repeated_int64)))
            ^
--
ALTERNATION GROUP: KitchenSink
--
ERROR: Table not found: KitchenSink [at 4:13]
            KitchenSink)))
            ^
--
ALTERNATION GROUP: V_1_2_CORRELATED_REFS_IN_NESTED_DML,KitchenSink
--
ERROR: Table not found: KitchenSink (Unqualified identifiers in a FROM clause are always resolved as tables. Identifier KitchenSink is in scope but unqualified names cannot be resolved here.) [at 4:13]
            KitchenSink)))
            ^
==

# A more complex test of scoping from inside a nested DELETE.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable t
SET (
  DELETE t.KitchenSink.nested_repeated_group c
  WHERE (c.idstr IS NULL) AND (c.id = {{|t.|TestTable.}}key))
WHERE EXISTS (SELECT c
              FROM t.KitchenSink.nested_repeated_group c
              WHERE c.idstr IS NULL);
--
ALTERNATION GROUP: <empty>
--
ERROR: Unrecognized name: key [at 4:39]
  WHERE (c.idstr IS NULL) AND (c.id = key))
                                      ^
--
ALTERNATION GROUP: t.
--
ERROR: Unrecognized name: t [at 4:39]
  WHERE (c.idstr IS NULL) AND (c.id = t.key))
                                      ^
--
ALTERNATION GROUPS:
    TestTable.
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,TestTable.
--
ERROR: Unrecognized name: TestTable [at 4:39]
  WHERE (c.idstr IS NULL) AND (c.id = TestTable.key))
                                      ^
--
ALTERNATION GROUPS:
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,t.
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=TestTable.[key#1, KitchenSink#3], table=TestTable, column_index_list=[0, 2], alias="t")
+-column_access_list=READ,READ_WRITE
+-where_expr=
| +-SubqueryExpr
|   +-type=BOOL
|   +-subquery_type=EXISTS
|   +-parameter_list=
|   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
|   +-subquery=
|     +-ProjectScan
|       +-column_list=[$array.c#4]
|       +-input_scan=
|         +-FilterScan
|           +-column_list=[$array.c#4]
|           +-input_scan=
|           | +-ArrayScan
|           |   +-column_list=[$array.c#4]
|           |   +-array_expr=
|           |   | +-GetProtoField
|           |   |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>>
|           |   |   +-expr=
|           |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
|           |   |   +-field_descriptor=nested_repeated_group
|           |   |   +-default_value=[]
|           |   +-element_column=$array.c#4
|           +-filter_expr=
|             +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
|               +-GetProtoField
|                 +-type=STRING
|                 +-expr=
|                 | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>, column=$array.c#4)
|                 +-field_descriptor=idstr
|                 +-default_value=""
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=nested_repeated_group
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.c#5)
    +-delete_list=
      +-DeleteStmt
        +-where_expr=
          +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
            | +-GetProtoField
            |   +-type=STRING
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>, column=$array.c#5)
            |   +-field_descriptor=idstr
            |   +-default_value=""
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
              +-GetProtoField
              | +-type=INT64
              | +-expr=
              | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>, column=$array.c#5)
              | +-field_descriptor=id
              +-Cast(INT32 -> INT64)
                +-ColumnRef(type=INT32, column=TestTable.key#1)
==

# A more complex test of scoping from inside a nested UPDATE.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable t
SET (
  UPDATE t.KitchenSink.nested_repeated_group c
  SET c.id = {{|t.|TestTable.}}key
  WHERE c.idstr IS NULL)
WHERE EXISTS (SELECT c
              FROM t.KitchenSink.nested_repeated_group c
              WHERE c.idstr IS NULL);
--
ALTERNATION GROUP: <empty>
--
ERROR: Unrecognized name: key [at 4:14]
  SET c.id = key
             ^
--
ALTERNATION GROUP: t.
--
ERROR: Unrecognized name: t [at 4:14]
  SET c.id = t.key
             ^
--
ALTERNATION GROUPS:
    TestTable.
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,TestTable.
--
ERROR: Unrecognized name: TestTable [at 4:14]
  SET c.id = TestTable.key
             ^
--
ALTERNATION GROUPS:
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,t.
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=TestTable.[key#1, KitchenSink#3], table=TestTable, column_index_list=[0, 2], alias="t")
+-column_access_list=READ,READ_WRITE
+-where_expr=
| +-SubqueryExpr
|   +-type=BOOL
|   +-subquery_type=EXISTS
|   +-parameter_list=
|   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
|   +-subquery=
|     +-ProjectScan
|       +-column_list=[$array.c#4]
|       +-input_scan=
|         +-FilterScan
|           +-column_list=[$array.c#4]
|           +-input_scan=
|           | +-ArrayScan
|           |   +-column_list=[$array.c#4]
|           |   +-array_expr=
|           |   | +-GetProtoField
|           |   |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>>
|           |   |   +-expr=
|           |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
|           |   |   +-field_descriptor=nested_repeated_group
|           |   |   +-default_value=[]
|           |   +-element_column=$array.c#4
|           +-filter_expr=
|             +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
|               +-GetProtoField
|                 +-type=STRING
|                 +-expr=
|                 | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>, column=$array.c#4)
|                 +-field_descriptor=idstr
|                 +-default_value=""
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=nested_repeated_group
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.c#5)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
        |   +-GetProtoField
        |     +-type=STRING
        |     +-expr=
        |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>, column=$array.c#5)
        |     +-field_descriptor=idstr
        |     +-default_value=""
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=INT64
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>, column=$array.c#5)
            |   +-field_descriptor=id
            +-set_value=
              +-DMLValue
                +-value=
                  +-Cast(INT32 -> INT64)
                    +-ColumnRef(type=INT32, column=TestTable.key#1)
==

# Using a WITH clause inside a query in a nested INSERT.
[language_features={{|V_1_1_WITH_ON_SUBQUERY}}]
UPDATE TestTable SET
  (INSERT KitchenSink.repeated_int32_val
     (with Q as (select 1) select * from Q))
WHERE true
--
ALTERNATION GROUP: <empty>
--
ERROR: WITH is not supported on subqueries in this language version [at 3:7]
     (with Q as (select 1) select * from Q))
      ^
--
ALTERNATION GROUP: V_1_1_WITH_ON_SUBQUERY
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int32_val#4)
    +-insert_list=
      +-InsertStmt
        +-query=
        | +-ProjectScan
        |   +-column_list=[$insert_cast.$col1#7]
        |   +-expr_list=
        |   | +-$col1#7 :=
        |   |   +-Cast(INT64 -> INT32)
        |   |     +-ColumnRef(type=INT64, column=Q.$col1#6)
        |   +-input_scan=
        |     +-WithScan
        |       +-column_list=[Q.$col1#6]
        |       +-with_entry_list=
        |       | +-WithEntry
        |       |   +-with_query_name="Q"
        |       |   +-with_subquery=
        |       |     +-ProjectScan
        |       |       +-column_list=[Q.$col1#5]
        |       |       +-expr_list=
        |       |       | +-$col1#5 := Literal(type=INT64, value=1)
        |       |       +-input_scan=
        |       |         +-SingleRowScan
        |       +-query=
        |         +-ProjectScan
        |           +-column_list=[Q.$col1#6]
        |           +-input_scan=
        |             +-WithRefScan(column_list=[Q.$col1#6], with_query_name="Q")
        +-query_output_column_list=[$insert_cast.$col1#7]
==

UPDATE ComplexTypes SET
   Int32Array = NULL
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
+-column_access_list=WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-set_value=
      +-DMLValue
        +-value=
          +-Literal(type=ARRAY<INT32>, value=NULL)
==

UPDATE ComplexTypes SET
   Int32Array = NULL
WHERE ARRAY_LENGTH(Int32Array) = 0
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
+-column_access_list=READ_WRITE
+-where_expr=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
|   | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
|   +-Literal(type=INT64, value=0)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-set_value=
      +-DMLValue
        +-value=
          +-Literal(type=ARRAY<INT32>, value=NULL)
==

UPDATE ComplexTypes SET
  (DELETE Int32Array
   WHERE true)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-element_column=
    | +-ColumnHolder(column=$array.Int32Array#7)
    +-delete_list=
      +-DeleteStmt
        +-where_expr=
          +-Literal(type=BOOL, value=true)
==

UPDATE ComplexTypes SET
  (DELETE Int32Array
   WHERE Int32Array = 0)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-element_column=
    | +-ColumnHolder(column=$array.Int32Array#7)
    +-delete_list=
      +-DeleteStmt
        +-where_expr=
          +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
            +-ColumnRef(type=INT32, column=$array.Int32Array#7)
            +-Literal(type=INT32, value=0)
==

UPDATE ComplexTypes SET
  (INSERT
   Int32Array
   VALUES (5))
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-element_column=
    | +-ColumnHolder(column=$array.Int32Array#7)
    +-insert_list=
      +-InsertStmt
        +-row_list=
          +-InsertRow
            +-value_list=
              +-DMLValue
                +-value=
                  +-Literal(type=INT32, value=5)
==

UPDATE ComplexTypes SET
  (UPDATE Int32Array SET Int32Array = 0
   WHERE true)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-element_column=
    | +-ColumnHolder(column=$array.Int32Array#7)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT32, column=$array.Int32Array#7)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=INT32, value=0)
==

UPDATE ComplexTypes SET
  (UPDATE Int32Array SET Int32Array = 0
   WHERE Int32Array = 1)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-element_column=
    | +-ColumnHolder(column=$array.Int32Array#7)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
        |   +-ColumnRef(type=INT32, column=$array.Int32Array#7)
        |   +-Literal(type=INT32, value=1)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT32, column=$array.Int32Array#7)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=INT32, value=0)
==

[language_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ComplexTypes SET Int32Array[DEFAULT_OFFSET(1)] = 0
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-element_column=
    | +-ColumnHolder(column=$array.$element#7)
    +-array_update_list=
      +-UpdateArrayItem
        +-offset=
        | +-Literal(type=INT64, value=1)
        +-update_item=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT32, column=$array.$element#7)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=INT32, value=0)
==

[language_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE ComplexTypes SET Int32Array[DEFAULT_OFFSET(1)] = 0
WHERE Int32Array[DEFAULT_OFFSET(1)] = 1
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
+-column_access_list=READ_WRITE
+-where_expr=
| +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
|   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT32>, INT64) -> INT32)
|   | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
|   | +-Literal(type=INT64, value=1)
|   +-Literal(type=INT32, value=1)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-element_column=
    | +-ColumnHolder(column=$array.$element#7)
    +-array_update_list=
      +-UpdateArrayItem
        +-offset=
        | +-Literal(type=INT64, value=1)
        +-update_item=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT32, column=$array.$element#7)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=INT32, value=0)
==

[language_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE RecursivePBTable SET
  RecursivePB.repeated_recursive_pb[DEFAULT_OFFSET(1)]
             .repeated_recursive_pb[DEFAULT_OFFSET(2)]
             .int64_val = 5
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[RecursivePBTable.RecursivePB#1], table=RecursivePBTable, column_index_list=[0])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
    |   +-field_descriptor=repeated_recursive_pb
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.$element#2)
    +-array_update_list=
      +-UpdateArrayItem
        +-offset=
        | +-Literal(type=INT64, value=1)
        +-update_item=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$array.$element#2)
            |   +-field_descriptor=repeated_recursive_pb
            |   +-default_value=[]
            +-element_column=
            | +-ColumnHolder(column=$array.$element#3)
            +-array_update_list=
              +-UpdateArrayItem
                +-offset=
                | +-Literal(type=INT64, value=2)
                +-update_item=
                  +-UpdateItem
                    +-target=
                    | +-GetProtoField
                    |   +-type=INT64
                    |   +-expr=
                    |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$array.$element#3)
                    |   +-field_descriptor=int64_val
                    |   +-default_value=0
                    +-set_value=
                      +-DMLValue
                        +-value=
                          +-Literal(type=INT64, value=5)
==

[language_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE RecursivePBTable SET
  RecursivePB.repeated_recursive_pb[DEFAULT_OFFSET(1)]
             .repeated_recursive_pb[DEFAULT_OFFSET(2)]
             .int64_val = 5
WHERE RecursivePB.repeated_recursive_pb[DEFAULT_OFFSET(1)]
             .repeated_recursive_pb[DEFAULT_OFFSET(2)].int64_val = 0
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[RecursivePBTable.RecursivePB#1], table=RecursivePBTable, column_index_list=[0])
+-column_access_list=READ_WRITE
+-where_expr=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-GetProtoField
|   | +-type=INT64
|   | +-expr=
|   | | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<PROTO<zetasql_test__.RecursivePB>>, INT64) -> PROTO<zetasql_test__.RecursivePB>)
|   | |   +-GetProtoField
|   | |   | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
|   | |   | +-expr=
|   | |   | | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<PROTO<zetasql_test__.RecursivePB>>, INT64) -> PROTO<zetasql_test__.RecursivePB>)
|   | |   | |   +-GetProtoField
|   | |   | |   | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
|   | |   | |   | +-expr=
|   | |   | |   | | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
|   | |   | |   | +-field_descriptor=repeated_recursive_pb
|   | |   | |   | +-default_value=[]
|   | |   | |   +-Literal(type=INT64, value=1)
|   | |   | +-field_descriptor=repeated_recursive_pb
|   | |   | +-default_value=[]
|   | |   +-Literal(type=INT64, value=2)
|   | +-field_descriptor=int64_val
|   | +-default_value=0
|   +-Literal(type=INT64, value=0)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
    |   +-field_descriptor=repeated_recursive_pb
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.$element#2)
    +-array_update_list=
      +-UpdateArrayItem
        +-offset=
        | +-Literal(type=INT64, value=1)
        +-update_item=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$array.$element#2)
            |   +-field_descriptor=repeated_recursive_pb
            |   +-default_value=[]
            +-element_column=
            | +-ColumnHolder(column=$array.$element#3)
            +-array_update_list=
              +-UpdateArrayItem
                +-offset=
                | +-Literal(type=INT64, value=2)
                +-update_item=
                  +-UpdateItem
                    +-target=
                    | +-GetProtoField
                    |   +-type=INT64
                    |   +-expr=
                    |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$array.$element#3)
                    |   +-field_descriptor=int64_val
                    |   +-default_value=0
                    +-set_value=
                      +-DMLValue
                        +-value=
                          +-Literal(type=INT64, value=5)
==

[language_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE RecursivePBTable SET
  RecursivePB.repeated_recursive_pb[DEFAULT_OFFSET(1)]
             .repeated_recursive_pb[DEFAULT_OFFSET(2)] = NULL
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[RecursivePBTable.RecursivePB#1], table=RecursivePBTable, column_index_list=[0])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
    |   +-field_descriptor=repeated_recursive_pb
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.$element#2)
    +-array_update_list=
      +-UpdateArrayItem
        +-offset=
        | +-Literal(type=INT64, value=1)
        +-update_item=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$array.$element#2)
            |   +-field_descriptor=repeated_recursive_pb
            |   +-default_value=[]
            +-element_column=
            | +-ColumnHolder(column=$array.$element#3)
            +-array_update_list=
              +-UpdateArrayItem
                +-offset=
                | +-Literal(type=INT64, value=2)
                +-update_item=
                  +-UpdateItem
                    +-target=
                    | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$array.$element#3)
                    +-set_value=
                      +-DMLValue
                        +-value=
                          +-Literal(type=PROTO<zetasql_test__.RecursivePB>, value=NULL)
==

[language_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE RecursivePBTable SET
  RecursivePB.repeated_recursive_pb[DEFAULT_OFFSET(1)]
             .repeated_recursive_pb[DEFAULT_OFFSET(2)] = NULL
WHERE ARRAY_LENGTH(RecursivePB.repeated_recursive_pb[DEFAULT_OFFSET(1)]
             .repeated_recursive_pb) = 0
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[RecursivePBTable.RecursivePB#1], table=RecursivePBTable, column_index_list=[0])
+-column_access_list=READ_WRITE
+-where_expr=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-FunctionCall(ZetaSQL:array_length(ARRAY<PROTO<zetasql_test__.RecursivePB>>) -> INT64)
|   | +-GetProtoField
|   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
|   |   +-expr=
|   |   | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<PROTO<zetasql_test__.RecursivePB>>, INT64) -> PROTO<zetasql_test__.RecursivePB>)
|   |   |   +-GetProtoField
|   |   |   | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
|   |   |   | +-expr=
|   |   |   | | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
|   |   |   | +-field_descriptor=repeated_recursive_pb
|   |   |   | +-default_value=[]
|   |   |   +-Literal(type=INT64, value=1)
|   |   +-field_descriptor=repeated_recursive_pb
|   |   +-default_value=[]
|   +-Literal(type=INT64, value=0)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
    |   +-field_descriptor=repeated_recursive_pb
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.$element#2)
    +-array_update_list=
      +-UpdateArrayItem
        +-offset=
        | +-Literal(type=INT64, value=1)
        +-update_item=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$array.$element#2)
            |   +-field_descriptor=repeated_recursive_pb
            |   +-default_value=[]
            +-element_column=
            | +-ColumnHolder(column=$array.$element#3)
            +-array_update_list=
              +-UpdateArrayItem
                +-offset=
                | +-Literal(type=INT64, value=2)
                +-update_item=
                  +-UpdateItem
                    +-target=
                    | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$array.$element#3)
                    +-set_value=
                      +-DMLValue
                        +-value=
                          +-Literal(type=PROTO<zetasql_test__.RecursivePB>, value=NULL)
==

UPDATE RecursivePBTable SET
(DELETE RecursivePB.repeated_recursive_pb[DEFAULT_OFFSET(1)]
             .repeated_recursive_pb
   WHERE true)
WHERE true
--
ERROR: The target of a nested DML statement cannot reference an array element [at 2:43]
(DELETE RecursivePB.repeated_recursive_pb[DEFAULT_OFFSET(1)]
                                          ^
==

UPDATE RecursivePBTable SET
(DELETE RecursivePB.repeated_recursive_pb[DEFAULT_OFFSET(1)]
             .repeated_recursive_pb
   WHERE int64_val = 0)
WHERE true
--
ERROR: The target of a nested DML statement cannot reference an array element [at 2:43]
(DELETE RecursivePB.repeated_recursive_pb[DEFAULT_OFFSET(1)]
                                          ^
==

UPDATE RecursivePBTable SET
(UPDATE RecursivePB.repeated_recursive_pb[DEFAULT_OFFSET(1)]
             .repeated_recursive_pb
             SET int64_val = 1
   WHERE true)
WHERE true
--
ERROR: The target of a nested DML statement cannot reference an array element [at 2:43]
(UPDATE RecursivePB.repeated_recursive_pb[DEFAULT_OFFSET(1)]
                                          ^
==

UPDATE RecursivePBTable SET
(UPDATE RecursivePB.repeated_recursive_pb[DEFAULT_OFFSET(1)]
             .repeated_recursive_pb
             SET int64_val = 1
   WHERE int64_val = 0)
WHERE true
--
ERROR: The target of a nested DML statement cannot reference an array element [at 2:43]
(UPDATE RecursivePB.repeated_recursive_pb[DEFAULT_OFFSET(1)]
                                          ^
==

UPDATE TestTable t
SET (
  UPDATE t.KitchenSink.nested_repeated_group c
  SET c.id = 0
  WHERE TRUE)
WHERE TRUE;
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=nested_repeated_group
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.c#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=INT64
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>, column=$array.c#4)
            |   +-field_descriptor=id
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=INT64, value=0)
==

UPDATE TestTable t
SET (
  UPDATE t.KitchenSink.nested_repeated_group c
  SET c.id = 0
  WHERE c.id = 1)
WHERE TRUE;
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=nested_repeated_group
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.c#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   +-GetProtoField
        |   | +-type=INT64
        |   | +-expr=
        |   | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>, column=$array.c#4)
        |   | +-field_descriptor=id
        |   +-Literal(type=INT64, value=1)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=INT64
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>, column=$array.c#4)
            |   +-field_descriptor=id
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=INT64, value=0)
==

# No hints allowed in nested DELETE
UPDATE TestTable SET
  (DELETE KitchenSink.repeated_int64_val @{hint=value}
   WHERE repeated_int64_val = 1)
WHERE true
--
ERROR: Nested DELETE statement does not support hints [at 2:42]
  (DELETE KitchenSink.repeated_int64_val @{hint=value}
                                         ^
==

# No hints allowed in nested UPDATE.
UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val @{hint=value}
   SET repeated_int64_val = 1 WHERE repeated_int64_val > 5)
WHERE true
--
ERROR: Nested UPDATE statement does not support hints [at 2:42]
  (UPDATE KitchenSink.repeated_int64_val @{hint=value}
                                         ^
==

# No hints allowed in nested INSERT.
UPDATE TestTable SET
  (INSERT KitchenSink.repeated_int64_val @{hint=value} VALUES (1))
WHERE true
--
ERROR: Nested INSERT statement does not support hints [at 2:42]
  (INSERT KitchenSink.repeated_int64_val @{hint=value} VALUES (1))
                                         ^
