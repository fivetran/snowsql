# This file is similar to operators_exhaustive.test, but contains some tests
# for NUMERIC and its interaction with other types.

# DIV is similar to the / operator, but supports only INT64, UINT64, and NUMERIC
# types. The analyzer output for each alternation should be the same with and
# without NUMERIC_TYPE enabled except for the error cases, which will include
# the extra NUMERIC signature when it is enabled.
[language_features={{NUMERIC_TYPE|}}]
select div({{int32|uint32|int64|uint64|1|1.0}},
           {{int32|uint32|int64|uint64|1|1.0}})
from SimpleTypes;
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,int32
    int32,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,uint32
    int32,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Cast(UINT32 -> INT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, uint32#3], table=SimpleTypes, column_index_list=[0, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,int64
    int32,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
--
ALTERNATION GROUP: NUMERIC_TYPE,int32,uint64
--

ERROR: No matching signature for function DIV for argument types: INT32, UINT64. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64); DIV(NUMERIC, NUMERIC) [at 1:8]
select div(int32,
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,1
    int32,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUP: NUMERIC_TYPE,int32,1.0
--
ERROR: No matching signature for function DIV for argument types: INT32, DOUBLE. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64); DIV(NUMERIC, NUMERIC) [at 1:8]
select div(int32,
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,int32
    uint32,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(INT64, INT64) -> INT64)
    |     +-Cast(UINT32 -> INT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, uint32#3], table=SimpleTypes, column_index_list=[0, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,uint32
    uint32,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(UINT64, UINT64) -> UINT64)
    |     +-Cast(UINT32 -> UINT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Cast(UINT32 -> UINT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,int64
    uint32,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(INT64, INT64) -> INT64)
    |     +-Cast(UINT32 -> INT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, uint32#3], table=SimpleTypes, column_index_list=[1, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,uint64
    uint32,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(UINT64, UINT64) -> UINT64)
    |     +-Cast(UINT32 -> UINT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, uint64#4], table=SimpleTypes, column_index_list=[2, 3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,1
    uint32,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(UINT64, UINT64) -> UINT64)
    |     +-Cast(UINT32 -> UINT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Literal(type=UINT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUP: NUMERIC_TYPE,uint32,1.0
--
ERROR: No matching signature for function DIV for argument types: UINT32, DOUBLE. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64); DIV(NUMERIC, NUMERIC) [at 1:8]
select div(uint32,
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,int32
    int64,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,uint32
    int64,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Cast(UINT32 -> INT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, uint32#3], table=SimpleTypes, column_index_list=[1, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,int64
    int64,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUP: NUMERIC_TYPE,int64,uint64
--
ERROR: No matching signature for function DIV for argument types: INT64, UINT64. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64); DIV(NUMERIC, NUMERIC) [at 1:8]
select div(int64,
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,1
    int64,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUP: NUMERIC_TYPE,int64,1.0
--
ERROR: No matching signature for function DIV for argument types: INT64, DOUBLE. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64); DIV(NUMERIC, NUMERIC) [at 1:8]
select div(int64,
       ^
--
ALTERNATION GROUP: NUMERIC_TYPE,uint64,int32
--
ERROR: No matching signature for function DIV for argument types: UINT64, INT32. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64); DIV(NUMERIC, NUMERIC) [at 1:8]
select div(uint64,
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,uint32
    uint64,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(UINT64, UINT64) -> UINT64)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-Cast(UINT32 -> UINT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, uint64#4], table=SimpleTypes, column_index_list=[2, 3])
--
ALTERNATION GROUP: NUMERIC_TYPE,uint64,int64
--
ERROR: No matching signature for function DIV for argument types: UINT64, INT64. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64); DIV(NUMERIC, NUMERIC) [at 1:8]
select div(uint64,
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,uint64
    uint64,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(UINT64, UINT64) -> UINT64)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,1
    uint64,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(UINT64, UINT64) -> UINT64)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-Literal(type=UINT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUP: NUMERIC_TYPE,uint64,1.0
--
ERROR: No matching signature for function DIV for argument types: UINT64, DOUBLE. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64); DIV(NUMERIC, NUMERIC) [at 1:8]
select div(uint64,
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,int32
    1,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,uint32
    1,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(UINT64, UINT64) -> UINT64)
    |     +-Literal(type=UINT64, value=1)
    |     +-Cast(UINT32 -> UINT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,int64
    1,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,uint64
    1,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(UINT64, UINT64) -> UINT64)
    |     +-Literal(type=UINT64, value=1)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,1
    1,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=SimpleTypes)
--
ALTERNATION GROUP: NUMERIC_TYPE,1,1.0
--
ERROR: No matching signature for function DIV for argument types: INT64, DOUBLE. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64); DIV(NUMERIC, NUMERIC) [at 1:8]
select div(1,
       ^
--
ALTERNATION GROUP: NUMERIC_TYPE,1.0,int32
--
ERROR: No matching signature for function DIV for argument types: DOUBLE, INT32. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64); DIV(NUMERIC, NUMERIC) [at 1:8]
select div(1.0,
       ^
--
ALTERNATION GROUP: NUMERIC_TYPE,1.0,uint32
--
ERROR: No matching signature for function DIV for argument types: DOUBLE, UINT32. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64); DIV(NUMERIC, NUMERIC) [at 1:8]
select div(1.0,
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1.0,int64
    NUMERIC_TYPE,1.0,1
--
ERROR: No matching signature for function DIV for argument types: DOUBLE, INT64. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64); DIV(NUMERIC, NUMERIC) [at 1:8]
select div(1.0,
       ^
--
ALTERNATION GROUP: NUMERIC_TYPE,1.0,uint64
--
ERROR: No matching signature for function DIV for argument types: DOUBLE, UINT64. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64); DIV(NUMERIC, NUMERIC) [at 1:8]
select div(1.0,
       ^
--
ALTERNATION GROUP: NUMERIC_TYPE,1.0,1.0
--
ERROR: No matching signature for function DIV for argument types: DOUBLE, DOUBLE. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64); DIV(NUMERIC, NUMERIC) [at 1:8]
select div(1.0,
       ^
--
ALTERNATION GROUP: int32,uint64
--
ERROR: No matching signature for function DIV for argument types: INT32, UINT64. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64) [at 1:8]
select div(int32,
       ^
--
ALTERNATION GROUP: int32,1.0
--
ERROR: No matching signature for function DIV for argument types: INT32, DOUBLE. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64) [at 1:8]
select div(int32,
       ^
--
ALTERNATION GROUP: uint32,1.0
--
ERROR: No matching signature for function DIV for argument types: UINT32, DOUBLE. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64) [at 1:8]
select div(uint32,
       ^
--
ALTERNATION GROUP: int64,uint64
--
ERROR: No matching signature for function DIV for argument types: INT64, UINT64. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64) [at 1:8]
select div(int64,
       ^
--
ALTERNATION GROUP: int64,1.0
--
ERROR: No matching signature for function DIV for argument types: INT64, DOUBLE. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64) [at 1:8]
select div(int64,
       ^
--
ALTERNATION GROUP: uint64,int32
--
ERROR: No matching signature for function DIV for argument types: UINT64, INT32. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64) [at 1:8]
select div(uint64,
       ^
--
ALTERNATION GROUP: uint64,int64
--
ERROR: No matching signature for function DIV for argument types: UINT64, INT64. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64) [at 1:8]
select div(uint64,
       ^
--
ALTERNATION GROUP: uint64,1.0
--
ERROR: No matching signature for function DIV for argument types: UINT64, DOUBLE. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64) [at 1:8]
select div(uint64,
       ^
--
ALTERNATION GROUP: 1,1.0
--
ERROR: No matching signature for function DIV for argument types: INT64, DOUBLE. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64) [at 1:8]
select div(1,
       ^
--
ALTERNATION GROUP: 1.0,int32
--
ERROR: No matching signature for function DIV for argument types: DOUBLE, INT32. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64) [at 1:8]
select div(1.0,
       ^
--
ALTERNATION GROUP: 1.0,uint32
--
ERROR: No matching signature for function DIV for argument types: DOUBLE, UINT32. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64) [at 1:8]
select div(1.0,
       ^
--
ALTERNATION GROUPS:
    1.0,int64
    1.0,1
--
ERROR: No matching signature for function DIV for argument types: DOUBLE, INT64. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64) [at 1:8]
select div(1.0,
       ^
--
ALTERNATION GROUP: 1.0,uint64
--
ERROR: No matching signature for function DIV for argument types: DOUBLE, UINT64. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64) [at 1:8]
select div(1.0,
       ^
--
ALTERNATION GROUP: 1.0,1.0
--
ERROR: No matching signature for function DIV for argument types: DOUBLE, DOUBLE. Supported signatures: DIV(INT64, INT64); DIV(UINT64, UINT64) [at 1:8]
select div(1.0,
       ^
==

# Test the interaction between NUMERIC and other types.
[language_features=NUMERIC_TYPE]
select div(numeric,{{int32|uint32|int64|uint64|numeric|1|1.0}})
from SimpleTypes;
--
ALTERNATION GROUP: int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(INT32 -> NUMERIC)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, numeric#16], table=SimpleTypes, column_index_list=[0, 15])
--
ALTERNATION GROUP: uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(UINT32 -> NUMERIC)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, numeric#16], table=SimpleTypes, column_index_list=[2, 15])
--
ALTERNATION GROUP: int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(INT64 -> NUMERIC)
    |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, numeric#16], table=SimpleTypes, column_index_list=[1, 15])
--
ALTERNATION GROUP: uint64
--

QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(UINT64 -> NUMERIC)
    |       +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint64#4, numeric#16], table=SimpleTypes, column_index_list=[3, 15])
--
ALTERNATION GROUP: numeric
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.numeric#16], table=SimpleTypes, column_index_list=[15])
--
ALTERNATION GROUPS:
    1
    1.0
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:div(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Literal(type=NUMERIC, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.numeric#16], table=SimpleTypes, column_index_list=[15])
==

# b/110204269
# The NUMERIC signature for GENERATE_ARRAY should only apply when one of the
# arguments is NUMERIC, even if the language feature is enabled.
[language_features={{|NUMERIC_TYPE}}]
SELECT GENERATE_ARRAY(0.0, x, 1.0) FROM (SELECT {{1|NUMERIC '1'}} AS x);
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [ARRAY<DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:generate_array(DOUBLE, DOUBLE, optional(1) DOUBLE) -> ARRAY<DOUBLE>)
    |     +-Literal(type=DOUBLE, value=0)
    |     +-Cast(INT64 -> DOUBLE)
    |     | +-ColumnRef(type=INT64, column=$subquery1.x#1)
    |     +-Literal(type=DOUBLE, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.x#1]
        +-expr_list=
        | +-x#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: NUMERIC '1'
--
ERROR: NUMERIC literals are not supported [at 1:49]
SELECT GENERATE_ARRAY(0.0, x, 1.0) FROM (SELECT NUMERIC '1' AS x);
                                                ^
--
ALTERNATION GROUP: NUMERIC_TYPE,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [ARRAY<DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:generate_array(DOUBLE, DOUBLE, optional(1) DOUBLE) -> ARRAY<DOUBLE>)
    |     +-Literal(type=DOUBLE, value=0, float_literal_id=1)
    |     +-Cast(INT64 -> DOUBLE)
    |     | +-ColumnRef(type=INT64, column=$subquery1.x#1)
    |     +-Literal(type=DOUBLE, value=1, float_literal_id=2)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.x#1]
        +-expr_list=
        | +-x#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: NUMERIC_TYPE,NUMERIC '1'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [ARRAY<NUMERIC>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:generate_array(NUMERIC, NUMERIC, optional(1) NUMERIC) -> ARRAY<NUMERIC>)
    |     +-Literal(type=NUMERIC, value=0)
    |     +-ColumnRef(type=NUMERIC, column=$subquery1.x#1)
    |     +-Literal(type=NUMERIC, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.x#1]
        +-expr_list=
        | +-x#1 := Literal(type=NUMERIC, value=1, has_explicit_type=TRUE)
        +-input_scan=
          +-SingleRowScan
