# This file has tests that attempt to generate a SELECT clause that has
# ambiguous column names. At one point, the SQLBuilder was generating SQL with
# invalid duplicate column names for these resolved ASTs.

WITH w1 AS (
  SELECT "a" as item, "b" as event
),
w2 AS (
  SELECT m1.item as c1, m2.item as c2
  FROM w1 as m1 join w1 as m2 USING (event)
)
SELECT * FROM w2
--
QueryStmt
+-output_column_list=
| +-w2.c1#7 AS c1 [STRING]
| +-w2.c2#8 AS c2 [STRING]
+-query=
  +-WithScan
    +-column_list=w2.[c1#7, c2#8]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="w1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=w1.[item#1, event#2]
    | |     +-expr_list=
    | |     | +-item#1 := Literal(type=STRING, value="a")
    | |     | +-event#2 := Literal(type=STRING, value="b")
    | |     +-input_scan=
    | |       +-SingleRowScan
    | +-WithEntry
    |   +-with_query_name="w2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=w1.[item#3, item#5]
    |       +-input_scan=
    |         +-JoinScan
    |           +-column_list=w1.[item#3, event#4, item#5, event#6]
    |           +-left_scan=
    |           | +-WithRefScan(column_list=w1.[item#3, event#4], with_query_name="w1")
    |           +-right_scan=
    |           | +-WithRefScan(column_list=w1.[item#5, event#6], with_query_name="w1")
    |           +-join_expr=
    |             +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |               +-ColumnRef(type=STRING, column=w1.event#4)
    |               +-ColumnRef(type=STRING, column=w1.event#6)
    +-query=
      +-ProjectScan
        +-column_list=w2.[c1#7, c2#8]
        +-input_scan=
          +-WithRefScan(column_list=w2.[c1#7, c2#8], with_query_name="w2")
==

WITH w1 AS (
  SELECT "a" as item, "b" as event
)
  SELECT m1.item as c1, m2.item as c2
  FROM w1 as m1 join w1 as m2 USING (event)
--
QueryStmt
+-output_column_list=
| +-w1.item#3 AS c1 [STRING]
| +-w1.item#5 AS c2 [STRING]
+-query=
  +-WithScan
    +-column_list=w1.[item#3, item#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="w1"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=w1.[item#1, event#2]
    |       +-expr_list=
    |       | +-item#1 := Literal(type=STRING, value="a")
    |       | +-event#2 := Literal(type=STRING, value="b")
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=w1.[item#3, item#5]
        +-input_scan=
          +-JoinScan
            +-column_list=w1.[item#3, event#4, item#5, event#6]
            +-left_scan=
            | +-WithRefScan(column_list=w1.[item#3, event#4], with_query_name="w1")
            +-right_scan=
            | +-WithRefScan(column_list=w1.[item#5, event#6], with_query_name="w1")
            +-join_expr=
              +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
                +-ColumnRef(type=STRING, column=w1.event#4)
                +-ColumnRef(type=STRING, column=w1.event#6)
==

WITH w1 AS (
  SELECT "a" as item, "b" as event
)
select * from (
  SELECT m1.item as c1, m2.item as c2
  FROM w1 as m1 join w1 as m2 USING (event)
)
--
QueryStmt
+-output_column_list=
| +-w1.item#3 AS c1 [STRING]
| +-w1.item#5 AS c2 [STRING]
+-query=
  +-WithScan
    +-column_list=w1.[item#3, item#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="w1"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=w1.[item#1, event#2]
    |       +-expr_list=
    |       | +-item#1 := Literal(type=STRING, value="a")
    |       | +-event#2 := Literal(type=STRING, value="b")
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=w1.[item#3, item#5]
        +-input_scan=
          +-ProjectScan
            +-column_list=w1.[item#3, item#5]
            +-input_scan=
              +-JoinScan
                +-column_list=w1.[item#3, event#4, item#5, event#6]
                +-left_scan=
                | +-WithRefScan(column_list=w1.[item#3, event#4], with_query_name="w1")
                +-right_scan=
                | +-WithRefScan(column_list=w1.[item#5, event#6], with_query_name="w1")
                +-join_expr=
                  +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
                    +-ColumnRef(type=STRING, column=w1.event#4)
                    +-ColumnRef(type=STRING, column=w1.event#6)
==

select *
from (select 1 abc, 2 abc)
--
QueryStmt
+-output_column_list=
| +-$subquery1.abc#1 AS abc [INT64]
| +-$subquery1.abc#2 AS abc [INT64]
+-query=
  +-ProjectScan
    +-column_list=$subquery1.[abc#1, abc#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=$subquery1.[abc#1, abc#2]
        +-expr_list=
        | +-abc#1 := Literal(type=INT64, value=1)
        | +-abc#2 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
==

select *
from (select key abc, value abc from KeyValue)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS abc [INT64]
| +-KeyValue.Value#2 AS abc [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
          +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

  SELECT m1.key as c1, m2.key as c2
  FROM KeyValue as m1 join KeyValue as m2 USING (value)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS c1 [INT64]
| +-KeyValue.Key#3 AS c2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Key#3]
    +-input_scan=
      +-JoinScan
        +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4]
        +-left_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias='m1')
        +-right_scan=
        | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1], alias='m2')
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            +-ColumnRef(type=STRING, column=KeyValue.Value#4)
==

select * from (
  SELECT m1.key as c1, m2.key as c2
  FROM KeyValue as m1 join KeyValue as m2 USING (value)
)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS c1 [INT64]
| +-KeyValue.Key#3 AS c2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Key#3]
    +-input_scan=
      +-ProjectScan
        +-column_list=KeyValue.[Key#1, Key#3]
        +-input_scan=
          +-JoinScan
            +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4]
            +-left_scan=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias='m1')
            +-right_scan=
            | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1], alias='m2')
            +-join_expr=
              +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
                +-ColumnRef(type=STRING, column=KeyValue.Value#2)
                +-ColumnRef(type=STRING, column=KeyValue.Value#4)
