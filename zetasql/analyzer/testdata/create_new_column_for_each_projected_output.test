# By default, the analyzer will optimize away no-op expressions in
# ProjectScans to avoid creating new columns that are identical to
# existing ones.
#
# Setting create_new_column_for_each_projected_output to true will
# disable this default optimization, as shown in the example below.
# The second AST (produced with the flag set to true) contains parse
# location information for columns 'c' and 'd', whereas the first does not.

[default parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
[{{no_|}}create_new_column_for_each_projected_output]
SELECT c AS d FROM (SELECT b AS c FROM (SELECT 1 AS a, 2 AS b));
--
ALTERNATION GROUP: no_
--
QueryStmt
+-output_column_list=
| +-$subquery2.b#2 AS d [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-63
    +-column_list=[$subquery2.b#2]
    +-input_scan=
      +-ProjectScan
        +-parse_location=20-62
        +-column_list=[$subquery2.b#2]
        +-input_scan=
          +-ProjectScan
            +-parse_location=40-61
            +-column_list=$subquery2.[a#1, b#2]
            +-expr_list=
            | +-a#1 := Literal(parse_location=47-48, type=INT64, value=1)
            | +-b#2 := Literal(parse_location=55-56, type=INT64, value=2)
            +-input_scan=
              +-SingleRowScan
[REPLACED_LITERALS]
SELECT c AS d FROM (SELECT b AS c FROM (SELECT @_p0_INT64 AS a, @_p1_INT64 AS b));
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.d#4 AS d [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-63
    +-column_list=[$query.d#4]
    +-expr_list=
    | +-d#4 := ColumnRef(parse_location=7-8, type=INT64, column=$subquery1.c#3)
    +-input_scan=
      +-ProjectScan
        +-parse_location=20-62
        +-column_list=[$subquery1.c#3]
        +-expr_list=
        | +-c#3 := ColumnRef(parse_location=27-28, type=INT64, column=$subquery2.b#2)
        +-input_scan=
          +-ProjectScan
            +-parse_location=40-61
            +-column_list=$subquery2.[a#1, b#2]
            +-expr_list=
            | +-a#1 := Literal(parse_location=47-48, type=INT64, value=1)
            | +-b#2 := Literal(parse_location=55-56, type=INT64, value=2)
            +-input_scan=
              +-SingleRowScan
[REPLACED_LITERALS]
SELECT c AS d FROM (SELECT b AS c FROM (SELECT @_p0_INT64 AS a, @_p1_INT64 AS b));
==

[{{no_|}}create_new_column_for_each_projected_output]
SELECT a FROM (SELECT 1 AS a)
--
ALTERNATION GROUP: no_
--
QueryStmt
+-output_column_list=
| +-$subquery1.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-29
    +-column_list=[$subquery1.a#1]
    +-input_scan=
      +-ProjectScan
        +-parse_location=15-28
        +-column_list=[$subquery1.a#1]
        +-expr_list=
        | +-a#1 := Literal(parse_location=22-23, type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
[REPLACED_LITERALS]
SELECT a FROM (SELECT @_p0_INT64 AS a)
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.a#2 AS a [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-29
    +-column_list=[$query.a#2]
    +-expr_list=
    | +-a#2 := ColumnRef(parse_location=7-8, type=INT64, column=$subquery1.a#1)
    +-input_scan=
      +-ProjectScan
        +-parse_location=15-28
        +-column_list=[$subquery1.a#1]
        +-expr_list=
        | +-a#1 := Literal(parse_location=22-23, type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
[REPLACED_LITERALS]
SELECT a FROM (SELECT @_p0_INT64 AS a)
==

[{{no_|}}create_new_column_for_each_projected_output]
SELECT a AS b FROM (SELECT 1 AS a)
--
ALTERNATION GROUP: no_
--
QueryStmt
+-output_column_list=
| +-$subquery1.a#1 AS b [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-34
    +-column_list=[$subquery1.a#1]
    +-input_scan=
      +-ProjectScan
        +-parse_location=20-33
        +-column_list=[$subquery1.a#1]
        +-expr_list=
        | +-a#1 := Literal(parse_location=27-28, type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
[REPLACED_LITERALS]
SELECT a AS b FROM (SELECT @_p0_INT64 AS a)
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-34
    +-column_list=[$query.b#2]
    +-expr_list=
    | +-b#2 := ColumnRef(parse_location=7-8, type=INT64, column=$subquery1.a#1)
    +-input_scan=
      +-ProjectScan
        +-parse_location=20-33
        +-column_list=[$subquery1.a#1]
        +-expr_list=
        | +-a#1 := Literal(parse_location=27-28, type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
[REPLACED_LITERALS]
SELECT a AS b FROM (SELECT @_p0_INT64 AS a)
==

[{{no_|}}create_new_column_for_each_projected_output]
SELECT a + 1 FROM (SELECT 1 AS a);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-33
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(parse_location=7-8, type=INT64, column=$subquery1.a#1)
    |     +-Literal(parse_location=11-12, type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-parse_location=19-32
        +-column_list=[$subquery1.a#1]
        +-expr_list=
        | +-a#1 := Literal(parse_location=26-27, type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
[REPLACED_LITERALS]
SELECT a + @_p0_INT64 FROM (SELECT @_p1_INT64 AS a);
==

[{{no_|}}create_new_column_for_each_projected_output]
SELECT a + 1 AS b FROM (SELECT 1 AS a);
--
QueryStmt
+-output_column_list=
| +-$query.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-38
    +-column_list=[$query.b#2]
    +-expr_list=
    | +-b#2 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(parse_location=7-8, type=INT64, column=$subquery1.a#1)
    |     +-Literal(parse_location=11-12, type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-parse_location=24-37
        +-column_list=[$subquery1.a#1]
        +-expr_list=
        | +-a#1 := Literal(parse_location=31-32, type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
[REPLACED_LITERALS]
SELECT a + @_p0_INT64 AS b FROM (SELECT @_p1_INT64 AS a);
==

[{{no_|}}create_new_column_for_each_projected_output]
SELECT a FROM (SELECT 1 AS a) WHERE a > 0
--
ALTERNATION GROUP: no_
--
QueryStmt
+-output_column_list=
| +-$subquery1.a#1 AS a [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-41
    +-column_list=[$subquery1.a#1]
    +-input_scan=
      +-FilterScan
        +-column_list=[$subquery1.a#1]
        +-input_scan=
        | +-ProjectScan
        |   +-parse_location=15-28
        |   +-column_list=[$subquery1.a#1]
        |   +-expr_list=
        |   | +-a#1 := Literal(parse_location=22-23, type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(parse_location=36-37, type=INT64, column=$subquery1.a#1)
            +-Literal(parse_location=40-41, type=INT64, value=0)
[REPLACED_LITERALS]
SELECT a FROM (SELECT @_p0_INT64 AS a) WHERE a > @_p1_INT64
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.a#2 AS a [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-41
    +-column_list=[$query.a#2]
    +-expr_list=
    | +-a#2 := ColumnRef(parse_location=7-8, type=INT64, column=$subquery1.a#1)
    +-input_scan=
      +-FilterScan
        +-column_list=[$subquery1.a#1]
        +-input_scan=
        | +-ProjectScan
        |   +-parse_location=15-28
        |   +-column_list=[$subquery1.a#1]
        |   +-expr_list=
        |   | +-a#1 := Literal(parse_location=22-23, type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(parse_location=36-37, type=INT64, column=$subquery1.a#1)
            +-Literal(parse_location=40-41, type=INT64, value=0)
[REPLACED_LITERALS]
SELECT a FROM (SELECT @_p0_INT64 AS a) WHERE a > @_p1_INT64
==

[{{no_|}}create_new_column_for_each_projected_output]
SELECT a AS b FROM (SELECT 1 AS a) WHERE a > 0
--
ALTERNATION GROUP: no_
--
QueryStmt
+-output_column_list=
| +-$subquery1.a#1 AS b [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-46
    +-column_list=[$subquery1.a#1]
    +-input_scan=
      +-FilterScan
        +-column_list=[$subquery1.a#1]
        +-input_scan=
        | +-ProjectScan
        |   +-parse_location=20-33
        |   +-column_list=[$subquery1.a#1]
        |   +-expr_list=
        |   | +-a#1 := Literal(parse_location=27-28, type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(parse_location=41-42, type=INT64, column=$subquery1.a#1)
            +-Literal(parse_location=45-46, type=INT64, value=0)
[REPLACED_LITERALS]
SELECT a AS b FROM (SELECT @_p0_INT64 AS a) WHERE a > @_p1_INT64
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.b#2 AS b [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-46
    +-column_list=[$query.b#2]
    +-expr_list=
    | +-b#2 := ColumnRef(parse_location=7-8, type=INT64, column=$subquery1.a#1)
    +-input_scan=
      +-FilterScan
        +-column_list=[$subquery1.a#1]
        +-input_scan=
        | +-ProjectScan
        |   +-parse_location=20-33
        |   +-column_list=[$subquery1.a#1]
        |   +-expr_list=
        |   | +-a#1 := Literal(parse_location=27-28, type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(parse_location=41-42, type=INT64, column=$subquery1.a#1)
            +-Literal(parse_location=45-46, type=INT64, value=0)
[REPLACED_LITERALS]
SELECT a AS b FROM (SELECT @_p0_INT64 AS a) WHERE a > @_p1_INT64
==

[{{no_|}}create_new_column_for_each_projected_output]
SELECT * FROM KeyValue;
--
ALTERNATION GROUP: no_
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-parse_location=0-22
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-TableScan(parse_location=14-22, column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
[REPLACED_LITERALS]
SELECT * FROM KeyValue;
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.Key#3 AS Key [INT64]
| +-$query.Value#4 AS Value [STRING]
+-query=
  +-ProjectScan
    +-parse_location=0-22
    +-column_list=$query.[Key#3, Value#4]
    +-expr_list=
    | +-Key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
    | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-TableScan(parse_location=14-22, column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
[REPLACED_LITERALS]
SELECT * FROM KeyValue;
