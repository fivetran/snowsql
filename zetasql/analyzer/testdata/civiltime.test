# EXTRACT from DATETIME
[language_features={{V_1_2_CIVIL_TIME|}}]
select extract(year from datetime '2014-01-01 12:34:56'),
       extract(month from datetime '2014-01-01 12:34:56'),
       extract(day from datetime '2014-01-01 12:34:56'),
       extract(dayofweek from datetime '2014-01-01 12:34:56'),
       extract(dayofyear from datetime '2014-01-01 12:34:56'),
       extract(quarter from datetime '2014-01-01 12:34:56'),
       extract(hour from datetime '2014-01-01 12:34:56'),
       extract(minute from datetime '2014-01-01 12:34:56'),
       extract(second from datetime '2014-01-01 12:34:56'),
       extract(millisecond from datetime '2014-01-01 12:34:56'),
       extract(microsecond from datetime '2014-01-01 12:34:56'),
       extract(date from datetime '2014-01-01 12:34:56'),
       extract(week from datetime '2014-01-01 12:34:56'),
       extract(isoyear from datetime '2014-01-01 12:34:56'),
       extract(isoweek from datetime '2014-01-01 12:34:56'),
       extract(time from datetime '2014-01-01 12:34:56');
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.$col3#3 AS `$col3` [INT64]
| +-$query.$col4#4 AS `$col4` [INT64]
| +-$query.$col5#5 AS `$col5` [INT64]
| +-$query.$col6#6 AS `$col6` [INT64]
| +-$query.$col7#7 AS `$col7` [INT64]
| +-$query.$col8#8 AS `$col8` [INT64]
| +-$query.$col9#9 AS `$col9` [INT64]
| +-$query.$col10#10 AS `$col10` [INT64]
| +-$query.$col11#11 AS `$col11` [INT64]
| +-$query.$col12#12 AS `$col12` [DATE]
| +-$query.$col13#13 AS `$col13` [INT64]
| +-$query.$col14#14 AS `$col14` [INT64]
| +-$query.$col15#15 AS `$col15` [INT64]
| +-$query.$col16#16 AS `$col16` [TIME]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12, $col13#13, $col14#14, $col15#15, $col16#16]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MONTH)
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col4#4 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAYOFWEEK)
    | +-$col5#5 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAYOFYEAR)
    | +-$col6#6 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=QUARTER)
    | +-$col7#7 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=HOUR)
    | +-$col8#8 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MINUTE)
    | +-$col9#9 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=SECOND)
    | +-$col10#10 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MILLISECOND)
    | +-$col11#11 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MICROSECOND)
    | +-$col12#12 :=
    | | +-FunctionCall(ZetaSQL:$extract_date(DATETIME) -> DATE)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | +-$col13#13 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK)
    | +-$col14#14 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=ISOYEAR)
    | +-$col15#15 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=ISOWEEK)
    | +-$col16#16 :=
    |   +-FunctionCall(ZetaSQL:$extract_time(DATETIME) -> TIME)
    |     +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: DATETIME [at 1:26]
select extract(year from datetime '2014-01-01 12:34:56'),
                         ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select extract(datetime from datetime '2014-01-01 12:34:56');
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
ERROR: EXTRACT from DATETIME does not support the DATETIME date part [at 1:8]
select extract(datetime from datetime '2014-01-01 12:34:56');
       ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: DATETIME [at 1:30]
select extract(datetime from datetime '2014-01-01 12:34:56');
                             ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select extract(day from datetime '2014-01-01 12:34:56' AT TIME ZONE {{'UTC'|'+00'|'+01:00'|'-01:00'}});
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,'UTC'
--
ERROR: EXTRACT from DATETIME does not support AT TIME ZONE [at 1:8]
select extract(day from datetime '2014-01-01 12:34:56' AT TIME ZONE 'UTC');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,'+00'
--
ERROR: EXTRACT from DATETIME does not support AT TIME ZONE [at 1:8]
select extract(day from datetime '2014-01-01 12:34:56' AT TIME ZONE '+00');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,'+01:00'
--
ERROR: EXTRACT from DATETIME does not support AT TIME ZONE [at 1:8]
select extract(day from datetime '2014-01-01 12:34:56' AT TIME ZONE '+01:00');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,'-01:00'
--
ERROR: EXTRACT from DATETIME does not support AT TIME ZONE [at 1:8]
select extract(day from datetime '2014-01-01 12:34:56' AT TIME ZONE '-01:00');
       ^
--
ALTERNATION GROUP: 'UTC'
--
ERROR: Type not found: DATETIME [at 1:25]
select extract(day from datetime '2014-01-01 12:34:56' AT TIME ZONE 'UTC');
                        ^
--
ALTERNATION GROUP: '+00'
--
ERROR: Type not found: DATETIME [at 1:25]
select extract(day from datetime '2014-01-01 12:34:56' AT TIME ZONE '+00');
                        ^
--
ALTERNATION GROUP: '+01:00'
--
ERROR: Type not found: DATETIME [at 1:25]
select extract(day from datetime '2014-01-01 12:34:56' AT TIME ZONE '+01:00');
                        ^
--
ALTERNATION GROUP: '-01:00'
--
ERROR: Type not found: DATETIME [at 1:25]
select extract(day from datetime '2014-01-01 12:34:56' AT TIME ZONE '-01:00');
                        ^
==

# WEEK(<WEEKDAY>) support
[language_features={{V_1_2_CIVIL_TIME|V_1_2_CIVIL_TIME,V_1_2_WEEK_WITH_WEEKDAY}}]
select extract(week(sunday) from datetime '2014-01-01 12:34:56'),
       extract(week(monday) from datetime '2014-01-01 12:34:56'),
       extract(week(tuesday) from datetime '2014-01-01 12:34:56'),
       extract(week(wednesday) from datetime '2014-01-01 12:34:56'),
       extract(week(thursday) from datetime '2014-01-01 12:34:56'),
       extract(week(friday) from datetime '2014-01-01 12:34:56'),
       extract(week(saturday) from datetime '2014-01-01 12:34:56')
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
ERROR: Date part arguments are not supported [at 1:21]
select extract(week(sunday) from datetime '2014-01-01 12:34:56'),
                    ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,V_1_2_WEEK_WITH_WEEKDAY
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.$col3#3 AS `$col3` [INT64]
| +-$query.$col4#4 AS `$col4` [INT64]
| +-$query.$col5#5 AS `$col5` [INT64]
| +-$query.$col6#6 AS `$col6` [INT64]
| +-$query.$col7#7 AS `$col7` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_MONDAY)
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_TUESDAY)
    | +-$col4#4 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_WEDNESDAY)
    | +-$col5#5 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_THURSDAY)
    | +-$col6#6 :=
    | | +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_FRIDAY)
    | +-$col7#7 :=
    |   +-FunctionCall(ZetaSQL:$extract(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-Literal(type=DATETIME, value=2014-01-01 12:34:56, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_SATURDAY)
    +-input_scan=
      +-SingleRowScan
==

# EXTRACT from TIME
[language_features={{V_1_2_CIVIL_TIME|}}]
select extract(hour from time '12:34:56'),
       extract(minute from time '12:34:56'),
       extract(second from time '12:34:56'),
       extract(millisecond from time '12:34:56'),
       extract(microsecond from time '12:34:56')
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.$col3#3 AS `$col3` [INT64]
| +-$query.$col4#4 AS `$col4` [INT64]
| +-$query.$col5#5 AS `$col5` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:$extract(TIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=TIME, value=12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=HOUR)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:$extract(TIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=TIME, value=12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MINUTE)
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:$extract(TIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=TIME, value=12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=SECOND)
    | +-$col4#4 :=
    | | +-FunctionCall(ZetaSQL:$extract(TIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=TIME, value=12:34:56, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MILLISECOND)
    | +-$col5#5 :=
    |   +-FunctionCall(ZetaSQL:$extract(TIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-Literal(type=TIME, value=12:34:56, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MICROSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: TIME [at 1:26]
select extract(hour from time '12:34:56'),
                         ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select extract({{|YEAR|MONTH|DAY|DAYOFWEEK|DAYOFYEAR|QUARTER|DATE|WEEK|TIME|DATETIME|ISOYEAR|ISOWEEK}} from time '12:34:56');
--
ALTERNATION GROUPS:
    V_1_2_CIVIL_TIME,
    <empty>
--
ERROR: Syntax error: Unexpected keyword FROM [at 1:17]
select extract( from time '12:34:56');
                ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,YEAR
--
ERROR: EXTRACT from TIME does not support the YEAR date part [at 1:8]
select extract(YEAR from time '12:34:56');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,MONTH
--
ERROR: EXTRACT from TIME does not support the MONTH date part [at 1:8]
select extract(MONTH from time '12:34:56');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,DAY
--
ERROR: EXTRACT from TIME does not support the DAY date part [at 1:8]
select extract(DAY from time '12:34:56');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,DAYOFWEEK
--
ERROR: EXTRACT from TIME does not support the DAYOFWEEK date part [at 1:8]
select extract(DAYOFWEEK from time '12:34:56');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,DAYOFYEAR
--
ERROR: EXTRACT from TIME does not support the DAYOFYEAR date part [at 1:8]
select extract(DAYOFYEAR from time '12:34:56');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,QUARTER
--
ERROR: EXTRACT from TIME does not support the QUARTER date part [at 1:8]
select extract(QUARTER from time '12:34:56');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,DATE
--
ERROR: EXTRACT from TIME does not support the DATE date part [at 1:8]
select extract(DATE from time '12:34:56');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,WEEK
--
ERROR: EXTRACT from TIME does not support the WEEK date part [at 1:8]
select extract(WEEK from time '12:34:56');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,TIME
--
ERROR: EXTRACT from TIME does not support the TIME date part [at 1:8]
select extract(TIME from time '12:34:56');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,DATETIME
--
ERROR: EXTRACT from TIME does not support the DATETIME date part [at 1:8]
select extract(DATETIME from time '12:34:56');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,ISOYEAR
--
ERROR: EXTRACT from TIME does not support the ISOYEAR date part [at 1:8]
select extract(ISOYEAR from time '12:34:56');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,ISOWEEK
--
ERROR: EXTRACT from TIME does not support the ISOWEEK date part [at 1:8]
select extract(ISOWEEK from time '12:34:56');
       ^
--
ALTERNATION GROUP: YEAR
--
ERROR: Type not found: TIME [at 1:26]
select extract(YEAR from time '12:34:56');
                         ^
--
ALTERNATION GROUP: MONTH
--
ERROR: Type not found: TIME [at 1:27]
select extract(MONTH from time '12:34:56');
                          ^
--
ALTERNATION GROUP: DAY
--
ERROR: Type not found: TIME [at 1:25]
select extract(DAY from time '12:34:56');
                        ^
--
ALTERNATION GROUP: DAYOFWEEK
--
ERROR: Type not found: TIME [at 1:31]
select extract(DAYOFWEEK from time '12:34:56');
                              ^
--
ALTERNATION GROUP: DAYOFYEAR
--
ERROR: Type not found: TIME [at 1:31]
select extract(DAYOFYEAR from time '12:34:56');
                              ^
--
ALTERNATION GROUP: QUARTER
--
ERROR: Type not found: TIME [at 1:29]
select extract(QUARTER from time '12:34:56');
                            ^
--
ALTERNATION GROUP: DATE
--
ERROR: Type not found: TIME [at 1:26]
select extract(DATE from time '12:34:56');
                         ^
--
ALTERNATION GROUP: WEEK
--
ERROR: Type not found: TIME [at 1:26]
select extract(WEEK from time '12:34:56');
                         ^
--
ALTERNATION GROUP: TIME
--
ERROR: Type not found: TIME [at 1:26]
select extract(TIME from time '12:34:56');
                         ^
--
ALTERNATION GROUP: DATETIME
--
ERROR: Type not found: TIME [at 1:30]
select extract(DATETIME from time '12:34:56');
                             ^
--
ALTERNATION GROUP: ISOYEAR
--
ERROR: Type not found: TIME [at 1:29]
select extract(ISOYEAR from time '12:34:56');
                            ^
--
ALTERNATION GROUP: ISOWEEK
--
ERROR: Type not found: TIME [at 1:29]
select extract(ISOWEEK from time '12:34:56');
                            ^
==

[language_features=V_1_2_CIVIL_TIME,V_1_2_WEEK_WITH_WEEKDAY]
select extract(week({{sunday|monday|tuesday|wednesday|thursday|friday|saturday}})
from time '12:34:56');
--
ALTERNATION GROUP: sunday
--
ERROR: EXTRACT from TIME does not support the WEEK date part [at 1:8]
select extract(week(sunday)
       ^
--
ALTERNATION GROUP: monday
--
ERROR: EXTRACT from TIME does not support the WEEK(MONDAY) date part [at 1:8]
select extract(week(monday)
       ^
--
ALTERNATION GROUP: tuesday
--
ERROR: EXTRACT from TIME does not support the WEEK(TUESDAY) date part [at 1:8]
select extract(week(tuesday)
       ^
--
ALTERNATION GROUP: wednesday
--
ERROR: EXTRACT from TIME does not support the WEEK(WEDNESDAY) date part [at 1:8]
select extract(week(wednesday)
       ^
--
ALTERNATION GROUP: thursday
--
ERROR: EXTRACT from TIME does not support the WEEK(THURSDAY) date part [at 1:8]
select extract(week(thursday)
       ^
--
ALTERNATION GROUP: friday
--
ERROR: EXTRACT from TIME does not support the WEEK(FRIDAY) date part [at 1:8]
select extract(week(friday)
       ^
--
ALTERNATION GROUP: saturday
--
ERROR: EXTRACT from TIME does not support the WEEK(SATURDAY) date part [at 1:8]
select extract(week(saturday)
       ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select extract(hour from time '12:34:56' AT TIME ZONE {{'UTC'|'+00'|'+01:00'|'-01:00'}});
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,'UTC'
--
ERROR: EXTRACT from TIME does not support AT TIME ZONE [at 1:8]
select extract(hour from time '12:34:56' AT TIME ZONE 'UTC');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,'+00'
--
ERROR: EXTRACT from TIME does not support AT TIME ZONE [at 1:8]
select extract(hour from time '12:34:56' AT TIME ZONE '+00');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,'+01:00'
--
ERROR: EXTRACT from TIME does not support AT TIME ZONE [at 1:8]
select extract(hour from time '12:34:56' AT TIME ZONE '+01:00');
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,'-01:00'
--
ERROR: EXTRACT from TIME does not support AT TIME ZONE [at 1:8]
select extract(hour from time '12:34:56' AT TIME ZONE '-01:00');
       ^
--
ALTERNATION GROUP: 'UTC'
--
ERROR: Type not found: TIME [at 1:26]
select extract(hour from time '12:34:56' AT TIME ZONE 'UTC');
                         ^
--
ALTERNATION GROUP: '+00'
--
ERROR: Type not found: TIME [at 1:26]
select extract(hour from time '12:34:56' AT TIME ZONE '+00');
                         ^
--
ALTERNATION GROUP: '+01:00'
--
ERROR: Type not found: TIME [at 1:26]
select extract(hour from time '12:34:56' AT TIME ZONE '+01:00');
                         ^
--
ALTERNATION GROUP: '-01:00'
--
ERROR: Type not found: TIME [at 1:26]
select extract(hour from time '12:34:56' AT TIME ZONE '-01:00');
                         ^
==

# EXTRACT from TIME with invalid signature
[language_features=V_1_2_CIVIL_TIME]
SELECT extract(0 from time '12:34:56');
--
ERROR: A valid date part name is required [at 1:16]
SELECT extract(0 from time '12:34:56');
               ^
==

[language_features=V_1_2_CIVIL_TIME]
SELECT extract(HOUR from time '12:34:56' AT TIME ZONE 'UTC');
--
ERROR: EXTRACT from TIME does not support AT TIME ZONE [at 1:8]
SELECT extract(HOUR from time '12:34:56' AT TIME ZONE 'UTC');
       ^
==

[language_features=V_1_2_CIVIL_TIME]
SELECT extract(time '12:34:56', HOUR);
--
ERROR: Syntax error: Unexpected "," [at 1:31]
SELECT extract(time '12:34:56', HOUR);
                              ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select datetime_{{add|sub}}(
  datetime '2016-01-02 03:04:05.123456',
  interval 1 {{year|quarter|month|week|day|hour|minute|second|millisecond|microsecond}});
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,year
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,quarter
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=QUARTER)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,month
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MONTH)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,week
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,day
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,hour
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=HOUR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,minute
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MINUTE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,second
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=SECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,millisecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MILLISECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,microsecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MICROSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,year
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,quarter
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=QUARTER)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,month
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MONTH)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,week
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,day
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,hour
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=HOUR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,minute
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MINUTE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,second
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=SECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,millisecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MILLISECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,microsecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-01-02 03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MICROSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    add,year
    add,quarter
    add,month
    add,week
    add,day
    add,hour
    add,minute
    add,second
    add,millisecond
    add,microsecond
--
ERROR: Function not found: datetime_add; Did you mean date_add? [at 1:8]
select datetime_add(
       ^
--
ALTERNATION GROUPS:
    sub,year
    sub,quarter
    sub,month
    sub,week
    sub,day
    sub,hour
    sub,minute
    sub,second
    sub,millisecond
    sub,microsecond
--
ERROR: Function not found: datetime_sub; Did you mean date_sub? [at 1:8]
select datetime_sub(
       ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select datetime_{{add|sub}}(
  CURRENT_DATETIME,
  interval 1 {{dayofyear|dayofweek|isoyear|isoweek|date|time|year|quarter|month|week|day|hour|minute|second|millisecond|microsecond}});
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,dayofyear
--
ERROR: DATETIME_ADD does not support the DAYOFYEAR date part [at 1:8]
select datetime_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,dayofweek
--
ERROR: DATETIME_ADD does not support the DAYOFWEEK date part [at 1:8]
select datetime_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,isoyear
--
ERROR: DATETIME_ADD does not support the ISOYEAR date part [at 1:8]
select datetime_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,isoweek
--
ERROR: DATETIME_ADD does not support the ISOWEEK date part [at 1:8]
select datetime_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,date
--
ERROR: DATETIME_ADD does not support the DATE date part [at 1:8]
select datetime_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,time
--
ERROR: DATETIME_ADD does not support the TIME date part [at 1:8]
select datetime_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,year
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,quarter
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=QUARTER)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,month
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MONTH)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,week
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,day
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,hour
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=HOUR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,minute
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MINUTE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,second
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=SECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,millisecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MILLISECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,microsecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MICROSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,dayofyear
--
ERROR: DATETIME_SUB does not support the DAYOFYEAR date part [at 1:8]
select datetime_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,dayofweek
--
ERROR: DATETIME_SUB does not support the DAYOFWEEK date part [at 1:8]
select datetime_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,isoyear
--
ERROR: DATETIME_SUB does not support the ISOYEAR date part [at 1:8]
select datetime_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,isoweek
--
ERROR: DATETIME_SUB does not support the ISOWEEK date part [at 1:8]
select datetime_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,date
--
ERROR: DATETIME_SUB does not support the DATE date part [at 1:8]
select datetime_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,time
--
ERROR: DATETIME_SUB does not support the TIME date part [at 1:8]
select datetime_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,year
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,quarter
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=QUARTER)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,month
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MONTH)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,week
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,day
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,hour
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=HOUR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,minute
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MINUTE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,second
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=SECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,millisecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MILLISECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,microsecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MICROSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    add,dayofyear
    add,dayofweek
    add,isoyear
    add,isoweek
    add,date
    add,time
    add,year
    add,quarter
    add,month
    add,week
    add,day
    add,hour
    add,minute
    add,second
    add,millisecond
    add,microsecond
--
ERROR: Function not found: datetime_add; Did you mean date_add? [at 1:8]
select datetime_add(
       ^
--
ALTERNATION GROUPS:
    sub,dayofyear
    sub,dayofweek
    sub,isoyear
    sub,isoweek
    sub,date
    sub,time
    sub,year
    sub,quarter
    sub,month
    sub,week
    sub,day
    sub,hour
    sub,minute
    sub,second
    sub,millisecond
    sub,microsecond
--
ERROR: Function not found: datetime_sub; Did you mean date_sub? [at 1:8]
select datetime_sub(
       ^
==

[language_features={{V_1_2_CIVIL_TIME,TIMESTAMP_NANOS|V_1_2_CIVIL_TIME|TIMESTAMP_NANOS|}}]
select datetime_{{add|sub}}(current_datetime, interval 1 nanosecond);
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,TIMESTAMP_NANOS,add
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=NANOSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,TIMESTAMP_NANOS,sub
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=NANOSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add
--
ERROR: DATETIME_ADD does not support the NANOSECOND date part [at 1:8]
select datetime_add(current_datetime, interval 1 nanosecond);
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub
--
ERROR: DATETIME_SUB does not support the NANOSECOND date part [at 1:8]
select datetime_sub(current_datetime, interval 1 nanosecond);
       ^
--
ALTERNATION GROUPS:
    TIMESTAMP_NANOS,add
    add
--
ERROR: Function not found: datetime_add; Did you mean date_add? [at 1:8]
select datetime_add(current_datetime, interval 1 nanosecond);
       ^
--
ALTERNATION GROUPS:
    TIMESTAMP_NANOS,sub
    sub
--
ERROR: Function not found: datetime_sub; Did you mean date_sub? [at 1:8]
select datetime_sub(current_datetime, interval 1 nanosecond);
       ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
SELECT time(TIMESTAMP '2015-12-28 15:42:56-08:00');
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time(TIMESTAMP, optional(0) STRING) -> TIME)
    |     +-Literal(type=TIMESTAMP, value=2015-12-28 23:42:56+00, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Function not found: time; Did you mean trim? [at 1:8]
SELECT time(TIMESTAMP '2015-12-28 15:42:56-08:00');
       ^
==

[language_features=V_1_2_CIVIL_TIME]
SELECT time({{'2015-12-28 15:42:56-08:00'|CAST('2015-12-28 15:42:56-08:00' AS STRING)}});
--
ALTERNATION GROUP: '2015-12-28 15:42:56-08:00'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time(TIMESTAMP, optional(0) STRING) -> TIME)
    |     +-Literal(type=TIMESTAMP, value=2015-12-28 23:42:56+00)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: CAST('2015-12-28 15:42:56-08:00' AS STRING)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time(TIMESTAMP, optional(0) STRING) -> TIME)
    |     +-Literal(type=TIMESTAMP, value=2015-12-28 23:42:56+00, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features={{V_1_2_CIVIL_TIME|}}]
SELECT datetime(TIMESTAMP '2015-12-28 15:42:56-08:00');
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime(TIMESTAMP, optional(0) STRING) -> DATETIME)
    |     +-Literal(type=TIMESTAMP, value=2015-12-28 23:42:56+00, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Function not found: datetime; Did you mean datediff? [at 1:8]
SELECT datetime(TIMESTAMP '2015-12-28 15:42:56-08:00');
       ^
==

[language_features=V_1_2_CIVIL_TIME]
SELECT datetime({{'2015-12-28 15:42:56-08:00'|CAST('2015-12-28 15:42:56-08:00' AS STRING)}});
--
ALTERNATION GROUP: '2015-12-28 15:42:56-08:00'
--
ERROR: Could not cast literal "2015-12-28 15:42:56-08:00" to type DATE [at 1:17]
SELECT datetime('2015-12-28 15:42:56-08:00');
                ^
--
ALTERNATION GROUP: CAST('2015-12-28 15:42:56-08:00' AS STRING)
--
ERROR: Could not cast "2015-12-28 15:42:56-08:00" to type DATE [at 1:17]
SELECT datetime(CAST('2015-12-28 15:42:56-08:00' AS STRING));
                ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
SELECT current_time{{|()}};
--
ALTERNATION GROUPS:
    V_1_2_CIVIL_TIME,
    V_1_2_CIVIL_TIME,()
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Function not found: `current_time`; Did you mean current_date? [at 1:8]
SELECT current_time;
       ^
--
ALTERNATION GROUP: ()
--
ERROR: Function not found: `current_time`; Did you mean current_date? [at 1:8]
SELECT current_time();
       ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
SELECT current_datetime{{|()}};
--
ALTERNATION GROUPS:
    V_1_2_CIVIL_TIME,
    V_1_2_CIVIL_TIME,()
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Function not found: `current_datetime`; Did you mean current_date? [at 1:8]
SELECT current_datetime;
       ^
--
ALTERNATION GROUP: ()
--
ERROR: Function not found: `current_datetime`; Did you mean current_date? [at 1:8]
SELECT current_datetime();
       ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select time_{{add|sub}}(
  time '03:04:05.123456',
  interval 1 {{dayofyear|dayofweek|isoyear|isoweek|date|time|year|quarter|month|week|day|hour|minute|second|millisecond|microsecond}});
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,dayofyear
--
ERROR: TIME_ADD does not support the DAYOFYEAR date part [at 1:8]
select time_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,dayofweek
--
ERROR: TIME_ADD does not support the DAYOFWEEK date part [at 1:8]
select time_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,isoyear
--
ERROR: TIME_ADD does not support the ISOYEAR date part [at 1:8]
select time_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,isoweek
--
ERROR: TIME_ADD does not support the ISOWEEK date part [at 1:8]
select time_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,date
--
ERROR: TIME_ADD does not support the DATE date part [at 1:8]
select time_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,time
--
ERROR: TIME_ADD does not support the TIME date part [at 1:8]
select time_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,year
--
ERROR: TIME_ADD does not support the YEAR date part [at 1:8]
select time_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,quarter
--
ERROR: TIME_ADD does not support the QUARTER date part [at 1:8]
select time_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,month
--
ERROR: TIME_ADD does not support the MONTH date part [at 1:8]
select time_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,week
--
ERROR: TIME_ADD does not support the WEEK date part [at 1:8]
select time_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,day
--
ERROR: TIME_ADD does not support the DAY date part [at 1:8]
select time_add(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,hour
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_add(TIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-Literal(type=TIME, value=03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=HOUR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,minute
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_add(TIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-Literal(type=TIME, value=03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MINUTE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,second
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_add(TIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-Literal(type=TIME, value=03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=SECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,millisecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_add(TIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-Literal(type=TIME, value=03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MILLISECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add,microsecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_add(TIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-Literal(type=TIME, value=03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MICROSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,dayofyear
--
ERROR: TIME_SUB does not support the DAYOFYEAR date part [at 1:8]
select time_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,dayofweek
--
ERROR: TIME_SUB does not support the DAYOFWEEK date part [at 1:8]
select time_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,isoyear
--
ERROR: TIME_SUB does not support the ISOYEAR date part [at 1:8]
select time_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,isoweek
--
ERROR: TIME_SUB does not support the ISOWEEK date part [at 1:8]
select time_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,date
--
ERROR: TIME_SUB does not support the DATE date part [at 1:8]
select time_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,time
--
ERROR: TIME_SUB does not support the TIME date part [at 1:8]
select time_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,year
--
ERROR: TIME_SUB does not support the YEAR date part [at 1:8]
select time_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,quarter
--
ERROR: TIME_SUB does not support the QUARTER date part [at 1:8]
select time_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,month
--
ERROR: TIME_SUB does not support the MONTH date part [at 1:8]
select time_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,week
--
ERROR: TIME_SUB does not support the WEEK date part [at 1:8]
select time_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,day
--
ERROR: TIME_SUB does not support the DAY date part [at 1:8]
select time_sub(
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,hour
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_sub(TIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-Literal(type=TIME, value=03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=HOUR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,minute
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_sub(TIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-Literal(type=TIME, value=03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MINUTE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,second
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_sub(TIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-Literal(type=TIME, value=03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=SECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,millisecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_sub(TIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-Literal(type=TIME, value=03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MILLISECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub,microsecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_sub(TIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-Literal(type=TIME, value=03:04:05.123456, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MICROSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    add,dayofyear
    add,dayofweek
    add,isoyear
    add,isoweek
    add,date
    add,time
    add,year
    add,quarter
    add,month
    add,week
    add,day
    add,hour
    add,minute
    add,second
    add,millisecond
    add,microsecond
--
ERROR: Function not found: time_add; Did you mean timeadd? [at 1:8]
select time_add(
       ^
--
ALTERNATION GROUPS:
    sub,dayofyear
    sub,dayofweek
    sub,isoyear
    sub,isoweek
    sub,date
    sub,time
    sub,year
    sub,quarter
    sub,month
    sub,week
    sub,day
    sub,hour
    sub,minute
    sub,second
    sub,millisecond
    sub,microsecond
--
ERROR: Function not found: time_sub; Did you mean date_sub? [at 1:8]
select time_sub(
       ^
==

[language_features={{V_1_2_CIVIL_TIME,TIMESTAMP_NANOS|V_1_2_CIVIL_TIME|TIMESTAMP_NANOS|}}]
select time_{{add|sub}}(current_time, interval 1 nanosecond);
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,TIMESTAMP_NANOS,add
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_add(TIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=NANOSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,TIMESTAMP_NANOS,sub
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_sub(TIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=NANOSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,add
--
ERROR: TIME_ADD does not support the NANOSECOND date part [at 1:8]
select time_add(current_time, interval 1 nanosecond);
       ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,sub
--
ERROR: TIME_SUB does not support the NANOSECOND date part [at 1:8]
select time_sub(current_time, interval 1 nanosecond);
       ^
--
ALTERNATION GROUPS:
    TIMESTAMP_NANOS,add
    add
--
ERROR: Function not found: time_add; Did you mean timeadd? [at 1:8]
select time_add(current_time, interval 1 nanosecond);
       ^
--
ALTERNATION GROUPS:
    TIMESTAMP_NANOS,sub
    sub
--
ERROR: Function not found: time_sub; Did you mean date_sub? [at 1:8]
select time_sub(current_time, interval 1 nanosecond);
       ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select
  time_diff(
    current_time,
    time '12:34:56.123456',
    {{year|month|day|dayofweek|dayofyear|quarter|hour|minute|second|millisecond|microsecond|nanosecond|date|week|datetime|time|isoyear|isoweek}});
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,year
--
ERROR: TIME_DIFF does not support the YEAR date part [at 2:3]
  time_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,month
--
ERROR: TIME_DIFF does not support the MONTH date part [at 2:3]
  time_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,day
--
ERROR: TIME_DIFF does not support the DAY date part [at 2:3]
  time_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,dayofweek
--
ERROR: TIME_DIFF does not support the DAYOFWEEK date part [at 2:3]
  time_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,dayofyear
--
ERROR: TIME_DIFF does not support the DAYOFYEAR date part [at 2:3]
  time_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,quarter
--
ERROR: TIME_DIFF does not support the QUARTER date part [at 2:3]
  time_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,hour
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_diff(TIME, TIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=TIME, value=12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=HOUR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,minute
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_diff(TIME, TIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=TIME, value=12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MINUTE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,second
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_diff(TIME, TIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=TIME, value=12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=SECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,millisecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_diff(TIME, TIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=TIME, value=12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MILLISECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,microsecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_diff(TIME, TIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=TIME, value=12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MICROSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,nanosecond
--
ERROR: TIME_DIFF does not support the NANOSECOND date part [at 2:3]
  time_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,date
--
ERROR: TIME_DIFF does not support the DATE date part [at 2:3]
  time_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,week
--
ERROR: TIME_DIFF does not support the WEEK date part [at 2:3]
  time_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,datetime
--
ERROR: TIME_DIFF does not support the DATETIME date part [at 2:3]
  time_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,time
--
ERROR: TIME_DIFF does not support the TIME date part [at 2:3]
  time_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,isoyear
--
ERROR: TIME_DIFF does not support the ISOYEAR date part [at 2:3]
  time_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,isoweek
--
ERROR: TIME_DIFF does not support the ISOWEEK date part [at 2:3]
  time_diff(
  ^
--
ALTERNATION GROUPS:
    year
    month
    day
    dayofweek
    dayofyear
    quarter
    hour
    minute
    second
    millisecond
    microsecond
    nanosecond
    date
    week
    datetime
    time
    isoyear
    isoweek
--
ERROR: Function not found: time_diff; Did you mean timediff? [at 2:3]
  time_diff(
  ^
==

[language_features={{V_1_2_CIVIL_TIME,TIMESTAMP_NANOS|V_1_2_CIVIL_TIME|TIMESTAMP_NANOS|}}]
select time_diff(current_time, time '12:34:56.123456', nanosecond);
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,TIMESTAMP_NANOS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_diff(TIME, TIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=TIME, value=12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=NANOSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
ERROR: TIME_DIFF does not support the NANOSECOND date part [at 1:8]
select time_diff(current_time, time '12:34:56.123456', nanosecond);
       ^
--
ALTERNATION GROUPS:
    TIMESTAMP_NANOS
    <empty>
--
ERROR: Function not found: time_diff; Did you mean timediff? [at 1:8]
select time_diff(current_time, time '12:34:56.123456', nanosecond);
       ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select
  datetime_diff(
    current_datetime,
    datetime '2016-04-05 12:34:56.123456',
    {{year|month|day|dayofweek|dayofyear|quarter|hour|minute|second|millisecond|microsecond|nanosecond|date|week|datetime|time|isoyear|isoweek}});
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,year
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-04-05 12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,month
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-04-05 12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MONTH)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,day
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-04-05 12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,dayofweek
--
ERROR: DATETIME_DIFF does not support the DAYOFWEEK date part [at 2:3]
  datetime_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,dayofyear
--
ERROR: DATETIME_DIFF does not support the DAYOFYEAR date part [at 2:3]
  datetime_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,quarter
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-04-05 12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=QUARTER)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,hour
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-04-05 12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=HOUR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,minute
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-04-05 12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MINUTE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,second
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-04-05 12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=SECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,millisecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-04-05 12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MILLISECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,microsecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-04-05 12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MICROSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,nanosecond
--
ERROR: DATETIME_DIFF does not support the NANOSECOND date part [at 2:3]
  datetime_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,date
--
ERROR: DATETIME_DIFF does not support the DATE date part [at 2:3]
  datetime_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,week
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-04-05 12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,datetime
--
ERROR: DATETIME_DIFF does not support the DATETIME date part [at 2:3]
  datetime_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,time
--
ERROR: DATETIME_DIFF does not support the TIME date part [at 2:3]
  datetime_diff(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,isoyear
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-04-05 12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=ISOYEAR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,isoweek
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-04-05 12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=ISOWEEK)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    year
    month
    day
    dayofweek
    dayofyear
    quarter
    hour
    minute
    second
    millisecond
    microsecond
    nanosecond
    date
    week
    datetime
    time
    isoyear
    isoweek
--
ERROR: Function not found: datetime_diff; Did you mean date_diff? [at 2:3]
  datetime_diff(
  ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select datetime_diff(current_datetime, current_datetime, week(monday));
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
ERROR: Date part arguments are not supported [at 1:63]
select datetime_diff(current_datetime, current_datetime, week(monday));
                                                              ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Function not found: datetime_diff; Did you mean date_diff? [at 1:8]
select datetime_diff(current_datetime, current_datetime, week(monday));
       ^
==

[language_features=V_1_2_CIVIL_TIME,V_1_2_WEEK_WITH_WEEKDAY]
select
  datetime_diff(current_datetime, current_datetime, week(sunday)),
  datetime_diff(current_datetime, current_datetime, week(monday)),
  datetime_diff(current_datetime, current_datetime, week(tuesday)),
  datetime_diff(current_datetime, current_datetime, week(wednesday)),
  datetime_diff(current_datetime, current_datetime, week(thursday)),
  datetime_diff(current_datetime, current_datetime, week(friday)),
  datetime_diff(current_datetime, current_datetime, week(saturday))
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.$col3#3 AS `$col3` [INT64]
| +-$query.$col4#4 AS `$col4` [INT64]
| +-$query.$col5#5 AS `$col5` [INT64]
| +-$query.$col6#6 AS `$col6` [INT64]
| +-$query.$col7#7 AS `$col7` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_MONDAY)
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_TUESDAY)
    | +-$col4#4 :=
    | | +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_WEDNESDAY)
    | +-$col5#5 :=
    | | +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_THURSDAY)
    | +-$col6#6 :=
    | | +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_FRIDAY)
    | +-$col7#7 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_SATURDAY)
    +-input_scan=
      +-SingleRowScan
==

[language_features={{V_1_2_CIVIL_TIME,TIMESTAMP_NANOS|V_1_2_CIVIL_TIME|TIMESTAMP_NANOS|}}]
select datetime_diff(current_datetime, datetime '2016-04-05 12:34:56.123456', nanosecond);
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,TIMESTAMP_NANOS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2016-04-05 12:34:56.123456, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=NANOSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
ERROR: DATETIME_DIFF does not support the NANOSECOND date part [at 1:8]
select datetime_diff(current_datetime, datetime '2016-04-05 12:34:56.123456',...
       ^
--
ALTERNATION GROUPS:
    TIMESTAMP_NANOS
    <empty>
--
ERROR: Function not found: datetime_diff; Did you mean date_diff? [at 1:8]
select datetime_diff(current_datetime, datetime '2016-04-05 12:34:56.123456',...
       ^
==

# all valid date parts for datetime_trunc except for NANOSECOND and
# WEEK(<Weekday>)
[language_features={{V_1_2_CIVIL_TIME|}}]
select
  datetime_trunc(
    current_datetime,
    {{year|quarter|month|week|day|hour|minute|second|millisecond|microsecond}});
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,year
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,quarter
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=QUARTER)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,month
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MONTH)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,week
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,day
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,hour
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=HOUR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,minute
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MINUTE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,second
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=SECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,millisecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MILLISECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,microsecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MICROSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    year
    quarter
    month
    week
    day
    hour
    minute
    second
    millisecond
    microsecond
--
ERROR: Function not found: datetime_trunc; Did you mean date_trunc? [at 2:3]
  datetime_trunc(
  ^
==

# NANOSECOND is valid for datetime_trunc when nano support is enabled.
[language_features={{V_1_2_CIVIL_TIME,TIMESTAMP_NANOS|V_1_2_CIVIL_TIME|TIMESTAMP_NANOS|}}]
select
  datetime_trunc(current_datetime, nanosecond);
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,TIMESTAMP_NANOS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=NANOSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
ERROR: DATETIME_TRUNC does not support the NANOSECOND date part [at 2:3]
  datetime_trunc(current_datetime, nanosecond);
  ^
--
ALTERNATION GROUPS:
    TIMESTAMP_NANOS
    <empty>
--
ERROR: Function not found: datetime_trunc; Did you mean date_trunc? [at 2:3]
  datetime_trunc(current_datetime, nanosecond);
  ^
==

# all invalid date parts for datetime_trunc
[language_features={{V_1_2_CIVIL_TIME|}}]
select
  datetime_trunc(
    current_datetime,
    {{dayofweek|dayofyear|nanosecond|date|datetime|time|isoyear|isoweek}});
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,dayofweek
--
ERROR: DATETIME_TRUNC does not support the DAYOFWEEK date part [at 2:3]
  datetime_trunc(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,dayofyear
--
ERROR: DATETIME_TRUNC does not support the DAYOFYEAR date part [at 2:3]
  datetime_trunc(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,nanosecond
--
ERROR: DATETIME_TRUNC does not support the NANOSECOND date part [at 2:3]
  datetime_trunc(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,date
--
ERROR: DATETIME_TRUNC does not support the DATE date part [at 2:3]
  datetime_trunc(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,datetime
--
ERROR: DATETIME_TRUNC does not support the DATETIME date part [at 2:3]
  datetime_trunc(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,time
--
ERROR: DATETIME_TRUNC does not support the TIME date part [at 2:3]
  datetime_trunc(
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,isoyear
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=ISOYEAR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,isoweek
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=ISOWEEK)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    dayofweek
    dayofyear
    nanosecond
    date
    datetime
    time
    isoyear
    isoweek
--
ERROR: Function not found: datetime_trunc; Did you mean date_trunc? [at 2:3]
  datetime_trunc(
  ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select
  datetime_trunc(current_datetime, week(monday));
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
ERROR: Date part arguments are not supported [at 2:41]
  datetime_trunc(current_datetime, week(monday));
                                        ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Function not found: datetime_trunc; Did you mean date_trunc? [at 2:3]
  datetime_trunc(current_datetime, week(monday));
  ^
==

[language_features=V_1_2_CIVIL_TIME,V_1_2_WEEK_WITH_WEEKDAY]
select
  datetime_trunc(current_datetime, week({{sunday|monday|tuesday|wednesday|thursday|friday|saturday}}));
--
ALTERNATION GROUP: sunday
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: monday
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_MONDAY)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: tuesday
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_TUESDAY)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: wednesday
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_WEDNESDAY)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: thursday
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_THURSDAY)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: friday
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_FRIDAY)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: saturday
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK_SATURDAY)
    +-input_scan=
      +-SingleRowScan
==

# all valid date parts for time_trunc
[language_features={{V_1_2_CIVIL_TIME|}}]
select
  time_trunc(current_time, {{hour|minute|second|millisecond|microsecond}});
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,hour
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_trunc(TIME, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=HOUR)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,minute
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_trunc(TIME, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MINUTE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,second
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_trunc(TIME, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=SECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,millisecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_trunc(TIME, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MILLISECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,microsecond
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_trunc(TIME, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MICROSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: hour
--
ERROR: Function not found: time_trunc; Did you mean date_trunc? [at 2:3]
  time_trunc(current_time, hour);
  ^
--
ALTERNATION GROUP: minute
--
ERROR: Function not found: time_trunc; Did you mean date_trunc? [at 2:3]
  time_trunc(current_time, minute);
  ^
--
ALTERNATION GROUP: second
--
ERROR: Function not found: time_trunc; Did you mean date_trunc? [at 2:3]
  time_trunc(current_time, second);
  ^
--
ALTERNATION GROUP: millisecond
--
ERROR: Function not found: time_trunc; Did you mean date_trunc? [at 2:3]
  time_trunc(current_time, millisecond);
  ^
--
ALTERNATION GROUP: microsecond
--
ERROR: Function not found: time_trunc; Did you mean date_trunc? [at 2:3]
  time_trunc(current_time, microsecond);
  ^
==

# NANOSECOND is valid for time_trunc when nano support is enabled.
[language_features={{V_1_2_CIVIL_TIME,TIMESTAMP_NANOS|V_1_2_CIVIL_TIME|TIMESTAMP_NANOS|}}]
select
  time_trunc(current_time, nanosecond);
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,TIMESTAMP_NANOS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:time_trunc(TIME, ENUM<zetasql.functions.DateTimestampPart>) -> TIME)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=NANOSECOND)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
ERROR: TIME_TRUNC does not support the NANOSECOND date part [at 2:3]
  time_trunc(current_time, nanosecond);
  ^
--
ALTERNATION GROUPS:
    TIMESTAMP_NANOS
    <empty>
--
ERROR: Function not found: time_trunc; Did you mean date_trunc? [at 2:3]
  time_trunc(current_time, nanosecond);
  ^
==

# all invalid date parts for datetime_trunc
[language_features={{V_1_2_CIVIL_TIME|}}]
select
  time_trunc(current_time,
    {{year|month|day|dayofweek|dayofyear|quarter|date|week|datetime|time|isoyear|isoweek}});
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,year
--
ERROR: TIME_TRUNC does not support the YEAR date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,month
--
ERROR: TIME_TRUNC does not support the MONTH date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,day
--
ERROR: TIME_TRUNC does not support the DAY date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,dayofweek
--
ERROR: TIME_TRUNC does not support the DAYOFWEEK date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,dayofyear
--
ERROR: TIME_TRUNC does not support the DAYOFYEAR date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,quarter
--
ERROR: TIME_TRUNC does not support the QUARTER date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,date
--
ERROR: TIME_TRUNC does not support the DATE date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,week
--
ERROR: TIME_TRUNC does not support the WEEK date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,datetime
--
ERROR: TIME_TRUNC does not support the DATETIME date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,time
--
ERROR: TIME_TRUNC does not support the TIME date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,isoyear
--
ERROR: TIME_TRUNC does not support the ISOYEAR date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,isoweek
--
ERROR: TIME_TRUNC does not support the ISOWEEK date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUPS:
    year
    month
    day
    dayofweek
    dayofyear
    quarter
    date
    week
    datetime
    time
    isoyear
    isoweek
--
ERROR: Function not found: time_trunc; Did you mean date_trunc? [at 2:3]
  time_trunc(current_time,
  ^
==

# time_trunc does not support WEEK(<WEEKDAY>)
[language_features={{V_1_2_CIVIL_TIME|V_1_2_CIVIL_TIME,V_1_2_WEEK_WITH_WEEKDAY}}]
select
  time_trunc(current_time,
             {{week(sunday)|week(monday)|week(tuesday)|week(wednesday)|week(thursday)|week(friday)|week(saturday)}});
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,week(sunday)
--
ERROR: Date part arguments are not supported [at 3:19]
             week(sunday));
                  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,week(monday)
--
ERROR: Date part arguments are not supported [at 3:19]
             week(monday));
                  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,week(tuesday)
--
ERROR: Date part arguments are not supported [at 3:19]
             week(tuesday));
                  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,week(wednesday)
--
ERROR: Date part arguments are not supported [at 3:19]
             week(wednesday));
                  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,week(thursday)
--
ERROR: Date part arguments are not supported [at 3:19]
             week(thursday));
                  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,week(friday)
--
ERROR: Date part arguments are not supported [at 3:19]
             week(friday));
                  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,week(saturday)
--
ERROR: Date part arguments are not supported [at 3:19]
             week(saturday));
                  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,V_1_2_WEEK_WITH_WEEKDAY,week(sunday)
--
ERROR: TIME_TRUNC does not support the WEEK date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,V_1_2_WEEK_WITH_WEEKDAY,week(monday)
--
ERROR: TIME_TRUNC does not support the WEEK(MONDAY) date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,V_1_2_WEEK_WITH_WEEKDAY,week(tuesday)
--
ERROR: TIME_TRUNC does not support the WEEK(TUESDAY) date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,V_1_2_WEEK_WITH_WEEKDAY,week(wednesday)
--
ERROR: TIME_TRUNC does not support the WEEK(WEDNESDAY) date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,V_1_2_WEEK_WITH_WEEKDAY,week(thursday)
--
ERROR: TIME_TRUNC does not support the WEEK(THURSDAY) date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,V_1_2_WEEK_WITH_WEEKDAY,week(friday)
--
ERROR: TIME_TRUNC does not support the WEEK(FRIDAY) date part [at 2:3]
  time_trunc(current_time,
  ^
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,V_1_2_WEEK_WITH_WEEKDAY,week(saturday)
--
ERROR: TIME_TRUNC does not support the WEEK(SATURDAY) date part [at 2:3]
  time_trunc(current_time,
  ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select format_time('aaa', {{|time}} '12:34:56.123456');
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:format_time(STRING, TIME) -> STRING)
    |     +-Literal(type=STRING, value="aaa")
    |     +-Literal(type=TIME, value=12:34:56.123456)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,time
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:format_time(STRING, TIME) -> STRING)
    |     +-Literal(type=STRING, value="aaa")
    |     +-Literal(type=TIME, value=12:34:56.123456, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Function not found: format_time; Did you mean format_date? [at 1:8]
select format_time('aaa',  '12:34:56.123456');
       ^
--
ALTERNATION GROUP: time
--
ERROR: Function not found: format_time; Did you mean format_date? [at 1:8]
select format_time('aaa', time '12:34:56.123456');
       ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select format_datetime('aaa', {{|datetime}} '2016-05-06 12:34:56.123456');
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:format_datetime(STRING, DATETIME) -> STRING)
    |     +-Literal(type=STRING, value="aaa")
    |     +-Literal(type=DATETIME, value=2016-05-06 12:34:56.123456)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME,datetime
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:format_datetime(STRING, DATETIME) -> STRING)
    |     +-Literal(type=STRING, value="aaa")
    |     +-Literal(type=DATETIME, value=2016-05-06 12:34:56.123456, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Function not found: format_datetime; Did you mean format_date? [at 1:8]
select format_datetime('aaa',  '2016-05-06 12:34:56.123456');
       ^
--
ALTERNATION GROUP: datetime
--
ERROR: Function not found: format_datetime; Did you mean format_date? [at 1:8]
select format_datetime('aaa', datetime '2016-05-06 12:34:56.123456');
       ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select parse_time('aaa', '12:34:56.123456');
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:parse_time(STRING, STRING) -> TIME)
    |     +-Literal(type=STRING, value="aaa")
    |     +-Literal(type=STRING, value="12:34:56.123456")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Function not found: parse_time; Did you mean parse_date? [at 1:8]
select parse_time('aaa', '12:34:56.123456');
       ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select parse_datetime('aaa', '2016-05-06 12:34:56.123456');

--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:parse_datetime(STRING, STRING) -> DATETIME)
    |     +-Literal(type=STRING, value="aaa")
    |     +-Literal(type=STRING, value="2016-05-06 12:34:56.123456")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Function not found: parse_datetime; Did you mean parse_date? [at 1:8]
select parse_datetime('aaa', '2016-05-06 12:34:56.123456');
       ^
==

# The error message should be different depending on whether civil time
# is enabled or not.
[language_features={{V_1_2_CIVIL_TIME|}}]
select timestamp(1);
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
ERROR: No matching signature for function TIMESTAMP for argument types: INT64. Supported signatures: TIMESTAMP(STRING, [STRING]); TIMESTAMP(DATE, [STRING]); TIMESTAMP(DATETIME, [STRING]) [at 1:8]
select timestamp(1);
       ^
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for function TIMESTAMP for argument types: INT64. Supported signatures: TIMESTAMP(STRING, [STRING]); TIMESTAMP(DATE, [STRING]) [at 1:8]
select timestamp(1);
       ^
==

# DATETIME is supertype of DATE
[language_features=V_1_2_CIVIL_TIME]
select if(current_time > "12:00:00", current_date, current_datetime)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:if(BOOL, DATETIME, DATETIME) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:$greater(TIME, TIME) -> BOOL)
    |     | +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     | +-Literal(type=TIME, value=12:00:00)
    |     +-Cast(DATE -> DATETIME)
    |     | +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    +-input_scan=
      +-SingleRowScan
==

# Implicit coercion from date to datetime
[language_features=V_1_2_CIVIL_TIME]
select datetime_diff(current_datetime, current_date, second)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Cast(DATE -> DATETIME)
    |     | +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=SECOND)
    +-input_scan=
      +-SingleRowScan
==

# No implicit coercion of int64 to datetime/time for first argument.
[language_features=V_1_2_CIVIL_TIME]
select {{datetime_add|datetime_sub|time_add|time_sub}}(5, interval 1 second)
--
ALTERNATION GROUP: datetime_add
--
ERROR: No matching signature for function DATETIME_ADD for argument types: INT64, INTERVAL INT64 DATE_TIME_PART. Supported signature: DATETIME_ADD(DATETIME, INTERVAL INT64 DATE_TIME_PART) [at 1:8]
select datetime_add(5, interval 1 second)
       ^
--
ALTERNATION GROUP: datetime_sub
--
ERROR: No matching signature for function DATETIME_SUB for argument types: INT64, INTERVAL INT64 DATE_TIME_PART. Supported signature: DATETIME_SUB(DATETIME, INTERVAL INT64 DATE_TIME_PART) [at 1:8]
select datetime_sub(5, interval 1 second)
       ^
--
ALTERNATION GROUP: time_add
--
ERROR: No matching signature for function TIME_ADD for argument types: INT64, INTERVAL INT64 DATE_TIME_PART. Supported signature: TIME_ADD(TIME, INTERVAL INT64 DATE_TIME_PART) [at 1:8]
select time_add(5, interval 1 second)
       ^
--
ALTERNATION GROUP: time_sub
--
ERROR: No matching signature for function TIME_SUB for argument types: INT64, INTERVAL INT64 DATE_TIME_PART. Supported signature: TIME_SUB(TIME, INTERVAL INT64 DATE_TIME_PART) [at 1:8]
select time_sub(5, interval 1 second)
       ^
==

# Constructor functions
[language_features=V_1_3_DATE_TIME_CONSTRUCTORS,V_1_2_CIVIL_TIME]
select datetime(current_datetime()), time(current_time()), datetime('2000-01-02 03:04:05'), string(current_datetime()), string(current_time())
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
| +-$query.$col2#2 AS `$col2` [TIME]
| +-$query.$col3#3 AS `$col3` [DATETIME]
| +-$query.$col4#4 AS `$col4` [STRING]
| +-$query.$col5#5 AS `$col5` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:datetime(DATETIME) -> DATETIME)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:time(TIME) -> TIME)
    | |   +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:datetime(STRING) -> DATETIME)
    | |   +-Literal(type=STRING, value="2000-01-02 03:04:05")
    | +-$col4#4 :=
    | | +-FunctionCall(ZetaSQL:string(DATETIME) -> STRING)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | +-$col5#5 :=
    |   +-FunctionCall(ZetaSQL:string(TIME) -> STRING)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_2_CIVIL_TIME]
select time_diff(current_time, time '01:02:03', day)
--
ERROR: TIME_DIFF does not support the DAY date part [at 1:8]
select time_diff(current_time, time '01:02:03', day)
       ^
==

[language_features=V_1_2_CIVIL_TIME,V_1_3_EXTENDED_DATE_TIME_SIGNATURES]
select
  date_trunc('year', '1999-12-31'), date_trunc('year', @test_param_string),
  datetime_trunc('1999-12-31', year), datetime_trunc(@test_param_string, year),
  timestamp_trunc('1999-12-31', year), timestamp_trunc(@test_param_string, year),
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATE]
| +-$query.$col2#2 AS `$col2` [DATE]
| +-$query.$col3#3 AS `$col3` [DATETIME]
| +-$query.$col4#4 AS `$col4` [DATETIME]
| +-$query.$col5#5 AS `$col5` [TIMESTAMP]
| +-$query.$col6#6 AS `$col6` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:date_trunc(STRING, DATE) -> DATE)
    | |   +-Literal(type=STRING, value="year")
    | |   +-Literal(type=DATE, value=1999-12-31)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:date_trunc(STRING, DATE) -> DATE)
    | |   +-Literal(type=STRING, value="year")
    | |   +-Cast(STRING -> DATE)
    | |     +-Parameter(type=STRING, name="test_param_string")
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    | |   +-Literal(type=DATETIME, value=1999-12-31 00:00:00)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    | +-$col4#4 :=
    | | +-FunctionCall(ZetaSQL:datetime_trunc(DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    | |   +-Cast(STRING -> DATETIME)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    | +-$col5#5 :=
    | | +-FunctionCall(ZetaSQL:timestamp_trunc(TIMESTAMP, ENUM<zetasql.functions.DateTimestampPart>, optional(0) STRING) -> TIMESTAMP)
    | |   +-Literal(type=TIMESTAMP, value=1999-12-31 08:00:00+00)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    | +-$col6#6 :=
    |   +-FunctionCall(ZetaSQL:timestamp_trunc(TIMESTAMP, ENUM<zetasql.functions.DateTimestampPart>, optional(0) STRING) -> TIMESTAMP)
    |     +-Cast(STRING -> TIMESTAMP)
    |     | +-Parameter(type=STRING, name="test_param_string")
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_2_CIVIL_TIME,V_1_3_EXTENDED_DATE_TIME_SIGNATURES]
select
  date_add('2000-01-01', interval 1 day), date_add(@test_param_string, interval 1 day),
  date_sub('2000-01-01', interval 1 day), date_sub(@test_param_string, interval 1 day),
  datetime_add('2000-01-01', interval 1 day), datetime_add(@test_param_string, interval 1 day),
  datetime_sub('2000-01-01', interval 1 day), datetime_sub(@test_param_string, interval 1 day),
  timestamp_add('2000-01-01', interval 1 day), timestamp_add(@test_param_string, interval 1 day),
  timestamp_sub('2000-01-01', interval 1 day), timestamp_sub(@test_param_string, interval 1 day),
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATE]
| +-$query.$col2#2 AS `$col2` [DATE]
| +-$query.$col3#3 AS `$col3` [DATE]
| +-$query.$col4#4 AS `$col4` [DATE]
| +-$query.$col5#5 AS `$col5` [DATETIME]
| +-$query.$col6#6 AS `$col6` [DATETIME]
| +-$query.$col7#7 AS `$col7` [DATETIME]
| +-$query.$col8#8 AS `$col8` [DATETIME]
| +-$query.$col9#9 AS `$col9` [TIMESTAMP]
| +-$query.$col10#10 AS `$col10` [TIMESTAMP]
| +-$query.$col11#11 AS `$col11` [TIMESTAMP]
| +-$query.$col12#12 AS `$col12` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:date_add(DATE, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATE)
    | |   +-Literal(type=DATE, value=2000-01-01)
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:date_add(DATE, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATE)
    | |   +-Cast(STRING -> DATE)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:date_sub(DATE, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATE)
    | |   +-Literal(type=DATE, value=2000-01-01)
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col4#4 :=
    | | +-FunctionCall(ZetaSQL:date_sub(DATE, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATE)
    | |   +-Cast(STRING -> DATE)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col5#5 :=
    | | +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    | |   +-Literal(type=DATETIME, value=2000-01-01 00:00:00)
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col6#6 :=
    | | +-FunctionCall(ZetaSQL:datetime_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    | |   +-Cast(STRING -> DATETIME)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col7#7 :=
    | | +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    | |   +-Literal(type=DATETIME, value=2000-01-01 00:00:00)
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col8#8 :=
    | | +-FunctionCall(ZetaSQL:datetime_sub(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    | |   +-Cast(STRING -> DATETIME)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col9#9 :=
    | | +-FunctionCall(ZetaSQL:timestamp_add(TIMESTAMP, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIMESTAMP)
    | |   +-Literal(type=TIMESTAMP, value=2000-01-01 08:00:00+00)
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col10#10 :=
    | | +-FunctionCall(ZetaSQL:timestamp_add(TIMESTAMP, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIMESTAMP)
    | |   +-Cast(STRING -> TIMESTAMP)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col11#11 :=
    | | +-FunctionCall(ZetaSQL:timestamp_sub(TIMESTAMP, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIMESTAMP)
    | |   +-Literal(type=TIMESTAMP, value=2000-01-01 08:00:00+00)
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col12#12 :=
    |   +-FunctionCall(ZetaSQL:timestamp_sub(TIMESTAMP, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIMESTAMP)
    |     +-Cast(STRING -> TIMESTAMP)
    |     | +-Parameter(type=STRING, name="test_param_string")
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_2_CIVIL_TIME,V_1_3_EXTENDED_DATE_TIME_SIGNATURES]
select
  date_diff('2000-01-01', '1999-12-31', day), date_diff(@test_param_string, @test_param_string, day),
  date_diff(date '2000-01-01', '1999-12-31', day), date_diff(date '2000-01-01', @test_param_string, day),
  date_diff('2000-01-01', date '1999-12-31', day), date_diff(@test_param_string, date '1999-12-31', day),
  datetime_diff('2000-01-01', '1999-12-31', day), datetime_diff(@test_param_string, @test_param_string, day),
  datetime_diff(datetime '2000-01-01', '1999-12-31', day), datetime_diff(datetime '2000-01-01', @test_param_string, day),
  datetime_diff('2000-01-01', datetime '1999-12-31', day), datetime_diff(@test_param_string, datetime '1999-12-31', day),
  timestamp_diff('2000-01-01', '1999-12-31', day), timestamp_diff(@test_param_string, @test_param_string, day),
  timestamp_diff(timestamp '2000-01-01', '1999-12-31', day), timestamp_diff(timestamp '2000-01-01', @test_param_string, day),
  timestamp_diff('2000-01-01', timestamp '1999-12-31', day), timestamp_diff(@test_param_string, timestamp '1999-12-31', day),
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.$col3#3 AS `$col3` [INT64]
| +-$query.$col4#4 AS `$col4` [INT64]
| +-$query.$col5#5 AS `$col5` [INT64]
| +-$query.$col6#6 AS `$col6` [INT64]
| +-$query.$col7#7 AS `$col7` [INT64]
| +-$query.$col8#8 AS `$col8` [INT64]
| +-$query.$col9#9 AS `$col9` [INT64]
| +-$query.$col10#10 AS `$col10` [INT64]
| +-$query.$col11#11 AS `$col11` [INT64]
| +-$query.$col12#12 AS `$col12` [INT64]
| +-$query.$col13#13 AS `$col13` [INT64]
| +-$query.$col14#14 AS `$col14` [INT64]
| +-$query.$col15#15 AS `$col15` [INT64]
| +-$query.$col16#16 AS `$col16` [INT64]
| +-$query.$col17#17 AS `$col17` [INT64]
| +-$query.$col18#18 AS `$col18` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12, $col13#13, $col14#14, $col15#15, $col16#16, $col17#17, $col18#18]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATE, value=2000-01-01)
    | |   +-Literal(type=DATE, value=1999-12-31)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Cast(STRING -> DATE)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Cast(STRING -> DATE)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATE, value=2000-01-01, has_explicit_type=TRUE)
    | |   +-Literal(type=DATE, value=1999-12-31)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col4#4 :=
    | | +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATE, value=2000-01-01, has_explicit_type=TRUE)
    | |   +-Cast(STRING -> DATE)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col5#5 :=
    | | +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATE, value=2000-01-01)
    | |   +-Literal(type=DATE, value=1999-12-31, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col6#6 :=
    | | +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Cast(STRING -> DATE)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Literal(type=DATE, value=1999-12-31, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col7#7 :=
    | | +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2000-01-01 00:00:00)
    | |   +-Literal(type=DATETIME, value=1999-12-31 00:00:00)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col8#8 :=
    | | +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Cast(STRING -> DATETIME)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Cast(STRING -> DATETIME)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col9#9 :=
    | | +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2000-01-01 00:00:00, has_explicit_type=TRUE)
    | |   +-Literal(type=DATETIME, value=1999-12-31 00:00:00)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col10#10 :=
    | | +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2000-01-01 00:00:00, has_explicit_type=TRUE)
    | |   +-Cast(STRING -> DATETIME)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col11#11 :=
    | | +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=DATETIME, value=2000-01-01 00:00:00)
    | |   +-Literal(type=DATETIME, value=1999-12-31 00:00:00, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col12#12 :=
    | | +-FunctionCall(ZetaSQL:datetime_diff(DATETIME, DATETIME, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Cast(STRING -> DATETIME)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Literal(type=DATETIME, value=1999-12-31 00:00:00, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col13#13 :=
    | | +-FunctionCall(ZetaSQL:timestamp_diff(TIMESTAMP, TIMESTAMP, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=TIMESTAMP, value=2000-01-01 08:00:00+00)
    | |   +-Literal(type=TIMESTAMP, value=1999-12-31 08:00:00+00)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col14#14 :=
    | | +-FunctionCall(ZetaSQL:timestamp_diff(TIMESTAMP, TIMESTAMP, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Cast(STRING -> TIMESTAMP)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Cast(STRING -> TIMESTAMP)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col15#15 :=
    | | +-FunctionCall(ZetaSQL:timestamp_diff(TIMESTAMP, TIMESTAMP, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=TIMESTAMP, value=2000-01-01 08:00:00+00, has_explicit_type=TRUE)
    | |   +-Literal(type=TIMESTAMP, value=1999-12-31 08:00:00+00)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col16#16 :=
    | | +-FunctionCall(ZetaSQL:timestamp_diff(TIMESTAMP, TIMESTAMP, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=TIMESTAMP, value=2000-01-01 08:00:00+00, has_explicit_type=TRUE)
    | |   +-Cast(STRING -> TIMESTAMP)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col17#17 :=
    | | +-FunctionCall(ZetaSQL:timestamp_diff(TIMESTAMP, TIMESTAMP, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=TIMESTAMP, value=2000-01-01 08:00:00+00)
    | |   +-Literal(type=TIMESTAMP, value=1999-12-31 08:00:00+00, has_explicit_type=TRUE)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col18#18 :=
    |   +-FunctionCall(ZetaSQL:timestamp_diff(TIMESTAMP, TIMESTAMP, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-Cast(STRING -> TIMESTAMP)
    |     | +-Parameter(type=STRING, name="test_param_string")
    |     +-Literal(type=TIMESTAMP, value=1999-12-31 08:00:00+00, has_explicit_type=TRUE)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_2_CIVIL_TIME,V_1_3_EXTENDED_DATE_TIME_SIGNATURES]
select
  format_date('%D', '2000-01-01'), format_date('%D', @test_param_string),
  format_datetime('%D', '2000-01-01'), format_datetime('%D', @test_param_string),
  format_timestamp('%D', '2000-01-01'), format_timestamp('%D', @test_param_string),
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [STRING]
| +-$query.$col3#3 AS `$col3` [STRING]
| +-$query.$col4#4 AS `$col4` [STRING]
| +-$query.$col5#5 AS `$col5` [STRING]
| +-$query.$col6#6 AS `$col6` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:format_date(STRING, DATE) -> STRING)
    | |   +-Literal(type=STRING, value="%D")
    | |   +-Literal(type=DATE, value=2000-01-01)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:format_date(STRING, DATE) -> STRING)
    | |   +-Literal(type=STRING, value="%D")
    | |   +-Cast(STRING -> DATE)
    | |     +-Parameter(type=STRING, name="test_param_string")
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:format_datetime(STRING, DATETIME) -> STRING)
    | |   +-Literal(type=STRING, value="%D")
    | |   +-Literal(type=DATETIME, value=2000-01-01 00:00:00)
    | +-$col4#4 :=
    | | +-FunctionCall(ZetaSQL:format_datetime(STRING, DATETIME) -> STRING)
    | |   +-Literal(type=STRING, value="%D")
    | |   +-Cast(STRING -> DATETIME)
    | |     +-Parameter(type=STRING, name="test_param_string")
    | +-$col5#5 :=
    | | +-FunctionCall(ZetaSQL:format_timestamp(STRING, TIMESTAMP, optional(0) STRING) -> STRING)
    | |   +-Literal(type=STRING, value="%D")
    | |   +-Literal(type=TIMESTAMP, value=2000-01-01 08:00:00+00)
    | +-$col6#6 :=
    |   +-FunctionCall(ZetaSQL:format_timestamp(STRING, TIMESTAMP, optional(0) STRING) -> STRING)
    |     +-Literal(type=STRING, value="%D")
    |     +-Cast(STRING -> TIMESTAMP)
    |       +-Parameter(type=STRING, name="test_param_string")
    +-input_scan=
      +-SingleRowScan
==

# Make sure that the resolver doesn't coerce string literals/parameters to
# unexpected types due to extended signatures aliases.
[language_features=TIME_BUCKET_FUNCTIONS,INTERVAL_TYPE,V_1_2_CIVIL_TIME,V_1_3_EXTENDED_DATE_TIME_SIGNATURES]
select
  timestamp_bucket('1999-12-31', INTERVAL 1 DAY),
  timestamp_bucket(timestamp '1999-12-31', INTERVAL 1 DAY, '2000-01-01'),
  timestamp_bucket(@test_param_string, INTERVAL 1 DAY),
  timestamp_bucket(@test_param_string, INTERVAL 1 DAY, @test_param_string),
  datetime_bucket('1999-12-31', INTERVAL 1 DAY),
  datetime_bucket(datetime '1999-12-31', INTERVAL 1 DAY, '2000-01-01'),
  datetime_bucket(@test_param_string, INTERVAL 1 DAY),
  datetime_bucket(@test_param_string, INTERVAL 1 DAY, @test_param_string),
  date_bucket('1999-12-31', INTERVAL 1 DAY),
  date_bucket(date '1999-12-31', INTERVAL 1 DAY, '2000-01-01'),
  date_bucket(@test_param_string, INTERVAL 1 DAY),
  date_bucket(@test_param_string, INTERVAL 1 DAY, @test_param_string),
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIMESTAMP]
| +-$query.$col2#2 AS `$col2` [TIMESTAMP]
| +-$query.$col3#3 AS `$col3` [TIMESTAMP]
| +-$query.$col4#4 AS `$col4` [TIMESTAMP]
| +-$query.$col5#5 AS `$col5` [DATETIME]
| +-$query.$col6#6 AS `$col6` [DATETIME]
| +-$query.$col7#7 AS `$col7` [DATETIME]
| +-$query.$col8#8 AS `$col8` [DATETIME]
| +-$query.$col9#9 AS `$col9` [DATE]
| +-$query.$col10#10 AS `$col10` [DATE]
| +-$query.$col11#11 AS `$col11` [DATE]
| +-$query.$col12#12 AS `$col12` [DATE]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:timestamp_bucket(TIMESTAMP, INTERVAL, optional(0) TIMESTAMP) -> TIMESTAMP)
    | |   +-Literal(type=TIMESTAMP, value=1999-12-31 08:00:00+00)
    | |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    | |     +-Literal(type=INT64, value=1)
    | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:timestamp_bucket(TIMESTAMP, INTERVAL, optional(1) TIMESTAMP) -> TIMESTAMP)
    | |   +-Literal(type=TIMESTAMP, value=1999-12-31 08:00:00+00, has_explicit_type=TRUE)
    | |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    | |   | +-Literal(type=INT64, value=1)
    | |   | +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | |   +-Literal(type=TIMESTAMP, value=2000-01-01 08:00:00+00)
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:timestamp_bucket(TIMESTAMP, INTERVAL, optional(0) TIMESTAMP) -> TIMESTAMP)
    | |   +-Cast(STRING -> TIMESTAMP)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    | |     +-Literal(type=INT64, value=1)
    | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col4#4 :=
    | | +-FunctionCall(ZetaSQL:timestamp_bucket(TIMESTAMP, INTERVAL, optional(1) TIMESTAMP) -> TIMESTAMP)
    | |   +-Cast(STRING -> TIMESTAMP)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    | |   | +-Literal(type=INT64, value=1)
    | |   | +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | |   +-Cast(STRING -> TIMESTAMP)
    | |     +-Parameter(type=STRING, name="test_param_string")
    | +-$col5#5 :=
    | | +-FunctionCall(ZetaSQL:datetime_bucket(DATETIME, INTERVAL, optional(0) DATETIME) -> DATETIME)
    | |   +-Literal(type=DATETIME, value=1999-12-31 00:00:00)
    | |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    | |     +-Literal(type=INT64, value=1)
    | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col6#6 :=
    | | +-FunctionCall(ZetaSQL:datetime_bucket(DATETIME, INTERVAL, optional(1) DATETIME) -> DATETIME)
    | |   +-Literal(type=DATETIME, value=1999-12-31 00:00:00, has_explicit_type=TRUE)
    | |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    | |   | +-Literal(type=INT64, value=1)
    | |   | +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | |   +-Literal(type=DATETIME, value=2000-01-01 00:00:00)
    | +-$col7#7 :=
    | | +-FunctionCall(ZetaSQL:datetime_bucket(DATETIME, INTERVAL, optional(0) DATETIME) -> DATETIME)
    | |   +-Cast(STRING -> DATETIME)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    | |     +-Literal(type=INT64, value=1)
    | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col8#8 :=
    | | +-FunctionCall(ZetaSQL:datetime_bucket(DATETIME, INTERVAL, optional(1) DATETIME) -> DATETIME)
    | |   +-Cast(STRING -> DATETIME)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    | |   | +-Literal(type=INT64, value=1)
    | |   | +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | |   +-Cast(STRING -> DATETIME)
    | |     +-Parameter(type=STRING, name="test_param_string")
    | +-$col9#9 :=
    | | +-FunctionCall(ZetaSQL:date_bucket(DATE, INTERVAL, optional(0) DATE) -> DATE)
    | |   +-Literal(type=DATE, value=1999-12-31)
    | |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    | |     +-Literal(type=INT64, value=1)
    | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col10#10 :=
    | | +-FunctionCall(ZetaSQL:date_bucket(DATE, INTERVAL, optional(1) DATE) -> DATE)
    | |   +-Literal(type=DATE, value=1999-12-31, has_explicit_type=TRUE)
    | |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    | |   | +-Literal(type=INT64, value=1)
    | |   | +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | |   +-Literal(type=DATE, value=2000-01-01)
    | +-$col11#11 :=
    | | +-FunctionCall(ZetaSQL:date_bucket(DATE, INTERVAL, optional(0) DATE) -> DATE)
    | |   +-Cast(STRING -> DATE)
    | |   | +-Parameter(type=STRING, name="test_param_string")
    | |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    | |     +-Literal(type=INT64, value=1)
    | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col12#12 :=
    |   +-FunctionCall(ZetaSQL:date_bucket(DATE, INTERVAL, optional(1) DATE) -> DATE)
    |     +-Cast(STRING -> DATE)
    |     | +-Parameter(type=STRING, name="test_param_string")
    |     +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    |     | +-Literal(type=INT64, value=1)
    |     | +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    |     +-Cast(STRING -> DATE)
    |       +-Parameter(type=STRING, name="test_param_string")
    +-input_scan=
      +-SingleRowScan

==

[language_features={{|TIME_BUCKET_FUNCTIONS|INTERVAL_TYPE|TIME_BUCKET_FUNCTIONS,INTERVAL_TYPE}}]
select date_bucket('2020-02-15', INTERVAL 1 DAY)
--
ALTERNATION GROUPS:
    <empty>
    TIME_BUCKET_FUNCTIONS
    INTERVAL_TYPE
--
ERROR: Function not found: date_bucket; Did you mean range_bucket? [at 1:8]
select date_bucket('2020-02-15', INTERVAL 1 DAY)
       ^
--
ALTERNATION GROUP: TIME_BUCKET_FUNCTIONS,INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:date_bucket(DATE, INTERVAL, optional(0) DATE) -> DATE)
    |     +-Literal(type=DATE, value=2020-02-15)
    |     +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    |       +-Literal(type=INT64, value=1)
    |       +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    +-input_scan=
      +-SingleRowScan
==

[language_features=TIME_BUCKET_FUNCTIONS{{|,V_1_2_CIVIL_TIME|,INTERVAL_TYPE|,V_1_2_CIVIL_TIME,INTERVAL_TYPE}}]
SELECT datetime_bucket('1999-12-31', INTERVAL 1 DAY);
--
ALTERNATION GROUP: <empty>
--
ERROR: Function not found: datetime_bucket [at 1:8]
SELECT datetime_bucket('1999-12-31', INTERVAL 1 DAY);
       ^
--
ALTERNATION GROUP: ,V_1_2_CIVIL_TIME
--
ERROR: Function not found: datetime_bucket; Did you mean datetime_sub? [at 1:8]
SELECT datetime_bucket('1999-12-31', INTERVAL 1 DAY);
       ^
--
ALTERNATION GROUP: ,INTERVAL_TYPE
--
ERROR: Function not found: datetime_bucket; Did you mean date_bucket? [at 1:8]
SELECT datetime_bucket('1999-12-31', INTERVAL 1 DAY);
       ^
--
ALTERNATION GROUP: ,V_1_2_CIVIL_TIME,INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:datetime_bucket(DATETIME, INTERVAL, optional(0) DATETIME) -> DATETIME)
    |     +-Literal(type=DATETIME, value=1999-12-31 00:00:00)
    |     +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    |       +-Literal(type=INT64, value=1)
    |       +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    +-input_scan=
      +-SingleRowScan
==

# Regression test for b/186420709.
# Shows reasonable error message when *_add|sub() used with TIMESTAMP argument.
[language_features=V_1_2_CIVIL_TIME,V_1_3_EXTENDED_DATE_TIME_SIGNATURES]
select
  {{date|datetime|timestamp}}_{{add|sub}}(TIMESTAMP'2021-01-15 00:33:09', interval 1 week)
--
ALTERNATION GROUP: date,add
--
ERROR: DATE_ADD does not support the WEEK date part when the argument is TIMESTAMP type [at 2:3]
  date_add(TIMESTAMP'2021-01-15 00:33:09', interval 1 week)
  ^
--
ALTERNATION GROUP: date,sub
--
ERROR: DATE_SUB does not support the WEEK date part when the argument is TIMESTAMP type [at 2:3]
  date_sub(TIMESTAMP'2021-01-15 00:33:09', interval 1 week)
  ^
--
ALTERNATION GROUP: datetime,add
--
ERROR: DATETIME_ADD does not support the WEEK date part when the argument is TIMESTAMP type [at 2:3]
  datetime_add(TIMESTAMP'2021-01-15 00:33:09', interval 1 week)
  ^
--
ALTERNATION GROUP: datetime,sub
--
ERROR: DATETIME_SUB does not support the WEEK date part when the argument is TIMESTAMP type [at 2:3]
  datetime_sub(TIMESTAMP'2021-01-15 00:33:09', interval 1 week)
  ^
--
ALTERNATION GROUP: timestamp,add
--
ERROR: TIMESTAMP_ADD does not support the WEEK date part when the argument is TIMESTAMP type [at 2:3]
  timestamp_add(TIMESTAMP'2021-01-15 00:33:09', interval 1 week)
  ^
--
ALTERNATION GROUP: timestamp,sub
--
ERROR: TIMESTAMP_SUB does not support the WEEK date part when the argument is TIMESTAMP type [at 2:3]
  timestamp_sub(TIMESTAMP'2021-01-15 00:33:09', interval 1 week)
  ^
==

# Regression test for b/186420709.
# Shows there is no error message when:
# * date_add() used with TIMESTAMP argument and 'hour' interval
# * timestamp_add() used with DATETIME argument and 'week' interval
[language_features=V_1_2_CIVIL_TIME,V_1_3_EXTENDED_DATE_TIME_SIGNATURES]
select
  date_add(TIMESTAMP '2021-01-15 00:33:09', interval 1 hour),
  timestamp_add(DATETIME '2021-01-15 00:33:09', interval 1 week),

--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIMESTAMP]
| +-$query.$col2#2 AS `$col2` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:date_add(TIMESTAMP, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIMESTAMP)
    | |   +-Literal(type=TIMESTAMP, value=2021-01-15 08:33:09+00, has_explicit_type=TRUE)
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=HOUR)
    | +-$col2#2 :=
    |   +-FunctionCall(ZetaSQL:timestamp_add(DATETIME, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2021-01-15 00:33:09, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=WEEK)
    +-input_scan=
      +-SingleRowScan

==

# Regression test for b/186420709.
# Shows reasonable error message when *_diff() used with TIMESTAMP argument.
[language_features=V_1_2_CIVIL_TIME,V_1_3_EXTENDED_DATE_TIME_SIGNATURES]
select
  {{date|datetime|time|timestamp}}_diff(TIMESTAMP'2021-01-15 00:33:09', TIMESTAMP'2021-01-15 00:33:09', week)
--
ALTERNATION GROUP: date
--
ERROR: DATE_DIFF does not support the WEEK date part when the argument is TIMESTAMP type [at 2:3]
  date_diff(TIMESTAMP'2021-01-15 00:33:09', TIMESTAMP'2021-01-15 00:33:09', w...
  ^
--
ALTERNATION GROUP: datetime
--
ERROR: DATETIME_DIFF does not support the WEEK date part when the argument is TIMESTAMP type [at 2:3]
  datetime_diff(TIMESTAMP'2021-01-15 00:33:09', TIMESTAMP'2021-01-15 00:33:09...
  ^
--
ALTERNATION GROUP: time
--
ERROR: TIME_DIFF does not support the WEEK date part when the argument is TIMESTAMP type [at 2:3]
  time_diff(TIMESTAMP'2021-01-15 00:33:09', TIMESTAMP'2021-01-15 00:33:09', w...
  ^
--
ALTERNATION GROUP: timestamp
--
ERROR: TIMESTAMP_DIFF does not support the WEEK date part when the argument is TIMESTAMP type [at 2:3]
  timestamp_diff(TIMESTAMP'2021-01-15 00:33:09', TIMESTAMP'2021-01-15 00:33:0...
  ^
==

[language_features={{|V_1_3_ADDITIONAL_STRING_FUNCTIONS|V_1_2_CIVIL_TIME|V_1_3_ADDITIONAL_STRING_FUNCTIONS,V_1_2_CIVIL_TIME}}]
select last_day(date '2020-07-10', SECOND)
--
ERROR: Unrecognized name: SECOND [at 1:36]
select last_day(date '2020-07-10', SECOND)
                                   ^
==

[language_features={{|TIME_BUCKET_FUNCTIONS|INTERVAL_TYPE|TIME_BUCKET_FUNCTIONS,INTERVAL_TYPE}}]
select timestamp_bucket('2020-02-15 14:57:39', INTERVAL 1 DAY)
--
ALTERNATION GROUPS:
    <empty>
    TIME_BUCKET_FUNCTIONS
    INTERVAL_TYPE
--
ERROR: Function not found: timestamp_bucket; Did you mean timestamp_micros? [at 1:8]
select timestamp_bucket('2020-02-15 14:57:39', INTERVAL 1 DAY)
       ^
--
ALTERNATION GROUP: TIME_BUCKET_FUNCTIONS,INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:timestamp_bucket(TIMESTAMP, INTERVAL, optional(0) TIMESTAMP) -> TIMESTAMP)
    |     +-Literal(type=TIMESTAMP, value=2020-02-15 22:57:39+00)
    |     +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    |       +-Literal(type=INT64, value=1)
    |       +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    +-input_scan=
      +-SingleRowScan
