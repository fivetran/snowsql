# This file tests the analytic support for aggregate functions.
[default language_features=ANALYTIC_FUNCTIONS]
select count(*) over w,
       count(value) over w,
       sum(key) over w,
       avg(key) over w,
       stddev(key) over w,
       stddev_pop(key) over w,
       stddev_samp(key) over w,
       variance(key) over w,
       var_pop(key) over w,
       var_samp(key) over w,
       corr(key, key) over w,
       covar_pop(key, key) over w,
       covar_samp(key, key) over w,
       min(key) over w,
       max(key) over w,
       any_value(value) over w,
       array_agg(key) over w,
       array_concat_agg([key, key]) over w,
       string_agg(value, "; ") over w
from keyvalue
window w as (partition by key order by value rows 2 preceding)
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#22 AS "$col1" [INT64]
| +-$analytic.$analytic2#23 AS "$col2" [INT64]
| +-$analytic.$analytic3#24 AS "$col3" [INT64]
| +-$analytic.$analytic4#25 AS "$col4" [DOUBLE]
| +-$analytic.$analytic5#26 AS "$col5" [DOUBLE]
| +-$analytic.$analytic6#27 AS "$col6" [DOUBLE]
| +-$analytic.$analytic7#28 AS "$col7" [DOUBLE]
| +-$analytic.$analytic8#29 AS "$col8" [DOUBLE]
| +-$analytic.$analytic9#30 AS "$col9" [DOUBLE]
| +-$analytic.$analytic10#31 AS "$col10" [DOUBLE]
| +-$analytic.$analytic11#32 AS "$col11" [DOUBLE]
| +-$analytic.$analytic12#33 AS "$col12" [DOUBLE]
| +-$analytic.$analytic13#34 AS "$col13" [DOUBLE]
| +-$analytic.$analytic14#35 AS "$col14" [INT64]
| +-$analytic.$analytic15#36 AS "$col15" [INT64]
| +-$analytic.$analytic16#37 AS "$col16" [STRING]
| +-$analytic.$analytic17#38 AS "$col17" [ARRAY<INT64>]
| +-$analytic.$analytic18#39 AS "$col18" [ARRAY<INT64>]
| +-$analytic.$analytic19#40 AS "$col19" [STRING]
+-query=
  +-ProjectScan
    +-column_list=$analytic.[$analytic1#22, $analytic2#23, $analytic3#24, $analytic4#25, $analytic5#26, $analytic6#27, $analytic7#28, $analytic8#29, $analytic9#30, $analytic10#31, $analytic11#32, $analytic12#33, $analytic13#34, $analytic14#35, $analytic15#36, $analytic16#37, $analytic17#38, $analytic18#39, $analytic19#40]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#22, $analytic.$analytic2#23, $analytic.$analytic3#24, $analytic.$analytic4#25, $analytic.$analytic5#26, $analytic.$analytic6#27, $analytic.$analytic7#28, $analytic.$analytic8#29, $analytic.$analytic9#30, $analytic.$analytic10#31, $analytic.$analytic11#32, $analytic.$analytic12#33, $analytic.$analytic13#34, $analytic.$analytic14#35, $analytic.$analytic15#36, $analytic.$analytic16#37, $analytic.$analytic17#38, $analytic.$analytic18#39, $analytic.$analytic19#40]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-partition_by=
            | +-WindowPartitioning
            |   +-partition_by_list=
            |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-order_by=
            | +-WindowOrdering
            |   +-order_by_item_list=
            |     +-OrderByItem
            |       +-column_ref=
            |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            +-analytic_function_list=
              +-$analytic1#22 :=
              | +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic2#23 :=
              | +-AnalyticFunctionCall(ZetaSQL:count(STRING) -> INT64)
              |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic3#24 :=
              | +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic4#25 :=
              | +-AnalyticFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic5#26 :=
              | +-AnalyticFunctionCall(ZetaSQL:stddev_samp(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic6#27 :=
              | +-AnalyticFunctionCall(ZetaSQL:stddev_pop(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic7#28 :=
              | +-AnalyticFunctionCall(ZetaSQL:stddev_samp(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic8#29 :=
              | +-AnalyticFunctionCall(ZetaSQL:var_samp(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic9#30 :=
              | +-AnalyticFunctionCall(ZetaSQL:var_pop(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic10#31 :=
              | +-AnalyticFunctionCall(ZetaSQL:var_samp(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic11#32 :=
              | +-AnalyticFunctionCall(ZetaSQL:corr(DOUBLE, DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic12#33 :=
              | +-AnalyticFunctionCall(ZetaSQL:covar_pop(DOUBLE, DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic13#34 :=
              | +-AnalyticFunctionCall(ZetaSQL:covar_samp(DOUBLE, DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic14#35 :=
              | +-AnalyticFunctionCall(ZetaSQL:min(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic15#36 :=
              | +-AnalyticFunctionCall(ZetaSQL:max(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic16#37 :=
              | +-AnalyticFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
              |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic17#38 :=
              | +-AnalyticFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic18#39 :=
              | +-AnalyticFunctionCall(ZetaSQL:array_concat_agg(ARRAY<INT64>) -> ARRAY<INT64>)
              |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) INT64) -> ARRAY<INT64>)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
              |       |   +-Literal(type=INT64, value=2)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=CURRENT ROW)
              +-$analytic19#40 :=
                +-AnalyticFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
                  +-ColumnRef(type=STRING, column=KeyValue.Value#2)
                  +-Literal(type=STRING, value="; ")
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
                      |   +-Literal(type=INT64, value=2)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=CURRENT ROW)
==

# PARTITION BY, ORDER BY, window frame clauses are optional.
select count(*) over (),
       count(value) over (),
       sum(key) over (),
       avg(key) over (),
       stddev(key) over (),
       stddev_pop(key) over (),
       stddev_samp(key) over (),
       variance(key) over (),
       var_pop(key) over (),
       var_samp(key) over (),
       corr(key, key) over (),
       covar_pop(key, key) over (),
       covar_samp(key, key) over (),
       min(key) over (),
       max(key) over (),
       any_value(value) over (),
       array_agg(key) over (),
       array_concat_agg([key]) over (),
       string_agg(value, "; ") over ()
from keyvalue
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#22 AS "$col1" [INT64]
| +-$analytic.$analytic2#23 AS "$col2" [INT64]
| +-$analytic.$analytic3#24 AS "$col3" [INT64]
| +-$analytic.$analytic4#25 AS "$col4" [DOUBLE]
| +-$analytic.$analytic5#26 AS "$col5" [DOUBLE]
| +-$analytic.$analytic6#27 AS "$col6" [DOUBLE]
| +-$analytic.$analytic7#28 AS "$col7" [DOUBLE]
| +-$analytic.$analytic8#29 AS "$col8" [DOUBLE]
| +-$analytic.$analytic9#30 AS "$col9" [DOUBLE]
| +-$analytic.$analytic10#31 AS "$col10" [DOUBLE]
| +-$analytic.$analytic11#32 AS "$col11" [DOUBLE]
| +-$analytic.$analytic12#33 AS "$col12" [DOUBLE]
| +-$analytic.$analytic13#34 AS "$col13" [DOUBLE]
| +-$analytic.$analytic14#35 AS "$col14" [INT64]
| +-$analytic.$analytic15#36 AS "$col15" [INT64]
| +-$analytic.$analytic16#37 AS "$col16" [STRING]
| +-$analytic.$analytic17#38 AS "$col17" [ARRAY<INT64>]
| +-$analytic.$analytic18#39 AS "$col18" [ARRAY<INT64>]
| +-$analytic.$analytic19#40 AS "$col19" [STRING]
+-query=
  +-ProjectScan
    +-column_list=$analytic.[$analytic1#22, $analytic2#23, $analytic3#24, $analytic4#25, $analytic5#26, $analytic6#27, $analytic7#28, $analytic8#29, $analytic9#30, $analytic10#31, $analytic11#32, $analytic12#33, $analytic13#34, $analytic14#35, $analytic15#36, $analytic16#37, $analytic17#38, $analytic18#39, $analytic19#40]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#22, $analytic.$analytic2#23, $analytic.$analytic3#24, $analytic.$analytic4#25, $analytic.$analytic5#26, $analytic.$analytic6#27, $analytic.$analytic7#28, $analytic.$analytic8#29, $analytic.$analytic9#30, $analytic.$analytic10#31, $analytic.$analytic11#32, $analytic.$analytic12#33, $analytic.$analytic13#34, $analytic.$analytic14#35, $analytic.$analytic15#36, $analytic.$analytic16#37, $analytic.$analytic17#38, $analytic.$analytic18#39, $analytic.$analytic19#40]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#22 :=
              | +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic2#23 :=
              | +-AnalyticFunctionCall(ZetaSQL:count(STRING) -> INT64)
              |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic3#24 :=
              | +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic4#25 :=
              | +-AnalyticFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic5#26 :=
              | +-AnalyticFunctionCall(ZetaSQL:stddev_samp(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic6#27 :=
              | +-AnalyticFunctionCall(ZetaSQL:stddev_pop(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic7#28 :=
              | +-AnalyticFunctionCall(ZetaSQL:stddev_samp(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic8#29 :=
              | +-AnalyticFunctionCall(ZetaSQL:var_samp(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic9#30 :=
              | +-AnalyticFunctionCall(ZetaSQL:var_pop(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic10#31 :=
              | +-AnalyticFunctionCall(ZetaSQL:var_samp(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic11#32 :=
              | +-AnalyticFunctionCall(ZetaSQL:corr(DOUBLE, DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic12#33 :=
              | +-AnalyticFunctionCall(ZetaSQL:covar_pop(DOUBLE, DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic13#34 :=
              | +-AnalyticFunctionCall(ZetaSQL:covar_samp(DOUBLE, DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic14#35 :=
              | +-AnalyticFunctionCall(ZetaSQL:min(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic15#36 :=
              | +-AnalyticFunctionCall(ZetaSQL:max(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic16#37 :=
              | +-AnalyticFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
              |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic17#38 :=
              | +-AnalyticFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic18#39 :=
              | +-AnalyticFunctionCall(ZetaSQL:array_concat_agg(ARRAY<INT64>) -> ARRAY<INT64>)
              |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) INT64) -> ARRAY<INT64>)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic19#40 :=
                +-AnalyticFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
                  +-ColumnRef(type=STRING, column=KeyValue.Value#2)
                  +-Literal(type=STRING, value="; ")
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select count(distinct value) over w,
       sum(distinct key) over w,
       avg(distinct key) over w,
       stddev(distinct key) over w,
       stddev_pop(distinct key) over w,
       stddev_samp(distinct key) over w,
       variance(distinct key) over w,
       var_pop(distinct key) over w,
       var_samp(distinct key) over w,
       min(distinct key) over w,
       max(distinct key) over w,
       any_value(distinct key) over w,
       array_agg(distinct key) over w,
       string_agg(distinct value, "; ") over w
from keyvalue
window w as (partition by key)
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#17 AS "$col1" [INT64]
| +-$analytic.$analytic2#18 AS "$col2" [INT64]
| +-$analytic.$analytic3#19 AS "$col3" [DOUBLE]
| +-$analytic.$analytic4#20 AS "$col4" [DOUBLE]
| +-$analytic.$analytic5#21 AS "$col5" [DOUBLE]
| +-$analytic.$analytic6#22 AS "$col6" [DOUBLE]
| +-$analytic.$analytic7#23 AS "$col7" [DOUBLE]
| +-$analytic.$analytic8#24 AS "$col8" [DOUBLE]
| +-$analytic.$analytic9#25 AS "$col9" [DOUBLE]
| +-$analytic.$analytic10#26 AS "$col10" [INT64]
| +-$analytic.$analytic11#27 AS "$col11" [INT64]
| +-$analytic.$analytic12#28 AS "$col12" [INT64]
| +-$analytic.$analytic13#29 AS "$col13" [ARRAY<INT64>]
| +-$analytic.$analytic14#30 AS "$col14" [STRING]
+-query=
  +-ProjectScan
    +-column_list=$analytic.[$analytic1#17, $analytic2#18, $analytic3#19, $analytic4#20, $analytic5#21, $analytic6#22, $analytic7#23, $analytic8#24, $analytic9#25, $analytic10#26, $analytic11#27, $analytic12#28, $analytic13#29, $analytic14#30]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#17, $analytic.$analytic2#18, $analytic.$analytic3#19, $analytic.$analytic4#20, $analytic.$analytic5#21, $analytic.$analytic6#22, $analytic.$analytic7#23, $analytic.$analytic8#24, $analytic.$analytic9#25, $analytic.$analytic10#26, $analytic.$analytic11#27, $analytic.$analytic12#28, $analytic.$analytic13#29, $analytic.$analytic14#30]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-partition_by=
            | +-WindowPartitioning
            |   +-partition_by_list=
            |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-analytic_function_list=
              +-$analytic1#17 :=
              | +-AnalyticFunctionCall(ZetaSQL:count(STRING) -> INT64)
              |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
              |   +-distinct=TRUE
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic2#18 :=
              | +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-distinct=TRUE
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic3#19 :=
              | +-AnalyticFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-distinct=TRUE
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic4#20 :=
              | +-AnalyticFunctionCall(ZetaSQL:stddev_samp(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-distinct=TRUE
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic5#21 :=
              | +-AnalyticFunctionCall(ZetaSQL:stddev_pop(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-distinct=TRUE
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic6#22 :=
              | +-AnalyticFunctionCall(ZetaSQL:stddev_samp(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-distinct=TRUE
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic7#23 :=
              | +-AnalyticFunctionCall(ZetaSQL:var_samp(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-distinct=TRUE
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic8#24 :=
              | +-AnalyticFunctionCall(ZetaSQL:var_pop(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-distinct=TRUE
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic9#25 :=
              | +-AnalyticFunctionCall(ZetaSQL:var_samp(DOUBLE) -> DOUBLE)
              |   +-Cast(INT64 -> DOUBLE)
              |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-distinct=TRUE
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic10#26 :=
              | +-AnalyticFunctionCall(ZetaSQL:min(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-distinct=TRUE
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic11#27 :=
              | +-AnalyticFunctionCall(ZetaSQL:max(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-distinct=TRUE
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic12#28 :=
              | +-AnalyticFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-distinct=TRUE
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic13#29 :=
              | +-AnalyticFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-distinct=TRUE
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic14#30 :=
                +-AnalyticFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
                  +-ColumnRef(type=STRING, column=KeyValue.Value#2)
                  +-Literal(type=STRING, value="; ")
                  +-distinct=TRUE
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

# ORDER BY is not allowed for a DISTINCT analytic function.
select {{count(distinct value)|min(distinct key)|avg(distinct key)}} over w
from keyvalue
window w as (order by key)
--
ERROR: Window ORDER BY is not allowed if DISTINCT is specified [at 3:14]
window w as (order by key)
             ^
==

select count(distinct *) over ()
from keyvalue
--
ERROR: COUNT(*) cannot be used with DISTINCT [at 1:8]
select count(distinct *) over ()
       ^
==

# Window frame is not allowed for a DISTINCT analytic function.
select {{count(distinct value)|sum(distinct key)|max(distinct key)}} over w
from keyvalue
window w as (rows 2 preceding)
--
ERROR: Window framing clause is not allowed if DISTINCT is specified [at 3:14]
window w as (rows 2 preceding)
             ^
==

select {{approx_quantiles(value, 3)|approx_top_count(key, 4)}} over ()
from keyvalue
--
ALTERNATION GROUP: approx_quantiles(value, 3)
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS "$col1" [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Value#2, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(ZetaSQL:approx_quantiles(STRING, INT64) -> ARRAY<STRING>)
                  +-ColumnRef(type=STRING, column=KeyValue.Value#2)
                  +-Literal(type=INT64, value=3)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
--
ALTERNATION GROUP: approx_top_count(key, 4)
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS "$col1" [ARRAY<STRUCT<value INT64, count INT64>>]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(ZetaSQL:approx_top_count(INT64, INT64) -> ARRAY<STRUCT<value INT64, count INT64>>)
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-Literal(type=INT64, value=4)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select hll_count.init(key) over ()
from keyvalue;
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(ZetaSQL:hll_count.init(INT64, optional(0) INT64) -> BYTES)
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select hll_count.merge(bytes) over ()
from (select cast(NULL as bytes) as bytes);
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#3]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[$subquery1.bytes#1, $analytic.$analytic1#3]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.bytes#1]
        |   +-expr_list=
        |   | +-bytes#1 := Literal(type=BYTES, value=NULL, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#3 :=
                +-AnalyticFunctionCall(ZetaSQL:hll_count.merge(BYTES) -> INT64)
                  +-ColumnRef(type=BYTES, column=$subquery1.bytes#1)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select hll_count.merge_partial(bytes) over ()
from (select cast(NULL as bytes) as bytes);
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#3 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#3]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[$subquery1.bytes#1, $analytic.$analytic1#3]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.bytes#1]
        |   +-expr_list=
        |   | +-bytes#1 := Literal(type=BYTES, value=NULL, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#3 :=
                +-AnalyticFunctionCall(ZetaSQL:hll_count.merge_partial(BYTES) -> BYTES)
                  +-ColumnRef(type=BYTES, column=$subquery1.bytes#1)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select d3a_count.init(key, CAST(key / 10 AS INT64)) over ()
from keyvalue;
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(ZetaSQL:d3a_count.init(INT64, INT64, optional(0) INT64) -> BYTES)
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-Cast(DOUBLE -> INT64)
                    +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
                      +-Cast(INT64 -> DOUBLE)
                      | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                      +-Literal(type=DOUBLE, value=10)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select d3a_count.merge(bytes) over ()
from (select cast(NULL as bytes) as bytes);
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#3]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[$subquery1.bytes#1, $analytic.$analytic1#3]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.bytes#1]
        |   +-expr_list=
        |   | +-bytes#1 := Literal(type=BYTES, value=NULL, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#3 :=
                +-AnalyticFunctionCall(ZetaSQL:d3a_count.merge(BYTES) -> INT64)
                  +-ColumnRef(type=BYTES, column=$subquery1.bytes#1)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select d3a_count.merge_partial(bytes) over ()
from (select cast(NULL as bytes) as bytes);
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#3 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#3]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[$subquery1.bytes#1, $analytic.$analytic1#3]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.bytes#1]
        |   +-expr_list=
        |   | +-bytes#1 := Literal(type=BYTES, value=NULL, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#3 :=
                +-AnalyticFunctionCall(ZetaSQL:d3a_count.merge_partial(BYTES) -> BYTES)
                  +-ColumnRef(type=BYTES, column=$subquery1.bytes#1)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select kll_quantiles.init_int64(key) over ()
from keyvalue;
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(ZetaSQL:kll_quantiles.init_int64(INT64, optional(0) INT64) -> BYTES)
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select kll_quantiles.merge_int64(bytes, 100) over ()
from (select cast(NULL as bytes) as bytes);
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#3 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#3]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[$subquery1.bytes#1, $analytic.$analytic1#3]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.bytes#1]
        |   +-expr_list=
        |   | +-bytes#1 := Literal(type=BYTES, value=NULL, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#3 :=
                +-AnalyticFunctionCall(ZetaSQL:kll_quantiles.merge_int64(BYTES, INT64) -> ARRAY<INT64>)
                  +-ColumnRef(type=BYTES, column=$subquery1.bytes#1)
                  +-Literal(type=INT64, value=100)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select kll_quantiles.merge_partial(bytes) over ()
from (select cast(NULL as bytes) as bytes);
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#3 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#3]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[$subquery1.bytes#1, $analytic.$analytic1#3]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.bytes#1]
        |   +-expr_list=
        |   | +-bytes#1 := Literal(type=BYTES, value=NULL, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#3 :=
                +-AnalyticFunctionCall(ZetaSQL:kll_quantiles.merge_partial(BYTES) -> BYTES)
                  +-ColumnRef(type=BYTES, column=$subquery1.bytes#1)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select kll_quantiles.merge_point_int64(bytes, 0.5) over ()
from (select cast(NULL as bytes) as bytes);
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#3]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[$subquery1.bytes#1, $analytic.$analytic1#3]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.bytes#1]
        |   +-expr_list=
        |   | +-bytes#1 := Literal(type=BYTES, value=NULL, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#3 :=
                +-AnalyticFunctionCall(ZetaSQL:kll_quantiles.merge_point_int64(BYTES, DOUBLE) -> INT64)
                  +-ColumnRef(type=BYTES, column=$subquery1.bytes#1)
                  +-Literal(type=DOUBLE, value=0.5)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select {{bit_and_bq(key)|bit_or_bq(key)| bit_xor_bq(key)}} over ()
from keyvalue
--
ALTERNATION GROUP: bit_and_bq(key)
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(ZetaSQL:bit_and_bq(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
--
ALTERNATION GROUP: bit_or_bq(key)
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(ZetaSQL:bit_or_bq(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
--
ALTERNATION GROUP:  bit_xor_bq(key)
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(ZetaSQL:bit_xor_bq(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select {{logical_and(true)|logical_or(true)}} over ()
from keyvalue
--
ALTERNATION GROUP: logical_and(true)
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[$analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(table=KeyValue)
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
                  +-Literal(type=BOOL, value=true)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
--
ALTERNATION GROUP: logical_or(true)
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[$analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(table=KeyValue)
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(ZetaSQL:logical_or(BOOL) -> BOOL)
                  +-Literal(type=BOOL, value=true)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select corr(distinct key, key) over ()
from keyvalue
--
ERROR: DISTINCT is not allowed for function CORR [at 1:8]
select corr(distinct key, key) over ()
       ^
==

select covar_pop(distinct key, key) over ()
from keyvalue
--
ERROR: DISTINCT is not allowed for function COVAR_POP [at 1:8]
select covar_pop(distinct key, key) over ()
       ^
==

select covar_samp(distinct key, key) over ()
from keyvalue
--
ERROR: DISTINCT is not allowed for function COVAR_SAMP [at 1:8]
select covar_samp(distinct key, key) over ()
       ^
