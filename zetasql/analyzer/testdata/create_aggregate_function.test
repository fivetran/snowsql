create aggregate function agg();
--
ERROR: Aggregate functions are not supported [at 1:1]
create aggregate function agg();
^
==

[default language_features=CREATE_AGGREGATE_FUNCTION,TEMPLATE_FUNCTIONS]

create aggregate function agg() returns int64;
--
ERROR: Function must specify LANGUAGE or have a SQL body in parentheses [at 1:1]
create aggregate function agg() returns int64;
^
==

create aggregate function agg(x string) returns bytes;
--
ERROR: Function must specify LANGUAGE or have a SQL body in parentheses [at 1:1]
create aggregate function agg(x string) returns bytes;
^
==

create aggregate function agg(x string) returns bytes
as """body"""
--
ERROR: Function must specify LANGUAGE or have a SQL body in parentheses [at 1:1]
create aggregate function agg(x string) returns bytes
^
==

create aggregate function agg(x string) returns bytes
language java
as """test program""";
--
CreateFunctionStmt(name_path=agg, has_explicit_return_type=TRUE, return_type=BYTES, argument_name_list=[x], signature=(STRING x) -> BYTES, is_aggregate=TRUE, language="java", code="test program")
==

create temp aggregate function if not exists
    agg(x string, y int32 not aggregate)
returns bytes
language something;
--
CreateFunctionStmt(name_path=agg, create_scope=CREATE_TEMP, create_mode=CREATE_IF_NOT_EXISTS, has_explicit_return_type=TRUE, return_type=BYTES, argument_name_list=[x, y], signature=(STRING x, INT32 {is_not_aggregate: true} y) -> BYTES, is_aggregate=TRUE, language="something")
==

[language_features=CREATE_AGGREGATE_FUNCTION,TEMPLATE_FUNCTIONS]
[statement_context={{|default|module}}]
create {{public|private}} aggregate function agg(x string) returns bytes
language java
as """test program""";
--
ALTERNATION GROUPS:
    public
    default,public
--
ERROR: CREATE FUNCTION with PUBLIC or PRIVATE modifiers is not supported [at 1:1]
create public aggregate function agg(x string) returns bytes
^
--
ALTERNATION GROUPS:
    private
    default,private
--
ERROR: CREATE FUNCTION with PUBLIC or PRIVATE modifiers is not supported [at 1:1]
create private aggregate function agg(x string) returns bytes
^
--
ALTERNATION GROUP: module,public
--
CreateFunctionStmt(name_path=agg, create_scope=CREATE_PUBLIC, has_explicit_return_type=TRUE, return_type=BYTES, argument_name_list=[x], signature=(STRING x) -> BYTES, is_aggregate=TRUE, language="java", code="test program")
--
ALTERNATION GROUP: module,private
--
CreateFunctionStmt(name_path=agg, create_scope=CREATE_PRIVATE, has_explicit_return_type=TRUE, return_type=BYTES, argument_name_list=[x], signature=(STRING x) -> BYTES, is_aggregate=TRUE, language="java", code="test program")
==

create function agg(x string, y int32 not aggregate)
returns bytes
language something;
--
ERROR: Parameters can only be marked NOT AGGREGATE in functions created with CREATE AGGREGATE FUNCTION [at 1:31]
create function agg(x string, y int32 not aggregate)
                              ^
==

# Function with options.
create aggregate function mypackage.myfunc ( ) as (SUM(42))
options ( a=b, bruce=lee );
--
CreateFunctionStmt
+-name_path=mypackage.myfunc
+-return_type=INT64
+-signature=() -> INT64
+-is_aggregate=TRUE
+-language="SQL"
+-code="SUM(42)"
+-aggregate_expression_list=
| +-$agg1#1 :=
|   +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
|     +-Literal(type=INT64, value=42)
+-function_expression=
| +-ColumnRef(type=INT64, column=$aggregate.$agg1#1)
+-option_list=
  +-a := Literal(type=STRING, value="b")
  +-bruce := Literal(type=STRING, value="lee")
==

# Query parameter in options.
# Note that query parameters are generally allowed in top level function
# declarations like this, but query parameters are not allowed in modules.
#
create aggregate function SumFunc(x int64, y int64) as (SUM(x+y))
options(param1=CONCAT(@test_param_string,'_param'));
--
CreateFunctionStmt
+-name_path=SumFunc
+-return_type=INT64
+-argument_name_list=[x, y]
+-signature=(INT64 x, INT64 y) -> INT64
+-is_aggregate=TRUE
+-language="SQL"
+-code="SUM(x+y)"
+-aggregate_expression_list=
| +-$agg1#1 :=
|   +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
|     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|       +-ArgumentRef(parse_location=60-61, type=INT64, name="x", argument_kind=AGGREGATE)
|       +-ArgumentRef(parse_location=62-63, type=INT64, name="y", argument_kind=AGGREGATE)
+-function_expression=
| +-ColumnRef(type=INT64, column=$aggregate.$agg1#1)
+-option_list=
  +-param1 :=
    +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
      +-Parameter(type=STRING, name="test_param_string")
      +-Literal(type=STRING, value='_param')
==

# Templated types are not allowed in the RETURNS clause.
create aggregate function fn() returns any type as (1);
--
ERROR: Syntax error: Templated types are not allowed in the RETURNS clause [at 1:40]
create aggregate function fn() returns any type as (1);
                                       ^
==

create aggregate function fn() returns any proto as (1);
--
ERROR: Syntax error: Templated types are not allowed in the RETURNS clause [at 1:40]
create aggregate function fn() returns any proto as (1);
                                       ^
==

create aggregate function fn() returns any enum as (1);
--
ERROR: Syntax error: Templated types are not allowed in the RETURNS clause [at 1:40]
create aggregate function fn() returns any enum as (1);
                                       ^
==

create aggregate function fn() returns any struct as (1);
--
ERROR: Syntax error: Templated types are not allowed in the RETURNS clause [at 1:40]
create aggregate function fn() returns any struct as (1);
                                       ^
==

create aggregate function fn() returns any array as (1);
--
ERROR: Syntax error: Templated types are not allowed in the RETURNS clause [at 1:40]
create aggregate function fn() returns any array as (1);
                                       ^
==

create aggregate function fn() returns any table as (1);
--
ERROR: Syntax error: Templated types are not allowed in the RETURNS clause [at 1:40]
create aggregate function fn() returns any table as (1);
                                       ^
==

create aggregate function fn(any type t) returns t as (1);
--
ERROR: Syntax error: Expected ")" or "," but got identifier "t" [at 1:39]
create aggregate function fn(any type t) returns t as (1);
                                      ^
==

# Function swith SQL security.
create {{PUBLIC|PRIVATE|TEMP|}} aggregate function mypackage.myfunc ( )
sql security {{INVOKER|DEFINER}} as (SUM(42))
--
ALTERNATION GROUPS:
    PUBLIC,INVOKER
    PUBLIC,DEFINER
--
ERROR: CREATE FUNCTION with PUBLIC or PRIVATE modifiers is not supported [at 1:1]
create PUBLIC aggregate function mypackage.myfunc ( )
^
--
ALTERNATION GROUPS:
    PRIVATE,INVOKER
    PRIVATE,DEFINER
--
ERROR: CREATE FUNCTION with PUBLIC or PRIVATE modifiers is not supported [at 1:1]
create PRIVATE aggregate function mypackage.myfunc ( )
^
--
ALTERNATION GROUPS:
    TEMP,INVOKER
    TEMP,DEFINER
--
ERROR: SQL SECURITY clause is not supported on statements with the TEMP modifier. [at 1:1]
create TEMP aggregate function mypackage.myfunc ( )
^
--
ALTERNATION GROUP: INVOKER
--
CreateFunctionStmt
+-name_path=mypackage.myfunc
+-return_type=INT64
+-signature=() -> INT64
+-is_aggregate=TRUE
+-language="SQL"
+-code="SUM(42)"
+-aggregate_expression_list=
| +-$agg1#1 :=
|   +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
|     +-Literal(type=INT64, value=42)
+-function_expression=
| +-ColumnRef(type=INT64, column=$aggregate.$agg1#1)
+-sql_security=SQL_SECURITY_INVOKER
--
ALTERNATION GROUP: DEFINER
--
CreateFunctionStmt
+-name_path=mypackage.myfunc
+-return_type=INT64
+-signature=() -> INT64
+-is_aggregate=TRUE
+-language="SQL"
+-code="SUM(42)"
+-aggregate_expression_list=
| +-$agg1#1 :=
|   +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
|     +-Literal(type=INT64, value=42)
+-function_expression=
| +-ColumnRef(type=INT64, column=$aggregate.$agg1#1)
+-sql_security=SQL_SECURITY_DEFINER
==

[language_features=CREATE_AGGREGATE_FUNCTION,TEMPLATE_FUNCTIONS,V_1_3_WITH_GROUP_ROWS]
CREATE AGGREGATE FUNCTION WrappedGroupRows(e {{INT64|ANY TYPE}}) AS (
  SUM(e) WITH GROUP_ROWS(SELECT e FROM GROUP_ROWS() WHERE e IS NOT NULL)
);
--
ALTERNATION GROUP: INT64
--
ERROR: WITH GROUP_ROWS is not supported in SQL function body [at 2:3]
  SUM(e) WITH GROUP_ROWS(SELECT e FROM GROUP_ROWS() WHERE e IS NOT NULL)
  ^
--
ALTERNATION GROUP: ANY TYPE
--
CreateFunctionStmt(name_path=WrappedGroupRows, return_type=STRUCT<>, argument_name_list=[e], signature=(ANY TYPE e) -> ANY TYPE, is_aggregate=TRUE, language="SQL", code="SUM(e) WITH GROUP_ROWS(SELECT e FROM GROUP_ROWS() WHERE e IS NOT NULL)")
