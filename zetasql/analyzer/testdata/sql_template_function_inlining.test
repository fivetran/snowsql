[default enabled_ast_rewrites=DEFAULTS,-WITH_EXPR,+INLINE_SQL_FUNCTIONS]

SELECT udf_templated_return_one();
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := FunctionCall(Templated_SQL_Function:udf_templated_return_one() -> INT64)
    +-input_scan=
      +-SingleRowScan

With Templated SQL function call:
  Templated_SQL_Function:udf_templated_return_one() -> INT64
containing resolved templated expression:
Literal(type=INT64, value=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan
==

SELECT REVERSE_ARRAY({{[1, 2, 3]|["a", "b", "c"]|[]|CAST(NULL AS ARRAY<INT64>)}});
--
ALTERNATION GROUP: [1, 2, 3]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(Templated_SQL_Function:REVERSE_ARRAY(ARRAY<INT64> input_arr) -> ARRAY<INT64>)
    |     +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    +-input_scan=
      +-SingleRowScan

With Templated SQL function call:
  Templated_SQL_Function:REVERSE_ARRAY(ARRAY<INT64> input_arr) -> ARRAY<INT64>
containing resolved templated expression:
FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
+-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
| +-ArgumentRef(type=ARRAY<INT64>, name="input_arr")
+-Literal(type=ARRAY<INT64>, value=NULL)
+-SubqueryExpr
  +-type=ARRAY<INT64>
  +-subquery_type=ARRAY
  +-subquery=
    +-OrderByScan
      +-column_list=[$array.e#1]
      +-is_ordered=TRUE
      +-input_scan=
      | +-ArrayScan
      |   +-column_list=[$array.e#1, $array_offset.offset_idx#2]
      |   +-array_expr=
      |   | +-ArgumentRef(type=ARRAY<INT64>, name="input_arr")
      |   +-element_column=$array.e#1
      |   +-array_offset_column=
      |     +-ColumnHolder(column=$array_offset.offset_idx#2)
      +-order_by_item_list=
        +-OrderByItem
          +-column_ref=
          | +-ColumnRef(type=INT64, column=$array_offset.offset_idx#2)
          +-is_descending=TRUE

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-WithExpr
    |     +-type=ARRAY<INT64>
    |     +-assignment_list=
    |     | +-input_arr#4 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |     +-expr=
    |       +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         | +-ColumnRef(type=ARRAY<INT64>, column=$inlined_REVERSE_ARRAY.input_arr#4)
    |         +-Literal(type=ARRAY<INT64>, value=NULL)
    |         +-SubqueryExpr
    |           +-type=ARRAY<INT64>
    |           +-subquery_type=ARRAY
    |           +-parameter_list=
    |           | +-ColumnRef(type=ARRAY<INT64>, column=$inlined_REVERSE_ARRAY.input_arr#4)
    |           +-subquery=
    |             +-OrderByScan
    |               +-column_list=[$array.e#2]
    |               +-is_ordered=TRUE
    |               +-input_scan=
    |               | +-ArrayScan
    |               |   +-column_list=[$array.e#2, $array_offset.offset_idx#3]
    |               |   +-array_expr=
    |               |   | +-ColumnRef(type=ARRAY<INT64>, column=$inlined_REVERSE_ARRAY.input_arr#4, is_correlated=TRUE)
    |               |   +-element_column=$array.e#2
    |               |   +-array_offset_column=
    |               |     +-ColumnHolder(column=$array_offset.offset_idx#3)
    |               +-order_by_item_list=
    |                 +-OrderByItem
    |                   +-column_ref=
    |                   | +-ColumnRef(type=INT64, column=$array_offset.offset_idx#3)
    |                   +-is_descending=TRUE
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ["a", "b", "c"]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(Templated_SQL_Function:REVERSE_ARRAY(ARRAY<STRING> input_arr) -> ARRAY<STRING>)
    |     +-Literal(type=ARRAY<STRING>, value=["a", "b", "c"])
    +-input_scan=
      +-SingleRowScan

With Templated SQL function call:
  Templated_SQL_Function:REVERSE_ARRAY(ARRAY<STRING> input_arr) -> ARRAY<STRING>
containing resolved templated expression:
FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
+-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
| +-ArgumentRef(type=ARRAY<STRING>, name="input_arr")
+-Literal(type=ARRAY<STRING>, value=NULL)
+-SubqueryExpr
  +-type=ARRAY<STRING>
  +-subquery_type=ARRAY
  +-subquery=
    +-OrderByScan
      +-column_list=[$array.e#1]
      +-is_ordered=TRUE
      +-input_scan=
      | +-ArrayScan
      |   +-column_list=[$array.e#1, $array_offset.offset_idx#2]
      |   +-array_expr=
      |   | +-ArgumentRef(type=ARRAY<STRING>, name="input_arr")
      |   +-element_column=$array.e#1
      |   +-array_offset_column=
      |     +-ColumnHolder(column=$array_offset.offset_idx#2)
      +-order_by_item_list=
        +-OrderByItem
          +-column_ref=
          | +-ColumnRef(type=INT64, column=$array_offset.offset_idx#2)
          +-is_descending=TRUE

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-WithExpr
    |     +-type=ARRAY<STRING>
    |     +-assignment_list=
    |     | +-input_arr#4 := Literal(type=ARRAY<STRING>, value=["a", "b", "c"])
    |     +-expr=
    |       +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
    |         +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         | +-ColumnRef(type=ARRAY<STRING>, column=$inlined_REVERSE_ARRAY.input_arr#4)
    |         +-Literal(type=ARRAY<STRING>, value=NULL)
    |         +-SubqueryExpr
    |           +-type=ARRAY<STRING>
    |           +-subquery_type=ARRAY
    |           +-parameter_list=
    |           | +-ColumnRef(type=ARRAY<STRING>, column=$inlined_REVERSE_ARRAY.input_arr#4)
    |           +-subquery=
    |             +-OrderByScan
    |               +-column_list=[$array.e#2]
    |               +-is_ordered=TRUE
    |               +-input_scan=
    |               | +-ArrayScan
    |               |   +-column_list=[$array.e#2, $array_offset.offset_idx#3]
    |               |   +-array_expr=
    |               |   | +-ColumnRef(type=ARRAY<STRING>, column=$inlined_REVERSE_ARRAY.input_arr#4, is_correlated=TRUE)
    |               |   +-element_column=$array.e#2
    |               |   +-array_offset_column=
    |               |     +-ColumnHolder(column=$array_offset.offset_idx#3)
    |               +-order_by_item_list=
    |                 +-OrderByItem
    |                   +-column_ref=
    |                   | +-ColumnRef(type=INT64, column=$array_offset.offset_idx#3)
    |                   +-is_descending=TRUE
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: []
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(Templated_SQL_Function:REVERSE_ARRAY(ARRAY<INT64> input_arr) -> ARRAY<INT64>)
    |     +-Literal(type=ARRAY<INT64>, value=[])
    +-input_scan=
      +-SingleRowScan

With Templated SQL function call:
  Templated_SQL_Function:REVERSE_ARRAY(ARRAY<INT64> input_arr) -> ARRAY<INT64>
containing resolved templated expression:
FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
+-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
| +-ArgumentRef(type=ARRAY<INT64>, name="input_arr")
+-Literal(type=ARRAY<INT64>, value=NULL)
+-SubqueryExpr
  +-type=ARRAY<INT64>
  +-subquery_type=ARRAY
  +-subquery=
    +-OrderByScan
      +-column_list=[$array.e#1]
      +-is_ordered=TRUE
      +-input_scan=
      | +-ArrayScan
      |   +-column_list=[$array.e#1, $array_offset.offset_idx#2]
      |   +-array_expr=
      |   | +-ArgumentRef(type=ARRAY<INT64>, name="input_arr")
      |   +-element_column=$array.e#1
      |   +-array_offset_column=
      |     +-ColumnHolder(column=$array_offset.offset_idx#2)
      +-order_by_item_list=
        +-OrderByItem
          +-column_ref=
          | +-ColumnRef(type=INT64, column=$array_offset.offset_idx#2)
          +-is_descending=TRUE

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-WithExpr
    |     +-type=ARRAY<INT64>
    |     +-assignment_list=
    |     | +-input_arr#4 := Literal(type=ARRAY<INT64>, value=[])
    |     +-expr=
    |       +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         | +-ColumnRef(type=ARRAY<INT64>, column=$inlined_REVERSE_ARRAY.input_arr#4)
    |         +-Literal(type=ARRAY<INT64>, value=NULL)
    |         +-SubqueryExpr
    |           +-type=ARRAY<INT64>
    |           +-subquery_type=ARRAY
    |           +-parameter_list=
    |           | +-ColumnRef(type=ARRAY<INT64>, column=$inlined_REVERSE_ARRAY.input_arr#4)
    |           +-subquery=
    |             +-OrderByScan
    |               +-column_list=[$array.e#2]
    |               +-is_ordered=TRUE
    |               +-input_scan=
    |               | +-ArrayScan
    |               |   +-column_list=[$array.e#2, $array_offset.offset_idx#3]
    |               |   +-array_expr=
    |               |   | +-ColumnRef(type=ARRAY<INT64>, column=$inlined_REVERSE_ARRAY.input_arr#4, is_correlated=TRUE)
    |               |   +-element_column=$array.e#2
    |               |   +-array_offset_column=
    |               |     +-ColumnHolder(column=$array_offset.offset_idx#3)
    |               +-order_by_item_list=
    |                 +-OrderByItem
    |                   +-column_ref=
    |                   | +-ColumnRef(type=INT64, column=$array_offset.offset_idx#3)
    |                   +-is_descending=TRUE
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: CAST(NULL AS ARRAY<INT64>)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(Templated_SQL_Function:REVERSE_ARRAY(ARRAY<INT64> input_arr) -> ARRAY<INT64>)
    |     +-Literal(type=ARRAY<INT64>, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan

With Templated SQL function call:
  Templated_SQL_Function:REVERSE_ARRAY(ARRAY<INT64> input_arr) -> ARRAY<INT64>
containing resolved templated expression:
FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
+-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
| +-ArgumentRef(type=ARRAY<INT64>, name="input_arr")
+-Literal(type=ARRAY<INT64>, value=NULL)
+-SubqueryExpr
  +-type=ARRAY<INT64>
  +-subquery_type=ARRAY
  +-subquery=
    +-OrderByScan
      +-column_list=[$array.e#1]
      +-is_ordered=TRUE
      +-input_scan=
      | +-ArrayScan
      |   +-column_list=[$array.e#1, $array_offset.offset_idx#2]
      |   +-array_expr=
      |   | +-ArgumentRef(type=ARRAY<INT64>, name="input_arr")
      |   +-element_column=$array.e#1
      |   +-array_offset_column=
      |     +-ColumnHolder(column=$array_offset.offset_idx#2)
      +-order_by_item_list=
        +-OrderByItem
          +-column_ref=
          | +-ColumnRef(type=INT64, column=$array_offset.offset_idx#2)
          +-is_descending=TRUE

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-WithExpr
    |     +-type=ARRAY<INT64>
    |     +-assignment_list=
    |     | +-input_arr#4 := Literal(type=ARRAY<INT64>, value=NULL, has_explicit_type=TRUE)
    |     +-expr=
    |       +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         | +-ColumnRef(type=ARRAY<INT64>, column=$inlined_REVERSE_ARRAY.input_arr#4)
    |         +-Literal(type=ARRAY<INT64>, value=NULL)
    |         +-SubqueryExpr
    |           +-type=ARRAY<INT64>
    |           +-subquery_type=ARRAY
    |           +-parameter_list=
    |           | +-ColumnRef(type=ARRAY<INT64>, column=$inlined_REVERSE_ARRAY.input_arr#4)
    |           +-subquery=
    |             +-OrderByScan
    |               +-column_list=[$array.e#2]
    |               +-is_ordered=TRUE
    |               +-input_scan=
    |               | +-ArrayScan
    |               |   +-column_list=[$array.e#2, $array_offset.offset_idx#3]
    |               |   +-array_expr=
    |               |   | +-ColumnRef(type=ARRAY<INT64>, column=$inlined_REVERSE_ARRAY.input_arr#4, is_correlated=TRUE)
    |               |   +-element_column=$array.e#2
    |               |   +-array_offset_column=
    |               |     +-ColumnHolder(column=$array_offset.offset_idx#3)
    |               +-order_by_item_list=
    |                 +-OrderByItem
    |                   +-column_ref=
    |                   | +-ColumnRef(type=INT64, column=$array_offset.offset_idx#3)
    |                   +-is_descending=TRUE
    +-input_scan=
      +-SingleRowScan
==

SELECT TimesTwo(rand());
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(Templated_SQL_Function:TimesTwo(DOUBLE arg) -> DOUBLE)
    |     +-FunctionCall(ZetaSQL:rand() -> DOUBLE)
    +-input_scan=
      +-SingleRowScan

With Templated SQL function call:
  Templated_SQL_Function:TimesTwo(DOUBLE arg) -> DOUBLE
containing resolved templated expression:
FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
+-ArgumentRef(type=DOUBLE, name="arg")
+-ArgumentRef(type=DOUBLE, name="arg")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-WithExpr
    |     +-type=DOUBLE
    |     +-assignment_list=
    |     | +-arg#2 := FunctionCall(ZetaSQL:rand() -> DOUBLE)
    |     +-expr=
    |       +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
    |         +-ColumnRef(type=DOUBLE, column=$inlined_TimesTwo.arg#2)
    |         +-ColumnRef(type=DOUBLE, column=$inlined_TimesTwo.arg#2)
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_3_INLINE_LAMBDA_ARGUMENT]
SELECT SUM_DOUBLE_ARRAY(GENERATE_ARRAY(1, 2, 3));
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(Templated_SQL_Function:SUM_DOUBLE_ARRAY(ARRAY<INT64> input_arr) -> INT64)
    |     +-FunctionCall(ZetaSQL:generate_array(INT64, INT64, optional(1) INT64) -> ARRAY<INT64>)
    |       +-Literal(type=INT64, value=1)
    |       +-Literal(type=INT64, value=2)
    |       +-Literal(type=INT64, value=3)
    +-input_scan=
      +-SingleRowScan

With Templated SQL function call:
  Templated_SQL_Function:SUM_DOUBLE_ARRAY(ARRAY<INT64> input_arr) -> INT64
containing resolved templated expression:
SubqueryExpr
+-type=INT64
+-subquery_type=SCALAR
+-subquery=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.e#2]
        |   +-array_expr=
        |   | +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->INT64> transformation) -> ARRAY<INT64>)
        |   |   +-FunctionArgument
        |   |   | +-expr=
        |   |   |   +-ArgumentRef(type=ARRAY<INT64>, name="input_arr")
        |   |   +-FunctionArgument
        |   |     +-inline_lambda=
        |   |       +-InlineLambda
        |   |         +-argument_list=[$lambda_arg.e#1]
        |   |         +-body=
        |   |           +-FunctionCall(Templated_SQL_Function:TimesTwo(INT64 arg) -> INT64)
        |   |             +-ColumnRef(type=INT64, column=$lambda_arg.e#1)
        |   +-element_column=$array.e#2
        +-aggregate_list=
          +-$agg1#3 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=$array.e#2)

With Templated SQL function call:
  Templated_SQL_Function:TimesTwo(INT64 arg) -> INT64
containing resolved templated expression:
FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
+-ArgumentRef(type=INT64, name="arg")
+-ArgumentRef(type=INT64, name="arg")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-WithExpr
    |     +-type=INT64
    |     +-assignment_list=
    |     | +-input_arr#5 :=
    |     |   +-FunctionCall(ZetaSQL:generate_array(INT64, INT64, optional(1) INT64) -> ARRAY<INT64>)
    |     |     +-Literal(type=INT64, value=1)
    |     |     +-Literal(type=INT64, value=2)
    |     |     +-Literal(type=INT64, value=3)
    |     +-expr=
    |       +-SubqueryExpr
    |         +-type=INT64
    |         +-subquery_type=SCALAR
    |         +-parameter_list=
    |         | +-ColumnRef(type=ARRAY<INT64>, column=$inlined_SUM_DOUBLE_ARRAY.input_arr#5)
    |         +-subquery=
    |           +-ProjectScan
    |             +-column_list=[$aggregate.$agg1#2]
    |             +-input_scan=
    |               +-AggregateScan
    |                 +-column_list=[$aggregate.$agg1#2]
    |                 +-input_scan=
    |                 | +-ArrayScan
    |                 |   +-column_list=[$array.e#4]
    |                 |   +-array_expr=
    |                 |   | +-SubqueryExpr
    |                 |   |   +-type=ARRAY<INT64>
    |                 |   |   +-subquery_type=SCALAR
    |                 |   |   +-parameter_list=
    |                 |   |   | +-ColumnRef(type=ARRAY<INT64>, column=$inlined_SUM_DOUBLE_ARRAY.input_arr#5, is_correlated=TRUE)
    |                 |   |   +-subquery=
    |                 |   |     +-ProjectScan
    |                 |   |       +-column_list=[$expr_subquery.$col1#11]
    |                 |   |       +-expr_list=
    |                 |   |       | +-$col1#11 :=
    |                 |   |       |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |                 |   |       |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |                 |   |       |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#7)
    |                 |   |       |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |                 |   |       |     +-SubqueryExpr
    |                 |   |       |       +-type=ARRAY<INT64>
    |                 |   |       |       +-subquery_type=ARRAY
    |                 |   |       |       +-parameter_list=
    |                 |   |       |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#7)
    |                 |   |       |       +-subquery=
    |                 |   |       |         +-OrderByScan
    |                 |   |       |           +-column_list=[$expr_subquery.$col1#10]
    |                 |   |       |           +-is_ordered=TRUE
    |                 |   |       |           +-input_scan=
    |                 |   |       |           | +-ProjectScan
    |                 |   |       |           |   +-column_list=[$array.element#8, $array_offset.off#9, $expr_subquery.$col1#10]
    |                 |   |       |           |   +-expr_list=
    |                 |   |       |           |   | +-$col1#10 :=
    |                 |   |       |           |   |   +-WithExpr
    |                 |   |       |           |   |     +-type=INT64
    |                 |   |       |           |   |     +-assignment_list=
    |                 |   |       |           |   |     | +-arg#12 := ColumnRef(type=INT64, column=$array.element#8)
    |                 |   |       |           |   |     +-expr=
    |                 |   |       |           |   |       +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |                 |   |       |           |   |         +-ColumnRef(type=INT64, column=$inlined_TimesTwo.arg#12)
    |                 |   |       |           |   |         +-ColumnRef(type=INT64, column=$inlined_TimesTwo.arg#12)
    |                 |   |       |           |   +-input_scan=
    |                 |   |       |           |     +-ArrayScan
    |                 |   |       |           |       +-column_list=[$array.element#8, $array_offset.off#9]
    |                 |   |       |           |       +-array_expr=
    |                 |   |       |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#7, is_correlated=TRUE)
    |                 |   |       |           |       +-element_column=$array.element#8
    |                 |   |       |           |       +-array_offset_column=
    |                 |   |       |           |         +-ColumnHolder(column=$array_offset.off#9)
    |                 |   |       |           +-order_by_item_list=
    |                 |   |       |             +-OrderByItem
    |                 |   |       |               +-column_ref=
    |                 |   |       |                 +-ColumnRef(type=INT64, column=$array_offset.off#9)
    |                 |   |       +-input_scan=
    |                 |   |         +-ProjectScan
    |                 |   |           +-column_list=[$subquery1.array_to_transform#7]
    |                 |   |           +-expr_list=
    |                 |   |           | +-array_to_transform#7 := ColumnRef(type=ARRAY<INT64>, column=$inlined_SUM_DOUBLE_ARRAY.input_arr#5, is_correlated=TRUE)
    |                 |   |           +-input_scan=
    |                 |   |             +-SingleRowScan
    |                 |   +-element_column=$array.e#4
    |                 +-aggregate_list=
    |                   +-$agg1#2 :=
    |                     +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |                       +-ColumnRef(type=INT64, column=$array.e#4)
    +-input_scan=
      +-SingleRowScan
==

select templated_scalar_definer_rights(6)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(Templated_SQL_Function:templated_scalar_definer_rights(INT64) -> INT64)
    |     +-Literal(type=INT64, value=6)
    +-input_scan=
      +-SingleRowScan

With Templated SQL function call:
  Templated_SQL_Function:templated_scalar_definer_rights(INT64) -> INT64
containing resolved templated expression:
FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
+-ArgumentRef(type=INT64, name="x")
+-SubqueryExpr
  +-type=INT64
  +-subquery_type=SCALAR
  +-subquery=
    +-ProjectScan
      +-column_list=[$aggregate.$agg1#3]
      +-input_scan=
        +-AggregateScan
          +-column_list=[$aggregate.$agg1#3]
          +-input_scan=
          | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
          +-aggregate_list=
            +-$agg1#3 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-WithExpr
    |     +-type=INT64
    |     +-assignment_list=
    |     | +-x#5 := Literal(type=INT64, value=6)
    |     +-expr=
    |       +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         +-ColumnRef(type=INT64, column=$inlined_templated_scalar_definer_rights.x#5)
    |         +-SubqueryExpr
    |           +-type=INT64
    |           +-subquery_type=SCALAR
    |           +-subquery=
    |             +-ProjectScan
    |               +-column_list=[$aggregate.$agg1#2]
    |               +-input_scan=
    |                 +-AggregateScan
    |                   +-column_list=[$aggregate.$agg1#2]
    |                   +-input_scan=
    |                   | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
    |                   +-aggregate_list=
    |                     +-$agg1#2 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-input_scan=
      +-SingleRowScan
