# Constants cannot referenced in the LIMIT clause.
# TODO: Enable support for named constants in LIMIT.
SELECT 1 FROM KeyValue limit TestConstantInt64 OFFSET TestConstantInt64;
--
ERROR: Syntax error: Unexpected identifier "TestConstantInt64" [at 1:30]
SELECT 1 FROM KeyValue limit TestConstantInt64 OFFSET TestConstantInt64;
                             ^
==

# References to known constants resolve correctly.
SELECT TestConstantInt64;
--
QueryStmt
+-output_column_list=
| +-$query.TestConstantInt64#1 AS TestConstantInt64 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.TestConstantInt64#1]
    +-expr_list=
    | +-TestConstantInt64#1 := Constant(TestConstantInt64, type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan
==

# Fully qualified references to known constants in known nested catalogs
# resolve correctly.
SELECT nested_catalog.TestConstantBool;
--
QueryStmt
+-output_column_list=
| +-$query.TestConstantBool#1 AS TestConstantBool [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.TestConstantBool#1]
    +-expr_list=
    | +-TestConstantBool#1 := Constant(nested_catalog.TestConstantBool, type=BOOL, value=false)
    +-input_scan=
      +-SingleRowScan
==

# Fully qualified references to known constants in nested catalogs, using
# backticks to refer to the constant name.
SELECT nested_catalog.`Test Constant-String`;
--
QueryStmt
+-output_column_list=
| +-$query.Test Constant-String#1 AS `Test Constant-String` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.Test Constant-String#1]
    +-expr_list=
    | +-Test Constant-String#1 := Constant(nested_catalog.Test Constant-String, type=STRING, value="Test constant in nested catalog")
    +-input_scan=
      +-SingleRowScan
==

# References to known constants in unknown nested catalogs are rejected.
SELECT unknown_catalog.TestConstantBool;
--
ERROR: Unrecognized name: unknown_catalog [at 1:8]
SELECT unknown_catalog.TestConstantBool;
       ^
==

# References to unknown constants in known nested catalogs are rejected.
#
# Catalog contains catalog nested_catalog_with_constant with constant
# KnownConstant.
SELECT nested_catalog_with_constant{{.KnownConstant|.UnknownConstant|}};
--
ALTERNATION GROUP: .KnownConstant
--
QueryStmt
+-output_column_list=
| +-$query.KnownConstant#1 AS KnownConstant [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.KnownConstant#1]
    +-expr_list=
    | +-KnownConstant#1 := Constant(nested_catalog_with_constant.KnownConstant, type=BOOL, value=false)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: .UnknownConstant
--
ERROR: Unrecognized name: nested_catalog_with_constant.UnknownConstant; Did you mean nested_catalog_with_constant.KnownConstant? [at 1:8]
SELECT nested_catalog_with_constant.UnknownConstant;
       ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Unrecognized name: nested_catalog_with_constant; Did you mean nested_catalog_with_catalog? [at 1:8]
SELECT nested_catalog_with_constant;
       ^
==

# References to fields of known proto-valued constants resolve correctly.
SELECT TestConstantProto.int64_key_1 - TestConstantProto.int64_key_2;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$subtract(INT64, INT64) -> INT64)
    |     +-GetProtoField
    |     | +-type=INT64
    |     | +-expr=
    |     | | +-Constant(TestConstantProto, type=PROTO<zetasql_test__.KitchenSinkPB>, value={<unparseable>})
    |     | +-field_descriptor=int64_key_1
    |     +-GetProtoField
    |       +-type=INT64
    |       +-expr=
    |       | +-Constant(TestConstantProto, type=PROTO<zetasql_test__.KitchenSinkPB>, value={<unparseable>})
    |       +-field_descriptor=int64_key_2
    +-input_scan=
      +-SingleRowScan
==

# References to fields of known struct-valued constants in known nested catalogs
# resolve correctly.
SELECT nested_catalog.nested_nested_catalog.TestConstantStruct.eee,
       nested_catalog.nested_nested_catalog.TestConstantStruct.fff.c,
       nested_catalog.nested_nested_catalog.TestConstantStruct.fff.d,
       nested_catalog.nested_nested_catalog.TestConstantStruct.fff.d.a,
       nested_catalog.nested_nested_catalog.TestConstantStruct.fff.d.b
--
QueryStmt
+-output_column_list=
| +-$query.eee#1 AS eee [INT32]
| +-$query.c#2 AS c [INT32]
| +-$query.d#3 AS d [STRUCT<a INT32, b STRING>]
| +-$query.a#4 AS a [INT32]
| +-$query.b#5 AS b [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[eee#1, c#2, d#3, a#4, b#5]
    +-expr_list=
    | +-eee#1 :=
    | | +-GetStructField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-Constant(nested_catalog.nested_nested_catalog.TestConstantStruct, type=STRUCT<eee INT32, fff STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, value={eee:-3456, fff:{c:3, d:{a:223, b:"foo"}}})
    | |   +-field_idx=0
    | +-c#2 :=
    | | +-GetStructField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-GetStructField
    | |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
    | |   |   +-expr=
    | |   |   | +-Constant(nested_catalog.nested_nested_catalog.TestConstantStruct, type=STRUCT<eee INT32, fff STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, value={eee:-3456, fff:{c:3, d:{a:223, b:"foo"}}})
    | |   |   +-field_idx=1
    | |   +-field_idx=0
    | +-d#3 :=
    | | +-GetStructField
    | |   +-type=STRUCT<a INT32, b STRING>
    | |   +-expr=
    | |   | +-GetStructField
    | |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
    | |   |   +-expr=
    | |   |   | +-Constant(nested_catalog.nested_nested_catalog.TestConstantStruct, type=STRUCT<eee INT32, fff STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, value={eee:-3456, fff:{c:3, d:{a:223, b:"foo"}}})
    | |   |   +-field_idx=1
    | |   +-field_idx=1
    | +-a#4 :=
    | | +-GetStructField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-GetStructField
    | |   |   +-type=STRUCT<a INT32, b STRING>
    | |   |   +-expr=
    | |   |   | +-GetStructField
    | |   |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
    | |   |   |   +-expr=
    | |   |   |   | +-Constant(nested_catalog.nested_nested_catalog.TestConstantStruct, type=STRUCT<eee INT32, fff STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, value={eee:-3456, fff:{c:3, d:{a:223, b:"foo"}}})
    | |   |   |   +-field_idx=1
    | |   |   +-field_idx=1
    | |   +-field_idx=0
    | +-b#5 :=
    |   +-GetStructField
    |     +-type=STRING
    |     +-expr=
    |     | +-GetStructField
    |     |   +-type=STRUCT<a INT32, b STRING>
    |     |   +-expr=
    |     |   | +-GetStructField
    |     |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
    |     |   |   +-expr=
    |     |   |   | +-Constant(nested_catalog.nested_nested_catalog.TestConstantStruct, type=STRUCT<eee INT32, fff STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, value={eee:-3456, fff:{c:3, d:{a:223, b:"foo"}}})
    |     |   |   +-field_idx=1
    |     |   +-field_idx=1
    |     +-field_idx=1
    +-input_scan=
      +-SingleRowScan
==

# Aliases in the same SELECT clause are not visible to other SELECT list items,
# therefore they cannot take precedence over constants with the same name.
#
# Catalog contains constant TestConstantProto.
SELECT 1 AS TestConstantProto, TestConstantProto, TestConstantProto.int64_key_1
--
QueryStmt
+-output_column_list=
| +-$query.TestConstantProto#1 AS TestConstantProto [INT64]
| +-$query.TestConstantProto#2 AS TestConstantProto [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$query.int64_key_1#3 AS int64_key_1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[TestConstantProto#1, TestConstantProto#2, int64_key_1#3]
    +-expr_list=
    | +-TestConstantProto#1 := Literal(type=INT64, value=1)
    | +-TestConstantProto#2 := Constant(TestConstantProto, type=PROTO<zetasql_test__.KitchenSinkPB>, value={<unparseable>})
    | +-int64_key_1#3 :=
    |   +-GetProtoField
    |     +-type=INT64
    |     +-expr=
    |     | +-Constant(TestConstantProto, type=PROTO<zetasql_test__.KitchenSinkPB>, value={<unparseable>})
    |     +-field_descriptor=int64_key_1
    +-input_scan=
      +-SingleRowScan
==

# The alias of a table subquery takes precedence over a constant with the same
# name.
#
# Catalog contains constant TestConstantString.
SELECT TestConstantString, TestConstantString.e
FROM (SELECT AS STRUCT 1 AS e, 2 AS f) AS TestConstantString
--
QueryStmt
+-output_column_list=
| +-$make_struct.$struct#3 AS TestConstantString [STRUCT<e INT64, f INT64>]
| +-$query.e#4 AS e [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$make_struct.$struct#3, $query.e#4]
    +-expr_list=
    | +-e#4 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<e INT64, f INT64>, column=$make_struct.$struct#3)
    |     +-field_idx=0
    +-input_scan=
      +-ProjectScan
        +-column_list=[$make_struct.$struct#3]
        +-expr_list=
        | +-$struct#3 :=
        |   +-MakeStruct
        |     +-type=STRUCT<e INT64, f INT64>
        |     +-field_list=
        |       +-ColumnRef(type=INT64, column=TestConstantString.e#1)
        |       +-ColumnRef(type=INT64, column=TestConstantString.f#2)
        +-input_scan=
          +-ProjectScan
            +-column_list=TestConstantString.[e#1, f#2]
            +-expr_list=
            | +-e#1 := Literal(type=INT64, value=1)
            | +-f#2 := Literal(type=INT64, value=2)
            +-input_scan=
              +-SingleRowScan
==

# A field alias in a table subquery takes precedence over a constant with the
# same name.
#
# Catalog contains constant TestConstantString.
SELECT TestConstantString, TestConstantString.e
FROM (SELECT STRUCT<e INT64, f INT64>(1, 2) AS TestConstantString)
--
QueryStmt
+-output_column_list=
| +-$subquery1.TestConstantString#1 AS TestConstantString [STRUCT<e INT64, f INT64>]
| +-$query.e#2 AS e [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$subquery1.TestConstantString#1, $query.e#2]
    +-expr_list=
    | +-e#2 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<e INT64, f INT64>, column=$subquery1.TestConstantString#1)
    |     +-field_idx=0
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.TestConstantString#1]
        +-expr_list=
        | +-TestConstantString#1 := Literal(type=STRUCT<e INT64, f INT64>, value={e:1, f:2}, has_explicit_type=TRUE)
        +-input_scan=
          +-SingleRowScan
==

# A field alias in a table subquery takes precedence over a constant with the
# same name in a correlated subquery expression.
#
# Catalog contains constant TestConstantString.
SELECT (SELECT AS STRUCT TestConstantString, TestConstantString.e - TestConstantInt64)
FROM (SELECT STRUCT<e INT64, f INT64>(1, 2) AS TestConstantString)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS `$col1` [STRUCT<TestConstantString STRUCT<e INT64, f INT64>, INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-SubqueryExpr
    |     +-type=STRUCT<TestConstantString STRUCT<e INT64, f INT64>, INT64>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=STRUCT<e INT64, f INT64>, column=$subquery1.TestConstantString#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$make_struct.$struct#4]
    |         +-expr_list=
    |         | +-$struct#4 :=
    |         |   +-MakeStruct
    |         |     +-type=STRUCT<TestConstantString STRUCT<e INT64, f INT64>, INT64>
    |         |     +-field_list=
    |         |       +-ColumnRef(type=STRUCT<e INT64, f INT64>, column=$expr_subquery.TestConstantString#2)
    |         |       +-ColumnRef(type=INT64, column=$expr_subquery.$col2#3)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$expr_subquery.[TestConstantString#2, $col2#3]
    |             +-expr_list=
    |             | +-TestConstantString#2 := ColumnRef(type=STRUCT<e INT64, f INT64>, column=$subquery1.TestConstantString#1, is_correlated=TRUE)
    |             | +-$col2#3 :=
    |             |   +-FunctionCall(ZetaSQL:$subtract(INT64, INT64) -> INT64)
    |             |     +-GetStructField
    |             |     | +-type=INT64
    |             |     | +-expr=
    |             |     | | +-ColumnRef(type=STRUCT<e INT64, f INT64>, column=$subquery1.TestConstantString#1, is_correlated=TRUE)
    |             |     | +-field_idx=0
    |             |     +-Constant(TestConstantInt64, type=INT64, value=1)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.TestConstantString#1]
        +-expr_list=
        | +-TestConstantString#1 := Literal(type=STRUCT<e INT64, f INT64>, value={e:1, f:2}, has_explicit_type=TRUE)
        +-input_scan=
          +-SingleRowScan
==

# A field alias in a table subquery with the same name as a nested catalog takes
# precedence over a constant with the same name in that catalog.
#
# Catalog contains constant nested_catalog.TestConstantBool.
SELECT nested_catalog.TestConstantBool
FROM (
  SELECT 0 AS TestConstantBool
) AS nested_catalog
--
QueryStmt
+-output_column_list=
| +-nested_catalog.TestConstantBool#1 AS TestConstantBool [INT64]
+-query=
  +-ProjectScan
    +-column_list=[nested_catalog.TestConstantBool#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[nested_catalog.TestConstantBool#1]
        +-expr_list=
        | +-TestConstantBool#1 := Literal(type=INT64, value=0)
        +-input_scan=
          +-SingleRowScan
==

# A function argument in a function definition takes precedence over a named
# constant with the same name, regardless of whether the type of the argument
# is expected.
#
# Catalog contains constant TestConstantInt64.
CREATE TEMPORARY FUNCTION Foo(TestConstantInt64 {{INT64|BOOL}})
RETURNS INT64 AS (TestConstantInt64 + IF(nested_catalog.TestConstantBool, 1, 0))
--
ALTERNATION GROUP: INT64
--
CreateFunctionStmt
+-name_path=Foo
+-create_scope=CREATE_TEMP
+-has_explicit_return_type=TRUE
+-return_type=INT64
+-argument_name_list=[TestConstantInt64]
+-signature=(INT64 TestConstantInt64) -> INT64
+-language="SQL"
+-code="TestConstantInt64 + IF(nested_catalog.TestConstantBool, 1, 0)"
+-function_expression=
  +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    +-ArgumentRef(type=INT64, name="TestConstantInt64")
    +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
      +-Constant(nested_catalog.TestConstantBool, type=BOOL, value=false)
      +-Literal(type=INT64, value=1)
      +-Literal(type=INT64, value=0)
--
ALTERNATION GROUP: BOOL
--
ERROR: No matching signature for operator + for argument types: BOOL, INT64. Supported signatures: INT64 + INT64; UINT64 + UINT64; DOUBLE + DOUBLE [at 2:19]
RETURNS INT64 AS (TestConstantInt64 + IF(nested_catalog.TestConstantBool, 1, 0))
                  ^
==

# A table reference takes precedence over a named constant in a nested catalog
# with the same name as the table when a table reference is expected.
#
# Catalog contains and table name_conflict_table with fields a,
# column name_conflict_field and catalog name_conflict_table with constant
# name_conflict_field.
SELECT {{name_conflict_table.|}}{{a|name_conflict_field}}
FROM name_conflict_table
--
ALTERNATION GROUPS:
    name_conflict_table.,a
    a
--
QueryStmt
+-output_column_list=
| +-name_conflict_table.a#1 AS a [STRING]
+-query=
  +-ProjectScan
    +-column_list=[name_conflict_table.a#1]
    +-input_scan=
      +-TableScan(column_list=[name_conflict_table.a#1], table=name_conflict_table, column_index_list=[0])
--
ALTERNATION GROUPS:
    name_conflict_table.,name_conflict_field
    name_conflict_field
--
QueryStmt
+-output_column_list=
| +-name_conflict_table.name_conflict_field#2 AS name_conflict_field [STRING]
+-query=
  +-ProjectScan
    +-column_list=[name_conflict_table.name_conflict_field#2]
    +-input_scan=
      +-TableScan(column_list=[name_conflict_table.name_conflict_field#2], table=name_conflict_table, column_index_list=[1])
==

# A table reference does not take precedence over a named constant in a nested
# catalog with the same name as the table when a table reference is not
# expected.
#
# Catalog contains and table name_conflict_table with fields a,
# column name_conflict_field and catalog name_conflict_table with constant
# name_conflict_field.
SELECT name_conflict_table.{{a|name_conflict_field}}
--
ALTERNATION GROUP: a
--
ERROR: Unrecognized name: name_conflict_table [at 1:8]
SELECT name_conflict_table.a
       ^
--
ALTERNATION GROUP: name_conflict_field
--
QueryStmt
+-output_column_list=
| +-$query.name_conflict_field#1 AS name_conflict_field [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.name_conflict_field#1]
    +-expr_list=
    | +-name_conflict_field#1 := Constant(name_conflict_table.name_conflict_field, type=BOOL, value=false)
    +-input_scan=
      +-SingleRowScan
==

# A table reference takes precedence over a named constant with the same name
# when a table reference is expected.
#
# Catalog contains constant NameConflictTable and table NameConflictTable.
SELECT key FROM NameConflictTable
--
QueryStmt
+-output_column_list=
| +-NameConflictTable.key#1 AS key [INT32]
+-query=
  +-ProjectScan
    +-column_list=[NameConflictTable.key#1]
    +-input_scan=
      +-TableScan(column_list=[NameConflictTable.key#1], table=NameConflictTable, column_index_list=[0])
==

# A table reference does not take precedence over a named constant with the same
# name when a table reference is not expected.
#
# Catalog contains constant NameConflictTable and table NameConflictTable.
SELECT NameConflictTable
--
QueryStmt
+-output_column_list=
| +-$query.NameConflictTable#1 AS NameConflictTable [STRUCT<key INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.NameConflictTable#1]
    +-expr_list=
    | +-NameConflictTable#1 := Constant(NameConflictTable, type=STRUCT<key INT32>, value={key:-3456})
    +-input_scan=
      +-SingleRowScan
==

# A value table reference takes precedence over a named constant with the same
# name when a table reference is expected.
#
# Catalog contains constant Int32ValueTable and value table Int32ValueTable.
SELECT Int32ValueTable FROM Int32ValueTable
--
QueryStmt
+-output_column_list=
| +-Int32ValueTable.value#1 AS Int32ValueTable [INT32]
+-query=
  +-ProjectScan
    +-column_list=[Int32ValueTable.value#1]
    +-input_scan=
      +-TableScan(column_list=[Int32ValueTable.value#1], table=Int32ValueTable, column_index_list=[0])
==

# A value table does not take precedence over a named constant with
# the same name when a table reference is not expected.
#
# Catalog contains constant Int32ValueTable and value table Int32ValueTable.
SELECT Int32ValueTable
--
QueryStmt
+-output_column_list=
| +-$query.Int32ValueTable#1 AS Int32ValueTable [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.Int32ValueTable#1]
    +-expr_list=
    | +-Int32ValueTable#1 := Constant(Int32ValueTable, type=INT32, value=3)
    +-input_scan=
      +-SingleRowScan
==

# A type reference takes precedence over a named constant with the same name
# when a type reference is expected.
#
# Catalog contains constant NameConflictType and type NameConflictType.
SELECT STRUCT<s NameConflictType, t INT64>((1, "foo"), TestConstantInt64)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<s STRUCT<Key INT64, Value STRING>, t INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-MakeStruct
    |     +-type=STRUCT<s STRUCT<Key INT64, Value STRING>, t INT64>
    |     +-field_list=
    |       +-Literal(type=STRUCT<Key INT64, Value STRING>, value={Key:1, Value:"foo"}, has_explicit_type=TRUE)
    |       +-Constant(TestConstantInt64, type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan
==

# A type reference does not take precedence over a named constant with the same
# name when a type reference is not expected.
#
# Catalog contains constant NameConflictType and type NameConflictType.
SELECT NameConflictType
--
QueryStmt
+-output_column_list=
| +-$query.NameConflictType#1 AS NameConflictType [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.NameConflictType#1]
    +-expr_list=
    | +-NameConflictType#1 := Constant(NameConflictType, type=BOOL, value=false)
    +-input_scan=
      +-SingleRowScan
==

# A function reference with parentheses takes precedence over a named constant
# with the same name.
#
# Catalog contains constants sort_count, concat, CURRENT_DATE and functions
# sort_count, concat, CURRENT_DATE.
SELECT {{sort_count()|concat("a", "b")|CURRENT_DATE()}}
FROM TestTable
--
ALTERNATION GROUP: sort_count()
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#4 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#4]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#4]
        +-input_scan=
        | +-TableScan(table=TestTable)
        +-aggregate_list=
          +-$agg1#4 := AggregateFunctionCall(sample_functions:sort_count() -> INT64)
--
ALTERNATION GROUP: concat("a", "b")
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
    |     +-Literal(type=STRING, value="a")
    |     +-Literal(type=STRING, value="b")
    +-input_scan=
      +-TableScan(table=TestTable)
--
ALTERNATION GROUP: CURRENT_DATE()
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [DATE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 := FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
    +-input_scan=
      +-TableScan(table=TestTable)
==

# A function reference without parentheses does not take precedence over a
# named constant with the same name.
#
# Catalog contains constants sort_count, concat, CURRENT_DATE and functions
# sort_count, concat, CURRENT_DATE.
SELECT {{sort_count|concat|CURRENT_DATE}}
FROM TestTable
--
ALTERNATION GROUP: sort_count
--
QueryStmt
+-output_column_list=
| +-$query.sort_count#4 AS sort_count [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.sort_count#4]
    +-expr_list=
    | +-sort_count#4 := Constant(sort_count, type=INT64, value=4)
    +-input_scan=
      +-TableScan(table=TestTable)
--
ALTERNATION GROUP: concat
--
QueryStmt
+-output_column_list=
| +-$query.concat#4 AS concat [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.concat#4]
    +-expr_list=
    | +-concat#4 := Constant(concat, type=INT64, value=5)
    +-input_scan=
      +-TableScan(table=TestTable)
--
ALTERNATION GROUP: CURRENT_DATE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [DATE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 := FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
    +-input_scan=
      +-TableScan(table=TestTable)
==

# A table-valued function reference with parentheses takes precedence over a
# named constant with the same name when a table-valued function reference
# is expected.
#
# Catalog contains constants tvf_no_args, tvf_exactly_1_int64_arg and TVFs
# tvf_no_args, tvf_exactly_1_int64_arg.
#
# Disabling for Java, since TVF support is not implemented there.
[language_features=TABLE_VALUED_FUNCTIONS]
[no_java]
SELECT TestConstantInt64
FROM {{tvf_no_args()|tvf_exactly_1_int64_arg(443)}}
--
ALTERNATION GROUP: tvf_no_args()
--
QueryStmt
+-output_column_list=
| +-$query.TestConstantInt64#3 AS TestConstantInt64 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.TestConstantInt64#3]
    +-expr_list=
    | +-TestConstantInt64#3 := Constant(TestConstantInt64, type=INT64, value=1)
    +-input_scan=
      +-TVFScan(tvf=tvf_no_args(() -> TABLE<column_bool BOOL, column_bytes BYTES>), signature=() -> TABLE<column_bool BOOL, column_bytes BYTES>)
--
ALTERNATION GROUP: tvf_exactly_1_int64_arg(443)
--
QueryStmt
+-output_column_list=
| +-$query.TestConstantInt64#3 AS TestConstantInt64 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.TestConstantInt64#3]
    +-expr_list=
    | +-TestConstantInt64#3 := Constant(TestConstantInt64, type=INT64, value=1)
    +-input_scan=
      +-TVFScan
        +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-signature=(literal INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
        +-argument_list=
          +-FunctionArgument
            +-expr=
              +-Literal(type=INT64, value=443)
==

# A table-valued function reference without parentheses is resolved as a table.
# This test is here just to cover all cases.
#
# Catalog contains constants tvf_no_args, tvf_exactly_1_int64_arg and TVFs
# tvf_no_args, tvf_exactly_1_int64_arg.
[language_features=TABLE_VALUED_FUNCTIONS]
SELECT TestConstantInt64
FROM {{tvf_no_args|tvf_exactly_1_int64_arg}}
--
ALTERNATION GROUP: tvf_no_args
--
ERROR: Table not found: tvf_no_args [at 2:6]
FROM tvf_no_args
     ^
--
ALTERNATION GROUP: tvf_exactly_1_int64_arg
--
ERROR: Table not found: tvf_exactly_1_int64_arg [at 2:6]
FROM tvf_exactly_1_int64_arg
     ^
==

# A table-valued function reference with parentheses in expression context
# (where a table-valued function reference is not expected) is resolved as a
# function. This test is here just to cover all cases.
#
# Catalog contains constants tvf_no_args, tvf_exactly_1_int64_arg and TVFs
# tvf_no_args, tvf_exactly_1_int64_arg.
[language_features=TABLE_VALUED_FUNCTIONS]
SELECT {{tvf_no_args()|tvf_exactly_1_int64_arg(443)}}
--
ALTERNATION GROUP: tvf_no_args()
--
ERROR: Function not found: tvf_no_args [at 1:8]
SELECT tvf_no_args()
       ^
--
ALTERNATION GROUP: tvf_exactly_1_int64_arg(443)
--
ERROR: Function not found: tvf_exactly_1_int64_arg [at 1:8]
SELECT tvf_exactly_1_int64_arg(443)
       ^
==

# A table-valued function reference without parentheses in expression context
# (where a table-valued function reference is not expected) could only be
# resolved as a column. Since no such column exists, it is resolved as the
# named constant. This test is here just to cover all cases.
#
# Catalog contains constants tvf_no_args, tvf_exactly_1_int64_arg and TVFs
# tvf_no_args, tvf_exactly_1_int64_arg.
[language_features=TABLE_VALUED_FUNCTIONS]
SELECT {{tvf_no_args|tvf_exactly_1_int64_arg}}
--
ALTERNATION GROUP: tvf_no_args
--
QueryStmt
+-output_column_list=
| +-$query.tvf_no_args#1 AS tvf_no_args [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.tvf_no_args#1]
    +-expr_list=
    | +-tvf_no_args#1 := Constant(tvf_no_args, type=INT64, value=6)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: tvf_exactly_1_int64_arg
--
QueryStmt
+-output_column_list=
| +-$query.tvf_exactly_1_int64_arg#1 AS tvf_exactly_1_int64_arg [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.tvf_exactly_1_int64_arg#1]
    +-expr_list=
    | +-tvf_exactly_1_int64_arg#1 := Constant(tvf_exactly_1_int64_arg, type=INT64, value=7)
    +-input_scan=
      +-SingleRowScan
==

# A procedure reference with parentheses takes precedence over a named constant
# with the same name.
#
# Catalog contains constants proc_no_args, nested_catalog.nested_procedure and
# procedures proc_no_args, nested_catalog.nested_procedure.
CALL {{proc_no_args()|nested_catalog.nested_procedure(2)}}
--
ALTERNATION GROUP: proc_no_args()
--
CallStmt(procedure=proc_no_args, signature=() -> BOOL)
--
ALTERNATION GROUP: nested_catalog.nested_procedure(2)
--
CallStmt
+-procedure=nested_catalog.nested_procedure
+-signature=(INT64) -> INT64
+-argument_list=
  +-Literal(type=INT64, value=2)
==

# A procedure reference without parentheses in expression context (where a
# procedure reference is not expected) could only be resolved as a column. Since
# not such column exists, it is resolved as the named constant. This test is
# here just to cover all cases.
#
# Catalog contains constants proc_no_args, nested_catalog.nested_procedure and
# procedures proc_no_args, nested_catalog.nested_procedure.
SELECT {{proc_no_args|nested_catalog.nested_procedure}}
--
ALTERNATION GROUP: proc_no_args
--
QueryStmt
+-output_column_list=
| +-$query.proc_no_args#1 AS proc_no_args [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.proc_no_args#1]
    +-expr_list=
    | +-proc_no_args#1 := Constant(proc_no_args, type=BOOL, value=true)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: nested_catalog.nested_procedure
--
QueryStmt
+-output_column_list=
| +-$query.nested_procedure#1 AS nested_procedure [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.nested_procedure#1]
    +-expr_list=
    | +-nested_procedure#1 := Constant(nested_catalog.nested_procedure, type=INT64, value=2345)
    +-input_scan=
      +-SingleRowScan
==

# A catalog reference takes precedence over a named constant with the same name.
#
# Catalog contains constant nested_catalog_with_catalog with fields
# nested_catalog_catalog, nested_catalog_catalog.a. Catalog also contains
# catalog nested_catalog_with_catalog with constant TestConstantBool and catalog
# nested_catalog_with_catalog.nested_catalog_catalog with constants a, c.
SELECT nested_catalog_with_catalog.TestConstantBool,
       nested_catalog_with_catalog.c,
       nested_catalog_with_catalog.nested_catalog_catalog.a,
       nested_catalog_with_catalog.nested_catalog_catalog.c
--
QueryStmt
+-output_column_list=
| +-$query.TestConstantBool#1 AS TestConstantBool [BOOL]
| +-$query.c#2 AS c [DOUBLE]
| +-$query.a#3 AS a [FLOAT]
| +-$query.c#4 AS c [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[TestConstantBool#1, c#2, a#3, c#4]
    +-expr_list=
    | +-TestConstantBool#1 := Constant(nested_catalog_with_catalog.TestConstantBool, type=BOOL, value=false)
    | +-c#2 := Constant(nested_catalog_with_catalog.c, type=DOUBLE, value=-9999.999)
    | +-a#3 := Constant(nested_catalog_with_catalog.nested_catalog_catalog.a, type=FLOAT, value=-1.4987)
    | +-c#4 := Constant(nested_catalog_with_catalog.nested_catalog_catalog.c, type=STRING, value="foo")
    +-input_scan=
      +-SingleRowScan
==

# A catalog reference does not take precedence over a named constant with the
# same name when only the constant matches the entire path.
#
# Catalog contains constant nested_catalog_with_catalog with fields a,
# nested_catalog_catalog, nested_catalog_catalog.b. Catalog also contains
# catalog nested_catalog_with_catalog and catalog
# nested_catalog_with_catalog.nested_catalog_catalog with constant a.
SELECT nested_catalog_with_catalog.{{a|nested_catalog_catalog|nested_catalog_catalog.b}}
--
ALTERNATION GROUP: a
--
QueryStmt
+-output_column_list=
| +-$query.a#1 AS a [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.a#1]
    +-expr_list=
    | +-a#1 :=
    |   +-GetStructField
    |     +-type=INT32
    |     +-expr=
    |     | +-Constant(nested_catalog_with_catalog, type=STRUCT<a INT32, nested_catalog_catalog STRUCT<a INT32, b INT64>, TestConstantBool BOOL>, value={a:-3456, nested_catalog_catalog:{a:-3434, b:4333}, TestConstantBool:false})
    |     +-field_idx=0
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: nested_catalog_catalog
--
QueryStmt
+-output_column_list=
| +-$query.nested_catalog_catalog#1 AS nested_catalog_catalog [STRUCT<a INT32, b INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.nested_catalog_catalog#1]
    +-expr_list=
    | +-nested_catalog_catalog#1 :=
    |   +-GetStructField
    |     +-type=STRUCT<a INT32, b INT64>
    |     +-expr=
    |     | +-Constant(nested_catalog_with_catalog, type=STRUCT<a INT32, nested_catalog_catalog STRUCT<a INT32, b INT64>, TestConstantBool BOOL>, value={a:-3456, nested_catalog_catalog:{a:-3434, b:4333}, TestConstantBool:false})
    |     +-field_idx=1
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: nested_catalog_catalog.b
--
QueryStmt
+-output_column_list=
| +-$query.b#1 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.b#1]
    +-expr_list=
    | +-b#1 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-GetStructField
    |     |   +-type=STRUCT<a INT32, b INT64>
    |     |   +-expr=
    |     |   | +-Constant(nested_catalog_with_catalog, type=STRUCT<a INT32, nested_catalog_catalog STRUCT<a INT32, b INT64>, TestConstantBool BOOL>, value={a:-3456, nested_catalog_catalog:{a:-3434, b:4333}, TestConstantBool:false})
    |     |   +-field_idx=1
    |     +-field_idx=1
    +-input_scan=
      +-SingleRowScan
==

# Name suggestion works for named constants.
#
# Catalog contains constants TestConstantInt64,
# nested_catalog.TestConstantBool,
# nested_catalog.nested_nested_catalog.TestConstantStuct.
SELECT {{TestCoonstantInt65|nested_catalg.TestConstantBool|nested_catalog.TestConstantBol|nested_catalog.nested_nested_catalog.tstconstantstrct}}
--
ALTERNATION GROUP: TestCoonstantInt65
--
ERROR: Unrecognized name: TestCoonstantInt65; Did you mean TestConstantInt64? [at 1:8]
SELECT TestCoonstantInt65
       ^
--
ALTERNATION GROUP: nested_catalg.TestConstantBool
--
ERROR: Unrecognized name: nested_catalg [at 1:8]
SELECT nested_catalg.TestConstantBool
       ^
--
ALTERNATION GROUP: nested_catalog.TestConstantBol
--
ERROR: Unrecognized name: nested_catalog.TestConstantBol; Did you mean nested_catalog.TestConstantBool? [at 1:8]
SELECT nested_catalog.TestConstantBol
       ^
--
ALTERNATION GROUP: nested_catalog.nested_nested_catalog.tstconstantstrct
--
ERROR: Unrecognized name: nested_catalog.nested_nested_catalog.tstconstantstrct; Did you mean nested_catalog.nested_nested_catalog.TestConstantStruct? [at 1:8]
SELECT nested_catalog.nested_nested_catalog.tstconstantstrct
       ^
==

# Name suggestion is based on the catalog containing the unresolved constant
# reference.
#
# Catalog contains constants TestConstantInt64, TestConstantProto,
# nested_catalog.TestConstantBool,
# nested_catalog.nested_nested_catalog.TestConstantStruct.
SELECT {{nested_catalog.TestConstantInt65|nested_catalog.nested_nested_catalog.TestConstantInt65|TestConstantStrct|nested_catalog.TestConstantStrct}}
--
ALTERNATION GROUP: nested_catalog.TestConstantInt65
--
ERROR: Unrecognized name: nested_catalog.TestConstantInt65; Did you mean nested_catalog.TestConstantBool? [at 1:8]
SELECT nested_catalog.TestConstantInt65
       ^
--
ALTERNATION GROUP: nested_catalog.nested_nested_catalog.TestConstantInt65
--
ERROR: Unrecognized name: nested_catalog [at 1:8]
SELECT nested_catalog.nested_nested_catalog.TestConstantInt65
       ^
--
ALTERNATION GROUP: TestConstantStrct
--
ERROR: Unrecognized name: TestConstantStrct; Did you mean TestConstantString? [at 1:8]
SELECT TestConstantStrct
       ^
--
ALTERNATION GROUP: nested_catalog.TestConstantStrct
--
ERROR: Unrecognized name: nested_catalog.TestConstantStrct; Did you mean nested_catalog.`Test Constant-String`? [at 1:8]
SELECT nested_catalog.TestConstantStrct
       ^
==

# Name suggestion works for named constants whose name conflicts with field
# aliases.
#
# Catalog contains constant TestConstantInt64.
SELECT TestConstantInt65
FROM (SELECT 3 AS TestConstantInt63{{|, 4 AS TestConstantInt64}})
--
ERROR: Unrecognized name: TestConstantInt65; Did you mean TestConstantInt63? [at 1:8]
SELECT TestConstantInt65
       ^
==

# Name suggestion works for fields of known named constants.
#
# Catalog contains constant
# nested_catalog.nested_nested_catalog.TestConstantStruct with fields eee and
# fff.
SELECT nested_catalog.nested_nested_catalog.TestConstantStruct.{{eeee|xyz}}
--
ALTERNATION GROUP: eeee
--
ERROR: Field name eeee does not exist in STRUCT<eee INT32, fff STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>; Did you mean eee? [at 1:64]
SELECT nested_catalog.nested_nested_catalog.TestConstantStruct.eeee
                                                               ^
--
ALTERNATION GROUP: xyz
--
ERROR: Field name xyz does not exist in STRUCT<eee INT32, fff STRUCT<c INT32, d STRUCT<a INT32, b STRING>>> [at 1:64]
SELECT nested_catalog.nested_nested_catalog.TestConstantStruct.xyz
                                                               ^
==

# Name suggestion does not work for fields of unknown named constants.
#
# Catalog contains constant
# nested_catalog.nested_nested_catalog.TestConstantStruct with fields eee and
# fff.
SELECT nested_catalog.nested_nested_catalog.TestConstantSttt.eeee
--
ERROR: Unrecognized name: nested_catalog [at 1:8]
SELECT nested_catalog.nested_nested_catalog.TestConstantSttt.eeee
       ^
==

SELECT
  nested_catalog.wwww.xxxx,
  (nested_catalog.wwww).xxxx;
--
QueryStmt
+-output_column_list=
| +-$query.xxxx#1 AS xxxx [STRUCT<xxxx INT64>]
| +-$query.xxxx#2 AS xxxx [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[xxxx#1, xxxx#2]
    +-expr_list=
    | +-xxxx#1 := Constant(nested_catalog.wwww.xxxx, type=STRUCT<xxxx INT64>, value={xxxx:8})
    | +-xxxx#2 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-Constant(nested_catalog.wwww, type=STRUCT<xxxx INT64>, value={xxxx:8})
    |     +-field_idx=0
    +-input_scan=
      +-SingleRowScan
