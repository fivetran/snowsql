# The HAVING clause requires either group by or aggregation to be present in
# the query block.  It can reference columns available via the FROM clause, as
# well as SELECT list aliases.

# Tests in this file include a combination of:
# 1) queries with and without GROUP BY
# 2) HAVING clause includes grouping, aggregation expressions, or neither
# 3) HAVING expressions in or not in SELECT list

# No GROUP BY, aggregation in HAVING, aggregation in SELECT list.
select sum(key)
from KeyValue
having sum(key) > 5;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-FilterScan
        +-column_list=$aggregate.[$agg1#3, $agg2#4]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=$aggregate.[$agg1#3, $agg2#4]
        |   +-input_scan=
        |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   +-aggregate_list=
        |     +-$agg1#3 :=
        |     | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |     +-$agg2#4 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$aggregate.$agg2#4)
            +-Literal(type=INT64, value=5)
==

# No GROUP BY, aggregation in HAVING but not in SELECT list.
select 1
from keyvalue
having sum(key) > 5;
--
ERROR: The HAVING clause only allows aggregation if GROUP BY or SELECT list aggregation is present [at 3:8]
having sum(key) > 5;
       ^
==

# No GROUP BY, aggregation in HAVING but different aggregation in SELECT list.
select count("int32")
from SimpleTypes
having sum("int64") > 5;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#19]
    +-input_scan=
      +-FilterScan
        +-column_list=$aggregate.[$agg1#19, $agg2#20]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=$aggregate.[$agg1#19, $agg2#20]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        |   +-aggregate_list=
        |     +-$agg1#19 :=
        |     | +-AggregateFunctionCall(ZetaSQL:count(INT32) -> INT64)
        |     |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |     +-$agg2#20 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$aggregate.$agg2#20)
            +-Literal(type=INT64, value=5)
==

# No GROUP BY, aggregation in HAVING and SELECT list along with other
# aggregation.
select count("int32"), sum("int64")
from SimpleTypes
having sum("int64") > 5;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#19 AS "$col1" [INT64]
| +-$aggregate.$agg2#20 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#19, $agg2#20]
    +-input_scan=
      +-FilterScan
        +-column_list=$aggregate.[$agg1#19, $agg2#20, $agg3#21]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=$aggregate.[$agg1#19, $agg2#20, $agg3#21]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        |   +-aggregate_list=
        |     +-$agg1#19 :=
        |     | +-AggregateFunctionCall(ZetaSQL:count(INT32) -> INT64)
        |     |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |     +-$agg2#20 :=
        |     | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |     |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |     +-$agg3#21 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$aggregate.$agg3#21)
            +-Literal(type=INT64, value=5)
==

# No GROUP BY, HAVING clause has no aggregation
select sum("int64") as a
from SimpleTypes
having true;
--
QueryStmt
+-output_column_list=
| +-$aggregate.a#19 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.a#19]
    +-input_scan=
      +-FilterScan
        +-column_list=[$aggregate.a#19]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.a#19]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        |   +-aggregate_list=
        |     +-a#19 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-filter_expr=
          +-Literal(type=BOOL, value=true)
==

# No GROUP BY or aggregation.  HAVING is not valid.
select 1
from keyvalue
having 1 + key > 5;
--
ERROR: The HAVING clause requires GROUP BY or aggregation to be present [at 3:8]
having 1 + key > 5;
       ^
==

# No GROUP BY or aggregation.  HAVING is not valid.
select 1
from keyvalue
having true;
--
ERROR: The HAVING clause requires GROUP BY or aggregation to be present [at 3:8]
having true;
       ^
==

# GROUP BY, HAVING references GROUP BY column but has no aggregation
select "int64", sum("int32")
from SimpleTypes
group by "int64"
having "int64" < 5;
--
QueryStmt
+-output_column_list=
| +-$groupby.int64#20 AS int64 [INT64]
| +-$aggregate.$agg1#19 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#20, $aggregate.$agg1#19]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.int64#20, $aggregate.$agg1#19]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.int64#20, $aggregate.$agg1#19]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        |   +-group_by_list=
        |   | +-int64#20 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   +-aggregate_list=
        |     +-$agg1#19 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-Cast(INT32 -> INT64)
        |           +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$groupby.int64#20)
            +-Literal(type=INT64, value=5)
==

# GROUP BY, HAVING has more complex expression that is derived from GROUP
# BY columns.
select sum("int32")
from SimpleTypes
group by "int64"
having "int64" + 2 < 5;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#19]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.int64#20, $aggregate.$agg1#19]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.int64#20, $aggregate.$agg1#19]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        |   +-group_by_list=
        |   | +-int64#20 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   +-aggregate_list=
        |     +-$agg1#19 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-Cast(INT32 -> INT64)
        |           +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            | +-ColumnRef(type=INT64, column=$groupby.int64#20)
            | +-Literal(type=INT64, value=2)
            +-Literal(type=INT64, value=5)
==

# GROUP BY, HAVING has aggregation and group by reference.
select "int32", sum("int64")
from SimpleTypes
group by "int32"
having sum("int64") > 5 and "int32" + 5 < 10;
--
QueryStmt
+-output_column_list=
| +-$groupby.int32#20 AS int32 [INT32]
| +-$aggregate.$agg1#19 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int32#20, $aggregate.$agg1#19]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.int32#20, $aggregate.$agg1#19, $aggregate.$agg2#21]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.int32#20, $aggregate.$agg1#19, $aggregate.$agg2#21]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        |   +-group_by_list=
        |   | +-int32#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |   +-aggregate_list=
        |     +-$agg1#19 :=
        |     | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |     |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |     +-$agg2#21 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=$aggregate.$agg2#21)
            | +-Literal(type=INT64, value=5)
            +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              | +-Cast(INT32 -> INT64)
              | | +-ColumnRef(type=INT32, column=$groupby.int32#20)
              | +-Literal(type=INT64, value=5)
              +-Literal(type=INT64, value=10)
==

# GROUP BY, grouped column and aggregation in HAVING, aggregation in SELECT
# list, includes WHERE clause so we can see that the WHERE clause key
# reference is different from the HAVING clause key reference.
select sum(key)
from KeyValue
where key > 5
group by key
having sum(key) > 5 and key < 10;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.key#4, $aggregate.$agg1#3, $aggregate.$agg2#5]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.key#4, $aggregate.$agg1#3, $aggregate.$agg2#5]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[KeyValue.Key#1]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   |   +-filter_expr=
        |   |     +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |       +-Literal(type=INT64, value=5)
        |   +-group_by_list=
        |   | +-key#4 := ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-aggregate_list=
        |     +-$agg1#3 :=
        |     | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |     +-$agg2#5 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=$aggregate.$agg2#5)
            | +-Literal(type=INT64, value=5)
            +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
              +-ColumnRef(type=INT64, column=$groupby.key#4)
              +-Literal(type=INT64, value=10)
==

# GROUP BY, HAVING in subquery.
select * from (select value, sum(key)
               from keyvalue
               group by value
               having value > 'foo');
--
QueryStmt
+-output_column_list=
| +-$groupby.value#4 AS value [STRING]
| +-$aggregate.$agg1#3 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.value#4, $aggregate.$agg1#3]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.value#4, $aggregate.$agg1#3]
        +-input_scan=
          +-FilterScan
            +-column_list=[$groupby.value#4, $aggregate.$agg1#3]
            +-input_scan=
            | +-AggregateScan
            |   +-column_list=[$groupby.value#4, $aggregate.$agg1#3]
            |   +-input_scan=
            |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            |   +-group_by_list=
            |   | +-value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
            |   +-aggregate_list=
            |     +-$agg1#3 :=
            |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-filter_expr=
              +-FunctionCall(ZetaSQL:$greater(STRING, STRING) -> BOOL)
                +-ColumnRef(type=STRING, column=$groupby.value#4)
                +-Literal(type=STRING, value='foo')
==

# HAVING clause aggregation functions can reference columns not available in
# SELECT or GROUP BY.
select value
from keyvalue
group by value
having sum(key) > 5;
--
QueryStmt
+-output_column_list=
| +-$groupby.value#3 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.value#3]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.value#3, $aggregate.$agg1#4]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.value#3, $aggregate.$agg1#4]
        |   +-input_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   +-group_by_list=
        |   | +-value#3 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-aggregate_list=
        |     +-$agg1#4 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$aggregate.$agg1#4)
            +-Literal(type=INT64, value=5)
==

# We can aggregate the GROUP BY column in the HAVING.
select value
from keyvalue
group by value
having max(value) > 'foo';
--
QueryStmt
+-output_column_list=
| +-$groupby.value#3 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.value#3]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.value#3, $aggregate.$agg1#4]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.value#3, $aggregate.$agg1#4]
        |   +-input_scan=
        |   | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
        |   +-group_by_list=
        |   | +-value#3 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-aggregate_list=
        |     +-$agg1#4 :=
        |       +-AggregateFunctionCall(ZetaSQL:max(STRING) -> STRING)
        |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(STRING, STRING) -> BOOL)
            +-ColumnRef(type=STRING, column=$aggregate.$agg1#4)
            +-Literal(type=STRING, value='foo')
==

# ERROR cases.

# HAVING cannot reference pre-aggregate columns.
select "int64"
from SimpleTypes
group by "int64"
having "int32" < 5;
--
ERROR: HAVING clause expression references column int32 which is neither grouped nor aggregated [at 4:8]
having "int32" < 5;
       ^
==

# HAVING cannot reference pre-aggregate columns.
select sum("int64") as a
from SimpleTypes
group by "int64"
having "int64" > 5 and "int32" < 5;
--
ERROR: HAVING clause expression references column int32 which is neither grouped nor aggregated [at 4:24]
having "int64" > 5 and "int32" < 5;
                       ^
==

# HAVING clause must be a boolean expression.
select "int64"
from SimpleTypes
group by "int64"
having "int64";
--
ERROR: HAVING clause should return type BOOL, but returns INT64 [at 4:8]
having "int64";
       ^
==

# HAVING can reference select list aliases.
select sum("int64") as a
from SimpleTypes
having a > 5;
--
QueryStmt
+-output_column_list=
| +-$aggregate.a#19 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.a#19]
    +-input_scan=
      +-FilterScan
        +-column_list=[$aggregate.a#19]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.a#19]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        |   +-aggregate_list=
        |     +-a#19 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$aggregate.a#19)
            +-Literal(type=INT64, value=5)
==

select int32 as b, sum(uint32) as a
from SimpleTypes
group by int32
having int32 = 5 and b > 0 and a > 10 and min(uint32) < 100;
--
QueryStmt
+-output_column_list=
| +-$groupby.int32#20 AS b [INT32]
| +-$aggregate.a#19 AS a [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int32#20, $aggregate.a#19]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.int32#20, $aggregate.a#19, $aggregate.$agg2#21]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.int32#20, $aggregate.a#19, $aggregate.$agg2#21]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypes.[int32#1, uint32#3], table=SimpleTypes, column_index_list=[0, 2])
        |   +-group_by_list=
        |   | +-int32#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |   +-aggregate_list=
        |     +-a#19 :=
        |     | +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
        |     |   +-Cast(UINT32 -> UINT64)
        |     |     +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
        |     +-$agg2#21 :=
        |       +-AggregateFunctionCall(ZetaSQL:min(UINT32) -> UINT32)
        |         +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$and(BOOL, repeated(3) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
            | +-ColumnRef(type=INT32, column=$groupby.int32#20)
            | +-Literal(type=INT32, value=5)
            +-FunctionCall(ZetaSQL:$greater(INT32, INT32) -> BOOL)
            | +-ColumnRef(type=INT32, column=$groupby.int32#20)
            | +-Literal(type=INT32, value=0)
            +-FunctionCall(ZetaSQL:$greater(UINT64, INT64) -> BOOL)
            | +-ColumnRef(type=UINT64, column=$aggregate.a#19)
            | +-Literal(type=INT64, value=10)
            +-FunctionCall(ZetaSQL:$less(UINT32, UINT32) -> BOOL)
              +-ColumnRef(type=UINT32, column=$aggregate.$agg2#21)
              +-Literal(type=UINT32, value=100)
==

select countif("int32" > 0)
from SimpleTypes
having countif("int64" > 0) > 5;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#19]
    +-input_scan=
      +-FilterScan
        +-column_list=$aggregate.[$agg1#19, $agg2#20]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=$aggregate.[$agg1#19, $agg2#20]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        |   +-aggregate_list=
        |     +-$agg1#19 :=
        |     | +-AggregateFunctionCall(ZetaSQL:countif(BOOL) -> INT64)
        |     |   +-FunctionCall(ZetaSQL:$greater(INT32, INT32) -> BOOL)
        |     |     +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |     |     +-Literal(type=INT32, value=0)
        |     +-$agg2#20 :=
        |       +-AggregateFunctionCall(ZetaSQL:countif(BOOL) -> INT64)
        |         +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |           +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |           +-Literal(type=INT64, value=0)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$aggregate.$agg2#20)
            +-Literal(type=INT64, value=5)
==

select sum(key) as b
from keyvalue
having b > 5;
--
QueryStmt
+-output_column_list=
| +-$aggregate.b#3 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.b#3]
    +-input_scan=
      +-FilterScan
        +-column_list=[$aggregate.b#3]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.b#3]
        |   +-input_scan=
        |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   +-aggregate_list=
        |     +-b#3 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$aggregate.b#3)
            +-Literal(type=INT64, value=5)
==

select sum(key) as b
from keyvalue
having sum(b) > 5;
--
ERROR: Aggregations of aggregations are not allowed [at 3:12]
having sum(b) > 5;
           ^
==

select sum(key) as key
from keyvalue
having sum(key) > 0;
--
ERROR: Aggregations of aggregations are not allowed [at 3:12]
having sum(key) > 0;
           ^
==

# Originally b/62144405, which failed with an internal ResolvedAST
# validation error.
#
# The HAVING clause has an aggregation function, whose argument references
# a SELECT list alias whose expression already has aggregation.  This
# is effectively aggregating an aggregate, which is not allowed.
select array_agg(id) as xs
from (select 1 id union all select 2 id) messages
having count((select xs)) >= 3;
--
ERROR: Aggregations of aggregations are not allowed [at 3:22]
having count((select xs)) >= 3;
                     ^
==

# Originally b/62144405, which failed with an internal ResolvedAST
# validation error.
#
# Similar to the previous, but the SELECT list alias is in the FROM
# clause in the COUNT function argument, rather than in a normal
# expression.
select array_agg(id) as xs
from (select 1 id union all select 2 id) messages
having count(array(select x from unnest(xs) as x)) >= 3;
--
ERROR: Aggregations of aggregations are not allowed [at 3:41]
having count(array(select x from unnest(xs) as x)) >= 3;
                                        ^
==

# Similar queries as the previous few, but detecting aggregation of analytic
# functions instead of aggregations of aggregate functions.
#
# This fails since the HAVING clause is logically evaluated before analytic
# functions.
[language_features=ANALYTIC_FUNCTIONS]
select sum(key) over () as b
from keyvalue
having b > 5;
--
ERROR: Column b contains an analytic function, which is not allowed in HAVING clause [at 3:8]
having b > 5;
       ^
==

[language_features=ANALYTIC_FUNCTIONS]
select sum(key) over() as b
from keyvalue
having sum(b) > 5;
--
ERROR: Analytic functions cannot be arguments to aggregate functions [at 3:12]
having sum(b) > 5;
           ^
==

[language_features=ANALYTIC_FUNCTIONS]
select array_agg(id) over () as xs
from (select 1 id union all select 2 id) messages
having count((select xs)) >= 3;
--
ERROR: Analytic functions cannot be arguments to aggregate functions [at 3:22]
having count((select xs)) >= 3;
                     ^
==

[language_features=ANALYTIC_FUNCTIONS]
select array_agg(id) over() as xs
from (select 1 id union all select 2 id) messages
having count(array(select x from unnest(xs) as x)) >= 3;
--
ERROR: Analytic functions cannot be arguments to aggregate functions [at 3:41]
having count(array(select x from unnest(xs) as x)) >= 3;
                                        ^
==

# Ambiguous
select sum(key) as b, count(key) as b
from keyvalue
having b > 5;
--
ERROR: Column name b is ambiguous [at 3:8]
having b > 5;
       ^
==

# Ambiguous
select sum(key) as b, count(key) as b
from keyvalue
having sum(b) > 5;
--
ERROR: Column name b is ambiguous [at 3:12]
having sum(b) > 5;
           ^
==

# Ambiguous
select key as b, count(key) as b
from keyvalue
group by key
having b > 5;
--
ERROR: Column name b is ambiguous [at 4:8]
having b > 5;
       ^
==

# Ambiguous
select key as b, count(key) as b
from keyvalue
group by key
having sum(b) > 5;
--
ERROR: Column name b is ambiguous [at 4:12]
having sum(b) > 5;
           ^
==

# Ambiguous
select count(key) as b, key as b
from keyvalue
group by key
having sum(b) > 5;
--
ERROR: Column name b is ambiguous [at 4:12]
having sum(b) > 5;
           ^
==

# Ambiguous
select array_agg(id) as xs, id as xs
from (select 1 id union all select 2 id) messages
group by xs
--
ERROR: Name xs in GROUP BY clause is ambiguous; it may refer to multiple columns in the SELECT-list [at 3:10]
group by xs
         ^
==

# Ambiguous
select array_agg(id) as xs, id as xs
from (select 1 id union all select 2 id) messages
group by id
having count((select xs)) >= 3;
--
ERROR: Column name xs is ambiguous [at 4:22]
having count((select xs)) >= 3;
                     ^
==


# Ambiguous
select id as xs, array_agg(id) as xs
from (select 1 id union all select 2 id) messages
group by id
having count((select xs)) >= 3;
--
ERROR: Column name xs is ambiguous [at 4:22]
having count((select xs)) >= 3;
                     ^
==

# Ambiguous
select array_agg(id) as xs, id as xs
from (select 1 id union all select 2 id) messages
group by id
having count(array(select x from unnest(xs) as x)) >= 3;
--
ERROR: Column name xs is ambiguous [at 4:41]
having count(array(select x from unnest(xs) as x)) >= 3;
                                        ^
==

# Ambiguous
select id as xs, array_agg(id) as xs, id as xs, array_agg(id) as xs
from (select 1 id union all select 2 id) messages
group by id
having count(array(select x from unnest(xs) as x)) >= 3;
--
ERROR: Column name xs is ambiguous [at 4:41]
having count(array(select x from unnest(xs) as x)) >= 3;
                                        ^
==

# Ambiguous
select array_agg(id) as xs, sum(id) as xs
from (select 1 id union all select 2 id) messages
having count((select xs)) >= 3;
--
ERROR: Column name xs is ambiguous [at 3:22]
having count((select xs)) >= 3;
                     ^
==

# Ambiguous
select array_agg(id) as xs, sum(id) as xs
from (select 1 id union all select 2 id) messages
having count(array(select x from unnest(xs) as x)) >= 3;
--
ERROR: Column name xs is ambiguous [at 3:41]
having count(array(select x from unnest(xs) as x)) >= 3;
                                        ^
==

# Ambiguous, through multiple levels of subqueries
select array_agg(id) as xs, sum(id) as xs
from (select 1 id union all select 2 id) messages
having count((select b
              from (select a as b
                    from (select xs as a)))) >= 3;
--
ERROR: Column name xs is ambiguous [at 5:34]
                    from (select xs as a)))) >= 3;
                                 ^
==

# Column 'a' is ambiguous in the FROM clause, but the SELECT list
# overrides 'a'.  So the reference to 'a' in the HAVING clause is
# not ambiguous, since SELECT list aliases override FROM clause
# names there.
select array_agg(id) as a
from (select 1 id, 2 a, 3 a) messages
having array_length((select a)) >= 3;
--
QueryStmt
+-output_column_list=
| +-$aggregate.a#4 AS a [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.a#4]
    +-input_scan=
      +-FilterScan
        +-column_list=[$aggregate.a#4]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.a#4]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=messages.[id#1, a#2, a#3]
        |   |   +-expr_list=
        |   |   | +-id#1 := Literal(type=INT64, value=1)
        |   |   | +-a#2 := Literal(type=INT64, value=2)
        |   |   | +-a#3 := Literal(type=INT64, value=3)
        |   |   +-input_scan=
        |   |     +-SingleRowScan
        |   +-aggregate_list=
        |     +-a#4 :=
        |       +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
        |         +-ColumnRef(type=INT64, column=messages.id#1)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
            +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            | +-SubqueryExpr
            |   +-type=ARRAY<INT64>
            |   +-subquery_type=SCALAR
            |   +-parameter_list=
            |   | +-ColumnRef(type=ARRAY<INT64>, column=$aggregate.a#4)
            |   +-subquery=
            |     +-ProjectScan
            |       +-column_list=[$expr_subquery.a#5]
            |       +-expr_list=
            |       | +-a#5 := ColumnRef(type=ARRAY<INT64>, column=$aggregate.a#4, is_correlated=TRUE)
            |       +-input_scan=
            |         +-SingleRowScan
            +-Literal(type=INT64, value=3)
==

# This is similar to the previous test, but provides an error since
# column 'a' contains aggregation and it is re-aggregated in the
# HAVING clause.
select array_agg(id) as a
from (select 1 id, 2 a, 3 a union all select 2 id, 3 a, 4 a) messages
having count((select a)) >= 3;
--
ERROR: Aggregations of aggregations are not allowed [at 3:22]
having count((select a)) >= 3;
                     ^
==

# The 'xs' in the SELECT list is ambiguous as a correlation name, but
# the subquery overrides 'xs' locally so the ambiguous correlation
# reference is hidden and this query is valid.
select array_agg(id) as xs, count(*) as xs
from (select 1 id) messages
having count((select xs from unnest([1,2,3]) as xs)) >= 3;
--
QueryStmt
+-output_column_list=
| +-$aggregate.xs#2 AS xs [ARRAY<INT64>]
| +-$aggregate.xs#3 AS xs [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[xs#2, xs#3]
    +-input_scan=
      +-FilterScan
        +-column_list=$aggregate.[xs#2, xs#3, $agg3#5]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=$aggregate.[xs#2, xs#3, $agg3#5]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[messages.id#1]
        |   |   +-expr_list=
        |   |   | +-id#1 := Literal(type=INT64, value=1)
        |   |   +-input_scan=
        |   |     +-SingleRowScan
        |   +-aggregate_list=
        |     +-xs#2 :=
        |     | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
        |     |   +-ColumnRef(type=INT64, column=messages.id#1)
        |     +-xs#3 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |     +-$agg3#5 :=
        |       +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
        |         +-SubqueryExpr
        |           +-type=INT64
        |           +-subquery_type=SCALAR
        |           +-subquery=
        |             +-ProjectScan
        |               +-column_list=[$array.xs#4]
        |               +-input_scan=
        |                 +-ArrayScan
        |                   +-column_list=[$array.xs#4]
        |                   +-array_expr=
        |                   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |                   +-element_column=$array.xs#4
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$aggregate.$agg3#5)
            +-Literal(type=INT64, value=3)
==

select sum(key)
from keyvalue
having NULL
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-FilterScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1#3]
        |   +-input_scan=
        |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   +-aggregate_list=
        |     +-$agg1#3 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-filter_expr=
          +-Literal(type=BOOL, value=NULL)
