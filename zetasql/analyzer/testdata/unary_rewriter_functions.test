[default enabled_ast_rewrites=DEFAULTS]
[default language_features=V_1_2_SAFE_FUNCTION_CALL]

SELECT ARRAY_FIRST([])
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:array_first(ARRAY<INT64> input_array) -> INT64)
    |     +-Literal(type=ARRAY<INT64>, value=[])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#3]
    |         +-expr_list=
    |         | +-$col1#3 :=
    |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(2) BOOL, repeated(2) INT64, INT64) -> INT64)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |     +-Literal(type=INT64, value=NULL)
    |         |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |         |     | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |     | +-Literal(type=INT64, value=0)
    |         |     +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
    |         |     | +-Literal(type=STRING, value='ARRAY_FIRST cannot get the first element of an empty array')
    |         |     +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |         |       +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |       +-Literal(type=INT64, value=0)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.input_array#2]
    |             +-expr_list=
    |             | +-input_array#2 := Literal(type=ARRAY<INT64>, value=[])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[suppress_functions={{|NULLIFERROR|IFERROR}}]
SELECT SAFE.ARRAY_FIRST([])
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_first(ARRAY<INT64> input_array) -> INT64)
    |     +-Literal(type=ARRAY<INT64>, value=[])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#3]
    |         +-expr_list=
    |         | +-$col1#3 :=
    |         |   +-FunctionCall(ZetaSQL:iferror(INT64, INT64) -> INT64)
    |         |     +-FunctionCall(ZetaSQL:$case_no_value(repeated(2) BOOL, repeated(2) INT64, INT64) -> INT64)
    |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |     | +-Literal(type=INT64, value=NULL)
    |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |     | | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |         |     | | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |     | | +-Literal(type=INT64, value=0)
    |         |     | +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
    |         |     | | +-Literal(type=STRING, value='ARRAY_FIRST cannot get the first element of an empty array')
    |         |     | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |         |     |   +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |     |   +-Literal(type=INT64, value=0)
    |         |     +-Literal(type=INT64, value=NULL, has_explicit_type=TRUE)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.input_array#2]
    |             +-expr_list=
    |             | +-input_array#2 := Literal(type=ARRAY<INT64>, value=[])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    NULLIFERROR
    IFERROR
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_first(ARRAY<INT64> input_array) -> INT64)
    |     +-Literal(type=ARRAY<INT64>, value=[])
    +-input_scan=
      +-SingleRowScan

Rewrite ERROR: generic::unimplemented: SAFE mode calls to ARRAY_FIRST are not supported.
==

SELECT ARRAY_FIRST([1, 3], [2, 4])
--
ERROR: Number of arguments does not match for function ARRAY_FIRST. Supported signature: ARRAY_FIRST(ARRAY) [at 1:8]
SELECT ARRAY_FIRST([1, 3], [2, 4])
       ^
==

SELECT ARRAY_FIRST(STRUCT(1 AS a))
--
ERROR: No matching signature for function ARRAY_FIRST for argument types: STRUCT<a INT64>. Supported signature: ARRAY_FIRST(ARRAY) [at 1:8]
SELECT ARRAY_FIRST(STRUCT(1 AS a))
       ^
==

SELECT {{|SAFE.}}ARRAY_LAST([])
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:array_last(ARRAY<INT64> input_array) -> INT64)
    |     +-Literal(type=ARRAY<INT64>, value=[])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#3]
    |         +-expr_list=
    |         | +-$col1#3 :=
    |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(2) BOOL, repeated(2) INT64, INT64) -> INT64)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |     +-Literal(type=INT64, value=NULL)
    |         |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |         |     | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |     | +-Literal(type=INT64, value=0)
    |         |     +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
    |         |     | +-Literal(type=STRING, value='ARRAY_LAST cannot get the last element of an empty array')
    |         |     +-FunctionCall(ZetaSQL:$array_at_ordinal(ARRAY<INT64>, INT64) -> INT64)
    |         |       +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |       +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |         |         +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.input_array#2]
    |             +-expr_list=
    |             | +-input_array#2 := Literal(type=ARRAY<INT64>, value=[])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: SAFE.
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_last(ARRAY<INT64> input_array) -> INT64)
    |     +-Literal(type=ARRAY<INT64>, value=[])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#3]
    |         +-expr_list=
    |         | +-$col1#3 :=
    |         |   +-FunctionCall(ZetaSQL:iferror(INT64, INT64) -> INT64)
    |         |     +-FunctionCall(ZetaSQL:$case_no_value(repeated(2) BOOL, repeated(2) INT64, INT64) -> INT64)
    |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |     | +-Literal(type=INT64, value=NULL)
    |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |     | | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |         |     | | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |     | | +-Literal(type=INT64, value=0)
    |         |     | +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
    |         |     | | +-Literal(type=STRING, value='ARRAY_LAST cannot get the last element of an empty array')
    |         |     | +-FunctionCall(ZetaSQL:$array_at_ordinal(ARRAY<INT64>, INT64) -> INT64)
    |         |     |   +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |     |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |         |     |     +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |     +-Literal(type=INT64, value=NULL, has_explicit_type=TRUE)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.input_array#2]
    |             +-expr_list=
    |             | +-input_array#2 := Literal(type=ARRAY<INT64>, value=[])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

SELECT ARRAY_FIRST(ARRAY(SELECT Value FROM KeyValue {{|ORDER BY Value}}));
--

ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:array_first(ARRAY<STRING> input_array) -> STRING)
    |     +-SubqueryExpr
    |       +-type=ARRAY<STRING>
    |       +-subquery_type=ARRAY
    |       +-subquery=
    |         +-ProjectScan
    |           +-column_list=[KeyValue.Value#2]
    |           +-input_scan=
    |             +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-SubqueryExpr
    |     +-type=STRING
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#5]
    |         +-expr_list=
    |         | +-$col1#5 :=
    |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(2) BOOL, repeated(2) STRING, STRING) -> STRING)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#4)
    |         |     +-Literal(type=STRING, value=NULL)
    |         |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#4)
    |         |     | +-Literal(type=INT64, value=0)
    |         |     +-Cast(STRING -> STRING)
    |         |     | +-FunctionCall(ZetaSQL:error(STRING) -> STRING)
    |         |     |   +-Literal(type=STRING, value='ARRAY_FIRST cannot get the first element of an empty array')
    |         |     +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
    |         |       +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#4)
    |         |       +-Literal(type=INT64, value=0)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.input_array#4]
    |             +-expr_list=
    |             | +-input_array#4 :=
    |             |   +-SubqueryExpr
    |             |     +-type=ARRAY<STRING>
    |             |     +-subquery_type=ARRAY
    |             |     +-subquery=
    |             |       +-ProjectScan
    |             |         +-column_list=[KeyValue.Value#2]
    |             |         +-input_scan=
    |             |           +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ORDER BY Value
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:array_first(ARRAY<STRING> input_array) -> STRING)
    |     +-SubqueryExpr
    |       +-type=ARRAY<STRING>
    |       +-subquery_type=ARRAY
    |       +-subquery=
    |         +-OrderByScan
    |           +-column_list=[KeyValue.Value#2]
    |           +-is_ordered=TRUE
    |           +-input_scan=
    |           | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
    |           +-order_by_item_list=
    |             +-OrderByItem
    |               +-column_ref=
    |                 +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-SubqueryExpr
    |     +-type=STRING
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#5]
    |         +-expr_list=
    |         | +-$col1#5 :=
    |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(2) BOOL, repeated(2) STRING, STRING) -> STRING)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#4)
    |         |     +-Literal(type=STRING, value=NULL)
    |         |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#4)
    |         |     | +-Literal(type=INT64, value=0)
    |         |     +-Cast(STRING -> STRING)
    |         |     | +-FunctionCall(ZetaSQL:error(STRING) -> STRING)
    |         |     |   +-Literal(type=STRING, value='ARRAY_FIRST cannot get the first element of an empty array')
    |         |     +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
    |         |       +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#4)
    |         |       +-Literal(type=INT64, value=0)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.input_array#4]
    |             +-expr_list=
    |             | +-input_array#4 :=
    |             |   +-SubqueryExpr
    |             |     +-type=ARRAY<STRING>
    |             |     +-subquery_type=ARRAY
    |             |     +-subquery=
    |             |       +-OrderByScan
    |             |         +-column_list=[KeyValue.Value#2]
    |             |         +-is_ordered=TRUE
    |             |         +-input_scan=
    |             |         | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
    |             |         +-order_by_item_list=
    |             |           +-OrderByItem
    |             |             +-column_ref=
    |             |               +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

# The langugage feature V_1_4_ARRAY_AGGREGATION_FUNCTIONS is added temporarily.
# It will be removed once UDF naming conflicts are cleaned up.
[language_features=V_1_2_SAFE_FUNCTION_CALL{{|,V_1_4_ARRAY_AGGREGATION_FUNCTIONS}}]
SELECT {{|SAFE.}}ARRAY_SUM([CAST(1.0 AS FLOAT), CAST('NAN' AS FLOAT), CAST('+inf' AS FLOAT)])
--
ALTERNATION GROUP: <empty>
--
ERROR: Function not found: ARRAY_SUM; Did you mean array_agg? [at 1:8]
SELECT ARRAY_SUM([CAST(1.0 AS FLOAT), CAST('NAN' AS FLOAT), CAST('+inf' AS FL...
       ^
--
ALTERNATION GROUP: SAFE.
--
ERROR: Function not found: ARRAY_SUM; Did you mean SAFE.array_agg? [at 1:8]
SELECT SAFE.ARRAY_SUM([CAST(1.0 AS FLOAT), CAST('NAN' AS FLOAT), CAST('+inf' ...
       ^
--
ALTERNATION GROUP: ,V_1_4_ARRAY_AGGREGATION_FUNCTIONS,
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:array_sum(ARRAY<FLOAT> input_array) -> DOUBLE)
    |     +-Literal(type=ARRAY<FLOAT>, value=[1, nan, inf], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=DOUBLE
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#5]
    |         +-expr_list=
    |         | +-$col1#5 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, DOUBLE, DOUBLE) -> DOUBLE)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<FLOAT>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<FLOAT>, column=$subquery1.input_array#2)
    |         |     +-Literal(type=DOUBLE, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=DOUBLE
    |         |       +-subquery_type=SCALAR
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<FLOAT>, column=$subquery1.input_array#2)
    |         |       +-subquery=
    |         |         +-ProjectScan
    |         |           +-column_list=[$aggregate.$agg1#4]
    |         |           +-input_scan=
    |         |             +-AggregateScan
    |         |               +-column_list=[$aggregate.$agg1#4]
    |         |               +-input_scan=
    |         |               | +-ArrayScan
    |         |               |   +-column_list=[$array.e#3]
    |         |               |   +-array_expr=
    |         |               |   | +-ColumnRef(type=ARRAY<FLOAT>, column=$subquery1.input_array#2, is_correlated=TRUE)
    |         |               |   +-element_column=$array.e#3
    |         |               +-aggregate_list=
    |         |                 +-$agg1#4 :=
    |         |                   +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
    |         |                     +-Cast(FLOAT -> DOUBLE)
    |         |                       +-ColumnRef(type=FLOAT, column=$array.e#3)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.input_array#2]
    |             +-expr_list=
    |             | +-input_array#2 := Literal(type=ARRAY<FLOAT>, value=[1, nan, inf], has_explicit_type=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ,V_1_4_ARRAY_AGGREGATION_FUNCTIONS,SAFE.
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_sum(ARRAY<FLOAT> input_array) -> DOUBLE)
    |     +-Literal(type=ARRAY<FLOAT>, value=[1, nan, inf], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=DOUBLE
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#5]
    |         +-expr_list=
    |         | +-$col1#5 :=
    |         |   +-FunctionCall(ZetaSQL:iferror(DOUBLE, DOUBLE) -> DOUBLE)
    |         |     +-FunctionCall(ZetaSQL:if(BOOL, DOUBLE, DOUBLE) -> DOUBLE)
    |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<FLOAT>) -> BOOL)
    |         |     | | +-ColumnRef(type=ARRAY<FLOAT>, column=$subquery1.input_array#2)
    |         |     | +-Literal(type=DOUBLE, value=NULL)
    |         |     | +-SubqueryExpr
    |         |     |   +-type=DOUBLE
    |         |     |   +-subquery_type=SCALAR
    |         |     |   +-parameter_list=
    |         |     |   | +-ColumnRef(type=ARRAY<FLOAT>, column=$subquery1.input_array#2)
    |         |     |   +-subquery=
    |         |     |     +-ProjectScan
    |         |     |       +-column_list=[$aggregate.$agg1#4]
    |         |     |       +-input_scan=
    |         |     |         +-AggregateScan
    |         |     |           +-column_list=[$aggregate.$agg1#4]
    |         |     |           +-input_scan=
    |         |     |           | +-ArrayScan
    |         |     |           |   +-column_list=[$array.e#3]
    |         |     |           |   +-array_expr=
    |         |     |           |   | +-ColumnRef(type=ARRAY<FLOAT>, column=$subquery1.input_array#2, is_correlated=TRUE)
    |         |     |           |   +-element_column=$array.e#3
    |         |     |           +-aggregate_list=
    |         |     |             +-$agg1#4 :=
    |         |     |               +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
    |         |     |                 +-Cast(FLOAT -> DOUBLE)
    |         |     |                   +-ColumnRef(type=FLOAT, column=$array.e#3)
    |         |     +-Literal(type=DOUBLE, value=NULL, has_explicit_type=TRUE)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.input_array#2]
    |             +-expr_list=
    |             | +-input_array#2 := Literal(type=ARRAY<FLOAT>, value=[1, nan, inf], has_explicit_type=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_2_SAFE_FUNCTION_CALL{{|,V_1_4_ARRAY_AGGREGATION_FUNCTIONS}}]
SELECT {{|SAFE.}}ARRAY_AVG([CAST(1.0 AS FLOAT), CAST('NAN' AS FLOAT), CAST('+inf' AS FLOAT)])
--
ALTERNATION GROUP: <empty>
--
ERROR: Function not found: ARRAY_AVG; Did you mean array_agg? [at 1:8]
SELECT ARRAY_AVG([CAST(1.0 AS FLOAT), CAST('NAN' AS FLOAT), CAST('+inf' AS FL...
       ^
--
ALTERNATION GROUP: SAFE.
--
ERROR: Function not found: ARRAY_AVG; Did you mean SAFE.array_agg? [at 1:8]
SELECT SAFE.ARRAY_AVG([CAST(1.0 AS FLOAT), CAST('NAN' AS FLOAT), CAST('+inf' ...
       ^
--
ALTERNATION GROUP: ,V_1_4_ARRAY_AGGREGATION_FUNCTIONS,
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:array_avg(ARRAY<FLOAT> input_array) -> DOUBLE)
    |     +-Literal(type=ARRAY<FLOAT>, value=[1, nan, inf], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=DOUBLE
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#5]
    |         +-expr_list=
    |         | +-$col1#5 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, DOUBLE, DOUBLE) -> DOUBLE)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<FLOAT>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<FLOAT>, column=$subquery1.input_array#2)
    |         |     +-Literal(type=DOUBLE, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=DOUBLE
    |         |       +-subquery_type=SCALAR
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<FLOAT>, column=$subquery1.input_array#2)
    |         |       +-subquery=
    |         |         +-ProjectScan
    |         |           +-column_list=[$aggregate.$agg1#4]
    |         |           +-input_scan=
    |         |             +-AggregateScan
    |         |               +-column_list=[$aggregate.$agg1#4]
    |         |               +-input_scan=
    |         |               | +-ArrayScan
    |         |               |   +-column_list=[$array.e#3]
    |         |               |   +-array_expr=
    |         |               |   | +-ColumnRef(type=ARRAY<FLOAT>, column=$subquery1.input_array#2, is_correlated=TRUE)
    |         |               |   +-element_column=$array.e#3
    |         |               +-aggregate_list=
    |         |                 +-$agg1#4 :=
    |         |                   +-AggregateFunctionCall(ZetaSQL:avg(DOUBLE) -> DOUBLE)
    |         |                     +-Cast(FLOAT -> DOUBLE)
    |         |                       +-ColumnRef(type=FLOAT, column=$array.e#3)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.input_array#2]
    |             +-expr_list=
    |             | +-input_array#2 := Literal(type=ARRAY<FLOAT>, value=[1, nan, inf], has_explicit_type=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ,V_1_4_ARRAY_AGGREGATION_FUNCTIONS,SAFE.
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_avg(ARRAY<FLOAT> input_array) -> DOUBLE)
    |     +-Literal(type=ARRAY<FLOAT>, value=[1, nan, inf], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=DOUBLE
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#5]
    |         +-expr_list=
    |         | +-$col1#5 :=
    |         |   +-FunctionCall(ZetaSQL:iferror(DOUBLE, DOUBLE) -> DOUBLE)
    |         |     +-FunctionCall(ZetaSQL:if(BOOL, DOUBLE, DOUBLE) -> DOUBLE)
    |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<FLOAT>) -> BOOL)
    |         |     | | +-ColumnRef(type=ARRAY<FLOAT>, column=$subquery1.input_array#2)
    |         |     | +-Literal(type=DOUBLE, value=NULL)
    |         |     | +-SubqueryExpr
    |         |     |   +-type=DOUBLE
    |         |     |   +-subquery_type=SCALAR
    |         |     |   +-parameter_list=
    |         |     |   | +-ColumnRef(type=ARRAY<FLOAT>, column=$subquery1.input_array#2)
    |         |     |   +-subquery=
    |         |     |     +-ProjectScan
    |         |     |       +-column_list=[$aggregate.$agg1#4]
    |         |     |       +-input_scan=
    |         |     |         +-AggregateScan
    |         |     |           +-column_list=[$aggregate.$agg1#4]
    |         |     |           +-input_scan=
    |         |     |           | +-ArrayScan
    |         |     |           |   +-column_list=[$array.e#3]
    |         |     |           |   +-array_expr=
    |         |     |           |   | +-ColumnRef(type=ARRAY<FLOAT>, column=$subquery1.input_array#2, is_correlated=TRUE)
    |         |     |           |   +-element_column=$array.e#3
    |         |     |           +-aggregate_list=
    |         |     |             +-$agg1#4 :=
    |         |     |               +-AggregateFunctionCall(ZetaSQL:avg(DOUBLE) -> DOUBLE)
    |         |     |                 +-Cast(FLOAT -> DOUBLE)
    |         |     |                   +-ColumnRef(type=FLOAT, column=$array.e#3)
    |         |     +-Literal(type=DOUBLE, value=NULL, has_explicit_type=TRUE)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.input_array#2]
    |             +-expr_list=
    |             | +-input_array#2 := Literal(type=ARRAY<FLOAT>, value=[1, nan, inf], has_explicit_type=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_2_SAFE_FUNCTION_CALL,V_1_4_ARRAY_AGGREGATION_FUNCTIONS]
SELECT {{|SAFE.}}ARRAY_MIN(["hello", "zetasql"])
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:array_min(ARRAY<STRING> input_array) -> STRING)
    |     +-Literal(type=ARRAY<STRING>, value=['hello', 'zetasql'])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=STRING
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#5]
    |         +-expr_list=
    |         | +-$col1#5 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#2)
    |         |     +-Literal(type=STRING, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=STRING
    |         |       +-subquery_type=SCALAR
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#2)
    |         |       +-subquery=
    |         |         +-LimitOffsetScan
    |         |           +-column_list=[$array.e#3]
    |         |           +-input_scan=
    |         |           | +-OrderByScan
    |         |           |   +-column_list=[$array.e#3]
    |         |           |   +-is_ordered=TRUE
    |         |           |   +-input_scan=
    |         |           |   | +-FilterScan
    |         |           |   |   +-column_list=[$array.e#3, $array_offset.idx#4]
    |         |           |   |   +-input_scan=
    |         |           |   |   | +-ArrayScan
    |         |           |   |   |   +-column_list=[$array.e#3, $array_offset.idx#4]
    |         |           |   |   |   +-array_expr=
    |         |           |   |   |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#2, is_correlated=TRUE)
    |         |           |   |   |   +-element_column=$array.e#3
    |         |           |   |   |   +-array_offset_column=
    |         |           |   |   |     +-ColumnHolder(column=$array_offset.idx#4)
    |         |           |   |   +-filter_expr=
    |         |           |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |           |   |       +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |           |   |         +-ColumnRef(type=STRING, column=$array.e#3)
    |         |           |   +-order_by_item_list=
    |         |           |     +-OrderByItem
    |         |           |     | +-column_ref=
    |         |           |     |   +-ColumnRef(type=STRING, column=$array.e#3)
    |         |           |     +-OrderByItem
    |         |           |       +-column_ref=
    |         |           |         +-ColumnRef(type=INT64, column=$array_offset.idx#4)
    |         |           +-limit=
    |         |             +-Literal(type=INT64, value=1)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.input_array#2]
    |             +-expr_list=
    |             | +-input_array#2 := Literal(type=ARRAY<STRING>, value=['hello', 'zetasql'])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: SAFE.
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_min(ARRAY<STRING> input_array) -> STRING)
    |     +-Literal(type=ARRAY<STRING>, value=['hello', 'zetasql'])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=STRING
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#5]
    |         +-expr_list=
    |         | +-$col1#5 :=
    |         |   +-FunctionCall(ZetaSQL:iferror(STRING, STRING) -> STRING)
    |         |     +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
    |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#2)
    |         |     | +-Literal(type=STRING, value=NULL)
    |         |     | +-SubqueryExpr
    |         |     |   +-type=STRING
    |         |     |   +-subquery_type=SCALAR
    |         |     |   +-parameter_list=
    |         |     |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#2)
    |         |     |   +-subquery=
    |         |     |     +-LimitOffsetScan
    |         |     |       +-column_list=[$array.e#3]
    |         |     |       +-input_scan=
    |         |     |       | +-OrderByScan
    |         |     |       |   +-column_list=[$array.e#3]
    |         |     |       |   +-is_ordered=TRUE
    |         |     |       |   +-input_scan=
    |         |     |       |   | +-FilterScan
    |         |     |       |   |   +-column_list=[$array.e#3, $array_offset.idx#4]
    |         |     |       |   |   +-input_scan=
    |         |     |       |   |   | +-ArrayScan
    |         |     |       |   |   |   +-column_list=[$array.e#3, $array_offset.idx#4]
    |         |     |       |   |   |   +-array_expr=
    |         |     |       |   |   |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#2, is_correlated=TRUE)
    |         |     |       |   |   |   +-element_column=$array.e#3
    |         |     |       |   |   |   +-array_offset_column=
    |         |     |       |   |   |     +-ColumnHolder(column=$array_offset.idx#4)
    |         |     |       |   |   +-filter_expr=
    |         |     |       |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |     |       |   |       +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |     |       |   |         +-ColumnRef(type=STRING, column=$array.e#3)
    |         |     |       |   +-order_by_item_list=
    |         |     |       |     +-OrderByItem
    |         |     |       |     | +-column_ref=
    |         |     |       |     |   +-ColumnRef(type=STRING, column=$array.e#3)
    |         |     |       |     +-OrderByItem
    |         |     |       |       +-column_ref=
    |         |     |       |         +-ColumnRef(type=INT64, column=$array_offset.idx#4)
    |         |     |       +-limit=
    |         |     |         +-Literal(type=INT64, value=1)
    |         |     +-Literal(type=STRING, value=NULL, has_explicit_type=TRUE)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.input_array#2]
    |             +-expr_list=
    |             | +-input_array#2 := Literal(type=ARRAY<STRING>, value=['hello', 'zetasql'])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_4_ARRAY_AGGREGATION_FUNCTIONS]
SELECT ARRAY_MAX([])
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:array_max(ARRAY<INT64> input_array) -> INT64)
    |     +-Literal(type=ARRAY<INT64>, value=[])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#5]
    |         +-expr_list=
    |         | +-$col1#5 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |     +-Literal(type=INT64, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=INT64
    |         |       +-subquery_type=SCALAR
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2)
    |         |       +-subquery=
    |         |         +-LimitOffsetScan
    |         |           +-column_list=[$array.e#3]
    |         |           +-input_scan=
    |         |           | +-OrderByScan
    |         |           |   +-column_list=[$array.e#3]
    |         |           |   +-is_ordered=TRUE
    |         |           |   +-input_scan=
    |         |           |   | +-FilterScan
    |         |           |   |   +-column_list=[$array.e#3, $array_offset.idx#4]
    |         |           |   |   +-input_scan=
    |         |           |   |   | +-ArrayScan
    |         |           |   |   |   +-column_list=[$array.e#3, $array_offset.idx#4]
    |         |           |   |   |   +-array_expr=
    |         |           |   |   |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#2, is_correlated=TRUE)
    |         |           |   |   |   +-element_column=$array.e#3
    |         |           |   |   |   +-array_offset_column=
    |         |           |   |   |     +-ColumnHolder(column=$array_offset.idx#4)
    |         |           |   |   +-filter_expr=
    |         |           |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |           |   |       +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
    |         |           |   |         +-ColumnRef(type=INT64, column=$array.e#3)
    |         |           |   +-order_by_item_list=
    |         |           |     +-OrderByItem
    |         |           |     | +-column_ref=
    |         |           |     | | +-ColumnRef(type=INT64, column=$array.e#3)
    |         |           |     | +-is_descending=TRUE
    |         |           |     +-OrderByItem
    |         |           |       +-column_ref=
    |         |           |         +-ColumnRef(type=INT64, column=$array_offset.idx#4)
    |         |           +-limit=
    |         |             +-Literal(type=INT64, value=1)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.input_array#2]
    |             +-expr_list=
    |             | +-input_array#2 := Literal(type=ARRAY<INT64>, value=[])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_2_SAFE_FUNCTION_CALL,V_1_4_ARRAY_AGGREGATION_FUNCTIONS]
SELECT ARRAY_MAX([4.5])
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:array_max(ARRAY<DOUBLE> input_array) -> DOUBLE)
    |     +-Literal(type=ARRAY<DOUBLE>, value=[4.5])
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=DOUBLE
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#6]
    |         +-expr_list=
    |         | +-$col1#6 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, DOUBLE, DOUBLE) -> DOUBLE)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<DOUBLE>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<DOUBLE>, column=$subquery1.input_array#2)
    |         |     +-Literal(type=DOUBLE, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=DOUBLE
    |         |       +-subquery_type=SCALAR
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<DOUBLE>, column=$subquery1.input_array#2)
    |         |       +-subquery=
    |         |         +-LimitOffsetScan
    |         |           +-column_list=[$array.e#3]
    |         |           +-input_scan=
    |         |           | +-OrderByScan
    |         |           |   +-column_list=[$array.e#3]
    |         |           |   +-is_ordered=TRUE
    |         |           |   +-input_scan=
    |         |           |   | +-ProjectScan
    |         |           |   |   +-column_list=[$array.e#3, $array_offset.idx#4, $orderby.$orderbycol1#5]
    |         |           |   |   +-expr_list=
    |         |           |   |   | +-$orderbycol1#5 :=
    |         |           |   |   |   +-FunctionCall(ZetaSQL:is_nan(DOUBLE) -> BOOL)
    |         |           |   |   |     +-ColumnRef(type=DOUBLE, column=$array.e#3)
    |         |           |   |   +-input_scan=
    |         |           |   |     +-FilterScan
    |         |           |   |       +-column_list=[$array.e#3, $array_offset.idx#4]
    |         |           |   |       +-input_scan=
    |         |           |   |       | +-ArrayScan
    |         |           |   |       |   +-column_list=[$array.e#3, $array_offset.idx#4]
    |         |           |   |       |   +-array_expr=
    |         |           |   |       |   | +-ColumnRef(type=ARRAY<DOUBLE>, column=$subquery1.input_array#2, is_correlated=TRUE)
    |         |           |   |       |   +-element_column=$array.e#3
    |         |           |   |       |   +-array_offset_column=
    |         |           |   |       |     +-ColumnHolder(column=$array_offset.idx#4)
    |         |           |   |       +-filter_expr=
    |         |           |   |         +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |         |           |   |           +-FunctionCall(ZetaSQL:$is_null(DOUBLE) -> BOOL)
    |         |           |   |             +-ColumnRef(type=DOUBLE, column=$array.e#3)
    |         |           |   +-order_by_item_list=
    |         |           |     +-OrderByItem
    |         |           |     | +-column_ref=
    |         |           |     | | +-ColumnRef(type=BOOL, column=$orderby.$orderbycol1#5)
    |         |           |     | +-is_descending=TRUE
    |         |           |     +-OrderByItem
    |         |           |     | +-column_ref=
    |         |           |     | | +-ColumnRef(type=DOUBLE, column=$array.e#3)
    |         |           |     | +-is_descending=TRUE
    |         |           |     +-OrderByItem
    |         |           |       +-column_ref=
    |         |           |         +-ColumnRef(type=INT64, column=$array_offset.idx#4)
    |         |           +-limit=
    |         |             +-Literal(type=INT64, value=1)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.input_array#2]
    |             +-expr_list=
    |             | +-input_array#2 := Literal(type=ARRAY<DOUBLE>, value=[4.5])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
