[default language_features=JSON_TYPE]
SELECT JSON '1'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=JSON, value=1, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

SELECT json_col FROM JsonTable
--
QueryStmt
+-output_column_list=
| +-JSONTable.json_col#1 AS json_col [JSON]
+-query=
  +-ProjectScan
    +-column_list=[JSONTable.json_col#1]
    +-input_scan=
      +-TableScan(column_list=[JSONTable.json_col#1], table=JSONTable, column_index_list=[0])
==

SELECT json_col.field FROM JsonTable
--
QueryStmt
+-output_column_list=
| +-$query.field#2 AS field [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$query.field#2]
    +-expr_list=
    | +-field#2 :=
    |   +-GetJsonField
    |     +-type=JSON
    |     +-expr=
    |     | +-ColumnRef(type=JSON, column=JSONTable.json_col#1)
    |     +-field_name='field'
    +-input_scan=
      +-TableScan(column_list=[JSONTable.json_col#1], table=JSONTable, column_index_list=[0])
==

SELECT json_col.field.field2 FROM JsonTable
--
QueryStmt
+-output_column_list=
| +-$query.field2#2 AS field2 [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$query.field2#2]
    +-expr_list=
    | +-field2#2 :=
    |   +-GetJsonField
    |     +-type=JSON
    |     +-expr=
    |     | +-GetJsonField
    |     |   +-type=JSON
    |     |   +-expr=
    |     |   | +-ColumnRef(type=JSON, column=JSONTable.json_col#1)
    |     |   +-field_name='field'
    |     +-field_name='field2'
    +-input_scan=
      +-TableScan(column_list=[JSONTable.json_col#1], table=JSONTable, column_index_list=[0])
==

SELECT json_col.""foo\'bar[ \?@#\\123_baz" FROM JsonTable
--
QueryStmt
+-output_column_list=
| +-$query."foo'bar[ ?@#\123_baz#2 AS ""foo'bar[ ?@#\\123_baz" [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$query."foo'bar[ ?@#\123_baz#2]
    +-expr_list=
    | +-"foo'bar[ ?@#\123_baz#2 :=
    |   +-GetJsonField
    |     +-type=JSON
    |     +-expr=
    |     | +-ColumnRef(type=JSON, column=JSONTable.json_col#1)
    |     +-field_name='\'foo'bar[ ?@#\\123_baz"
    +-input_scan=
      +-TableScan(column_list=[JSONTable.json_col#1], table=JSONTable, column_index_list=[0])
==

SELECT json_val.field FROM ArrayTypes, UNNEST(JsonArray) AS json_val
--
QueryStmt
+-output_column_list=
| +-$query.field#19 AS field [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$query.field#19]
    +-expr_list=
    | +-field#19 :=
    |   +-GetJsonField
    |     +-type=JSON
    |     +-expr=
    |     | +-ColumnRef(type=JSON, column=$array.json_val#18)
    |     +-field_name='field'
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.JsonArray#17, $array.json_val#18]
        +-input_scan=
        | +-TableScan(column_list=[ArrayTypes.JsonArray#17], table=ArrayTypes, column_index_list=[16])
        +-array_expr=
        | +-ColumnRef(type=ARRAY<JSON>, column=ArrayTypes.JsonArray#17)
        +-element_column=$array.json_val#18
==

SELECT json_col['field'] FROM JsonTable;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:$subscript(JSON, STRING) -> JSON)
    |     +-ColumnRef(type=JSON, column=JSONTable.json_col#1)
    |     +-Literal(type=STRING, value='field')
    +-input_scan=
      +-TableScan(column_list=[JSONTable.json_col#1], table=JSONTable, column_index_list=[0])
==

SELECT json_col[SUBSTR("bar", 0, 2)] FROM JsonTable;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:$subscript(JSON, STRING) -> JSON)
    |     +-ColumnRef(type=JSON, column=JSONTable.json_col#1)
    |     +-FunctionCall(ZetaSQL:substr(STRING, INT64, optional(1) INT64) -> STRING)
    |       +-Literal(type=STRING, value='bar')
    |       +-Literal(type=INT64, value=0)
    |       +-Literal(type=INT64, value=2)
    +-input_scan=
      +-TableScan(column_list=[JSONTable.json_col#1], table=JSONTable, column_index_list=[0])
==

select json_col[CAST(0 AS INT32)] from JsonTable;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:$subscript(JSON, INT64) -> JSON)
    |     +-ColumnRef(type=JSON, column=JSONTable.json_col#1)
    |     +-Literal(type=INT64, value=0, has_explicit_type=TRUE)
    +-input_scan=
      +-TableScan(column_list=[JSONTable.json_col#1], table=JSONTable, column_index_list=[0])
==

SELECT json_col[1+2] FROM JsonTable;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:$subscript(JSON, INT64) -> JSON)
    |     +-ColumnRef(type=JSON, column=JSONTable.json_col#1)
    |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |       +-Literal(type=INT64, value=1)
    |       +-Literal(type=INT64, value=2)
    +-input_scan=
      +-TableScan(column_list=[JSONTable.json_col#1], table=JSONTable, column_index_list=[0])

==

SELECT json_col[1.0] FROM JsonTable;
--
ERROR: Subscript access using [DOUBLE] is not supported on values of type JSON [at 1:17]
SELECT json_col[1.0] FROM JsonTable;
                ^
==

SELECT json_col[DEFAULT_OFFSET(0)] FROM JsonTable;
--
ERROR: Subscript access using [DEFAULT_OFFSET(INT64)] is not supported on values of type JSON [at 1:17]
SELECT json_col[DEFAULT_OFFSET(0)] FROM JsonTable;
                ^
==

SELECT 0[0];
--
ERROR: Subscript access using [INT64] is not supported on values of type INT64 [at 1:10]
SELECT 0[0];
         ^
==

SELECT 0[DEFAULT_OFFSET(0)];
--
ERROR: Subscript access using [DEFAULT_OFFSET(INT64)] is not supported on values of type INT64 [at 1:10]
SELECT 0[DEFAULT_OFFSET(0)];
         ^
==

[language_features=V_1_2_SAFE_FUNCTION_CALL,JSON_TYPE]
SELECT json_col[SAFE.SUBSTR("bar", 0, 2)] FROM JsonTable;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:$subscript(JSON, STRING) -> JSON)
    |     +-ColumnRef(type=JSON, column=JSONTable.json_col#1)
    |     +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:substr(STRING, INT64, optional(1) INT64) -> STRING)
    |       +-Literal(type=STRING, value='bar')
    |       +-Literal(type=INT64, value=0)
    |       +-Literal(type=INT64, value=2)
    +-input_scan=
      +-TableScan(column_list=[JSONTable.json_col#1], table=JSONTable, column_index_list=[0])
==

SELECT json_col[CAST(NULL AS STRING)] FROM JsonTable;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:$subscript(JSON, STRING) -> JSON)
    |     +-ColumnRef(type=JSON, column=JSONTable.json_col#1)
    |     +-Literal(type=STRING, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-TableScan(column_list=[JSONTable.json_col#1], table=JSONTable, column_index_list=[0])
==
