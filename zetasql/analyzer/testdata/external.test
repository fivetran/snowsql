# These are tests for the EXTERNAL product mode.
# (broken link) for details.

[default product_mode=external]
select cast(1 as bool);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=BOOL, value=true, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast(1 as boolean);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=BOOL, value=true, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast(1 as int64);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=1, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# Disallowed integer types
select cast(1 as uint32);
--
ERROR: Type not found: uint32 [at 1:18]
select cast(1 as uint32);
                 ^
==

# Disallowed integer types
select cast(1 as uint64)
--
ERROR: Type not found: uint64 [at 1:18]
select cast(1 as uint64)
                 ^
==

# Disallowed integer types
select cast(1 as int32)
--
ERROR: Type not found: int32 [at 1:18]
select cast(1 as int32)
                 ^
==

# Large integer literal which still fits into int64
select 1111111111111111111;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=1111111111111111111)
    +-input_scan=
      +-SingleRowScan
==

# Large integer literal which doesn't fit into int64, but fits into uint64
# won't work in external mode
select 11111111111111111111;
--
ERROR: Invalid integer literal: 11111111111111111111 [at 1:8]
select 11111111111111111111;
       ^
==

# Large integer hex literal which still fits into int64
select 0xabcdef987654321;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=773738399300666145)
    +-input_scan=
      +-SingleRowScan
==

# Large integer hex literal which doesn't fit into int64, but fits into uint64
# won't work in external mode
select 0xabcdef9876543210;
--
ERROR: Invalid hex integer literal: 0xabcdef9876543210 [at 1:8]
select 0xabcdef9876543210;
       ^
==

# Disallowed double types
select cast(1 as double)
--
ERROR: Type not found: double [at 1:18]
select cast(1 as double)
                 ^
==

# Disallowed floating types
select cast(1 as float)
--
ERROR: Type not found: float [at 1:18]
select cast(1 as float)
                 ^
==

# The only floating point type which is allowed
select cast(1 as float64)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=DOUBLE, value=1, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# TIMESTAMP and DATE are allowed, both as literals and as casts
select date '2015-08-07', timestamp '1987-05-31 14:21:00',
       cast('1908-07-22' as date), cast('2215-08-07 15:43:29' as timestamp)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATE]
| +-$query.$col2#2 AS `$col2` [TIMESTAMP]
| +-$query.$col3#3 AS `$col3` [DATE]
| +-$query.$col4#4 AS `$col4` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4]
    +-expr_list=
    | +-$col1#1 := Literal(type=DATE, value=2015-08-07, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=TIMESTAMP, value=1987-05-31 21:21:00+00, has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=DATE, value=1908-07-22, has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=TIMESTAMP, value=2215-08-07 22:43:29+00, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast('1987-05-31 14:21:00' as timestamp_millis)
--
ERROR: Type not found: timestamp_millis [at 1:38]
select cast('1987-05-31 14:21:00' as timestamp_millis)
                                     ^
==

select cast('1987-05-31 14:21:00' as timestamp_micros)
--
ERROR: Type not found: timestamp_micros [at 1:38]
select cast('1987-05-31 14:21:00' as timestamp_micros)
                                     ^
==

# STRUCT is allowed
select struct<a int64, b double>(1, 2.0)
--
ERROR: Type not found: double [at 1:26]
select struct<a int64, b double>(1, 2.0)
                         ^
==

select struct<a int64, b float64>(1, 2.0)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<a INT64, b DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<a INT64, b DOUBLE>, value={a:1, b:2}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# STRUCT with disallowed types fails
select struct<a uint64, b float>(1, 2.0)
--
ERROR: Type not found: uint64 [at 1:17]
select struct<a uint64, b float>(1, 2.0)
                ^
==

# ARRAY is allowed
select ARRAY<INT64>[1, 2]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[1, 2], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# ARRAY with disallowed types fails
select ARRAY<INT32>[1, 2]
--
ERROR: Type not found: INT32 [at 1:14]
select ARRAY<INT32>[1, 2]
             ^
==

# Named proto types are not allowed
select new zetasql_test__.EmptyMessage()
--
ERROR: Type not found: zetasql_test__.EmptyMessage [at 1:12]
select new zetasql_test__.EmptyMessage()
           ^
==

# Named enum types are not allowed
select CAST(1 as `zetasql_test__.TestEnum`)
--
ERROR: Type not found: `zetasql_test__.TestEnum` [at 1:18]
select CAST(1 as `zetasql_test__.TestEnum`)
                 ^
==

select CAST(1 as zetasql_test__.TestEnum)
--
ERROR: Type not found: zetasql_test__.TestEnum [at 1:18]
select CAST(1 as zetasql_test__.TestEnum)
                 ^
==

# Some non-existing type
select CAST(1 as foo)
--
ERROR: Type not found: foo [at 1:18]
select CAST(1 as foo)
                 ^
==

# SELECT AS TypeName with non-STRUCT type.
select as int64 1
--
ERROR: SELECT AS TypeName can only be used for type STRUCT [at 1:11]
select as int64 1
          ^
==

# Some non-existing type path
select CAST(1 as foo.bar)
--
ERROR: Type not found: foo.bar [at 1:18]
select CAST(1 as foo.bar)
                 ^

==

# Some functions are not visible in external mode
select fingerprint("S")
--
ERROR: Function not found: fingerprint [at 1:8]
select fingerprint("S")
       ^
==

# Error message for supported function signatures only lists external type
# names.
[product_mode={{internal|external}}]
select 1 + '2'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=INT64, value=2)
    +-input_scan=
      +-SingleRowScan
==

# This is a valid INT64 value (kint64min), but because the ZetaSQL parser
# parses this as an integer literal with a negation, it would normally not be
# accepted. A special case in the resolver for MINUS in combination with an
# integer literal makes this work.
SELECT -0x80000000
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=-2147483648)
    +-input_scan=
      +-SingleRowScan
