# This file tests the analytic support for Snowflake aggregate functions.
[default language_features=ANALYTIC_FUNCTIONS]

select approx_top_k_accumulate(key, 4) over ()
from keyvalue
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS `$col1` [ARRAY<STRUCT<value INT64, count INT64>>]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(ZetaSQL:approx_top_k_accumulate(INT64, INT64) -> ARRAY<STRUCT<value INT64, count INT64>>)
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-Literal(type=INT64, value=4)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

select approx_top_count(int64, 10) from SimpleTypes
--
==

select approx_top_count(string, @test_param_int64) from SimpleTypes
--
==

select approx_top_count(string, null) from SimpleTypes
--
==

select approx_top_count(string, 0) from SimpleTypes
--
==

select approx_top_count(string, -1) from SimpleTypes
--
==

select approx_top_count(string, 1+1) from SimpleTypes
--
==

select approx_top_count(string, 'abc') from SimpleTypes
--
==

select approx_top_count(string) from SimpleTypes
--
==

select approx_top_count() from SimpleTypes
--
==

select approx_top_count(string, 10, 11) from SimpleTypes
--
==

select approx_top_count(KitchenSink, 10) from TestTable
--
==

select approx_top_count(TestEnum, 10) from TestTable
--
==

# A literal ARRAY with groupable elements
[language_features={{|V_1_2_GROUP_BY_ARRAY}}]
select approx_top_count([1,2], 10) from TestTable
--
ALTERNATION GROUP: <empty>
--
--
ALTERNATION GROUP: V_1_2_GROUP_BY_ARRAY
--
==

# A non-literal ARRAY with groupable elements
[language_features={{|V_1_2_GROUP_BY_ARRAY}}]
select approx_top_count(['a',string], 10) from SimpleTypes
--
ALTERNATION GROUP: <empty>
--
--
ALTERNATION GROUP: V_1_2_GROUP_BY_ARRAY
--
==

# An ARRAY with non-groupable elements
[language_features={{|V_1_2_GROUP_BY_ARRAY}}]
select approx_top_count([KitchenSink], 10) from TestTable
--
==

# A literal STRUCT with groupable fields
[language_features={{|V_1_2_GROUP_BY_STRUCT}}]
select approx_top_count((1,2), 10) from TestTable
--
ALTERNATION GROUP: <empty>
--
--
ALTERNATION GROUP: V_1_2_GROUP_BY_STRUCT
--
==

# A non-literal STRUCT with groupable fields
[language_features={{|V_1_2_GROUP_BY_STRUCT}}]
select approx_top_count((1,string), 10) from SimpleTypes
--
ALTERNATION GROUP: <empty>
--
--
ALTERNATION GROUP: V_1_2_GROUP_BY_STRUCT
--
==

[language_features={{|V_1_2_GROUP_BY_STRUCT}}]
select approx_top_count((1,KitchenSink), 10) from TestTable
--
==
