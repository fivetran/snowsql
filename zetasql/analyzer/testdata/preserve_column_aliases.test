# Run tests with analytic functions
{{|[no_preserve_column_aliases]}}
[language_features=ANALYTIC_FUNCTIONS]
select afn_agg(key) over () as afn_agg, afn_agg(key) over () from KeyValue;
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$analytic.afn_agg#5 AS afn_agg [INT64]
| +-$analytic.$analytic2#6 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=$analytic.[afn_agg#5, $analytic2#6]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $analytic.afn_agg#5, $analytic.$analytic2#6]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-afn_agg#5 :=
              | +-AnalyticFunctionCall(sample_functions:afn_agg(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic2#6 :=
                +-AnalyticFunctionCall(sample_functions:afn_agg(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
--
ALTERNATION GROUP: [no_preserve_column_aliases]
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#5 AS afn_agg [INT64]
| +-$analytic.$analytic2#6 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=$analytic.[$analytic1#5, $analytic2#6]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#5, $analytic.$analytic2#6]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#5 :=
              | +-AnalyticFunctionCall(sample_functions:afn_agg(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic2#6 :=
                +-AnalyticFunctionCall(sample_functions:afn_agg(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

# Run tests with aggregates
{{|[no_preserve_column_aliases]}}
select sum(key) as sum, sum(key) from KeyValue;
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$aggregate.sum#3 AS sum [INT64]
| +-$aggregate.$agg2#4 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[sum#3, $agg2#4]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[sum#3, $agg2#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-aggregate_list=
          +-sum#3 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          +-$agg2#4 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
--
ALTERNATION GROUP: [no_preserve_column_aliases]
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS sum [INT64]
| +-$aggregate.$agg2#4 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#3, $agg2#4]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#3, $agg2#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-aggregate_list=
          +-$agg1#3 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          +-$agg2#4 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
