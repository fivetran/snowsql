# All the named typed parameters used in the queries could be found
# defined in zetasql/analyzer/analyzer_test_options.cc. Positional
# parameters are declared using type names, where the first name in the
# positional_parameters list corresponds with the first positional parameter
# and so on.

[default parameter_mode=positional]

select 1 from TestTable where KitchenSink.bool_val = @test_param_bool;
--
ERROR: Named parameters are not supported [at 1:54]
select 1 from TestTable where KitchenSink.bool_val = @test_param_bool;
                                                     ^
==

[allow_undeclared_parameters]

select 1 from TestTable where KitchenSink.bool_val = ?;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(BOOL, BOOL) -> BOOL)
            +-GetProtoField
            | +-type=BOOL
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=bool_val
            | +-default_value=false
            +-Parameter(parse_location=53-54, type=BOOL, position=1)
[UNDECLARED_PARAMETERS]
BOOL
==

[positional_parameter_types=bool]

select 1 from TestTable where KitchenSink.bool_val = ?;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(BOOL, BOOL) -> BOOL)
            +-GetProtoField
            | +-type=BOOL
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=bool_val
            | +-default_value=false
            +-Parameter(type=BOOL, position=1)
==

[allow_undeclared_parameters]

select 1 + ?;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-Parameter(parse_location=11-12, type=INT64, position=1, is_untyped=TRUE)
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
INT64
==

[allow_undeclared_parameters]

select x FROM (SELECT 1 AS x) WHERE ?;
--
QueryStmt
+-output_column_list=
| +-$subquery1.x#1 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$subquery1.x#1]
    +-input_scan=
      +-FilterScan
        +-column_list=[$subquery1.x#1]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.x#1]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-filter_expr=
          +-Parameter(parse_location=36-37, type=BOOL, position=1)
[UNDECLARED_PARAMETERS]
BOOL
==

[positional_parameter_types=int32]

select 1 + ?;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-Cast(INT32 -> INT64)
    |       +-Parameter(type=INT32, position=1)
    +-input_scan=
      +-SingleRowScan
==

[positional_parameter_types=array<int32>,int64]

select 1 from TestTable where ?[DEFAULT_OFFSET(?)] = 1;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(table=TestTable)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
            +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT32>, INT64) -> INT32)
            | +-Parameter(type=ARRAY<INT32>, position=1)
            | +-Parameter(type=INT64, position=2)
            +-Literal(type=INT32, value=1)
==

# NOTE: '?' in table_expressions not supported (while parsing).
[allow_undeclared_parameters]

select * from ? WITH POSITION pos;
--
ERROR: Query parameters cannot be used in place of table names [at 1:15]
select * from ? WITH POSITION pos;
              ^
==

[allow_undeclared_parameters]

select t from
  (select as struct
     ? a,
     ? b,
     ? c,
     ? d,
     ? e) t;
--
QueryStmt
+-output_column_list=
| +-$make_struct.$struct#6 AS t [STRUCT<a INT64, b INT64, c INT64, d INT64, e INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$make_struct.$struct#6]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$make_struct.$struct#6]
        +-expr_list=
        | +-$struct#6 :=
        |   +-MakeStruct
        |     +-type=STRUCT<a INT64, b INT64, c INT64, d INT64, e INT64>
        |     +-field_list=
        |       +-ColumnRef(type=INT64, column=t.a#1)
        |       +-ColumnRef(type=INT64, column=t.b#2)
        |       +-ColumnRef(type=INT64, column=t.c#3)
        |       +-ColumnRef(type=INT64, column=t.d#4)
        |       +-ColumnRef(type=INT64, column=t.e#5)
        +-input_scan=
          +-ProjectScan
            +-column_list=t.[a#1, b#2, c#3, d#4, e#5]
            +-expr_list=
            | +-a#1 := Parameter(parse_location=39-40, type=INT64, position=1, is_untyped=TRUE)
            | +-b#2 := Parameter(parse_location=49-50, type=INT64, position=2, is_untyped=TRUE)
            | +-c#3 := Parameter(parse_location=59-60, type=INT64, position=3, is_untyped=TRUE)
            | +-d#4 := Parameter(parse_location=69-70, type=INT64, position=4, is_untyped=TRUE)
            | +-e#5 := Parameter(parse_location=79-80, type=INT64, position=5, is_untyped=TRUE)
            +-input_scan=
              +-SingleRowScan
[UNDECLARED_PARAMETERS]
INT64
INT64
INT64
INT64
INT64
==

[allow_undeclared_parameters]

select 5 from KeyValue group by ?;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 := Literal(type=INT64, value=5)
    +-input_scan=
      +-AggregateScan
        +-input_scan=
        | +-TableScan(table=KeyValue)
        +-group_by_list=
          +-$groupbycol1#3 := Parameter(parse_location=32-33, type=INT64, position=1, is_untyped=TRUE)
[UNDECLARED_PARAMETERS]
INT64
==

[allow_undeclared_parameters]

select ?, ? from KeyValue group by 1, 2;
--
QueryStmt
+-output_column_list=
| +-$groupby.$col1#3 AS "$col1" [INT64]
| +-$groupby.$col2#4 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=$groupby.[$col1#3, $col2#4]
    +-input_scan=
      +-AggregateScan
        +-column_list=$groupby.[$col1#3, $col2#4]
        +-input_scan=
        | +-TableScan(table=KeyValue)
        +-group_by_list=
          +-$col1#3 := Parameter(parse_location=7-8, type=INT64, position=1, is_untyped=TRUE)
          +-$col2#4 := Parameter(parse_location=10-11, type=INT64, position=2, is_untyped=TRUE)
[UNDECLARED_PARAMETERS]
INT64
INT64
==

[allow_undeclared_parameters]

select ?, sum(?) from KeyValue group by 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.$col1#4 AS "$col1" [INT64]
| +-$aggregate.$agg1#3 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.$col1#4, $aggregate.$agg1#3]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.$col1#4, $aggregate.$agg1#3]
        +-input_scan=
        | +-TableScan(table=KeyValue)
        +-group_by_list=
        | +-$col1#4 := Parameter(parse_location=7-8, type=INT64, position=1, is_untyped=TRUE)
        +-aggregate_list=
          +-$agg1#3 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-Parameter(parse_location=14-15, type=INT64, position=2, is_untyped=TRUE)
[UNDECLARED_PARAMETERS]
INT64
INT64
==

[allow_undeclared_parameters]

select ?
from KeyValue
order by ?
limit ?
offset ?;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#3]
    +-is_ordered=TRUE
    +-input_scan=
    | +-OrderByScan
    |   +-column_list=[$query.$col1#3]
    |   +-is_ordered=TRUE
    |   +-input_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[$query.$col1#3, $orderby.$orderbycol1#4]
    |   |   +-expr_list=
    |   |   | +-$orderbycol1#4 := Parameter(parse_location=32-33, type=INT64, position=2, is_untyped=TRUE)
    |   |   +-input_scan=
    |   |     +-ProjectScan
    |   |       +-column_list=[$query.$col1#3]
    |   |       +-expr_list=
    |   |       | +-$col1#3 := Parameter(parse_location=7-8, type=INT64, position=1, is_untyped=TRUE)
    |   |       +-input_scan=
    |   |         +-TableScan(table=KeyValue)
    |   +-order_by_item_list=
    |     +-OrderByItem
    |       +-column_ref=
    |         +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#4)
    +-limit=
    | +-Parameter(parse_location=40-41, type=INT64, position=3, is_untyped=TRUE)
    +-offset=
      +-Parameter(parse_location=49-50, type=INT64, position=4, is_untyped=TRUE)
[UNDECLARED_PARAMETERS]
INT64
INT64
INT64
INT64
==

[allow_undeclared_parameters]

SELECT key, ? FROM KeyValue
GROUP BY key;
--
QueryStmt
+-output_column_list=
| +-$groupby.key#3 AS key [INT64]
| +-$query.$col2#4 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#3, $query.$col2#4]
    +-expr_list=
    | +-$col2#4 := Parameter(parse_location=12-13, type=INT64, position=1, is_untyped=TRUE)
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.key#3]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-group_by_list=
          +-key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
[UNDECLARED_PARAMETERS]
INT64
==

[positional_parameter_types=int64,string,timestamp,bool]

select a, any_value(b), c
from (select ? as a, ? as b, ? as c from (select 1) where ?)
group by a, b = 'foo', c;
--
QueryStmt
+-output_column_list=
| +-$groupby.a#6 AS a [INT64]
| +-$aggregate.$agg1#5 AS "$col2" [STRING]
| +-$groupby.c#8 AS c [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.a#6, $aggregate.$agg1#5, $groupby.c#8]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.a#6, $groupby.c#8, $aggregate.$agg1#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=$subquery1.[a#2, b#3, c#4]
        |   +-expr_list=
        |   | +-a#2 := Parameter(type=INT64, position=1)
        |   | +-b#3 := Parameter(type=STRING, position=2)
        |   | +-c#4 := Parameter(type=TIMESTAMP, position=3)
        |   +-input_scan=
        |     +-FilterScan
        |       +-column_list=[$subquery2.$col1#1]
        |       +-input_scan=
        |       | +-ProjectScan
        |       |   +-column_list=[$subquery2.$col1#1]
        |       |   +-expr_list=
        |       |   | +-$col1#1 := Literal(type=INT64, value=1)
        |       |   +-input_scan=
        |       |     +-SingleRowScan
        |       +-filter_expr=
        |         +-Parameter(type=BOOL, position=4)
        +-group_by_list=
        | +-a#6 := ColumnRef(type=INT64, column=$subquery1.a#2)
        | +-$groupbycol2#7 :=
        | | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        | |   +-ColumnRef(type=STRING, column=$subquery1.b#3)
        | |   +-Literal(type=STRING, value='foo')
        | +-c#8 := ColumnRef(type=TIMESTAMP, column=$subquery1.c#4)
        +-aggregate_list=
          +-$agg1#5 :=
            +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
              +-ColumnRef(type=STRING, column=$subquery1.b#3)
==

[positional_parameter_types=int64,string,timestamp,bool]

with T as (select ? as a, ? as b, ? as c from (select 1) where ?)
select a, any_value(b), c
from T
group by a, b = 'foo', c;
--
QueryStmt
+-output_column_list=
| +-$groupby.a#9 AS a [INT64]
| +-$aggregate.$agg1#8 AS "$col2" [STRING]
| +-$groupby.c#11 AS c [TIMESTAMP]
+-query=
  +-WithScan
    +-column_list=[$groupby.a#9, $aggregate.$agg1#8, $groupby.c#11]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='T'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=T.[a#2, b#3, c#4]
    |       +-expr_list=
    |       | +-a#2 := Parameter(type=INT64, position=1)
    |       | +-b#3 := Parameter(type=STRING, position=2)
    |       | +-c#4 := Parameter(type=TIMESTAMP, position=3)
    |       +-input_scan=
    |         +-FilterScan
    |           +-column_list=[$subquery1.$col1#1]
    |           +-input_scan=
    |           | +-ProjectScan
    |           |   +-column_list=[$subquery1.$col1#1]
    |           |   +-expr_list=
    |           |   | +-$col1#1 := Literal(type=INT64, value=1)
    |           |   +-input_scan=
    |           |     +-SingleRowScan
    |           +-filter_expr=
    |             +-Parameter(type=BOOL, position=4)
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.a#9, $aggregate.$agg1#8, $groupby.c#11]
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.a#9, $groupby.c#11, $aggregate.$agg1#8]
            +-input_scan=
            | +-WithRefScan(column_list=T.[a#5, b#6, c#7], with_query_name='T')
            +-group_by_list=
            | +-a#9 := ColumnRef(type=INT64, column=T.a#5)
            | +-$groupbycol2#10 :=
            | | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            | |   +-ColumnRef(type=STRING, column=T.b#6)
            | |   +-Literal(type=STRING, value='foo')
            | +-c#11 := ColumnRef(type=TIMESTAMP, column=T.c#7)
            +-aggregate_list=
              +-$agg1#8 :=
                +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
                  +-ColumnRef(type=STRING, column=T.b#6)
==

[positional_parameter_types=bool,array<int32>,int64,int32]

select key, value
from KeyValue
where ? and cast(key as int32) in unnest(?)
group by 1, 2
order by 1
limit ?
offset ?
--
QueryStmt
+-output_column_list=
| +-$groupby.key#3 AS key [INT64]
| +-$groupby.value#4 AS value [STRING]
+-query=
  +-LimitOffsetScan
    +-column_list=$groupby.[key#3, value#4]
    +-is_ordered=TRUE
    +-input_scan=
    | +-OrderByScan
    |   +-column_list=$groupby.[key#3, value#4]
    |   +-is_ordered=TRUE
    |   +-input_scan=
    |   | +-AggregateScan
    |   |   +-column_list=$groupby.[key#3, value#4]
    |   |   +-input_scan=
    |   |   | +-FilterScan
    |   |   |   +-column_list=KeyValue.[Key#1, Value#2]
    |   |   |   +-input_scan=
    |   |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   |   |   +-filter_expr=
    |   |   |     +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
    |   |   |       +-Parameter(type=BOOL, position=1)
    |   |   |       +-FunctionCall(ZetaSQL:$in_array(INT32, ARRAY<INT32>) -> BOOL)
    |   |   |         +-Cast(INT64 -> INT32)
    |   |   |         | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |   |         +-Parameter(type=ARRAY<INT32>, position=2)
    |   |   +-group_by_list=
    |   |     +-key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |     +-value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
    |   +-order_by_item_list=
    |     +-OrderByItem
    |       +-column_ref=
    |         +-ColumnRef(type=INT64, column=$groupby.key#3)
    +-limit=
    | +-Parameter(type=INT64, position=3)
    +-offset=
      +-Cast(INT32 -> INT64)
        +-Parameter(type=INT32, position=4)
==

[positional_parameter_types=int64,string]

insert into KeyValue (key, value)
select ? as key, ? as value;
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
+-insert_column_list=KeyValue.[Key#1, Value#2]
+-query=
| +-ProjectScan
|   +-column_list=$insert.[key#3, value#4]
|   +-expr_list=
|   | +-key#3 := Parameter(type=INT64, position=1)
|   | +-value#4 := Parameter(type=STRING, position=2)
|   +-input_scan=
|     +-SingleRowScan
+-query_output_column_list=$insert.[key#3, value#4]
+-column_access_list=WRITE,WRITE
==

[allow_undeclared_parameters]

UPDATE KeyValue SET
  key=?,
  value=?
WHERE key > ? AND ?
ASSERT_ROWS_MODIFIED ?
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
+-column_access_list=READ_WRITE,WRITE
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Parameter(parse_location=80-81, type=INT64, position=5, is_untyped=TRUE)
+-where_expr=
| +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
|   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
|   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   | +-Parameter(parse_location=51-52, type=INT64, position=3, is_untyped=TRUE)
|   +-Parameter(parse_location=57-58, type=BOOL, position=4)
+-update_item_list=
  +-UpdateItem
  | +-target=
  | | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
  | +-set_value=
  |   +-DMLValue
  |     +-value=
  |       +-Parameter(parse_location=26-27, type=INT64, position=1, is_untyped=TRUE)
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-set_value=
      +-DMLValue
        +-value=
          +-Parameter(parse_location=37-38, type=STRING, position=2)
[UNDECLARED_PARAMETERS]
INT64
STRING
INT64
BOOL
INT64
==

[positional_parameter_types=int64,string,int64,bool,int64]

UPDATE KeyValue SET
  key=?,
  value=?
WHERE key > ? AND ?
ASSERT_ROWS_MODIFIED ?
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
+-column_access_list=READ_WRITE,WRITE
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Parameter(type=INT64, position=5)
+-where_expr=
| +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
|   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
|   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   | +-Parameter(type=INT64, position=3)
|   +-Parameter(type=BOOL, position=4)
+-update_item_list=
  +-UpdateItem
  | +-target=
  | | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
  | +-set_value=
  |   +-DMLValue
  |     +-value=
  |       +-Parameter(type=INT64, position=1)
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-set_value=
      +-DMLValue
        +-value=
          +-Parameter(type=STRING, position=2)
==

[positional_parameter_types=bool,array<int32>,int64,int32]

select c, key, value, a
from (select key, value, ? as a, ? as b, ? as c from KeyValue)
where a and cast(key as int32) in unnest(b)
order by c
limit ?
offset 2
--
QueryStmt
+-output_column_list=
| +-$subquery1.c#5 AS c [INT64]
| +-KeyValue.Key#1 AS key [INT64]
| +-KeyValue.Value#2 AS value [STRING]
| +-$subquery1.a#3 AS a [BOOL]
+-query=
  +-LimitOffsetScan
    +-column_list=[$subquery1.c#5, KeyValue.Key#1, KeyValue.Value#2, $subquery1.a#3]
    +-is_ordered=TRUE
    +-input_scan=
    | +-OrderByScan
    |   +-column_list=[$subquery1.c#5, KeyValue.Key#1, KeyValue.Value#2, $subquery1.a#3]
    |   +-is_ordered=TRUE
    |   +-input_scan=
    |   | +-FilterScan
    |   |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $subquery1.a#3, $subquery1.b#4, $subquery1.c#5]
    |   |   +-input_scan=
    |   |   | +-ProjectScan
    |   |   |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $subquery1.a#3, $subquery1.b#4, $subquery1.c#5]
    |   |   |   +-expr_list=
    |   |   |   | +-a#3 := Parameter(type=BOOL, position=1)
    |   |   |   | +-b#4 := Parameter(type=ARRAY<INT32>, position=2)
    |   |   |   | +-c#5 := Parameter(type=INT64, position=3)
    |   |   |   +-input_scan=
    |   |   |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   |   +-filter_expr=
    |   |     +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
    |   |       +-ColumnRef(type=BOOL, column=$subquery1.a#3)
    |   |       +-FunctionCall(ZetaSQL:$in_array(INT32, ARRAY<INT32>) -> BOOL)
    |   |         +-Cast(INT64 -> INT32)
    |   |         | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |         +-ColumnRef(type=ARRAY<INT32>, column=$subquery1.b#4)
    |   +-order_by_item_list=
    |     +-OrderByItem
    |       +-column_ref=
    |         +-ColumnRef(type=INT64, column=$subquery1.c#5)
    +-limit=
    | +-Cast(INT32 -> INT64)
    |   +-Parameter(type=INT32, position=4)
    +-offset=
      +-Literal(type=INT64, value=2)
==

# Parameter implicit type coercion (to enum).

[positional_parameter_types=int32,int64,string]

select fn_on_TestEnum(?),
       fn_on_TestEnum(?),
       fn_on_TestEnum(?)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
| +-$query.$col2#2 AS "$col2" [BOOL]
| +-$query.$col3#3 AS "$col3" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(sample_functions:fn_on_TestEnum(ENUM<zetasql_test__.TestEnum>) -> BOOL)
    | |   +-Cast(INT32 -> ENUM<zetasql_test__.TestEnum>)
    | |     +-Parameter(type=INT32, position=1)
    | +-$col2#2 :=
    | | +-FunctionCall(sample_functions:fn_on_TestEnum(ENUM<zetasql_test__.TestEnum>) -> BOOL)
    | |   +-Cast(INT64 -> ENUM<zetasql_test__.TestEnum>)
    | |     +-Parameter(type=INT64, position=2)
    | +-$col3#3 :=
    |   +-FunctionCall(sample_functions:fn_on_TestEnum(ENUM<zetasql_test__.TestEnum>) -> BOOL)
    |     +-Cast(STRING -> ENUM<zetasql_test__.TestEnum>)
    |       +-Parameter(type=STRING, position=3)
    +-input_scan=
      +-SingleRowScan
==

# Access fields on a struct parameter.
[positional_parameter_types=struct<a string>,bool]

SELECT ?.a, ?
--

QueryStmt
+-output_column_list=
| +-$query.a#1 AS a [STRING]
| +-$query.$col2#2 AS "$col2" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[a#1, $col2#2]
    +-expr_list=
    | +-a#1 :=
    | | +-GetStructField
    | |   +-type=STRING
    | |   +-expr=
    | |   | +-Parameter(type=STRUCT<a STRING>, position=1)
    | |   +-field_idx=0
    | +-$col2#2 := Parameter(type=BOOL, position=2)
    +-input_scan=
      +-SingleRowScan
==

# Struct-like positional parameters which are not typed.
[allow_undeclared_parameters]

SELECT ?, ?.a
--
ERROR: Cannot access field a on parameter #2 whose type is unknown [at 1:13]
SELECT ?, ?.a
            ^
==

# Mix of named and positional parameters

select 1, 'foo' = ?
from TestTable
where KitchenSink.bool_val = @test_param_bool and ?;
--
ERROR: Named parameters are not supported [at 3:30]
where KitchenSink.bool_val = @test_param_bool and ?;
                             ^
==

# Mix of named and positional parameters
[parameter_mode=named]

select 1, 'foo' = ?
from TestTable
where KitchenSink.bool_val = @test_param_bool and ?;
--
ERROR: Positional parameters are not supported [at 3:51]
where KitchenSink.bool_val = @test_param_bool and ?;
                                                  ^

==

# No parameters allowed
[parameter_mode=none]

select 1, 'foo' = ?
from TestTable
where KitchenSink.bool_val = ?;
--
ERROR: Parameters are not supported [at 3:30]
where KitchenSink.bool_val = ?;
                             ^

==

# No parameters allowed
[parameter_mode=none]

select 1, 'foo' = @test_param_string
from TestTable
where KitchenSink.bool_val = @test_param_bool;
--
ERROR: Parameters are not supported [at 3:30]
where KitchenSink.bool_val = @test_param_bool;
                             ^

==

# No positional parameters defined

select 1, 'foo' = ?
from TestTable
where KitchenSink.bool_val = ? and ?;
--
ERROR: Query parameter number 2 is not defined (0 provided) [at 3:30]
where KitchenSink.bool_val = ? and ?;
                             ^

==

# Not enough positional parameters defined

[positional_parameter_types=string,bool]

select 1, 'foo' = ?
from TestTable
where KitchenSink.bool_val = ? and ?;
--
ERROR: Query parameter number 3 is not defined (2 provided) [at 3:36]
where KitchenSink.bool_val = ? and ?;
                                   ^

==

# Named parameters in positional parameter mode

[no_expect_error_location]
[parameter_mode=positional]

select 1, 'foo' = @test_param_string
from TestTable
where KitchenSink.bool_val = @test_param_bool;
--
ERROR: Named parameters are not supported [at 3:30]
where KitchenSink.bool_val = @test_param_bool;
                             ^
==

# Undeclared positional parameter type update (b/120977121)

[parameter_mode=positional]
[allow_undeclared_parameters]

SELECT CURRENT_DATE() BETWEEN TIMESTAMP(?) AND TIMESTAMP(?)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$between(DATE, DATE, DATE) -> BOOL)
    |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
    |     +-Cast(TIMESTAMP -> DATE)
    |     | +-FunctionCall(ZetaSQL:timestamp(STRING, optional(0) STRING) -> TIMESTAMP)
    |     |   +-Parameter(parse_location=40-41, type=STRING, position=1)
    |     +-Cast(TIMESTAMP -> DATE)
    |       +-FunctionCall(ZetaSQL:timestamp(STRING, optional(0) STRING) -> TIMESTAMP)
    |         +-Parameter(parse_location=57-58, type=STRING, position=2)
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
STRING
STRING
==

# The following are regression tests against resolving query parameters that
# comes from user input. It detects breakage after removing resolving query
# parameter in AnalyzeSubstitute as part of fixing b/233941129.
[parameter_mode=positional]
[allow_undeclared_parameters]

SELECT ARRAY_FIRST([1, 3, ?])
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:array_first(ARRAY<INT64> input_array) -> INT64)
    |     +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |       +-Literal(type=INT64, value=1)
    |       +-Literal(type=INT64, value=3)
    |       +-Parameter(parse_location=26-27, type=INT64, position=1, is_untyped=TRUE)
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
INT64
==

[positional_parameter_types=int64]

SELECT ARRAY_FIRST([1, 3, ?])
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:array_first(ARRAY<INT64> input_array) -> INT64)
    |     +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |       +-Literal(type=INT64, value=1)
    |       +-Literal(type=INT64, value=3)
    |       +-Parameter(type=INT64, position=1)
    +-input_scan=
      +-SingleRowScan
