select as value 5
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$value_column" [INT64]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=5)
    +-input_scan=
      +-SingleRowScan
==

select as value KitchenSink from TestTable
--
QueryStmt
+-output_column_list=
| +-TestTable.KitchenSink#3 AS "$value_column" [PROTO<zetasql_test__.KitchenSinkPB>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[TestTable.KitchenSink#3]
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

select as value key, KitchenSink from TestTable
--
ERROR: SELECT AS VALUE query must have exactly one column [at 1:8]
select as value key, KitchenSink from TestTable
       ^
==

select as value 5, 7, 8
--
ERROR: SELECT AS VALUE query must have exactly one column [at 1:8]
select as value 5, 7, 8
       ^
==

select as value 5 as abc
--
QueryStmt
+-output_column_list=
| +-$query.abc#1 AS "$value_column" [INT64]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$query.abc#1]
    +-expr_list=
    | +-abc#1 := Literal(type=INT64, value=5)
    +-input_scan=
      +-SingleRowScan
==

# The column name is gone because we just have a value.
select abc from (
  select as value 5 as abc
)
--
ERROR: Unrecognized name: abc [at 1:8]
select abc from (
       ^
==

# The range variable resolves to the integer, not a row struct.
select def from (
  select as value 5 as abc
) def
--
QueryStmt
+-output_column_list=
| +-def.abc#1 AS def [INT64]
+-query=
  +-ProjectScan
    +-column_list=[def.abc#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[def.abc#1]
        +-expr_list=
        | +-abc#1 := Literal(type=INT64, value=5)
        +-input_scan=
          +-SingleRowScan
==

select (select as value 123), array(select as value 123)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
| +-$query.$col2#4 AS "$col2" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#3, $col2#4]
    +-expr_list=
    | +-$col1#3 :=
    | | +-SubqueryExpr
    | |   +-type=INT64
    | |   +-subquery_type=SCALAR
    | |   +-subquery=
    | |     +-ProjectScan
    | |       +-column_list=[$expr_subquery.$col1#1]
    | |       +-expr_list=
    | |       | +-$col1#1 := Literal(type=INT64, value=123)
    | |       +-input_scan=
    | |         +-SingleRowScan
    | +-$col2#4 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=ARRAY
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#2]
    |         +-expr_list=
    |         | +-$col1#2 := Literal(type=INT64, value=123)
    |         +-input_scan=
    |           +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

select as value struct()
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$value_column" [STRUCT<>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<>, value={})
    +-input_scan=
      +-SingleRowScan
==

select as value new zetasql_test__.TestExtraPB()
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$value_column" [PROTO<zetasql_test__.TestExtraPB>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := MakeProto(type=PROTO<zetasql_test__.TestExtraPB>)
    +-input_scan=
      +-SingleRowScan
==

# We always get the source proto out, but with SELECT AS VALUE, we get it as
# a value table.
select {{|as value}} t
from KitchenSinkValueTable t
where t.int64_key_2 < 5
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-KitchenSinkValueTable.value#1 AS t [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[KitchenSinkValueTable.value#1]
    +-input_scan=
      +-FilterScan
        +-column_list=[KitchenSinkValueTable.value#1]
        +-input_scan=
        | +-TableScan(column_list=[KitchenSinkValueTable.value#1], table=KitchenSinkValueTable, column_index_list=[0], alias='t')
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            +-GetProtoField
            | +-type=INT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
            | +-field_descriptor=int64_key_2
            +-Literal(type=INT64, value=5)
--
ALTERNATION GROUP: as value
--
QueryStmt
+-output_column_list=
| +-KitchenSinkValueTable.value#1 AS "$value_column" [PROTO<zetasql_test__.KitchenSinkPB>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[KitchenSinkValueTable.value#1]
    +-input_scan=
      +-FilterScan
        +-column_list=[KitchenSinkValueTable.value#1]
        +-input_scan=
        | +-TableScan(column_list=[KitchenSinkValueTable.value#1], table=KitchenSinkValueTable, column_index_list=[0], alias='t')
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            +-GetProtoField
            | +-type=INT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
            | +-field_descriptor=int64_key_2
            +-Literal(type=INT64, value=5)
==

select t
from (select as value t from KitchenSinkValueTable t) t
--
QueryStmt
+-output_column_list=
| +-KitchenSinkValueTable.value#1 AS t [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[KitchenSinkValueTable.value#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[KitchenSinkValueTable.value#1]
        +-input_scan=
          +-TableScan(column_list=[KitchenSinkValueTable.value#1], table=KitchenSinkValueTable, column_index_list=[0], alias='t')
==

with q as (select {{|as struct|as value}}
               cast('''int32_val1: 1''' as zetasql_test__.TestExtraPB))
select q from q
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.q#4 AS q [STRUCT<PROTO<zetasql_test__.TestExtraPB>>]
+-query=
  +-WithScan
    +-column_list=[$query.q#4]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='q'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[q.$col1#1]
    |       +-expr_list=
    |       | +-$col1#1 :=
    |       |   +-Cast(STRING -> PROTO<zetasql_test__.TestExtraPB>)
    |       |     +-Literal(type=STRING, value='int32_val1: 1')
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$query.q#4]
        +-expr_list=
        | +-q#4 :=
        |   +-MakeStruct
        |     +-type=STRUCT<PROTO<zetasql_test__.TestExtraPB>>
        |     +-field_list=
        |       +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=q.$col1#2)
        +-input_scan=
          +-WithRefScan(column_list=[q.$col1#2], with_query_name="q")
--
ALTERNATION GROUP: as struct
--
QueryStmt
+-output_column_list=
| +-q.$struct#3 AS q [STRUCT<PROTO<zetasql_test__.TestExtraPB>>]
+-query=
  +-WithScan
    +-column_list=[q.$struct#3]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='q'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[$make_struct.$struct#2]
    |       +-expr_list=
    |       | +-$struct#2 :=
    |       |   +-MakeStruct
    |       |     +-type=STRUCT<PROTO<zetasql_test__.TestExtraPB>>
    |       |     +-field_list=
    |       |       +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=q.$col1#1)
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=[q.$col1#1]
    |           +-expr_list=
    |           | +-$col1#1 :=
    |           |   +-Cast(STRING -> PROTO<zetasql_test__.TestExtraPB>)
    |           |     +-Literal(type=STRING, value='int32_val1: 1')
    |           +-input_scan=
    |             +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[q.$struct#3]
        +-input_scan=
          +-WithRefScan(column_list=[q.$struct#3], with_query_name="q")
--
ALTERNATION GROUP: as value
--
QueryStmt
+-output_column_list=
| +-q.$value_column#2 AS q [PROTO<zetasql_test__.TestExtraPB>]
+-query=
  +-WithScan
    +-column_list=[q.$value_column#2]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='q'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[q.$col1#1]
    |       +-expr_list=
    |       | +-$col1#1 :=
    |       |   +-Cast(STRING -> PROTO<zetasql_test__.TestExtraPB>)
    |       |     +-Literal(type=STRING, value='int32_val1: 1')
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[q.$value_column#2]
        +-input_scan=
          +-WithRefScan(column_list=[q.$value_column#2], with_query_name="q")
==

select as value value value
from (select 123 value)
--
QueryStmt
+-output_column_list=
| +-$subquery1.value#1 AS "$value_column" [INT64]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$subquery1.value#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.value#1]
        +-expr_list=
        | +-value#1 := Literal(type=INT64, value=123)
        +-input_scan=
          +-SingleRowScan
==

select distinct as value key from TestTable
--
QueryStmt
+-output_column_list=
| +-$distinct.key#4 AS "$value_column" [INT32]
+-is_value_table=TRUE
+-query=
  +-AggregateScan
    +-column_list=[$distinct.key#4]
    +-input_scan=
    | +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
    +-group_by_list=
      +-key#4 := ColumnRef(type=INT32, column=TestTable.key#1)
==

select as value 5
union all
select 6
--
QueryStmt
+-output_column_list=
| +-$union_all.$value_column#3 AS "$value_column" [INT64]
+-is_value_table=TRUE
+-query=
  +-SetOperationScan
    +-column_list=[$union_all.$value_column#3]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$union_all1.$col1#1]
      | |   +-expr_list=
      | |   | +-$col1#1 := Literal(type=INT64, value=5)
      | |   +-input_scan=
      | |     +-SingleRowScan
      | +-output_column_list=[$union_all1.$col1#1]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$union_all2.$col1#2]
        |   +-expr_list=
        |   | +-$col1#2 := Literal(type=INT64, value=6)
        |   +-input_scan=
        |     +-SingleRowScan
        +-output_column_list=[$union_all2.$col1#2]
==

select 5
union all
select as value 6
--
QueryStmt
+-output_column_list=
| +-$union_all.$col1#3 AS "$col1" [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$union_all.$col1#3]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$union_all1.$col1#1]
      | |   +-expr_list=
      | |   | +-$col1#1 := Literal(type=INT64, value=5)
      | |   +-input_scan=
      | |     +-SingleRowScan
      | +-output_column_list=[$union_all1.$col1#1]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$union_all2.$col1#2]
        |   +-expr_list=
        |   | +-$col1#2 := Literal(type=INT64, value=6)
        |   +-input_scan=
        |     +-SingleRowScan
        +-output_column_list=[$union_all2.$col1#2]
==

select as value 5
union all
select as value 1.0
--
QueryStmt
+-output_column_list=
| +-$union_all.$value_column#3 AS "$value_column" [DOUBLE]
+-is_value_table=TRUE
+-query=
  +-SetOperationScan
    +-column_list=[$union_all.$value_column#3]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$union_all1_cast.$col1#4]
      | |   +-expr_list=
      | |   | +-$col1#4 := Literal(type=DOUBLE, value=5)
      | |   +-input_scan=
      | |     +-ProjectScan
      | |       +-column_list=[$union_all1.$col1#1]
      | |       +-expr_list=
      | |       | +-$col1#1 := Literal(type=INT64, value=5)
      | |       +-input_scan=
      | |         +-SingleRowScan
      | +-output_column_list=[$union_all1_cast.$col1#4]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$union_all2.$col1#2]
        |   +-expr_list=
        |   | +-$col1#2 := Literal(type=DOUBLE, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-output_column_list=[$union_all2.$col1#2]
==

# Output a value table with array type.
select as value [1,2,3]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$value_column" [ARRAY<INT64>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    +-input_scan=
      +-SingleRowScan
