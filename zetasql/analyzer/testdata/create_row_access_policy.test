# Create unnamed policy.

create row access policy on KeyValue grant to ('foo@google.com') filter using(key=123);
--
CreateRowAccessPolicyStmt
+-target_name_path=KeyValue
+-grantee_list=['foo@google.com']
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-Literal(type=INT64, value=123)
+-predicate_str='key = 123'
==

# Create named policy.

create row access policy p1 on KeyValue grant to ('foo@google.com') filter using(key = 321);
--
CreateRowAccessPolicyStmt
+-name='p1'
+-target_name_path=KeyValue
+-grantee_list=['foo@google.com']
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-Literal(type=INT64, value=321)
+-predicate_str='key = 321'
==

# Create unnamed policy, multiple users.

[language_features={{|PARAMETERS_IN_GRANTEE_LIST}}]
create row access policy on KeyValue
grant to ('foo@google.com',{{| @test_param_string,}} 'mdbuser/bar')
filter using(key = 123);
--
ALTERNATION GROUP: <empty>
--
CreateRowAccessPolicyStmt
+-target_name_path=KeyValue
+-grantee_list=['foo@google.com', 'mdbuser/bar']
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-Literal(type=INT64, value=123)
+-predicate_str='key = 123'
--
ALTERNATION GROUP:  @test_param_string,
--
ERROR: The GRANTEE list only supports string literals, not parameters [at 2:29]
grant to ('foo@google.com', @test_param_string, 'mdbuser/bar')
                            ^
--
ALTERNATION GROUP: PARAMETERS_IN_GRANTEE_LIST,
--
CreateRowAccessPolicyStmt
+-target_name_path=KeyValue
+-grantee_expr_list=
| +-Literal(type=STRING, value='foo@google.com')
| +-Literal(type=STRING, value='mdbuser/bar')
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-Literal(type=INT64, value=123)
+-predicate_str='key = 123'
--
ALTERNATION GROUP: PARAMETERS_IN_GRANTEE_LIST, @test_param_string,
--
CreateRowAccessPolicyStmt
+-target_name_path=KeyValue
+-grantee_expr_list=
| +-Literal(type=STRING, value='foo@google.com')
| +-Parameter(type=STRING, name='test_param_string')
| +-Literal(type=STRING, value='mdbuser/bar')
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-Literal(type=INT64, value=123)
+-predicate_str='key = 123'
==

# Create named policy, multiple users.

create row access policy p1 on KeyValue grant to ("mdbgroup/foo", 'bar@google.com')
filter using(key = +321);
--
CreateRowAccessPolicyStmt
+-name='p1'
+-target_name_path=KeyValue
+-grantee_list=["mdbgroup/foo", 'bar@google.com']
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-Literal(type=INT64, value=321)
+-predicate_str='key = +321'
==

# Create unnamed policy, without grantee list.
create row access policy on KeyValue
filter using(key = 321);
--
ERROR: Omitting the GRANT TO clause is not supported for unnamed row access policies [at 1:1]
create row access policy on KeyValue
^
==

# Create named policy, without grantee list.
create row access policy p1 on KeyValue
filter using(key = 321);
--
CreateRowAccessPolicyStmt
+-name='p1'
+-target_name_path=KeyValue
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-Literal(type=INT64, value=321)
+-predicate_str='key = 321'
==

# Create named policy, predicate with function call.

create row access policy p1 on KeyValue grant to ('foo@google.com') filter using(abs(key) = 321);
--
CreateRowAccessPolicyStmt
+-name='p1'
+-target_name_path=KeyValue
+-grantee_list=['foo@google.com']
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-FunctionCall(ZetaSQL:abs(INT64) -> INT64)
|   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-Literal(type=INT64, value=321)
+-predicate_str='abs(key) = 321'
==

# Create named policy, predicate with parameter.

create row access policy p1 on KeyValue grant to ('foo@google.com')
filter using(value = @test_param_string);
--
CreateRowAccessPolicyStmt
+-name='p1'
+-target_name_path=KeyValue
+-grantee_list=['foo@google.com']
+-table_scan=
| +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
+-predicate=
| +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
|   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
|   +-Parameter(type=STRING, name='test_param_string')
+-predicate_str='value = @test_param_string'
==

# Create named policy, predicate with in subquery.

create row access policy p1 on KeyValue grant to ('foo@google.com')
filter using(abs(key) in (select 123));
--
CreateRowAccessPolicyStmt
+-name='p1'
+-target_name_path=KeyValue
+-grantee_list=['foo@google.com']
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-SubqueryExpr
|   +-type=BOOL
|   +-subquery_type=IN
|   +-in_expr=
|   | +-FunctionCall(ZetaSQL:abs(INT64) -> INT64)
|   |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-subquery=
|     +-ProjectScan
|       +-column_list=[$expr_subquery.$col1#3]
|       +-expr_list=
|       | +-$col1#3 := Literal(type=INT64, value=123)
|       +-input_scan=
|         +-SingleRowScan
+-predicate_str='abs(key) IN (\n  SELECT\n    123\n)'
==

# Create named policy, predicate with subquery of another table.
# The ExtractTableNames tests don't work because the table in the subquery
# is not included in extracted tables.
[no_test_extract_table_names]

create row access policy p1 on KeyValue grant to ('foo@google.com')
filter using(abs(key) in (select key from KeyValue2));
--
CreateRowAccessPolicyStmt
+-name='p1'
+-target_name_path=KeyValue
+-grantee_list=['foo@google.com']
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-SubqueryExpr
|   +-type=BOOL
|   +-subquery_type=IN
|   +-in_expr=
|   | +-FunctionCall(ZetaSQL:abs(INT64) -> INT64)
|   |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-subquery=
|     +-ProjectScan
|       +-column_list=[KeyValue2.Key#3]
|       +-input_scan=
|         +-TableScan(column_list=[KeyValue2.Key#3], table=KeyValue2, column_index_list=[0])
+-predicate_str='abs(key) IN (\n  SELECT\n    key\n  FROM\n    KeyValue2\n)'
==

# Using table name as alias rather than full name should work too.
# The ExtractTableNames tests don't work because the extracted table name has
# the catalog name prefix, while Table::FullName() doesn't have it.
[no_test_extract_table_names]

create row access policy p1 on nested_catalog.KeyValue grant to ('foo@google.com')
filter using(KeyValue.key = 321);
--
CreateRowAccessPolicyStmt
+-name='p1'
+-target_name_path=nested_catalog.KeyValue
+-grantee_list=['foo@google.com']
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-Literal(type=INT64, value=321)
+-predicate_str='KeyValue.key = 321'
==

# Create policy on struct value table.

create row access policy on TestStructValueTable grant to ('foo@google.com')
filter using(a = 321 and TestStructValueTable.b = 'abc');
--
CreateRowAccessPolicyStmt
+-target_name_path=TestStructValueTable
+-grantee_list=['foo@google.com']
+-table_scan=
| +-TableScan(column_list=[TestStructValueTable.value#1], table=TestStructValueTable, column_index_list=[0])
+-predicate=
| +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
|   +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
|   | +-GetStructField
|   | | +-type=INT32
|   | | +-expr=
|   | | | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=TestStructValueTable.value#1)
|   | | +-field_idx=0
|   | +-Literal(type=INT32, value=321)
|   +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
|     +-GetStructField
|     | +-type=STRING
|     | +-expr=
|     | | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=TestStructValueTable.value#1)
|     | +-field_idx=1
|     +-Literal(type=STRING, value='abc')
+-predicate_str='a = 321 AND TestStructValueTable.b = 'abc''
==

# Create policy on int32 value table.

create row access policy on Int32ValueTable grant to ('foo@google.com')
filter using(Int32ValueTable = 321);
--
CreateRowAccessPolicyStmt
+-target_name_path=Int32ValueTable
+-grantee_list=['foo@google.com']
+-table_scan=
| +-TableScan(column_list=[Int32ValueTable.value#1], table=Int32ValueTable, column_index_list=[0])
+-predicate=
| +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
|   +-ColumnRef(type=INT32, column=Int32ValueTable.value#1)
|   +-Literal(type=INT32, value=321)
+-predicate_str='Int32ValueTable = 321'
==

# Create policy with reference to another table

create row access policy p1 on KeyValue grant to ('foo@google.com')
filter using(key in (SELECT Int32ValueTable FROM Int32ValueTable));
--
CreateRowAccessPolicyStmt
+-name='p1'
+-target_name_path=KeyValue
+-grantee_list=['foo@google.com']
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-SubqueryExpr
|   +-type=BOOL
|   +-subquery_type=IN
|   +-in_expr=
|   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-subquery=
|     +-ProjectScan
|       +-column_list=[$in_subquery_cast.value#5]
|       +-expr_list=
|       | +-value#5 :=
|       |   +-Cast(INT32 -> INT64)
|       |     +-ColumnRef(type=INT32, column=Int32ValueTable.value#3)
|       +-input_scan=
|         +-ProjectScan
|           +-column_list=[Int32ValueTable.value#3]
|           +-input_scan=
|             +-TableScan(column_list=[Int32ValueTable.value#3], table=Int32ValueTable, column_index_list=[0])
+-predicate_str='key IN (\n  SELECT\n    Int32ValueTable\n  FROM\n    Int32ValueTable\n)'
==

# Create or replace named policy.

create or replace row access policy p1 on KeyValue grant to ('foo@google.com')
filter using(key = 321);
--
CreateRowAccessPolicyStmt
+-create_mode=CREATE_OR_REPLACE
+-name='p1'
+-target_name_path=KeyValue
+-grantee_list=['foo@google.com']
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-Literal(type=INT64, value=321)
+-predicate_str='key = 321'
==

# Create named policy if not exists.

create row access policy if not exists p1 on KeyValue grant to ('foo@google.com')
filter using(key = 321);
--
CreateRowAccessPolicyStmt
+-create_mode=CREATE_IF_NOT_EXISTS
+-name='p1'
+-target_name_path=KeyValue
+-grantee_list=['foo@google.com']
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-Literal(type=INT64, value=321)
+-predicate_str='key = 321'
==

create row access policy p1 on KeyValue grant to ('foo@google.com') filter using (NULL);
--
CreateRowAccessPolicyStmt
+-name='p1'
+-target_name_path=KeyValue
+-grantee_list=['foo@google.com']
+-table_scan=
| +-TableScan(table=KeyValue)
+-predicate=
| +-Literal(type=BOOL, value=NULL)
+-predicate_str='NULL'
==

# Create or replace named policy if not exists.

create or replace row access policy if not exists p1 on KeyValue grant to ('foo@google.com')
filter using(key = 321);
--
ERROR: CREATE ROW ACCESS POLICY cannot have both OR REPLACE and IF NOT EXISTS [at 1:1]
create or replace row access policy if not exists p1 on KeyValue grant to ("f...
^
==

# Create or replace unnamed policy.

create or replace row access policy on KeyValue grant to ('foo@google.com') filter using(key = 321);
--
ERROR: CREATE ROW ACCESS POLICY with CREATE_OR_REPLACE but policy name not specified [at 1:1]
create or replace row access policy on KeyValue grant to ('foo@google.com') f...
^
==

# Create unnamed policy if not exists.

create row access policy if not exists on KeyValue grant to ('foo@google.com')
filter using(key = 321);
--
ERROR: CREATE ROW ACCESS POLICY with CREATE_IF_NOT_EXISTS but policy name not specified [at 1:1]
create row access policy if not exists on KeyValue grant to ('foo@google.com')
^
==

# Creating on unknown table.

create row access policy on unknown grant to ('foo@google.com') filter using(key = 123);
--
ERROR: Table not found: unknown [at 1:29]
create row access policy on unknown grant to ('foo@google.com') filter using(...
                            ^
==

# Predicate with unknown column.

create row access policy p1 on KeyValue grant to ('foo@google.com') filter using(k = 100);
--
ERROR: Unrecognized name: k [at 1:82]
...KeyValue grant to ('foo@google.com') filter using(k = 100);
                                                     ^
==

# Predicate with wrong type.

create row access policy p1 on KeyValue grant to ('foo@google.com') filter using(key);
--
ERROR: USING clause should return type BOOL, but returns INT64 [at 1:82]
...KeyValue grant to ('foo@google.com') filter using(key);
                                                     ^
==

# Predicate with wrong type (literal).

create row access policy p1 on KeyValue grant to ('foo@google.com') filter using(100);
--
ERROR: USING clause should return type BOOL, but returns INT64 [at 1:82]
...KeyValue grant to ('foo@google.com') filter using(100);
                                                     ^
==

# Predicate with aggregate function.

create row access policy p1 on KeyValue grant to ('foo@google.com') filter using(count(*) = 100);
--
ERROR: Aggregate function COUNT(*) not allowed in CREATE ROW ACCESS POLICY statement [at 1:82]
...KeyValue grant to ('foo@google.com') filter using(count(*) = 100);
                                                     ^
==

# GRANT TO must include parentheses.
create row access policy p1 on KeyValue grant to 'foo@google.com' filter using(Key = 321);
--
ERROR: Syntax error: Expected "(" but got string literal 'foo@google.com' [at 1:50]
create row access policy p1 on KeyValue grant to 'foo@google.com' filter usin...
                                                 ^
==

# Omitting new syntax keywords throws an error.

create row {{access|}} policy p1 on KeyValue {{grant to ('foo@google.com')|to 'foo@google.com'}}
{{filter|}} using (key = 321);
--
ALTERNATION GROUP: access,grant to ('foo@google.com'),filter
--
CreateRowAccessPolicyStmt
+-name='p1'
+-target_name_path=KeyValue
+-grantee_list=['foo@google.com']
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-predicate=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-Literal(type=INT64, value=321)
+-predicate_str='key = 321'
--
ALTERNATION GROUP: access,grant to ('foo@google.com'),
--
ERROR: Expected keyword FILTER before USING [at 1:68]
create row access policy p1 on KeyValue grant to ('foo@google.com')
                                                                   ^
--
ALTERNATION GROUPS:
    access,to 'foo@google.com',filter
    access,to 'foo@google.com',
--
ERROR: Expected keyword GRANT before TO [at 1:41]
create row access policy p1 on KeyValue to 'foo@google.com'
                                        ^
--
ALTERNATION GROUPS:
    grant to ('foo@google.com'),filter
    grant to ('foo@google.com'),
--
ERROR: Expected keyword ACCESS between ROW and POLICY [at 1:1]
create row  policy p1 on KeyValue grant to ('foo@google.com')
^
--
ALTERNATION GROUPS:
    to 'foo@google.com',filter
    to 'foo@google.com',
--
ERROR: Expected keyword ACCESS between ROW and POLICY [at 1:1]
create row  policy p1 on KeyValue to 'foo@google.com'
^
