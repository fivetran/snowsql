# Tests for resolving table-valued functions including model arguments.
#
################################################################################
#
# Positive test cases
#
################################################################################
#
[default no_java]
[default also_show_signature_mismatch_details]
[default language_features=TABLE_VALUED_FUNCTIONS]
SELECT * FROM tvf_one_relation_one_model_arg_with_fixed_output(
    (select key,
    value from keyvalue), model onedoublemodel)
--
QueryStmt
+-output_column_list=
| +-tvf_one_relation_one_model_arg_with_fixed_output.double#3 AS double [DOUBLE]
| +-tvf_one_relation_one_model_arg_with_fixed_output.string#4 AS string [STRING]
+-query=
  +-ProjectScan
    +-column_list=tvf_one_relation_one_model_arg_with_fixed_output.[double#3, string#4]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_one_relation_one_model_arg_with_fixed_output.[double#3, string#4]
        +-tvf=tvf_one_relation_one_model_arg_with_fixed_output((TABLE<key INT64, value STRING>, ANY MODEL) -> TABLE<double DOUBLE, string STRING>)
        +-signature=(TABLE<key INT64, value STRING>, ANY MODEL) -> TABLE<double DOUBLE, string STRING>
        +-argument_list=
        | +-FunctionArgument
        | | +-scan=
        | | | +-ProjectScan
        | | |   +-column_list=KeyValue.[Key#1, Value#2]
        | | |   +-input_scan=
        | | |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        | | +-argument_column_list=KeyValue.[Key#1, Value#2]
        | +-FunctionArgument
        |   +-model=
        |     +-Model(model=OneDoubleModel)
        +-column_index_list=[0, 1]
==

SELECT * FROM tvf_one_relation_one_model_arg_with_fixed_output(
    table keyvalue, model onedoublemodel)
--
QueryStmt
+-output_column_list=
| +-tvf_one_relation_one_model_arg_with_fixed_output.double#3 AS double [DOUBLE]
| +-tvf_one_relation_one_model_arg_with_fixed_output.string#4 AS string [STRING]
+-query=
  +-ProjectScan
    +-column_list=tvf_one_relation_one_model_arg_with_fixed_output.[double#3, string#4]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_one_relation_one_model_arg_with_fixed_output.[double#3, string#4]
        +-tvf=tvf_one_relation_one_model_arg_with_fixed_output((TABLE<key INT64, value STRING>, ANY MODEL) -> TABLE<double DOUBLE, string STRING>)
        +-signature=(TABLE<Key INT64, Value STRING>, ANY MODEL) -> TABLE<double DOUBLE, string STRING>
        +-argument_list=
        | +-FunctionArgument
        | | +-scan=
        | | | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        | | +-argument_column_list=KeyValue.[Key#1, Value#2]
        | +-FunctionArgument
        |   +-model=
        |     +-Model(model=OneDoubleModel)
        +-column_index_list=[0, 1]
==

SELECT double, string FROM tvf_one_relation_one_model_arg_with_fixed_output(
    table keyvalue, model OneDoubleOneStringModel)
--
QueryStmt
+-output_column_list=
| +-tvf_one_relation_one_model_arg_with_fixed_output.double#3 AS double [DOUBLE]
| +-tvf_one_relation_one_model_arg_with_fixed_output.string#4 AS string [STRING]
+-query=
  +-ProjectScan
    +-column_list=tvf_one_relation_one_model_arg_with_fixed_output.[double#3, string#4]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_one_relation_one_model_arg_with_fixed_output.[double#3, string#4]
        +-tvf=tvf_one_relation_one_model_arg_with_fixed_output((TABLE<key INT64, value STRING>, ANY MODEL) -> TABLE<double DOUBLE, string STRING>)
        +-signature=(TABLE<Key INT64, Value STRING>, ANY MODEL) -> TABLE<double DOUBLE, string STRING>
        +-argument_list=
        | +-FunctionArgument
        | | +-scan=
        | | | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        | | +-argument_column_list=KeyValue.[Key#1, Value#2]
        | +-FunctionArgument
        |   +-model=
        |     +-Model(model=OneDoubleOneStringModel)
        +-column_index_list=[0, 1]
==

SELECT * FROM tvf_one_relation_one_model_arg_with_fixed_output(
    table keyvalue, model onedoubletwooutputmodel)
--
QueryStmt
+-output_column_list=
| +-tvf_one_relation_one_model_arg_with_fixed_output.double#3 AS double [DOUBLE]
| +-tvf_one_relation_one_model_arg_with_fixed_output.string#4 AS string [STRING]
+-query=
  +-ProjectScan
    +-column_list=tvf_one_relation_one_model_arg_with_fixed_output.[double#3, string#4]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_one_relation_one_model_arg_with_fixed_output.[double#3, string#4]
        +-tvf=tvf_one_relation_one_model_arg_with_fixed_output((TABLE<key INT64, value STRING>, ANY MODEL) -> TABLE<double DOUBLE, string STRING>)
        +-signature=(TABLE<Key INT64, Value STRING>, ANY MODEL) -> TABLE<double DOUBLE, string STRING>
        +-argument_list=
        | +-FunctionArgument
        | | +-scan=
        | | | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        | | +-argument_column_list=KeyValue.[Key#1, Value#2]
        | +-FunctionArgument
        |   +-model=
        |     +-Model(model=OneDoubleTwoOutputModel)
        +-column_index_list=[0, 1]
==

SELECT * FROM tvf_two_models_with_fixed_output(
    model OneDoubleModel, model onedoubletwooutputmodel)
--
QueryStmt
+-output_column_list=
| +-tvf_two_models_with_fixed_output.label#1 AS label [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[tvf_two_models_with_fixed_output.label#1]
    +-input_scan=
      +-TVFScan
        +-column_list=[tvf_two_models_with_fixed_output.label#1]
        +-tvf=tvf_two_models_with_fixed_output((ANY MODEL, ANY MODEL) -> TABLE<label DOUBLE>)
        +-signature=(ANY MODEL, ANY MODEL) -> TABLE<label DOUBLE>
        +-argument_list=
        | +-FunctionArgument
        | | +-model=
        | |   +-Model(model=OneDoubleModel)
        | +-FunctionArgument
        |   +-model=
        |     +-Model(model=OneDoubleTwoOutputModel)
        +-column_index_list=[0]
==

# Test with model and optional scalar and named table.
[language_features=TABLE_VALUED_FUNCTIONS,NAMED_ARGUMENTS]
select * from tvf_model_optional_scalar_named_table(model onedoublemodel,
                                                    STRUCT(NULL), (SELECT 1))
--
QueryStmt
+-output_column_list=
| +-tvf_model_optional_scalar_named_table.column_bool#2 AS column_bool [BOOL]
| +-tvf_model_optional_scalar_named_table.column_bytes#3 AS column_bytes [BYTES]
+-query=
  +-ProjectScan
    +-column_list=tvf_model_optional_scalar_named_table.[column_bool#2, column_bytes#3]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_model_optional_scalar_named_table.[column_bool#2, column_bytes#3]
        +-tvf=tvf_model_optional_scalar_named_table((ANY MODEL, optional ANY TYPE, optional ANY TABLE foobar) -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-signature=(ANY MODEL, STRUCT<INT64>, TABLE<$col1 INT64>) -> TABLE<column_bool BOOL, column_bytes BYTES>
        +-argument_list=
        | +-FunctionArgument
        | | +-model=
        | |   +-Model(model=OneDoubleModel)
        | +-FunctionArgument
        | | +-expr=
        | |   +-MakeStruct
        | |     +-type=STRUCT<INT64>
        | |     +-field_list=
        | |       +-Literal(type=INT64, value=NULL)
        | +-FunctionArgument
        |   +-scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$subquery1.$col1#1]
        |   |   +-expr_list=
        |   |   | +-$col1#1 := Literal(type=INT64, value=1)
        |   |   +-input_scan=
        |   |     +-SingleRowScan
        |   +-argument_column_list=[$subquery1.$col1#1]
        +-column_index_list=[0, 1]
==

# Test with model and optional scalar and named table.
[language_features=TABLE_VALUED_FUNCTIONS,NAMED_ARGUMENTS]
select * from tvf_model_optional_scalar_named_table(model onedoublemodel,
                                                    foobar=>(SELECT 1))
--
QueryStmt
+-output_column_list=
| +-tvf_model_optional_scalar_named_table.column_bool#2 AS column_bool [BOOL]
| +-tvf_model_optional_scalar_named_table.column_bytes#3 AS column_bytes [BYTES]
+-query=
  +-ProjectScan
    +-column_list=tvf_model_optional_scalar_named_table.[column_bool#2, column_bytes#3]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_model_optional_scalar_named_table.[column_bool#2, column_bytes#3]
        +-tvf=tvf_model_optional_scalar_named_table((ANY MODEL, optional ANY TYPE, optional ANY TABLE foobar) -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-signature=(ANY MODEL, null INT64, TABLE<$col1 INT64>) -> TABLE<column_bool BOOL, column_bytes BYTES>
        +-argument_list=
        | +-FunctionArgument
        | | +-model=
        | |   +-Model(model=OneDoubleModel)
        | +-FunctionArgument
        | | +-expr=
        | |   +-Literal(type=INT64, value=NULL)
        | +-FunctionArgument
        |   +-scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$subquery1.$col1#1]
        |   |   +-expr_list=
        |   |   | +-$col1#1 := Literal(type=INT64, value=1)
        |   |   +-input_scan=
        |   |     +-SingleRowScan
        |   +-argument_column_list=[$subquery1.$col1#1]
        +-column_index_list=[0, 1]
==

# Test with model and optional scalar and named table.
[language_features=TABLE_VALUED_FUNCTIONS,NAMED_ARGUMENTS]
select * from tvf_model_optional_scalar_named_table(model onedoublemodel,
                                                    STRUCT(NULL))
--
QueryStmt
+-output_column_list=
| +-tvf_model_optional_scalar_named_table.column_bool#1 AS column_bool [BOOL]
| +-tvf_model_optional_scalar_named_table.column_bytes#2 AS column_bytes [BYTES]
+-query=
  +-ProjectScan
    +-column_list=tvf_model_optional_scalar_named_table.[column_bool#1, column_bytes#2]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_model_optional_scalar_named_table.[column_bool#1, column_bytes#2]
        +-tvf=tvf_model_optional_scalar_named_table((ANY MODEL, optional ANY TYPE, optional ANY TABLE foobar) -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-signature=(ANY MODEL, STRUCT<INT64>) -> TABLE<column_bool BOOL, column_bytes BYTES>
        +-argument_list=
        | +-FunctionArgument
        | | +-model=
        | |   +-Model(model=OneDoubleModel)
        | +-FunctionArgument
        |   +-expr=
        |     +-MakeStruct
        |       +-type=STRUCT<INT64>
        |       +-field_list=
        |         +-Literal(type=INT64, value=NULL)
        +-column_index_list=[0, 1]
==

# Test with model and string and optional table.
[language_features=TABLE_VALUED_FUNCTIONS,NAMED_ARGUMENTS]
select * from tvf_model_optional_table_named_string_default(
             model onedoublemodel, (select 'abc'))
--
QueryStmt
+-output_column_list=
| +-tvf_model_optional_table_named_string_default.column_bool#2 AS column_bool [BOOL]
| +-tvf_model_optional_table_named_string_default.column_bytes#3 AS column_bytes [BYTES]
+-query=
  +-ProjectScan
    +-column_list=tvf_model_optional_table_named_string_default.[column_bool#2, column_bytes#3]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_model_optional_table_named_string_default.[column_bool#2, column_bytes#3]
        +-tvf=tvf_model_optional_table_named_string_default((ANY MODEL, optional ANY TABLE, optional STRING {default_value: 'default'} foobar) -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-signature=(ANY MODEL, TABLE<$col1 STRING>, literal STRING) -> TABLE<column_bool BOOL, column_bytes BYTES>
        +-argument_list=
        | +-FunctionArgument
        | | +-model=
        | |   +-Model(model=OneDoubleModel)
        | +-FunctionArgument
        | | +-scan=
        | | | +-ProjectScan
        | | |   +-column_list=[$subquery1.$col1#1]
        | | |   +-expr_list=
        | | |   | +-$col1#1 := Literal(type=STRING, value='abc')
        | | |   +-input_scan=
        | | |     +-SingleRowScan
        | | +-argument_column_list=[$subquery1.$col1#1]
        | +-FunctionArgument
        |   +-expr=
        |     +-Literal(type=STRING, value='default')
        +-column_index_list=[0, 1]
==

# Test with model and string and optional table.
[language_features=TABLE_VALUED_FUNCTIONS,NAMED_ARGUMENTS]
select * from tvf_model_optional_table_named_string_default(
             model onedoublemodel, (select 'abc'), (select 'abc'))
--
QueryStmt
+-output_column_list=
| +-tvf_model_optional_table_named_string_default.column_bool#3 AS column_bool [BOOL]
| +-tvf_model_optional_table_named_string_default.column_bytes#4 AS column_bytes [BYTES]
+-query=
  +-ProjectScan
    +-column_list=tvf_model_optional_table_named_string_default.[column_bool#3, column_bytes#4]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_model_optional_table_named_string_default.[column_bool#3, column_bytes#4]
        +-tvf=tvf_model_optional_table_named_string_default((ANY MODEL, optional ANY TABLE, optional STRING {default_value: 'default'} foobar) -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-signature=(ANY MODEL, TABLE<$col1 STRING>, STRING) -> TABLE<column_bool BOOL, column_bytes BYTES>
        +-argument_list=
        | +-FunctionArgument
        | | +-model=
        | |   +-Model(model=OneDoubleModel)
        | +-FunctionArgument
        | | +-scan=
        | | | +-ProjectScan
        | | |   +-column_list=[$subquery1.$col1#1]
        | | |   +-expr_list=
        | | |   | +-$col1#1 := Literal(type=STRING, value='abc')
        | | |   +-input_scan=
        | | |     +-SingleRowScan
        | | +-argument_column_list=[$subquery1.$col1#1]
        | +-FunctionArgument
        |   +-expr=
        |     +-SubqueryExpr
        |       +-type=STRING
        |       +-subquery_type=SCALAR
        |       +-subquery=
        |         +-ProjectScan
        |           +-column_list=[$expr_subquery.$col1#2]
        |           +-expr_list=
        |           | +-$col1#2 := Literal(type=STRING, value='abc')
        |           +-input_scan=
        |             +-SingleRowScan
        +-column_index_list=[0, 1]
==

# Test with model and string and optional table.
[language_features=TABLE_VALUED_FUNCTIONS,NAMED_ARGUMENTS]
select * from tvf_model_optional_string_optional_table(model onedoublemodel,
                                                       (select 'abc'),
                                                       (select 'abc'))
--
QueryStmt
+-output_column_list=
| +-tvf_model_optional_string_optional_table.column_bool#3 AS column_bool [BOOL]
| +-tvf_model_optional_string_optional_table.column_bytes#4 AS column_bytes [BYTES]
+-query=
  +-ProjectScan
    +-column_list=tvf_model_optional_string_optional_table.[column_bool#3, column_bytes#4]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_model_optional_string_optional_table.[column_bool#3, column_bytes#4]
        +-tvf=tvf_model_optional_string_optional_table((ANY MODEL, optional STRING, optional ANY TABLE) -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-signature=(ANY MODEL, STRING, TABLE<$col1 STRING>) -> TABLE<column_bool BOOL, column_bytes BYTES>
        +-argument_list=
        | +-FunctionArgument
        | | +-model=
        | |   +-Model(model=OneDoubleModel)
        | +-FunctionArgument
        | | +-expr=
        | |   +-SubqueryExpr
        | |     +-type=STRING
        | |     +-subquery_type=SCALAR
        | |     +-subquery=
        | |       +-ProjectScan
        | |         +-column_list=[$expr_subquery.$col1#1]
        | |         +-expr_list=
        | |         | +-$col1#1 := Literal(type=STRING, value='abc')
        | |         +-input_scan=
        | |           +-SingleRowScan
        | +-FunctionArgument
        |   +-scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$subquery1.$col1#2]
        |   |   +-expr_list=
        |   |   | +-$col1#2 := Literal(type=STRING, value='abc')
        |   |   +-input_scan=
        |   |     +-SingleRowScan
        |   +-argument_column_list=[$subquery1.$col1#2]
        +-column_index_list=[0, 1]
==

# Test with model and string and optional table.
[language_features=TABLE_VALUED_FUNCTIONS,NAMED_ARGUMENTS]
select * from tvf_model_optional_string_optional_table(model onedoublemodel,
                                                       (select 'abc'),
                                                       (select 'abc', 'def'))
--
QueryStmt
+-output_column_list=
| +-tvf_model_optional_string_optional_table.column_bool#4 AS column_bool [BOOL]
| +-tvf_model_optional_string_optional_table.column_bytes#5 AS column_bytes [BYTES]
+-query=
  +-ProjectScan
    +-column_list=tvf_model_optional_string_optional_table.[column_bool#4, column_bytes#5]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_model_optional_string_optional_table.[column_bool#4, column_bytes#5]
        +-tvf=tvf_model_optional_string_optional_table((ANY MODEL, optional STRING, optional ANY TABLE) -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-signature=(ANY MODEL, STRING, TABLE<$col1 STRING, $col2 STRING>) -> TABLE<column_bool BOOL, column_bytes BYTES>
        +-argument_list=
        | +-FunctionArgument
        | | +-model=
        | |   +-Model(model=OneDoubleModel)
        | +-FunctionArgument
        | | +-expr=
        | |   +-SubqueryExpr
        | |     +-type=STRING
        | |     +-subquery_type=SCALAR
        | |     +-subquery=
        | |       +-ProjectScan
        | |         +-column_list=[$expr_subquery.$col1#1]
        | |         +-expr_list=
        | |         | +-$col1#1 := Literal(type=STRING, value='abc')
        | |         +-input_scan=
        | |           +-SingleRowScan
        | +-FunctionArgument
        |   +-scan=
        |   | +-ProjectScan
        |   |   +-column_list=$subquery1.[$col1#2, $col2#3]
        |   |   +-expr_list=
        |   |   | +-$col1#2 := Literal(type=STRING, value='abc')
        |   |   | +-$col2#3 := Literal(type=STRING, value='def')
        |   |   +-input_scan=
        |   |     +-SingleRowScan
        |   +-argument_column_list=$subquery1.[$col1#2, $col2#3]
        +-column_index_list=[0, 1]
==

# Test with model and string and optional table.
[language_features=TABLE_VALUED_FUNCTIONS,NAMED_ARGUMENTS]
select * from tvf_model_optional_string_optional_table(model onedoublemodel,
                                                       (select 'abc'),
                                                       TABLE KeyValue2)
--
QueryStmt
+-output_column_list=
| +-tvf_model_optional_string_optional_table.column_bool#4 AS column_bool [BOOL]
| +-tvf_model_optional_string_optional_table.column_bytes#5 AS column_bytes [BYTES]
+-query=
  +-ProjectScan
    +-column_list=tvf_model_optional_string_optional_table.[column_bool#4, column_bytes#5]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_model_optional_string_optional_table.[column_bool#4, column_bytes#5]
        +-tvf=tvf_model_optional_string_optional_table((ANY MODEL, optional STRING, optional ANY TABLE) -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-signature=(ANY MODEL, STRING, TABLE<Key INT64, Value2 STRING>) -> TABLE<column_bool BOOL, column_bytes BYTES>
        +-argument_list=
        | +-FunctionArgument
        | | +-model=
        | |   +-Model(model=OneDoubleModel)
        | +-FunctionArgument
        | | +-expr=
        | |   +-SubqueryExpr
        | |     +-type=STRING
        | |     +-subquery_type=SCALAR
        | |     +-subquery=
        | |       +-ProjectScan
        | |         +-column_list=[$expr_subquery.$col1#1]
        | |         +-expr_list=
        | |         | +-$col1#1 := Literal(type=STRING, value='abc')
        | |         +-input_scan=
        | |           +-SingleRowScan
        | +-FunctionArgument
        |   +-scan=
        |   | +-TableScan(column_list=KeyValue2.[Key#2, Value2#3], table=KeyValue2, column_index_list=[0, 1])
        |   +-argument_column_list=KeyValue2.[Key#2, Value2#3]
        +-column_index_list=[0, 1]
==

# Test with model and string and optional table.
[language_features=TABLE_VALUED_FUNCTIONS,NAMED_ARGUMENTS]
select * from tvf_model_optional_string_optional_table(model onedoublemodel,
                                                       (select 'abc'))
--
QueryStmt
+-output_column_list=
| +-tvf_model_optional_string_optional_table.column_bool#2 AS column_bool [BOOL]
| +-tvf_model_optional_string_optional_table.column_bytes#3 AS column_bytes [BYTES]
+-query=
  +-ProjectScan
    +-column_list=tvf_model_optional_string_optional_table.[column_bool#2, column_bytes#3]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_model_optional_string_optional_table.[column_bool#2, column_bytes#3]
        +-tvf=tvf_model_optional_string_optional_table((ANY MODEL, optional STRING, optional ANY TABLE) -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-signature=(ANY MODEL, STRING) -> TABLE<column_bool BOOL, column_bytes BYTES>
        +-argument_list=
        | +-FunctionArgument
        | | +-model=
        | |   +-Model(model=OneDoubleModel)
        | +-FunctionArgument
        |   +-expr=
        |     +-SubqueryExpr
        |       +-type=STRING
        |       +-subquery_type=SCALAR
        |       +-subquery=
        |         +-ProjectScan
        |           +-column_list=[$expr_subquery.$col1#1]
        |           +-expr_list=
        |           | +-$col1#1 := Literal(type=STRING, value='abc')
        |           +-input_scan=
        |             +-SingleRowScan
        +-column_index_list=[0, 1]
==

# Test with model and string and optional table.
[language_features=TABLE_VALUED_FUNCTIONS,NAMED_ARGUMENTS]
select * from tvf_model_optional_string_optional_table(model onedoublemodel,
                                                       NULL, TABLE KeyValue2)
--
QueryStmt
+-output_column_list=
| +-tvf_model_optional_string_optional_table.column_bool#3 AS column_bool [BOOL]
| +-tvf_model_optional_string_optional_table.column_bytes#4 AS column_bytes [BYTES]
+-query=
  +-ProjectScan
    +-column_list=tvf_model_optional_string_optional_table.[column_bool#3, column_bytes#4]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_model_optional_string_optional_table.[column_bool#3, column_bytes#4]
        +-tvf=tvf_model_optional_string_optional_table((ANY MODEL, optional STRING, optional ANY TABLE) -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-signature=(ANY MODEL, null STRING, TABLE<Key INT64, Value2 STRING>) -> TABLE<column_bool BOOL, column_bytes BYTES>
        +-argument_list=
        | +-FunctionArgument
        | | +-model=
        | |   +-Model(model=OneDoubleModel)
        | +-FunctionArgument
        | | +-expr=
        | |   +-Literal(type=STRING, value=NULL)
        | +-FunctionArgument
        |   +-scan=
        |   | +-TableScan(column_list=KeyValue2.[Key#1, Value2#2], table=KeyValue2, column_index_list=[0, 1])
        |   +-argument_column_list=KeyValue2.[Key#1, Value2#2]
        +-column_index_list=[0, 1]
==

################################################################################
#
# Negative test cases
#
################################################################################

# Wrong table schema is detected.
SELECT * FROM tvf_one_relation_one_model_arg_with_fixed_output(
    (select 1 as a), model onedoublemodel)
--
ERROR: Function does not allow extra input column named "a" for argument 1 of TVF_ONE_RELATION_ONE_MODEL_ARG_WITH_FIXED_OUTPUT(TABLE<key INT64, value STRING>, MODEL) [at 2:5]
    (select 1 as a), model onedoublemodel)
    ^
==

# A table cannot be passed instead of a model.
SELECT * FROM tvf_one_relation_one_model_arg_with_fixed_output(
    table keyvalue, table keyvalue)
--
ERROR: No matching signature for tvf_one_relation_one_model_arg_with_fixed_output for argument types: TABLE<Key INT64, Value STRING>, TABLE<Key INT64, Value STRING>. Supported signature: TVF_ONE_RELATION_ONE_MODEL_ARG_WITH_FIXED_OUTPUT(TABLE<key INT64, value STRING>, MODEL) [at 1:15]
SELECT * FROM tvf_one_relation_one_model_arg_with_fixed_output(
              ^
--
Signature Mismatch Details:
ERROR: No matching signature for tvf_one_relation_one_model_arg_with_fixed_output
  Argument types: TABLE<Key INT64, Value STRING>, TABLE<Key INT64, Value STRING>
  Signature: TVF_ONE_RELATION_ONE_MODEL_ARG_WITH_FIXED_OUTPUT(TABLE<key INT64, value STRING>, MODEL)
    Argument 2: expected MODEL, found TABLE<Key INT64, Value STRING> [at 1:15]
SELECT * FROM tvf_one_relation_one_model_arg_with_fixed_output(
              ^
==

# Table keyword cannot be used instead of the model keyword.
SELECT * FROM tvf_one_relation_one_model_arg_with_fixed_output(
    table keyvalue, table onedoublemodel)
--
ERROR: Table not found: onedoublemodel [at 2:27]
    table keyvalue, table onedoublemodel)
                          ^
==

# Non-existant models are detected.
SELECT * FROM tvf_one_relation_one_model_arg_with_fixed_output(
   table keyvalue,  model randommodel)
--
ERROR: Model not found: randommodel [at 2:27]
   table keyvalue,  model randommodel)
                          ^
==

# Make sure model cannot be passed in place of a table.
SELECT * FROM tvf_one_relation_one_model_arg_with_fixed_output(
    model onedoubletwooutputmodel, model onedoubletwooutputmodel)
--
ERROR: No matching signature for tvf_one_relation_one_model_arg_with_fixed_output for argument types: MODEL, MODEL. Supported signature: TVF_ONE_RELATION_ONE_MODEL_ARG_WITH_FIXED_OUTPUT(TABLE<key INT64, value STRING>, MODEL) [at 1:15]
SELECT * FROM tvf_one_relation_one_model_arg_with_fixed_output(
              ^

--
Signature Mismatch Details:
ERROR: No matching signature for tvf_one_relation_one_model_arg_with_fixed_output
  Argument types: MODEL, MODEL
  Signature: TVF_ONE_RELATION_ONE_MODEL_ARG_WITH_FIXED_OUTPUT(TABLE<key INT64, value STRING>, MODEL)
    Argument 1: expected TABLE, found MODEL [at 1:15]
SELECT * FROM tvf_one_relation_one_model_arg_with_fixed_output(
              ^
==

# Passing one model to a TVF that expects two models.
SELECT * FROM tvf_two_models_with_fixed_output(model OneDoubleModel)
--
ERROR: No matching signature for tvf_two_models_with_fixed_output for argument types: MODEL. Supported signature: TVF_TWO_MODELS_WITH_FIXED_OUTPUT(MODEL, MODEL) [at 1:15]
SELECT * FROM tvf_two_models_with_fixed_output(model OneDoubleModel)
              ^

--
Signature Mismatch Details:
ERROR: No matching signature for tvf_two_models_with_fixed_output
  Argument types: MODEL
  Signature: TVF_TWO_MODELS_WITH_FIXED_OUTPUT(MODEL, MODEL)
    Signature requires at least 2 arguments, found 1 argument [at 1:15]
SELECT * FROM tvf_two_models_with_fixed_output(model OneDoubleModel)
              ^
==

# Passing model to a TVF that does not accept a model.
select * from tvf_one_relation_arg_with_fixed_output(model OneDoubleModel)
--
ERROR: No matching signature for tvf_one_relation_arg_with_fixed_output for argument types: MODEL. Supported signature: TVF_ONE_RELATION_ARG_WITH_FIXED_OUTPUT(TABLE) [at 1:15]
select * from tvf_one_relation_arg_with_fixed_output(model OneDoubleModel)
              ^

--
Signature Mismatch Details:
ERROR: No matching signature for tvf_one_relation_arg_with_fixed_output
  Argument types: MODEL
  Signature: TVF_ONE_RELATION_ARG_WITH_FIXED_OUTPUT(TABLE)
    Argument 1: expected TABLE, found MODEL [at 1:15]
select * from tvf_one_relation_arg_with_fixed_output(model OneDoubleModel)
              ^
==

# Passing a select statement in place for the model arg.
SELECT * FROM tvf_one_relation_one_model_arg_with_fixed_output(
    table keyvalue, (select key, value from keyvalue))
--
ERROR: Table-valued function tvf_one_relation_one_model_arg_with_fixed_output argument 2 must be a model specified with the MODEL keyword [at 2:21]
    table keyvalue, (select key, value from keyvalue))
                    ^
==

# Test with optional model and named optional table.
# These aren't allowed because the optional model will get an untyped_null.
# TODO: Fix this query since it should work. We should not inject a
# NULL for missing arguments without defaults.
# TODO: Allow the optional model to be omitted. Same below.
[language_features=TABLE_VALUED_FUNCTIONS,NAMED_ARGUMENTS]
select * from tvf_optional_scalar_optional_model_named_table(1.0,
                                                             foobar=>(SELECT 1))
--
ERROR: No matching signature for tvf_optional_scalar_optional_model_named_table for argument types: DOUBLE, NULL, TABLE<$col1 INT64>. Supported signature: TVF_OPTIONAL_SCALAR_OPTIONAL_MODEL_NAMED_TABLE([ANY], [MODEL], [TABLE]) [at 1:15]
select * from tvf_optional_scalar_optional_model_named_table(1.0,
              ^
--
Signature Mismatch Details:
ERROR: No matching signature for tvf_optional_scalar_optional_model_named_table
  Argument types: DOUBLE, NULL, TABLE<$col1 INT64>
  Signature: TVF_OPTIONAL_SCALAR_OPTIONAL_MODEL_NAMED_TABLE([ANY], [MODEL], [foobar => TABLE])
    Argument 2: expected MODEL, found NULL [at 1:15]
select * from tvf_optional_scalar_optional_model_named_table(1.0,
              ^
==

# Test with model and optional table and named scalar.
# These aren't allowed because the optional table will get an untyped_null.
# TODO: Fix this query since it should work. We should not inject a
# NULL for missing arguments without defaults.
[language_features=TABLE_VALUED_FUNCTIONS,NAMED_ARGUMENTS]
select * from tvf_model_optional_table_named_struct(model onedoublemodel,
                                                    foobar=>STRUCT(NULL))
--
ERROR: No matching signature for tvf_model_optional_table_named_struct for argument types: MODEL, NULL, STRUCT<INT64>. Supported signature: TVF_MODEL_OPTIONAL_TABLE_NAMED_STRUCT(MODEL, [TABLE], [STRUCT]) [at 1:15]
select * from tvf_model_optional_table_named_struct(model onedoublemodel,
              ^
--
Signature Mismatch Details:
ERROR: No matching signature for tvf_model_optional_table_named_struct
  Argument types: MODEL, NULL, STRUCT<INT64>
  Signature: TVF_MODEL_OPTIONAL_TABLE_NAMED_STRUCT(MODEL, [TABLE], [foobar => STRUCT])
    Argument 2: expected TABLE, found NULL [at 1:15]
select * from tvf_model_optional_table_named_struct(model onedoublemodel,
              ^
==

# Test with optional model and named optional table.
# These aren't allowed because the optional model will get an untyped_null.
# TODO: Fix this query since it should work. We should not inject a
# NULL for missing arguments without defaults.
[language_features=TABLE_VALUED_FUNCTIONS,NAMED_ARGUMENTS]
select * from tvf_scalar_optional_model_named_table(1.0, foobar=>(SELECT 1))
--
ERROR: No matching signature for tvf_scalar_optional_model_named_table for argument types: DOUBLE, NULL, TABLE<$col1 INT64>. Supported signature: TVF_SCALAR_OPTIONAL_MODEL_NAMED_TABLE(ANY, [MODEL], [TABLE]) [at 1:15]
select * from tvf_scalar_optional_model_named_table(1.0, foobar=>(SELECT 1))
              ^
--
Signature Mismatch Details:
ERROR: No matching signature for tvf_scalar_optional_model_named_table
  Argument types: DOUBLE, NULL, TABLE<$col1 INT64>
  Signature: TVF_SCALAR_OPTIONAL_MODEL_NAMED_TABLE(ANY, [MODEL], [foobar => TABLE])
    Argument 2: expected MODEL, found NULL [at 1:15]
select * from tvf_scalar_optional_model_named_table(1.0, foobar=>(SELECT 1))
              ^
==

# Test with named optional model and named optional table.
# These aren't allowed because the optional model will get an untyped_null.
# TODO: Fix this query since it should work. We should not inject a
# NULL for missing arguments without defaults.
[language_features=TABLE_VALUED_FUNCTIONS,NAMED_ARGUMENTS]
select * from tvf_optional_scalar_named_model_named_table(1.0,
                                                          barfoo=>(SELECT 1))
--
ERROR: No matching signature for tvf_optional_scalar_named_model_named_table for argument types: DOUBLE, NULL, TABLE<$col1 INT64>. Supported signature: TVF_OPTIONAL_SCALAR_NAMED_MODEL_NAMED_TABLE([ANY], [MODEL], [TABLE]) [at 1:15]
select * from tvf_optional_scalar_named_model_named_table(1.0,
              ^
--
Signature Mismatch Details:
ERROR: No matching signature for tvf_optional_scalar_named_model_named_table
  Argument types: DOUBLE, NULL, TABLE<$col1 INT64>
  Signature: TVF_OPTIONAL_SCALAR_NAMED_MODEL_NAMED_TABLE([ANY], [foobar => MODEL], [barfoo => TABLE])
    Named argument "foobar": expected MODEL, found NULL [at 1:15]
select * from tvf_optional_scalar_named_model_named_table(1.0,
              ^
