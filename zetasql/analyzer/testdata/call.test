# Empty parameter list.
call proc_no_args()
--
CallStmt(procedure=proc_no_args, signature=() -> BOOL)
==

# Nested procedure.
call nested_catalog.nested_procedure(1)
--
CallStmt
+-procedure=nested_catalog.nested_procedure
+-signature=(INT64) -> INT64
+-argument_list=
  +-Literal(type=INT64, value=1)
==

call proc_on_bool(true)
--
CallStmt
+-procedure=proc_on_bool
+-signature=(BOOL) -> BOOL
+-argument_list=
  +-Literal(type=BOOL, value=true)
==

# Type coercion.
call proc_on_double(1)
--
CallStmt
+-procedure=proc_on_double
+-signature=(DOUBLE) -> BOOL
+-argument_list=
  +-Literal(type=DOUBLE, value=1)
==

call proc_on_TestEnum('TESTENUM0')
--
CallStmt
+-procedure=proc_on_TestEnum
+-signature=(ENUM<zetasql_test__.TestEnum>) -> BOOL
+-argument_list=
  +-Literal(type=ENUM<zetasql_test__.TestEnum>, value=TESTENUM0)
==

call proc_on_Date('2016-01-01')
--
CallStmt
+-procedure=proc_on_date
+-signature=(DATE) -> BOOL
+-argument_list=
  +-Literal(type=DATE, value=2016-01-01)
==

call proc_on_int64(1)
--
CallStmt
+-procedure=proc_on_int64
+-signature=(INT64) -> BOOL
+-argument_list=
  +-Literal(type=INT64, value=1)
==

call proc_on_float(NULL)
--
CallStmt
+-procedure=proc_on_float
+-signature=(FLOAT) -> BOOL
+-argument_list=
  +-Literal(type=FLOAT, value=NULL)
==

# Expression as an argument.
call proc_on_int64(1 + 2)
--
CallStmt
+-procedure=proc_on_int64
+-signature=(INT64) -> BOOL
+-argument_list=
  +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    +-Literal(type=INT64, value=1)
    +-Literal(type=INT64, value=2)
==

# Testing that query parameters work.
call proc_on_bool(@test_param_bool)
--
CallStmt
+-procedure=proc_on_bool
+-signature=(BOOL) -> BOOL
+-argument_list=
  +-Parameter(type=BOOL, name='test_param_bool')
==

# Calling procedure with one optional argument.
call proc_on_opt()
--
CallStmt(procedure=proc_on_opt, signature=(optional(0) INT64) -> INT64)
==

call proc_on_opt(1)
--
CallStmt
+-procedure=proc_on_opt
+-signature=(optional(1) INT64) -> INT64
+-argument_list=
  +-Literal(type=INT64, value=1)
==

call proc_on_opt(1, 1)
--
ERROR: No matching signature for procedure proc_on_opt for argument types: INT64, INT64. Supported signature: proc_on_opt([INT64]) [at 1:6]
call proc_on_opt(1, 1)
     ^
==

# Calling procedure with one repeated argument.
call proc_on_rep()
--
CallStmt(procedure=proc_on_rep, signature=(repeated(0) INT64) -> INT64)
==

call proc_on_rep(1)
--
CallStmt
+-procedure=proc_on_rep
+-signature=(repeated(1) INT64) -> INT64
+-argument_list=
  +-Literal(type=INT64, value=1)
==

call proc_on_rep(1, 1)
--
CallStmt
+-procedure=proc_on_rep
+-signature=(repeated(2) INT64) -> INT64
+-argument_list=
  +-Literal(type=INT64, value=1)
  +-Literal(type=INT64, value=1)
==

# Calling procedure with templated arguments.
call proc_on_any_any(1.0, 1)
--
CallStmt
+-procedure=proc_on_any_any
+-signature=(DOUBLE, DOUBLE) -> INT64
+-argument_list=
  +-Literal(type=DOUBLE, value=1)
  +-Literal(type=DOUBLE, value=1)
==

call proc_on_any_any(1, 'a')
--
ERROR: Could not cast literal 'a' to type INT64 [at 1:25]
call proc_on_any_any(1, 'a')
                        ^
==

# Calling procedure with mix or req/opt/rep arguments.
call proc_on_req_opt_rep(1)
--
ERROR: No matching signature for procedure proc_on_req_opt_rep for argument types: INT64. Supported signature: proc_on_req_opt_rep(INT64, [INT64, ...], [INT64, ...], INT64, [INT64]) [at 1:6]
call proc_on_req_opt_rep(1)
     ^
==

call proc_on_req_opt_rep(2, 2)
--
CallStmt
+-procedure=proc_on_req_opt_rep
+-signature=(INT64, repeated(0) INT64, repeated(0) INT64, INT64, optional(0) INT64) -> INT64
+-argument_list=
  +-Literal(type=INT64, value=2)
  +-Literal(type=INT64, value=2)
==

call proc_on_req_opt_rep(3, 3, 3)
--
CallStmt
+-procedure=proc_on_req_opt_rep
+-signature=(INT64, repeated(0) INT64, repeated(0) INT64, INT64, optional(1) INT64) -> INT64
+-argument_list=
  +-Literal(type=INT64, value=3)
  +-Literal(type=INT64, value=3)
  +-Literal(type=INT64, value=3)
==

call proc_on_req_opt_rep(4, 4, 4, 4)
--
CallStmt
+-procedure=proc_on_req_opt_rep
+-signature=(INT64, repeated(1) INT64, repeated(1) INT64, INT64, optional(0) INT64) -> INT64
+-argument_list=
  +-Literal(type=INT64, value=4)
  +-Literal(type=INT64, value=4)
  +-Literal(type=INT64, value=4)
  +-Literal(type=INT64, value=4)
==

call proc_on_req_opt_rep(5, 5, 5, 5, 5)
--
CallStmt
+-procedure=proc_on_req_opt_rep
+-signature=(INT64, repeated(1) INT64, repeated(1) INT64, INT64, optional(1) INT64) -> INT64
+-argument_list=
  +-Literal(type=INT64, value=5)
  +-Literal(type=INT64, value=5)
  +-Literal(type=INT64, value=5)
  +-Literal(type=INT64, value=5)
  +-Literal(type=INT64, value=5)
==

call proc_on_req_opt_rep(6, 6, 6, 6, 6, 6)
--
CallStmt
+-procedure=proc_on_req_opt_rep
+-signature=(INT64, repeated(2) INT64, repeated(2) INT64, INT64, optional(0) INT64) -> INT64
+-argument_list=
  +-Literal(type=INT64, value=6)
  +-Literal(type=INT64, value=6)
  +-Literal(type=INT64, value=6)
  +-Literal(type=INT64, value=6)
  +-Literal(type=INT64, value=6)
  +-Literal(type=INT64, value=6)
==

call uknown_procedure()
--
ERROR: Procedure not found: uknown_procedure [at 1:6]
call uknown_procedure()
     ^
==

# Calling procedure from non-existing catalog.
call unknown_catalog.uknown_procedure()
--
ERROR: Procedure not found: unknown_catalog.uknown_procedure [at 1:6]
call unknown_catalog.uknown_procedure()
     ^
==

# Calling procedure with incorrect number of arguments.
call proc_on_string('one', 'two')
--
ERROR: No matching signature for procedure proc_on_string for argument types: STRING, STRING. Supported signature: proc_on_string(STRING) [at 1:6]
call proc_on_string('one', 'two')
     ^
==

# No SAFE-mode procedure calls.
[language_features={{|V_1_2_SAFE_FUNCTION_CALL}}]
call safe.proc_on_bool(true)
--
ERROR: Procedure not found: safe.proc_on_bool [at 1:6]
call safe.proc_on_bool(true)
     ^

==

# Table type argument is not supported, TODO: support resolving table/model clause.
call proc_on_rep(TABLE table_a);
--
ERROR: Table typed argument is not supported [at 1:18]
call proc_on_rep(TABLE table_a);
                 ^
==

# Model type argument is not supported, TODO: support resolving table/model clause.
call proc_on_rep(MODEL model_a);
--
ERROR: Model typed argument is not supported [at 1:18]
call proc_on_rep(MODEL model_a);
                 ^

==

# Connection type argument is not supported, TODO: support resolving connection clause.
call proc_on_rep(CONNECTION connection_a);
--
ERROR: Connection typed argument is not supported [at 1:18]
call proc_on_rep(CONNECTION connection_a);
                 ^
