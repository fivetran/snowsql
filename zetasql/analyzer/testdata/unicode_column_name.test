[default zetasql_idstring_allow_unicode_characters]

[no_java]
# Access top level field with Unicode name in the same case as the column name
# in the table.

select "å学"
from unicode_column_table;
--
QueryStmt
+-output_column_list=
| +-unicode_column_table.å学#1 AS "å学" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[unicode_column_table.å学#1]
    +-input_scan=
      +-TableScan(column_list=[unicode_column_table.å学#1], table=unicode_column_table, column_index_list=[0])
==

[no_java]

select a."1𐌰:"
from unicode_column_table;
--
ERROR: Field name "1𐌰:" does not exist in STRUCT<"1𐌰:aô" STRING> [at 1:10]
select a."1𐌰:"
         ^
==

[no_java]

# Access nested field with Unicode name in the same case as the column name in
# the table.

select a."1𐌰:aô"
from unicode_column_table;
--
QueryStmt
+-output_column_list=
| +-$query.1𐌰:aô#4 AS "1𐌰:aô" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.1𐌰:aô#4]
    +-expr_list=
    | +-1𐌰:aô#4 :=
    |   +-GetStructField
    |     +-type=STRING
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<"1𐌰:aô" STRING>, column=unicode_column_table.a#3)
    |     +-field_idx=0
    +-input_scan=
      +-TableScan(column_list=[unicode_column_table.a#3], table=unicode_column_table, column_index_list=[2])
==

[no_java]

# Access sub fields of a struct field using .*.

select a.*
from unicode_column_table;
--
QueryStmt
+-output_column_list=
| +-$query.1𐌰:aô#4 AS "1𐌰:aô" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.1𐌰:aô#4]
    +-expr_list=
    | +-1𐌰:aô#4 :=
    |   +-GetStructField
    |     +-type=STRING
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<"1𐌰:aô" STRING>, column=unicode_column_table.a#3)
    |     +-field_idx=0
    +-input_scan=
      +-TableScan(column_list=[unicode_column_table.a#3], table=unicode_column_table, column_index_list=[2])
==

[no_java]

select *
from unicode_column_table;
--
QueryStmt
+-output_column_list=
| +-unicode_column_table.å学#1 AS "å学" [INT64]
| +-unicode_column_table.ô#2 AS "ô" [STRING]
| +-unicode_column_table.a#3 AS a [STRUCT<"1𐌰:aô" STRING>]
+-query=
  +-ProjectScan
    +-column_list=unicode_column_table.[å学#1, ô#2, a#3]
    +-input_scan=
      +-TableScan(column_list=unicode_column_table.[å学#1, ô#2, a#3], table=unicode_column_table, column_index_list=[0, 1, 2])
==

[no_java]

# Access top level field with Unicode character name in a different case than
# the field name in the table.

select "Å学"
from unicode_column_table;
--
QueryStmt
+-output_column_list=
| +-unicode_column_table.å学#1 AS "Å学" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[unicode_column_table.å学#1]
    +-input_scan=
      +-TableScan(column_list=[unicode_column_table.å学#1], table=unicode_column_table, column_index_list=[0])
==

[no_java]

# Access top level field with Unicode character name in a different
# respresentation (normalization) than the field name in the table.

select "Å学", "O\u0302"
from unicode_column_table;
--
QueryStmt
+-output_column_list=
| +-unicode_column_table.å学#1 AS "Å学" [INT64]
| +-unicode_column_table.ô#2 AS "Ô" [STRING]
+-query=
  +-ProjectScan
    +-column_list=unicode_column_table.[å学#1, ô#2]
    +-input_scan=
      +-TableScan(column_list=unicode_column_table.[å学#1, ô#2], table=unicode_column_table, column_index_list=[0, 1])
==

[no_java]

# Access nested field with Unicode character name in a different respresentation
# (normalization) than the field name in the table.

select "Ô", a."1𐌰:AÔ"
from unicode_column_table;
--
QueryStmt
+-output_column_list=
| +-unicode_column_table.ô#2 AS "Ô" [STRING]
| +-$query.1𐌰:AÔ#4 AS "1𐌰:AÔ" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[unicode_column_table.ô#2, $query.1𐌰:AÔ#4]
    +-expr_list=
    | +-1𐌰:AÔ#4 :=
    |   +-GetStructField
    |     +-type=STRING
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<"1𐌰:aô" STRING>, column=unicode_column_table.a#3)
    |     +-field_idx=0
    +-input_scan=
      +-TableScan(column_list=unicode_column_table.[ô#2, a#3], table=unicode_column_table, column_index_list=[1, 2])
==

[no_java]

# Access nested field with Unicode character name in a different respresentation
# (normalization) than the field name in the table.

select "Ô", a."1𐌰:AO\u0302"
from unicode_column_table;
--
QueryStmt
+-output_column_list=
| +-unicode_column_table.ô#2 AS "Ô" [STRING]
| +-$query.1𐌰:AÔ#4 AS "1𐌰:AÔ" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[unicode_column_table.ô#2, $query.1𐌰:AÔ#4]
    +-expr_list=
    | +-1𐌰:AÔ#4 :=
    |   +-GetStructField
    |     +-type=STRING
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<"1𐌰:aô" STRING>, column=unicode_column_table.a#3)
    |     +-field_idx=0
    +-input_scan=
      +-TableScan(column_list=unicode_column_table.[ô#2, a#3], table=unicode_column_table, column_index_list=[1, 2])
==

[no_java]

create table tbl("Ô" INT64, "Å学" INT64);
--
CreateTableStmt
+-name_path=tbl
+-column_definition_list=
  +-ColumnDefinition(name='Ô', type=INT64, column=tbl.Ô#1)
  +-ColumnDefinition(name='Å学', type=INT64, column=tbl.Å学#2)
==

[no_java]

create table tbl("Ô" INT64, "ô" INT64);
--
ERROR: Duplicate column name ô in CREATE TABLE [at 1:29]
create table tbl("Ô" INT64, "ô" INT64);
                            ^
==
