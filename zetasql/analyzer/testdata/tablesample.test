select key from KeyValue TABLESAMPLE SYSTEM (1 ROWS)
--
ERROR: TABLESAMPLE not supported [at 1:26]
select key from KeyValue TABLESAMPLE SYSTEM (1 ROWS)
                         ^
==

[default language_features=TABLESAMPLE,STRATIFIED_RESERVOIR_TABLESAMPLE]
select key
from KeyValue RESERVOIR TABLESAMPLE RESERVOIR (100 ROWS) REPEATABLE(10)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias='RESERVOIR')
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=ROWS
        +-repeatable_argument=
          +-Literal(type=INT64, value=10)
==

select key from KeyValue TABLESAMPLE RESERVOIR (100 ROWS)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=ROWS
==

select key from KeyValue TABLESAMPLE RESERVOIR (cast(100 as int32) ROWS)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100, has_explicit_type=TRUE)
        +-unit=ROWS
==

select key from KeyValue TABLESAMPLE RESERVOIR (0.1 PERCENT) REPEATABLE(10)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="reservoir"
        +-size=
        | +-Literal(type=DOUBLE, value=0.1)
        +-unit=PERCENT
        +-repeatable_argument=
          +-Literal(type=INT64, value=10)
==

select key from KeyValue TABLESAMPLE BERNOULLI (0 PERCENT)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="bernoulli"
        +-size=
        | +-Literal(type=INT64, value=0)
        +-unit=PERCENT
==

select key from KeyValue TABLESAMPLE RESERVOIR (100 PERCENT) REPEATABLE(10)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=PERCENT
        +-repeatable_argument=
          +-Literal(type=INT64, value=10)
==

select key from KeyValue TABLESAMPLE RESERVOIR (100.5 PERCENT)
--
ERROR: PERCENT value must be in the range [0, 100] [at 1:49]
select key from KeyValue TABLESAMPLE RESERVOIR (100.5 PERCENT)
                                                ^
==

select key from KeyValue TABLESAMPLE RESERVOIR (101 PERCENT)
--
ERROR: PERCENT value must be in the range [0, 100] [at 1:49]
select key from KeyValue TABLESAMPLE RESERVOIR (101 PERCENT)
                                                ^
==

select key from KeyValue TABLESAMPLE RESERVOIR (0.1 ROWS) REPEATABLE(10)
--
ERROR: ROWS expects an integer literal or parameter [at 1:49]
select key from KeyValue TABLESAMPLE RESERVOIR (0.1 ROWS) REPEATABLE(10)
                                                ^
==

select key from KeyValue TABLESAMPLE RESERVOIR (0 ROWS)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=0)
        +-unit=ROWS
==

select key from KeyValue TABLESAMPLE RESERVOIR (-1 ROWS)
--
ERROR: Syntax error: Unexpected "-" [at 1:49]
select key from KeyValue TABLESAMPLE RESERVOIR (-1 ROWS)
                                                ^
==

select key from KeyValue TABLESAMPLE RESERVOIR (-1 PERCENT)
--
ERROR: Syntax error: Unexpected "-" [at 1:49]
select key from KeyValue TABLESAMPLE RESERVOIR (-1 PERCENT)
                                                ^
==

select key from KeyValue TABLESAMPLE SYSTEM (@test_param_int64 ROWS)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="system"
        +-size=
        | +-Parameter(type=INT64, name='test_param_int64')
        +-unit=ROWS
==

select key from KeyValue TABLESAMPLE SYSTEM (@test_param_int32 ROWS)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="system"
        +-size=
        | +-Cast(INT32 -> INT64)
        |   +-Parameter(type=INT32, name='test_param_int32')
        +-unit=ROWS
==

select key from KeyValue TABLESAMPLE SYSTEM (@test_param_uint32 ROWS)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="system"
        +-size=
        | +-Cast(UINT32 -> INT64)
        |   +-Parameter(type=UINT32, name='test_param_uint32')
        +-unit=ROWS
==

select key from KeyValue TABLESAMPLE SYSTEM (@test_param_uint64 ROWS)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="system"
        +-size=
        | +-Cast(UINT64 -> INT64)
        |   +-Parameter(type=UINT64, name='test_param_uint64')
        +-unit=ROWS
==

select key from KeyValue TABLESAMPLE SYSTEM (cast(@test_param_uint64 as int64) ROWS)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="system"
        +-size=
        | +-Cast(UINT64 -> INT64)
        |   +-Parameter(type=UINT64, name='test_param_uint64')
        +-unit=ROWS
==

select key from KeyValue TABLESAMPLE SYSTEM (@test_param_string ROWS)
--
ERROR: ROWS expects an integer literal or parameter [at 1:46]
select key from KeyValue TABLESAMPLE SYSTEM (@test_param_string ROWS)
                                             ^
==

select key from KeyValue TABLESAMPLE SYSTEM (@test_param_double ROWS)
--
ERROR: ROWS expects an integer literal or parameter [at 1:46]
select key from KeyValue TABLESAMPLE SYSTEM (@test_param_double ROWS)
                                             ^
==

select key from KeyValue TABLESAMPLE SYSTEM (@test_param_int64 PERCENT)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="system"
        +-size=
        | +-Parameter(type=INT64, name='test_param_int64')
        +-unit=PERCENT
==

select key from KeyValue TABLESAMPLE SYSTEM (@test_param_int32 PERCENT)
--
ERROR: PERCENT expects either a double or an integer literal or parameter [at 1:46]
select key from KeyValue TABLESAMPLE SYSTEM (@test_param_int32 PERCENT)
                                             ^
==

select key from KeyValue TABLESAMPLE SYSTEM (@test_param_uint32 PERCENT)
--
ERROR: PERCENT expects either a double or an integer literal or parameter [at 1:46]
select key from KeyValue TABLESAMPLE SYSTEM (@test_param_uint32 PERCENT)
                                             ^
==

select key from KeyValue TABLESAMPLE SYSTEM (@test_param_uint64 PERCENT)
--
ERROR: PERCENT expects either a double or an integer literal or parameter [at 1:46]
select key from KeyValue TABLESAMPLE SYSTEM (@test_param_uint64 PERCENT)
                                             ^
==

select key from KeyValue TABLESAMPLE SYSTEM (@test_param_string PERCENT)
--
ERROR: PERCENT expects either a double or an integer literal or parameter [at 1:46]
select key from KeyValue TABLESAMPLE SYSTEM (@test_param_string PERCENT)
                                             ^
==

select key from KeyValue TABLESAMPLE SYSTEM (@test_param_double PERCENT)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="system"
        +-size=
        | +-Parameter(type=DOUBLE, name='test_param_double')
        +-unit=PERCENT
==

select key from KeyValue TABLESAMPLE SYSTEM (1 ROWS) REPEATABlE(@test_param_int64)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="system"
        +-size=
        | +-Literal(type=INT64, value=1)
        +-unit=ROWS
        +-repeatable_argument=
          +-Parameter(type=INT64, name='test_param_int64')
==

select key from KeyValue TABLESAMPLE SYSTEM (1 ROWS) REPEATABLE(@test_param_int32)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="system"
        +-size=
        | +-Literal(type=INT64, value=1)
        +-unit=ROWS
        +-repeatable_argument=
          +-Cast(INT32 -> INT64)
            +-Parameter(type=INT32, name='test_param_int32')
==

select key from KeyValue TABLESAMPLE SYSTEM (1 ROWS) REPEATABLE(@test_param_uint32)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="system"
        +-size=
        | +-Literal(type=INT64, value=1)
        +-unit=ROWS
        +-repeatable_argument=
          +-Cast(UINT32 -> INT64)
            +-Parameter(type=UINT32, name='test_param_uint32')
==

select key from KeyValue TABLESAMPLE SYSTEM (1 ROWS) REPEATABLE(@test_param_uint64)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="system"
        +-size=
        | +-Literal(type=INT64, value=1)
        +-unit=ROWS
        +-repeatable_argument=
          +-Cast(UINT64 -> INT64)
            +-Parameter(type=UINT64, name='test_param_uint64')
==

select key from KeyValue TABLESAMPLE SYSTEM (1 ROWS) REPEATABLE(@test_param_string)
--
ERROR: REPEATABLE expects an integer literal or parameter [at 1:65]
...KeyValue TABLESAMPLE SYSTEM (1 ROWS) REPEATABLE(@test_param_string)
                                                   ^
==

select key from KeyValue TABLESAMPLE SYSTEM (1 ROWS) REPEATABLE(@test_param_double)
--
ERROR: REPEATABLE expects an integer literal or parameter [at 1:65]
...KeyValue TABLESAMPLE SYSTEM (1 ROWS) REPEATABLE(@test_param_double)
                                                   ^
==

select key from KeyValue TABLESAMPLE SOME_RANDOM (100 ROWS) REPEATABLE(10)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-method="some_random"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=ROWS
        +-repeatable_argument=
          +-Literal(type=INT64, value=10)
==

select *
from KeyValue TABLESAMPLE RANDOM1 (100 ROWS)
     CROSS JOIN (select * from KeyValue) TABLESAMPLE RANDOM2 (100 ROWS)
     CROSS JOIN (KeyValue kv1 JOIN KeyValue kv2 USING(key))
                TABLESAMPLE RANDOM3 (10 PERCENT)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-KeyValue.Key#3 AS Key [INT64]
| +-KeyValue.Value#4 AS Value [STRING]
| +-KeyValue.Key#5 AS key [INT64]
| +-KeyValue.Value#6 AS Value [STRING]
| +-KeyValue.Value#8 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4, Key#5, Value#6, Value#8]
    +-input_scan=
      +-JoinScan
        +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4, Key#5, Value#6, Key#7, Value#8]
        +-left_scan=
        | +-JoinScan
        |   +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4]
        |   +-left_scan=
        |   | +-SampleScan
        |   |   +-column_list=KeyValue.[Key#1, Value#2]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   |   +-method="random1"
        |   |   +-size=
        |   |   | +-Literal(type=INT64, value=100)
        |   |   +-unit=ROWS
        |   +-right_scan=
        |     +-SampleScan
        |       +-column_list=KeyValue.[Key#3, Value#4]
        |       +-input_scan=
        |       | +-ProjectScan
        |       |   +-column_list=KeyValue.[Key#3, Value#4]
        |       |   +-input_scan=
        |       |     +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
        |       +-method="random2"
        |       +-size=
        |       | +-Literal(type=INT64, value=100)
        |       +-unit=ROWS
        +-right_scan=
          +-SampleScan
            +-column_list=KeyValue.[Key#5, Value#6, Key#7, Value#8]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=KeyValue.[Key#5, Value#6, Key#7, Value#8]
            |   +-left_scan=
            |   | +-TableScan(column_list=KeyValue.[Key#5, Value#6], table=KeyValue, column_index_list=[0, 1], alias='kv1')
            |   +-right_scan=
            |   | +-TableScan(column_list=KeyValue.[Key#7, Value#8], table=KeyValue, column_index_list=[0, 1], alias='kv2')
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=KeyValue.Key#5)
            |       +-ColumnRef(type=INT64, column=KeyValue.Key#7)
            +-method="random3"
            +-size=
            | +-Literal(type=INT64, value=10)
            +-unit=PERCENT
==

select *
from KeyValue,
     (select key, value from KeyValue) TABLESAMPLE RESERVOIR (5 ROWS) where true
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-KeyValue.Key#3 AS key [INT64]
| +-KeyValue.Value#4 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4]
        |   +-left_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   +-right_scan=
        |     +-SampleScan
        |       +-column_list=KeyValue.[Key#3, Value#4]
        |       +-input_scan=
        |       | +-ProjectScan
        |       |   +-column_list=KeyValue.[Key#3, Value#4]
        |       |   +-input_scan=
        |       |     +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
        |       +-method="reservoir"
        |       +-size=
        |       | +-Literal(type=INT64, value=5)
        |       +-unit=ROWS
        +-filter_expr=
          +-Literal(type=BOOL, value=true)
==

select *
from TestTable T, T.KitchenSink.repeated_int32_val
     TABLESAMPLE RESERVOIR (1 ROWS)
--
ERROR: TABLESAMPLE cannot be used with arrays [at 2:19]
from TestTable T, T.KitchenSink.repeated_int32_val
                  ^
==

select val
from (select val from TestTable T, T.KitchenSink.repeated_int32_val val)
     TABLESAMPLE RESERVOIR (1 ROWS)
--
QueryStmt
+-output_column_list=
| +-$array.val#4 AS val [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$array.val#4]
    +-input_scan=
      +-SampleScan
        +-column_list=[$array.val#4]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$array.val#4]
        |   +-input_scan=
        |     +-ArrayScan
        |       +-column_list=[TestTable.KitchenSink#3, $array.val#4]
        |       +-input_scan=
        |       | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias='T')
        |       +-array_expr=
        |       | +-GetProtoField
        |       |   +-type=ARRAY<INT32>
        |       |   +-expr=
        |       |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |       |   +-field_descriptor=repeated_int32_val
        |       |   +-default_value=[]
        |       +-element_column=$array.val#4
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=1)
        +-unit=ROWS
==

select * from UNNEST([1, 2, 3]) TABLESAMPLE RESERVOIR (1 ROWS)
--
ERROR: TABLESAMPLE cannot be used with arrays [at 1:15]
select * from UNNEST([1, 2, 3]) TABLESAMPLE RESERVOIR (1 ROWS)
              ^
==

select * from UNNEST([1, 2, 3]) WITH OFFSET pos TABLESAMPLE RESERVOIR (1 ROWS)
--
ERROR: TABLESAMPLE cannot be used with arrays [at 1:15]
select * from UNNEST([1, 2, 3]) WITH OFFSET pos TABLESAMPLE RESERVOIR (1 ROWS)
              ^
==

select * from (select * from UNNEST([1, 2, 3])) TABLESAMPLE RESERVOIR (1 ROWS)
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS "$unnest1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.$unnest1#1]
    +-input_scan=
      +-SampleScan
        +-column_list=[$array.$unnest1#1]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$array.$unnest1#1]
        |   +-input_scan=
        |     +-ArrayScan
        |       +-column_list=[$array.$unnest1#1]
        |       +-array_expr=
        |       | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |       +-element_column=$array.$unnest1#1
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=1)
        +-unit=ROWS
==

select * from KeyValue
where key IN (select KitchenSink.int64_val
              from TestTable TABLESAMPLE RESERVOIR (1 ROWS))
ORDER BY key LIMIT 5
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-LimitOffsetScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-is_ordered=TRUE
    +-input_scan=
    | +-OrderByScan
    |   +-column_list=KeyValue.[Key#1, Value#2]
    |   +-is_ordered=TRUE
    |   +-input_scan=
    |   | +-FilterScan
    |   |   +-column_list=KeyValue.[Key#1, Value#2]
    |   |   +-input_scan=
    |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   |   +-filter_expr=
    |   |     +-SubqueryExpr
    |   |       +-type=BOOL
    |   |       +-subquery_type=IN
    |   |       +-in_expr=
    |   |       | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |       +-subquery=
    |   |         +-ProjectScan
    |   |           +-column_list=[$expr_subquery.int64_val#6]
    |   |           +-expr_list=
    |   |           | +-int64_val#6 :=
    |   |           |   +-GetProtoField
    |   |           |     +-type=INT64
    |   |           |     +-expr=
    |   |           |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#5)
    |   |           |     +-field_descriptor=int64_val
    |   |           |     +-default_value=0
    |   |           +-input_scan=
    |   |             +-SampleScan
    |   |               +-column_list=[TestTable.KitchenSink#5]
    |   |               +-input_scan=
    |   |               | +-TableScan(column_list=[TestTable.KitchenSink#5], table=TestTable, column_index_list=[2])
    |   |               +-method="reservoir"
    |   |               +-size=
    |   |               | +-Literal(type=INT64, value=1)
    |   |               +-unit=ROWS
    |   +-order_by_item_list=
    |     +-OrderByItem
    |       +-column_ref=
    |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    +-limit=
      +-Literal(type=INT64, value=5)
==

with T as (select KitchenSink.int32_val val from TestTable)
select val
from (select * from T TABLESAMPLE SYSTEM (1 ROWS)) TABLESAMPLE SYSTEM (1 ROWS)
--
QueryStmt
+-output_column_list=
| +-T.val#5 AS val [INT32]
+-query=
  +-WithScan
    +-column_list=[T.val#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[T.val#4]
    |       +-expr_list=
    |       | +-val#4 :=
    |       |   +-GetProtoField
    |       |     +-type=INT32
    |       |     +-expr=
    |       |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |       |     +-field_descriptor=int32_val
    |       |     +-default_value=77
    |       +-input_scan=
    |         +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
    +-query=
      +-ProjectScan
        +-column_list=[T.val#5]
        +-input_scan=
          +-SampleScan
            +-column_list=[T.val#5]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[T.val#5]
            |   +-input_scan=
            |     +-SampleScan
            |       +-column_list=[T.val#5]
            |       +-input_scan=
            |       | +-WithRefScan(column_list=[T.val#5], with_query_name="T")
            |       +-method="system"
            |       +-size=
            |       | +-Literal(type=INT64, value=1)
            |       +-unit=ROWS
            +-method="system"
            +-size=
            | +-Literal(type=INT64, value=1)
            +-unit=ROWS
==

# Stratified TableSample disabled.
[language_features=TABLESAMPLE]
select * from KeyValue TABLESAMPLE RESERVOIR (100 ROWS PARTITION BY key)
--
ERROR: TABLESAMPLE does not support the PARTITION BY clause [at 1:56]
select * from KeyValue TABLESAMPLE RESERVOIR (100 ROWS PARTITION BY key)
                                                       ^
==

# Partition by single expression.
select * from KeyValue
TABLESAMPLE {{RESERVOIR|reservoir|ReserVoiR}} (100 ROWS PARTITION BY key)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-SampleScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=ROWS
        +-partition_by_list=
          +-ColumnRef(type=INT64, column=KeyValue.Key#1)
==

# Partition by supports only reservoir method.
select * from KeyValue TABLESAMPLE SYSTEM (10 PERCENT PARTITION BY key)
--
ERROR: The TABLESAMPLE SYSTEM method does not support PARTITION BY. Remove PARTITION BY, or use the TABLESAMPLE RESERVOIR method [at 1:55]
select * from KeyValue TABLESAMPLE SYSTEM (10 PERCENT PARTITION BY key)
                                                      ^
==

# Partition by supports only reservoir method with ROWS
select * from KeyValue TABLESAMPLE RESERVOIR (10 PERCENT PARTITION BY key)
--
ERROR: TABLESAMPLE with PERCENT does not support PARTITION BY. Remove PARTITION BY, or use TABLESAMPLE RESERVOIR with ROWS [at 1:58]
select * from KeyValue TABLESAMPLE RESERVOIR (10 PERCENT PARTITION BY key)
                                                         ^
==

# Sampling a WithScan.
WITH T AS (select key, value from KeyValue)
select * from T TABLESAMPLE RESERVOIR (10 ROWS PARTITION BY key);
--
QueryStmt
+-output_column_list=
| +-T.key#3 AS key [INT64]
| +-T.value#4 AS value [STRING]
+-query=
  +-WithScan
    +-column_list=T.[key#3, value#4]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=KeyValue.[Key#1, Value#2]
    |       +-input_scan=
    |         +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-query=
      +-ProjectScan
        +-column_list=T.[key#3, value#4]
        +-input_scan=
          +-SampleScan
            +-column_list=T.[key#3, value#4]
            +-input_scan=
            | +-WithRefScan(column_list=T.[key#3, value#4], with_query_name="T")
            +-method="reservoir"
            +-size=
            | +-Literal(type=INT64, value=10)
            +-unit=ROWS
            +-partition_by_list=
              +-ColumnRef(type=INT64, column=T.key#3)
==

# Sampling a join.
with
  t1 as (select key as k1 from KeyValue),
  t2 as (select key as k2 from KeyValue)
select *
from (select * from t1 join t2 on t1.k1 = t2.k2)
TABLESAMPLE RESERVOIR (100 ROWS PARTITION BY k1);
--
QueryStmt
+-output_column_list=
| +-t1.k1#5 AS k1 [INT64]
| +-t2.k2#6 AS k2 [INT64]
+-query=
  +-WithScan
    +-column_list=[t1.k1#5, t2.k2#6]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="t1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[KeyValue.Key#1]
    | |     +-input_scan=
    | |       +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[KeyValue.Key#3]
    |       +-input_scan=
    |         +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0])
    +-query=
      +-ProjectScan
        +-column_list=[t1.k1#5, t2.k2#6]
        +-input_scan=
          +-SampleScan
            +-column_list=[t1.k1#5, t2.k2#6]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[t1.k1#5, t2.k2#6]
            |   +-input_scan=
            |     +-JoinScan
            |       +-column_list=[t1.k1#5, t2.k2#6]
            |       +-left_scan=
            |       | +-WithRefScan(column_list=[t1.k1#5], with_query_name="t1")
            |       +-right_scan=
            |       | +-WithRefScan(column_list=[t2.k2#6], with_query_name="t2")
            |       +-join_expr=
            |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |           +-ColumnRef(type=INT64, column=t1.k1#5)
            |           +-ColumnRef(type=INT64, column=t2.k2#6)
            +-method="reservoir"
            +-size=
            | +-Literal(type=INT64, value=100)
            +-unit=ROWS
            +-partition_by_list=
              +-ColumnRef(type=INT64, column=t1.k1#5)
==

# Sample with direct join.
select *
from KeyValue TABLESAMPLE RANDOM1 (100 ROWS)
     CROSS JOIN (select * from KeyValue) TABLESAMPLE RANDOM2 (100 ROWS)
     CROSS JOIN (KeyValue kv1 JOIN KeyValue kv2 USING(key))
                TABLESAMPLE RESERVOIR (10 ROWS PARTITION BY key)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-KeyValue.Key#3 AS Key [INT64]
| +-KeyValue.Value#4 AS Value [STRING]
| +-KeyValue.Key#5 AS key [INT64]
| +-KeyValue.Value#6 AS Value [STRING]
| +-KeyValue.Value#8 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4, Key#5, Value#6, Value#8]
    +-input_scan=
      +-JoinScan
        +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4, Key#5, Value#6, Key#7, Value#8]
        +-left_scan=
        | +-JoinScan
        |   +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4]
        |   +-left_scan=
        |   | +-SampleScan
        |   |   +-column_list=KeyValue.[Key#1, Value#2]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   |   +-method="random1"
        |   |   +-size=
        |   |   | +-Literal(type=INT64, value=100)
        |   |   +-unit=ROWS
        |   +-right_scan=
        |     +-SampleScan
        |       +-column_list=KeyValue.[Key#3, Value#4]
        |       +-input_scan=
        |       | +-ProjectScan
        |       |   +-column_list=KeyValue.[Key#3, Value#4]
        |       |   +-input_scan=
        |       |     +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
        |       +-method="random2"
        |       +-size=
        |       | +-Literal(type=INT64, value=100)
        |       +-unit=ROWS
        +-right_scan=
          +-SampleScan
            +-column_list=KeyValue.[Key#5, Value#6, Key#7, Value#8]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=KeyValue.[Key#5, Value#6, Key#7, Value#8]
            |   +-left_scan=
            |   | +-TableScan(column_list=KeyValue.[Key#5, Value#6], table=KeyValue, column_index_list=[0, 1], alias='kv1')
            |   +-right_scan=
            |   | +-TableScan(column_list=KeyValue.[Key#7, Value#8], table=KeyValue, column_index_list=[0, 1], alias='kv2')
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=KeyValue.Key#5)
            |       +-ColumnRef(type=INT64, column=KeyValue.Key#7)
            +-method="reservoir"
            +-size=
            | +-Literal(type=INT64, value=10)
            +-unit=ROWS
            +-partition_by_list=
              +-ColumnRef(type=INT64, column=KeyValue.Key#5)
==

# Partition by two expressions.
select * from KeyValue TABLESAMPLE RESERVOIR (100 ROWS PARTITION BY Key, Value)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-SampleScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=ROWS
        +-partition_by_list=
          +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          +-ColumnRef(type=STRING, column=KeyValue.Value#2)
==

select * from KeyValue TABLESAMPLE RESERVOIR (100 ROWS PARTITION BY 1.0)
--
ERROR: PARTITION BY expression may not be a floating point type [at 1:69]
select * from KeyValue TABLESAMPLE RESERVOIR (100 ROWS PARTITION BY 1.0)
                                                                    ^
==

select * from KeyValue TABLESAMPLE RESERVOIR (100 ROWS PARTITION BY true)
--
ERROR: PARTITION BY expression must not be constant [at 1:69]
select * from KeyValue TABLESAMPLE RESERVOIR (100 ROWS PARTITION BY true)
                                                                    ^
==

select * from KeyValue TABLESAMPLE RESERVOIR (100 ROWS PARTITION BY Key + 1)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-SampleScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=ROWS
        +-partition_by_list=
          +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-Literal(type=INT64, value=1)
==

select * from TestTable
TABLESAMPLE RESERVOIR (100 ROWS PARTITION BY KitchenSink.nested_value)
--
ERROR: PARTITION BY expression must be groupable, but type is PROTO [at 2:46]
TABLESAMPLE RESERVOIR (100 ROWS PARTITION BY KitchenSink.nested_value)
                                             ^
==

select * from TestTable
TABLESAMPLE RESERVOIR (100 ROWS PARTITION BY KitchenSink.repeated_int32_val)
--
ERROR: PARTITION BY expression must be groupable, but type is ARRAY [at 2:46]
TABLESAMPLE RESERVOIR (100 ROWS PARTITION BY KitchenSink.repeated_int32_val)
                                             ^
==

select * from KeyValue TABLESAMPLE RESERVOIR (100 ROWS)
WITH WEIGHT {{|scale|AS scale|AS Value}} {{|REPEATABLE(1)}}
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$sample_weight.weight#3 AS weight [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.weight#3]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.weight#3]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=ROWS
        +-weight_column=
          +-ColumnHolder(column=$sample_weight.weight#3)
--
ALTERNATION GROUP: REPEATABLE(1)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$sample_weight.weight#3 AS weight [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.weight#3]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.weight#3]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=ROWS
        +-repeatable_argument=
        | +-Literal(type=INT64, value=1)
        +-weight_column=
          +-ColumnHolder(column=$sample_weight.weight#3)
--
ALTERNATION GROUPS:
    scale,
    AS scale,
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$sample_weight.scale#3 AS scale [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.scale#3]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.scale#3]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=ROWS
        +-weight_column=
          +-ColumnHolder(column=$sample_weight.scale#3)
--
ALTERNATION GROUPS:
    scale,REPEATABLE(1)
    AS scale,REPEATABLE(1)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$sample_weight.scale#3 AS scale [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.scale#3]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.scale#3]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=ROWS
        +-repeatable_argument=
        | +-Literal(type=INT64, value=1)
        +-weight_column=
          +-ColumnHolder(column=$sample_weight.scale#3)
--
ALTERNATION GROUP: AS Value,
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$sample_weight.Value#3 AS Value [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.Value#3]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.Value#3]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=ROWS
        +-weight_column=
          +-ColumnHolder(column=$sample_weight.Value#3)
--
ALTERNATION GROUP: AS Value,REPEATABLE(1)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$sample_weight.Value#3 AS Value [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.Value#3]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.Value#3]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=ROWS
        +-repeatable_argument=
        | +-Literal(type=INT64, value=1)
        +-weight_column=
          +-ColumnHolder(column=$sample_weight.Value#3)
==

select t.*, weight from KeyValue AS t
TABLESAMPLE RESERVOIR (100 ROWS) WITH WEIGHT
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$sample_weight.weight#3 AS weight [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.weight#3]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.weight#3]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias='t')
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=ROWS
        +-weight_column=
          +-ColumnHolder(column=$sample_weight.weight#3)
==

select t.* from KeyValue AS t
TABLESAMPLE RESERVOIR (100 ROWS) WITH WEIGHT
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-SampleScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias='t')
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=100)
        +-unit=ROWS
        +-weight_column=
          +-ColumnHolder(column=$sample_weight.weight#3)
==

select * from KeyValue AS t
TABLESAMPLE RESERVOIR (100 ROWS) WITH WEIGHT as t
--
ERROR: Duplicate alias t found [at 2:46]
TABLESAMPLE RESERVOIR (100 ROWS) WITH WEIGHT as t
                                             ^
==

select * from KeyValue AS weight
TABLESAMPLE RESERVOIR (100 ROWS) WITH WEIGHT
--
ERROR: Duplicate alias weight found [at 2:34]
TABLESAMPLE RESERVOIR (100 ROWS) WITH WEIGHT
                                 ^
==

with t as (select 1 as value, 2 as weight)
select * from t TABLESAMPLE RESERVOIR (100 ROWS) WITH WEIGHT
--
QueryStmt
+-output_column_list=
| +-t.value#3 AS value [INT64]
| +-t.weight#4 AS weight [INT64]
| +-$sample_weight.weight#5 AS weight [DOUBLE]
+-query=
  +-WithScan
    +-column_list=[t.value#3, t.weight#4, $sample_weight.weight#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t.[value#1, weight#2]
    |       +-expr_list=
    |       | +-value#1 := Literal(type=INT64, value=1)
    |       | +-weight#2 := Literal(type=INT64, value=2)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[t.value#3, t.weight#4, $sample_weight.weight#5]
        +-input_scan=
          +-SampleScan
            +-column_list=[t.value#3, t.weight#4, $sample_weight.weight#5]
            +-input_scan=
            | +-WithRefScan(column_list=t.[value#3, weight#4], with_query_name="t")
            +-method="reservoir"
            +-size=
            | +-Literal(type=INT64, value=100)
            +-unit=ROWS
            +-weight_column=
              +-ColumnHolder(column=$sample_weight.weight#5)
==

with t as (select 1 as foo)
select * from t TABLESAMPLE RESERVOIR (100 ROWS) WITH WEIGHT as foo
--
QueryStmt
+-output_column_list=
| +-t.foo#2 AS foo [INT64]
| +-$sample_weight.foo#3 AS foo [DOUBLE]
+-query=
  +-WithScan
    +-column_list=[t.foo#2, $sample_weight.foo#3]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[t.foo#1]
    |       +-expr_list=
    |       | +-foo#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[t.foo#2, $sample_weight.foo#3]
        +-input_scan=
          +-SampleScan
            +-column_list=[t.foo#2, $sample_weight.foo#3]
            +-input_scan=
            | +-WithRefScan(column_list=[t.foo#2], with_query_name="t")
            +-method="reservoir"
            +-size=
            | +-Literal(type=INT64, value=100)
            +-unit=ROWS
            +-weight_column=
              +-ColumnHolder(column=$sample_weight.foo#3)
==

select weight.* from KeyValue
TABLESAMPLE RESERVOIR (100 ROWS) WITH WEIGHT
--
ERROR: Dot-star is not supported for type DOUBLE [at 1:8]
select weight.* from KeyValue
       ^
==

select foo from KeyValue TABLESAMPLE RESERVOIR (100 ROWS) WITH WEIGHT as foo
UNION ALL
select bar from KeyValue TABLESAMPLE RESERVOIR (100 ROWS) WITH WEIGHT as bar
--
QueryStmt
+-output_column_list=
| +-$union_all.foo#7 AS foo [DOUBLE]
+-query=
  +-SetOperationScan
    +-column_list=[$union_all.foo#7]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$sample_weight.foo#3]
      | |   +-input_scan=
      | |     +-SampleScan
      | |       +-column_list=[$sample_weight.foo#3]
      | |       +-input_scan=
      | |       | +-TableScan(table=KeyValue)
      | |       +-method="reservoir"
      | |       +-size=
      | |       | +-Literal(type=INT64, value=100)
      | |       +-unit=ROWS
      | |       +-weight_column=
      | |         +-ColumnHolder(column=$sample_weight.foo#3)
      | +-output_column_list=[$sample_weight.foo#3]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$sample_weight.bar#6]
        |   +-input_scan=
        |     +-SampleScan
        |       +-column_list=[$sample_weight.bar#6]
        |       +-input_scan=
        |       | +-TableScan(table=KeyValue)
        |       +-method="reservoir"
        |       +-size=
        |       | +-Literal(type=INT64, value=100)
        |       +-unit=ROWS
        |       +-weight_column=
        |         +-ColumnHolder(column=$sample_weight.bar#6)
        +-output_column_list=[$sample_weight.bar#6]
==

with
  t1 as (select * from KeyValue TABLESAMPLE RESERVOIR (100 ROWS) WITH WEIGHT),
  t2 as (select * from Keyvalue TABLESAMPLE RESERVOIR (100 ROWS) WITH WEIGHT)
select * from t1 join t2 using(weight)
--
QueryStmt
+-output_column_list=
| +-t1.weight#9 AS weight [DOUBLE]
| +-t1.Key#7 AS Key [INT64]
| +-t1.Value#8 AS Value [STRING]
| +-t2.Key#10 AS Key [INT64]
| +-t2.Value#11 AS Value [STRING]
+-query=
  +-WithScan
    +-column_list=[t1.weight#9, t1.Key#7, t1.Value#8, t2.Key#10, t2.Value#11]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="t1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.weight#3]
    | |     +-input_scan=
    | |       +-SampleScan
    | |         +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $sample_weight.weight#3]
    | |         +-input_scan=
    | |         | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    | |         +-method="reservoir"
    | |         +-size=
    | |         | +-Literal(type=INT64, value=100)
    | |         +-unit=ROWS
    | |         +-weight_column=
    | |           +-ColumnHolder(column=$sample_weight.weight#3)
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[KeyValue.Key#4, KeyValue.Value#5, $sample_weight.weight#6]
    |       +-input_scan=
    |         +-SampleScan
    |           +-column_list=[KeyValue.Key#4, KeyValue.Value#5, $sample_weight.weight#6]
    |           +-input_scan=
    |           | +-TableScan(column_list=KeyValue.[Key#4, Value#5], table=KeyValue, column_index_list=[0, 1])
    |           +-method="reservoir"
    |           +-size=
    |           | +-Literal(type=INT64, value=100)
    |           +-unit=ROWS
    |           +-weight_column=
    |             +-ColumnHolder(column=$sample_weight.weight#6)
    +-query=
      +-ProjectScan
        +-column_list=[t1.weight#9, t1.Key#7, t1.Value#8, t2.Key#10, t2.Value#11]
        +-input_scan=
          +-JoinScan
            +-column_list=[t1.Key#7, t1.Value#8, t1.weight#9, t2.Key#10, t2.Value#11, t2.weight#12]
            +-left_scan=
            | +-WithRefScan(column_list=t1.[Key#7, Value#8, weight#9], with_query_name="t1")
            +-right_scan=
            | +-WithRefScan(column_list=t2.[Key#10, Value#11, weight#12], with_query_name="t2")
            +-join_expr=
              +-FunctionCall(ZetaSQL:$equal(DOUBLE, DOUBLE) -> BOOL)
                +-ColumnRef(type=DOUBLE, column=t1.weight#9)
                +-ColumnRef(type=DOUBLE, column=t2.weight#12)
==

with
  t1 as (select * from
         KeyValue TABLESAMPLE RESERVOIR (1 ROWS) WITH WEIGHT),
  t2 as (select * from
         Keyvalue TABLESAMPLE RESERVOIR (1 ROWS) WITH WEIGHT as Value)
select * from t1 join t2 using(Value)
--
ERROR: Column Value in USING clause is ambiguous on right side of join [at 6:32]
select * from t1 join t2 using(Value)
                               ^
==

select Value from KeyValue
TABLESAMPLE RESERVOIR (1 ROWS) WITH WEIGHT AS Value
--
QueryStmt
+-output_column_list=
| +-$sample_weight.Value#3 AS Value [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$sample_weight.Value#3]
    +-input_scan=
      +-SampleScan
        +-column_list=[$sample_weight.Value#3]
        +-input_scan=
        | +-TableScan(table=KeyValue)
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=1)
        +-unit=ROWS
        +-weight_column=
          +-ColumnHolder(column=$sample_weight.Value#3)
==

select KeyValue.Value from KeyValue
TABLESAMPLE RESERVOIR (1 ROWS) WITH WEIGHT Value
--
QueryStmt
+-output_column_list=
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Value#2]
    +-input_scan=
      +-SampleScan
        +-column_list=[KeyValue.Value#2]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=1)
        +-unit=ROWS
        +-weight_column=
          +-ColumnHolder(column=$sample_weight.Value#3)
