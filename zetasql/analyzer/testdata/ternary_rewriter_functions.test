[default enabled_ast_rewrites=DEFAULTS]
[default language_features=V_1_2_SAFE_FUNCTION_CALL]

SELECT ARRAY_SLICE([1, 2]{{|, 1}})
--
ALTERNATION GROUP: <empty>
--
ERROR: Number of arguments does not match for function ARRAY_SLICE. Supported signature: ARRAY_SLICE(ARRAY, INT64, INT64) [at 1:8]
SELECT ARRAY_SLICE([1, 2])
       ^
--
ALTERNATION GROUP: , 1
--
ERROR: Number of arguments does not match for function ARRAY_SLICE. Supported signature: ARRAY_SLICE(ARRAY, INT64, INT64) [at 1:8]
SELECT ARRAY_SLICE([1, 2], 1)
       ^
==

SELECT ARRAY_SLICE([1, 2], 0, -1)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:array_slice(ARRAY<INT64> array_to_slice, INT64 start_offset, INT64 end_offset) -> ARRAY<INT64>)
    |     +-Literal(type=ARRAY<INT64>, value=[1, 2])
    |     +-Literal(type=INT64, value=0)
    |     +-Literal(type=INT64, value=-1)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#9]
    |         +-expr_list=
    |         | +-$col1#9 :=
    |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(2) BOOL, repeated(2) ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(2) BOOL) -> BOOL)
    |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_slice#2)
    |         |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
    |         |     | | +-ColumnRef(type=INT64, column=$subquery1.start_offset#4)
    |         |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
    |         |     |   +-ColumnRef(type=INT64, column=$subquery1.end_offset#3)
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |         |     | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_slice#2)
    |         |     | +-Literal(type=INT64, value=0)
    |         |     +-Literal(type=ARRAY<INT64>, value=[])
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<INT64>
    |         |       +-subquery_type=SCALAR
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_slice#2)
    |         |       | +-ColumnRef(type=INT64, column=$subquery1.end_offset#3)
    |         |       | +-ColumnRef(type=INT64, column=$subquery1.start_offset#4)
    |         |       +-subquery=
    |         |         +-ProjectScan
    |         |           +-column_list=[$with_expr.injected#10]
    |         |           +-expr_list=
    |         |           | +-injected#10 :=
    |         |           |   +-SubqueryExpr
    |         |           |     +-type=ARRAY<INT64>
    |         |           |     +-subquery_type=ARRAY
    |         |           |     +-parameter_list=
    |         |           |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_slice#2, is_correlated=TRUE)
    |         |           |     | +-ColumnRef(type=INT64, column=$with_expr.start_offset#5)
    |         |           |     | +-ColumnRef(type=INT64, column=$with_expr.end_offset#6)
    |         |           |     +-subquery=
    |         |           |       +-OrderByScan
    |         |           |         +-column_list=[$array.e#7]
    |         |           |         +-is_ordered=TRUE
    |         |           |         +-input_scan=
    |         |           |         | +-FilterScan
    |         |           |         |   +-column_list=[$array.e#7, $array_offset.idx#8]
    |         |           |         |   +-input_scan=
    |         |           |         |   | +-ArrayScan
    |         |           |         |   |   +-column_list=[$array.e#7, $array_offset.idx#8]
    |         |           |         |   |   +-array_expr=
    |         |           |         |   |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_slice#2, is_correlated=TRUE)
    |         |           |         |   |   +-element_column=$array.e#7
    |         |           |         |   |   +-array_offset_column=
    |         |           |         |   |     +-ColumnHolder(column=$array_offset.idx#8)
    |         |           |         |   +-filter_expr=
    |         |           |         |     +-FunctionCall(ZetaSQL:$between(INT64, INT64, INT64) -> BOOL)
    |         |           |         |       +-ColumnRef(type=INT64, column=$array_offset.idx#8)
    |         |           |         |       +-ColumnRef(type=INT64, column=$with_expr.start_offset#5, is_correlated=TRUE)
    |         |           |         |       +-ColumnRef(type=INT64, column=$with_expr.end_offset#6, is_correlated=TRUE)
    |         |           |         +-order_by_item_list=
    |         |           |           +-OrderByItem
    |         |           |             +-column_ref=
    |         |           |               +-ColumnRef(type=INT64, column=$array_offset.idx#8)
    |         |           +-input_scan=
    |         |             +-ProjectScan
    |         |               +-column_list=$with_expr.[start_offset#5, end_offset#6]
    |         |               +-expr_list=
    |         |               | +-end_offset#6 :=
    |         |               |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |         |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |         |               |     | +-ColumnRef(type=INT64, column=$subquery1.end_offset#3, is_correlated=TRUE)
    |         |               |     | +-Literal(type=INT64, value=0)
    |         |               |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |               |     | +-ColumnRef(type=INT64, column=$subquery1.end_offset#3, is_correlated=TRUE)
    |         |               |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |         |               |     |   +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_slice#2, is_correlated=TRUE)
    |         |               |     +-ColumnRef(type=INT64, column=$subquery1.end_offset#3, is_correlated=TRUE)
    |         |               +-input_scan=
    |         |                 +-ProjectScan
    |         |                   +-column_list=[$with_expr.start_offset#5]
    |         |                   +-expr_list=
    |         |                   | +-start_offset#5 :=
    |         |                   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |         |                   |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |         |                   |     | +-ColumnRef(type=INT64, column=$subquery1.start_offset#4, is_correlated=TRUE)
    |         |                   |     | +-Literal(type=INT64, value=0)
    |         |                   |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |                   |     | +-ColumnRef(type=INT64, column=$subquery1.start_offset#4, is_correlated=TRUE)
    |         |                   |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |         |                   |     |   +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_slice#2, is_correlated=TRUE)
    |         |                   |     +-ColumnRef(type=INT64, column=$subquery1.start_offset#4, is_correlated=TRUE)
    |         |                   +-input_scan=
    |         |                     +-SingleRowScan
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[array_to_slice#2, end_offset#3, start_offset#4]
    |             +-expr_list=
    |             | +-array_to_slice#2 := Literal(type=ARRAY<INT64>, value=[1, 2])
    |             | +-end_offset#3 := Literal(type=INT64, value=-1)
    |             | +-start_offset#4 := Literal(type=INT64, value=0)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[suppress_functions={{|NULLIFERROR|IFERROR}}]
SELECT SAFE.ARRAY_SLICE([1, 2], 0, -1)
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_slice(ARRAY<INT64> array_to_slice, INT64 start_offset, INT64 end_offset) -> ARRAY<INT64>)
    |     +-Literal(type=ARRAY<INT64>, value=[1, 2])
    |     +-Literal(type=INT64, value=0)
    |     +-Literal(type=INT64, value=-1)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#9]
    |         +-expr_list=
    |         | +-$col1#9 :=
    |         |   +-FunctionCall(ZetaSQL:iferror(ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$case_no_value(repeated(2) BOOL, repeated(2) ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     | +-FunctionCall(ZetaSQL:$or(BOOL, repeated(2) BOOL) -> BOOL)
    |         |     | | +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_slice#2)
    |         |     | | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
    |         |     | | | +-ColumnRef(type=INT64, column=$subquery1.start_offset#4)
    |         |     | | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
    |         |     | |   +-ColumnRef(type=INT64, column=$subquery1.end_offset#3)
    |         |     | +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |     | | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |         |     | | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_slice#2)
    |         |     | | +-Literal(type=INT64, value=0)
    |         |     | +-Literal(type=ARRAY<INT64>, value=[])
    |         |     | +-SubqueryExpr
    |         |     |   +-type=ARRAY<INT64>
    |         |     |   +-subquery_type=SCALAR
    |         |     |   +-parameter_list=
    |         |     |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_slice#2)
    |         |     |   | +-ColumnRef(type=INT64, column=$subquery1.end_offset#3)
    |         |     |   | +-ColumnRef(type=INT64, column=$subquery1.start_offset#4)
    |         |     |   +-subquery=
    |         |     |     +-ProjectScan
    |         |     |       +-column_list=[$with_expr.injected#10]
    |         |     |       +-expr_list=
    |         |     |       | +-injected#10 :=
    |         |     |       |   +-SubqueryExpr
    |         |     |       |     +-type=ARRAY<INT64>
    |         |     |       |     +-subquery_type=ARRAY
    |         |     |       |     +-parameter_list=
    |         |     |       |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_slice#2, is_correlated=TRUE)
    |         |     |       |     | +-ColumnRef(type=INT64, column=$with_expr.start_offset#5)
    |         |     |       |     | +-ColumnRef(type=INT64, column=$with_expr.end_offset#6)
    |         |     |       |     +-subquery=
    |         |     |       |       +-OrderByScan
    |         |     |       |         +-column_list=[$array.e#7]
    |         |     |       |         +-is_ordered=TRUE
    |         |     |       |         +-input_scan=
    |         |     |       |         | +-FilterScan
    |         |     |       |         |   +-column_list=[$array.e#7, $array_offset.idx#8]
    |         |     |       |         |   +-input_scan=
    |         |     |       |         |   | +-ArrayScan
    |         |     |       |         |   |   +-column_list=[$array.e#7, $array_offset.idx#8]
    |         |     |       |         |   |   +-array_expr=
    |         |     |       |         |   |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_slice#2, is_correlated=TRUE)
    |         |     |       |         |   |   +-element_column=$array.e#7
    |         |     |       |         |   |   +-array_offset_column=
    |         |     |       |         |   |     +-ColumnHolder(column=$array_offset.idx#8)
    |         |     |       |         |   +-filter_expr=
    |         |     |       |         |     +-FunctionCall(ZetaSQL:$between(INT64, INT64, INT64) -> BOOL)
    |         |     |       |         |       +-ColumnRef(type=INT64, column=$array_offset.idx#8)
    |         |     |       |         |       +-ColumnRef(type=INT64, column=$with_expr.start_offset#5, is_correlated=TRUE)
    |         |     |       |         |       +-ColumnRef(type=INT64, column=$with_expr.end_offset#6, is_correlated=TRUE)
    |         |     |       |         +-order_by_item_list=
    |         |     |       |           +-OrderByItem
    |         |     |       |             +-column_ref=
    |         |     |       |               +-ColumnRef(type=INT64, column=$array_offset.idx#8)
    |         |     |       +-input_scan=
    |         |     |         +-ProjectScan
    |         |     |           +-column_list=$with_expr.[start_offset#5, end_offset#6]
    |         |     |           +-expr_list=
    |         |     |           | +-end_offset#6 :=
    |         |     |           |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |         |     |           |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |         |     |           |     | +-ColumnRef(type=INT64, column=$subquery1.end_offset#3, is_correlated=TRUE)
    |         |     |           |     | +-Literal(type=INT64, value=0)
    |         |     |           |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |     |           |     | +-ColumnRef(type=INT64, column=$subquery1.end_offset#3, is_correlated=TRUE)
    |         |     |           |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |         |     |           |     |   +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_slice#2, is_correlated=TRUE)
    |         |     |           |     +-ColumnRef(type=INT64, column=$subquery1.end_offset#3, is_correlated=TRUE)
    |         |     |           +-input_scan=
    |         |     |             +-ProjectScan
    |         |     |               +-column_list=[$with_expr.start_offset#5]
    |         |     |               +-expr_list=
    |         |     |               | +-start_offset#5 :=
    |         |     |               |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |         |     |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |         |     |               |     | +-ColumnRef(type=INT64, column=$subquery1.start_offset#4, is_correlated=TRUE)
    |         |     |               |     | +-Literal(type=INT64, value=0)
    |         |     |               |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |     |               |     | +-ColumnRef(type=INT64, column=$subquery1.start_offset#4, is_correlated=TRUE)
    |         |     |               |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |         |     |               |     |   +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_slice#2, is_correlated=TRUE)
    |         |     |               |     +-ColumnRef(type=INT64, column=$subquery1.start_offset#4, is_correlated=TRUE)
    |         |     |               +-input_scan=
    |         |     |                 +-SingleRowScan
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL, has_explicit_type=TRUE)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[array_to_slice#2, end_offset#3, start_offset#4]
    |             +-expr_list=
    |             | +-array_to_slice#2 := Literal(type=ARRAY<INT64>, value=[1, 2])
    |             | +-end_offset#3 := Literal(type=INT64, value=-1)
    |             | +-start_offset#4 := Literal(type=INT64, value=0)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    NULLIFERROR
    IFERROR
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_slice(ARRAY<INT64> array_to_slice, INT64 start_offset, INT64 end_offset) -> ARRAY<INT64>)
    |     +-Literal(type=ARRAY<INT64>, value=[1, 2])
    |     +-Literal(type=INT64, value=0)
    |     +-Literal(type=INT64, value=-1)
    +-input_scan=
      +-SingleRowScan

Rewrite ERROR: generic::unimplemented: SAFE mode calls to ARRAY_SLICE are not supported.
==

[language_features=V_1_2_SAFE_FUNCTION_CALL,V_1_4_SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS,V_1_4_ARRAY_FIND_FUNCTIONS]
[no_java]
# TODO: Enable this test when enum debug string is fixed in Java
SELECT {{|SAFE.}}ARRAY_OFFSET([], 'hello')
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:array_offset(ARRAY<STRING> input_array, STRING target_element, optional(1) ENUM<ARRAY_FIND_MODE> find_mode) -> INT64)
    |     +-Literal(type=ARRAY<STRING>, value=[])
    |     +-Literal(type=STRING, value='hello')
    |     +-Literal(type=ENUM<ARRAY_FIND_MODE>, value=FIRST)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#9]
    |         +-expr_list=
    |         | +-$col1#9 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(2) BOOL) -> BOOL)
    |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3)
    |         |     | +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |     | | +-ColumnRef(type=STRING, column=$subquery1.target_element#4)
    |         |     | +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_FIND_MODE>) -> BOOL)
    |         |     |   +-ColumnRef(type=ENUM<ARRAY_FIND_MODE>, column=$subquery1.find_mode#2)
    |         |     +-Literal(type=INT64, value=NULL)
    |         |     +-FunctionCall(ZetaSQL:$case_with_value(ENUM<ARRAY_FIND_MODE>, repeated(2) ENUM<ARRAY_FIND_MODE>, repeated(2) INT64, INT64) -> INT64)
    |         |       +-ColumnRef(type=ENUM<ARRAY_FIND_MODE>, column=$subquery1.find_mode#2)
    |         |       +-Literal(type=ENUM<ARRAY_FIND_MODE>, value=FIRST)
    |         |       +-SubqueryExpr
    |         |       | +-type=INT64
    |         |       | +-subquery_type=SCALAR
    |         |       | +-parameter_list=
    |         |       | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3)
    |         |       | | +-ColumnRef(type=STRING, column=$subquery1.target_element#4)
    |         |       | +-subquery=
    |         |       |   +-LimitOffsetScan
    |         |       |     +-column_list=[$array_offset.offset_idx#6]
    |         |       |     +-input_scan=
    |         |       |     | +-OrderByScan
    |         |       |     |   +-column_list=[$array_offset.offset_idx#6]
    |         |       |     |   +-is_ordered=TRUE
    |         |       |     |   +-input_scan=
    |         |       |     |   | +-FilterScan
    |         |       |     |   |   +-column_list=[$array.e#5, $array_offset.offset_idx#6]
    |         |       |     |   |   +-input_scan=
    |         |       |     |   |   | +-ArrayScan
    |         |       |     |   |   |   +-column_list=[$array.e#5, $array_offset.offset_idx#6]
    |         |       |     |   |   |   +-array_expr=
    |         |       |     |   |   |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3, is_correlated=TRUE)
    |         |       |     |   |   |   +-element_column=$array.e#5
    |         |       |     |   |   |   +-array_offset_column=
    |         |       |     |   |   |     +-ColumnHolder(column=$array_offset.offset_idx#6)
    |         |       |     |   |   +-filter_expr=
    |         |       |     |   |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |         |       |     |   |       +-ColumnRef(type=STRING, column=$array.e#5)
    |         |       |     |   |       +-ColumnRef(type=STRING, column=$subquery1.target_element#4, is_correlated=TRUE)
    |         |       |     |   +-order_by_item_list=
    |         |       |     |     +-OrderByItem
    |         |       |     |       +-column_ref=
    |         |       |     |         +-ColumnRef(type=INT64, column=$array_offset.offset_idx#6)
    |         |       |     +-limit=
    |         |       |       +-Literal(type=INT64, value=1)
    |         |       +-Literal(type=ENUM<ARRAY_FIND_MODE>, value=LAST)
    |         |       +-SubqueryExpr
    |         |       | +-type=INT64
    |         |       | +-subquery_type=SCALAR
    |         |       | +-parameter_list=
    |         |       | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3)
    |         |       | | +-ColumnRef(type=STRING, column=$subquery1.target_element#4)
    |         |       | +-subquery=
    |         |       |   +-LimitOffsetScan
    |         |       |     +-column_list=[$array_offset.offset_idx#8]
    |         |       |     +-input_scan=
    |         |       |     | +-OrderByScan
    |         |       |     |   +-column_list=[$array_offset.offset_idx#8]
    |         |       |     |   +-is_ordered=TRUE
    |         |       |     |   +-input_scan=
    |         |       |     |   | +-FilterScan
    |         |       |     |   |   +-column_list=[$array.e#7, $array_offset.offset_idx#8]
    |         |       |     |   |   +-input_scan=
    |         |       |     |   |   | +-ArrayScan
    |         |       |     |   |   |   +-column_list=[$array.e#7, $array_offset.offset_idx#8]
    |         |       |     |   |   |   +-array_expr=
    |         |       |     |   |   |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3, is_correlated=TRUE)
    |         |       |     |   |   |   +-element_column=$array.e#7
    |         |       |     |   |   |   +-array_offset_column=
    |         |       |     |   |   |     +-ColumnHolder(column=$array_offset.offset_idx#8)
    |         |       |     |   |   +-filter_expr=
    |         |       |     |   |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |         |       |     |   |       +-ColumnRef(type=STRING, column=$array.e#7)
    |         |       |     |   |       +-ColumnRef(type=STRING, column=$subquery1.target_element#4, is_correlated=TRUE)
    |         |       |     |   +-order_by_item_list=
    |         |       |     |     +-OrderByItem
    |         |       |     |       +-column_ref=
    |         |       |     |       | +-ColumnRef(type=INT64, column=$array_offset.offset_idx#8)
    |         |       |     |       +-is_descending=TRUE
    |         |       |     +-limit=
    |         |       |       +-Literal(type=INT64, value=1)
    |         |       +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
    |         |         +-FunctionCall(ZetaSQL:concat(STRING, repeated(2) STRING) -> STRING)
    |         |           +-Literal(type=STRING, value='ARRAY_FIND_MODE ')
    |         |           +-Cast(ENUM<ARRAY_FIND_MODE> -> STRING)
    |         |           | +-ColumnRef(type=ENUM<ARRAY_FIND_MODE>, column=$subquery1.find_mode#2)
    |         |           +-Literal(type=STRING, value=' in ARRAY_OFFSET is unsupported.')
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[find_mode#2, input_array#3, target_element#4]
    |             +-expr_list=
    |             | +-find_mode#2 := Literal(type=ENUM<ARRAY_FIND_MODE>, value=FIRST)
    |             | +-input_array#3 := Literal(type=ARRAY<STRING>, value=[])
    |             | +-target_element#4 := Literal(type=STRING, value="hello")
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: SAFE.
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_offset(ARRAY<STRING> input_array, STRING target_element, optional(1) ENUM<ARRAY_FIND_MODE> find_mode) -> INT64)
    |     +-Literal(type=ARRAY<STRING>, value=[])
    |     +-Literal(type=STRING, value='hello')
    |     +-Literal(type=ENUM<ARRAY_FIND_MODE>, value=FIRST)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#9]
    |         +-expr_list=
    |         | +-$col1#9 :=
    |         |   +-FunctionCall(ZetaSQL:iferror(INT64, INT64) -> INT64)
    |         |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |         |     | +-FunctionCall(ZetaSQL:$or(BOOL, repeated(2) BOOL) -> BOOL)
    |         |     | | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |     | | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3)
    |         |     | | +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |     | | | +-ColumnRef(type=STRING, column=$subquery1.target_element#4)
    |         |     | | +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_FIND_MODE>) -> BOOL)
    |         |     | |   +-ColumnRef(type=ENUM<ARRAY_FIND_MODE>, column=$subquery1.find_mode#2)
    |         |     | +-Literal(type=INT64, value=NULL)
    |         |     | +-FunctionCall(ZetaSQL:$case_with_value(ENUM<ARRAY_FIND_MODE>, repeated(2) ENUM<ARRAY_FIND_MODE>, repeated(2) INT64, INT64) -> INT64)
    |         |     |   +-ColumnRef(type=ENUM<ARRAY_FIND_MODE>, column=$subquery1.find_mode#2)
    |         |     |   +-Literal(type=ENUM<ARRAY_FIND_MODE>, value=FIRST)
    |         |     |   +-SubqueryExpr
    |         |     |   | +-type=INT64
    |         |     |   | +-subquery_type=SCALAR
    |         |     |   | +-parameter_list=
    |         |     |   | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3)
    |         |     |   | | +-ColumnRef(type=STRING, column=$subquery1.target_element#4)
    |         |     |   | +-subquery=
    |         |     |   |   +-LimitOffsetScan
    |         |     |   |     +-column_list=[$array_offset.offset_idx#6]
    |         |     |   |     +-input_scan=
    |         |     |   |     | +-OrderByScan
    |         |     |   |     |   +-column_list=[$array_offset.offset_idx#6]
    |         |     |   |     |   +-is_ordered=TRUE
    |         |     |   |     |   +-input_scan=
    |         |     |   |     |   | +-FilterScan
    |         |     |   |     |   |   +-column_list=[$array.e#5, $array_offset.offset_idx#6]
    |         |     |   |     |   |   +-input_scan=
    |         |     |   |     |   |   | +-ArrayScan
    |         |     |   |     |   |   |   +-column_list=[$array.e#5, $array_offset.offset_idx#6]
    |         |     |   |     |   |   |   +-array_expr=
    |         |     |   |     |   |   |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3, is_correlated=TRUE)
    |         |     |   |     |   |   |   +-element_column=$array.e#5
    |         |     |   |     |   |   |   +-array_offset_column=
    |         |     |   |     |   |   |     +-ColumnHolder(column=$array_offset.offset_idx#6)
    |         |     |   |     |   |   +-filter_expr=
    |         |     |   |     |   |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |         |     |   |     |   |       +-ColumnRef(type=STRING, column=$array.e#5)
    |         |     |   |     |   |       +-ColumnRef(type=STRING, column=$subquery1.target_element#4, is_correlated=TRUE)
    |         |     |   |     |   +-order_by_item_list=
    |         |     |   |     |     +-OrderByItem
    |         |     |   |     |       +-column_ref=
    |         |     |   |     |         +-ColumnRef(type=INT64, column=$array_offset.offset_idx#6)
    |         |     |   |     +-limit=
    |         |     |   |       +-Literal(type=INT64, value=1)
    |         |     |   +-Literal(type=ENUM<ARRAY_FIND_MODE>, value=LAST)
    |         |     |   +-SubqueryExpr
    |         |     |   | +-type=INT64
    |         |     |   | +-subquery_type=SCALAR
    |         |     |   | +-parameter_list=
    |         |     |   | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3)
    |         |     |   | | +-ColumnRef(type=STRING, column=$subquery1.target_element#4)
    |         |     |   | +-subquery=
    |         |     |   |   +-LimitOffsetScan
    |         |     |   |     +-column_list=[$array_offset.offset_idx#8]
    |         |     |   |     +-input_scan=
    |         |     |   |     | +-OrderByScan
    |         |     |   |     |   +-column_list=[$array_offset.offset_idx#8]
    |         |     |   |     |   +-is_ordered=TRUE
    |         |     |   |     |   +-input_scan=
    |         |     |   |     |   | +-FilterScan
    |         |     |   |     |   |   +-column_list=[$array.e#7, $array_offset.offset_idx#8]
    |         |     |   |     |   |   +-input_scan=
    |         |     |   |     |   |   | +-ArrayScan
    |         |     |   |     |   |   |   +-column_list=[$array.e#7, $array_offset.offset_idx#8]
    |         |     |   |     |   |   |   +-array_expr=
    |         |     |   |     |   |   |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3, is_correlated=TRUE)
    |         |     |   |     |   |   |   +-element_column=$array.e#7
    |         |     |   |     |   |   |   +-array_offset_column=
    |         |     |   |     |   |   |     +-ColumnHolder(column=$array_offset.offset_idx#8)
    |         |     |   |     |   |   +-filter_expr=
    |         |     |   |     |   |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |         |     |   |     |   |       +-ColumnRef(type=STRING, column=$array.e#7)
    |         |     |   |     |   |       +-ColumnRef(type=STRING, column=$subquery1.target_element#4, is_correlated=TRUE)
    |         |     |   |     |   +-order_by_item_list=
    |         |     |   |     |     +-OrderByItem
    |         |     |   |     |       +-column_ref=
    |         |     |   |     |       | +-ColumnRef(type=INT64, column=$array_offset.offset_idx#8)
    |         |     |   |     |       +-is_descending=TRUE
    |         |     |   |     +-limit=
    |         |     |   |       +-Literal(type=INT64, value=1)
    |         |     |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
    |         |     |     +-FunctionCall(ZetaSQL:concat(STRING, repeated(2) STRING) -> STRING)
    |         |     |       +-Literal(type=STRING, value='ARRAY_FIND_MODE ')
    |         |     |       +-Cast(ENUM<ARRAY_FIND_MODE> -> STRING)
    |         |     |       | +-ColumnRef(type=ENUM<ARRAY_FIND_MODE>, column=$subquery1.find_mode#2)
    |         |     |       +-Literal(type=STRING, value=' in ARRAY_OFFSET is unsupported.')
    |         |     +-Literal(type=INT64, value=NULL, has_explicit_type=TRUE)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[find_mode#2, input_array#3, target_element#4]
    |             +-expr_list=
    |             | +-find_mode#2 := Literal(type=ENUM<ARRAY_FIND_MODE>, value=FIRST)
    |             | +-input_array#3 := Literal(type=ARRAY<STRING>, value=[])
    |             | +-target_element#4 := Literal(type=STRING, value="hello")
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_2_SAFE_FUNCTION_CALL,V_1_4_SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS,V_1_4_ARRAY_FIND_FUNCTIONS]
[no_java]
# TODO: Enable this test when enum debug string is fixed in Java
SELECT {{|SAFE.}}ARRAY_FIND([], 'hello')
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:array_find(ARRAY<STRING> input_array, STRING target_element, optional(1) ENUM<ARRAY_FIND_MODE> find_mode) -> STRING)
    |     +-Literal(type=ARRAY<STRING>, value=[])
    |     +-Literal(type=STRING, value='hello')
    |     +-Literal(type=ENUM<ARRAY_FIND_MODE>, value=FIRST)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=STRING
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#9]
    |         +-expr_list=
    |         | +-$col1#9 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
    |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(2) BOOL) -> BOOL)
    |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |     | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3)
    |         |     | +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |     | | +-ColumnRef(type=STRING, column=$subquery1.target_element#4)
    |         |     | +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_FIND_MODE>) -> BOOL)
    |         |     |   +-ColumnRef(type=ENUM<ARRAY_FIND_MODE>, column=$subquery1.find_mode#2)
    |         |     +-Literal(type=STRING, value=NULL)
    |         |     +-FunctionCall(ZetaSQL:$case_with_value(ENUM<ARRAY_FIND_MODE>, repeated(2) ENUM<ARRAY_FIND_MODE>, repeated(2) STRING, STRING) -> STRING)
    |         |       +-ColumnRef(type=ENUM<ARRAY_FIND_MODE>, column=$subquery1.find_mode#2)
    |         |       +-Literal(type=ENUM<ARRAY_FIND_MODE>, value=FIRST)
    |         |       +-SubqueryExpr
    |         |       | +-type=STRING
    |         |       | +-subquery_type=SCALAR
    |         |       | +-parameter_list=
    |         |       | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3)
    |         |       | | +-ColumnRef(type=STRING, column=$subquery1.target_element#4)
    |         |       | +-subquery=
    |         |       |   +-LimitOffsetScan
    |         |       |     +-column_list=[$array.e#5]
    |         |       |     +-input_scan=
    |         |       |     | +-OrderByScan
    |         |       |     |   +-column_list=[$array.e#5]
    |         |       |     |   +-is_ordered=TRUE
    |         |       |     |   +-input_scan=
    |         |       |     |   | +-FilterScan
    |         |       |     |   |   +-column_list=[$array.e#5, $array_offset.offset_idx#6]
    |         |       |     |   |   +-input_scan=
    |         |       |     |   |   | +-ArrayScan
    |         |       |     |   |   |   +-column_list=[$array.e#5, $array_offset.offset_idx#6]
    |         |       |     |   |   |   +-array_expr=
    |         |       |     |   |   |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3, is_correlated=TRUE)
    |         |       |     |   |   |   +-element_column=$array.e#5
    |         |       |     |   |   |   +-array_offset_column=
    |         |       |     |   |   |     +-ColumnHolder(column=$array_offset.offset_idx#6)
    |         |       |     |   |   +-filter_expr=
    |         |       |     |   |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |         |       |     |   |       +-ColumnRef(type=STRING, column=$array.e#5)
    |         |       |     |   |       +-ColumnRef(type=STRING, column=$subquery1.target_element#4, is_correlated=TRUE)
    |         |       |     |   +-order_by_item_list=
    |         |       |     |     +-OrderByItem
    |         |       |     |       +-column_ref=
    |         |       |     |         +-ColumnRef(type=INT64, column=$array_offset.offset_idx#6)
    |         |       |     +-limit=
    |         |       |       +-Literal(type=INT64, value=1)
    |         |       +-Literal(type=ENUM<ARRAY_FIND_MODE>, value=LAST)
    |         |       +-SubqueryExpr
    |         |       | +-type=STRING
    |         |       | +-subquery_type=SCALAR
    |         |       | +-parameter_list=
    |         |       | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3)
    |         |       | | +-ColumnRef(type=STRING, column=$subquery1.target_element#4)
    |         |       | +-subquery=
    |         |       |   +-LimitOffsetScan
    |         |       |     +-column_list=[$array.e#7]
    |         |       |     +-input_scan=
    |         |       |     | +-OrderByScan
    |         |       |     |   +-column_list=[$array.e#7]
    |         |       |     |   +-is_ordered=TRUE
    |         |       |     |   +-input_scan=
    |         |       |     |   | +-FilterScan
    |         |       |     |   |   +-column_list=[$array.e#7, $array_offset.offset_idx#8]
    |         |       |     |   |   +-input_scan=
    |         |       |     |   |   | +-ArrayScan
    |         |       |     |   |   |   +-column_list=[$array.e#7, $array_offset.offset_idx#8]
    |         |       |     |   |   |   +-array_expr=
    |         |       |     |   |   |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3, is_correlated=TRUE)
    |         |       |     |   |   |   +-element_column=$array.e#7
    |         |       |     |   |   |   +-array_offset_column=
    |         |       |     |   |   |     +-ColumnHolder(column=$array_offset.offset_idx#8)
    |         |       |     |   |   +-filter_expr=
    |         |       |     |   |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |         |       |     |   |       +-ColumnRef(type=STRING, column=$array.e#7)
    |         |       |     |   |       +-ColumnRef(type=STRING, column=$subquery1.target_element#4, is_correlated=TRUE)
    |         |       |     |   +-order_by_item_list=
    |         |       |     |     +-OrderByItem
    |         |       |     |       +-column_ref=
    |         |       |     |       | +-ColumnRef(type=INT64, column=$array_offset.offset_idx#8)
    |         |       |     |       +-is_descending=TRUE
    |         |       |     +-limit=
    |         |       |       +-Literal(type=INT64, value=1)
    |         |       +-Cast(STRING -> STRING)
    |         |         +-FunctionCall(ZetaSQL:error(STRING) -> STRING)
    |         |           +-FunctionCall(ZetaSQL:concat(STRING, repeated(2) STRING) -> STRING)
    |         |             +-Literal(type=STRING, value='ARRAY_FIND_MODE ')
    |         |             +-Cast(ENUM<ARRAY_FIND_MODE> -> STRING)
    |         |             | +-ColumnRef(type=ENUM<ARRAY_FIND_MODE>, column=$subquery1.find_mode#2)
    |         |             +-Literal(type=STRING, value=' ARRAY_FIND_MODE in ARRAY_FIND is unsupported.')
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[find_mode#2, input_array#3, target_element#4]
    |             +-expr_list=
    |             | +-find_mode#2 := Literal(type=ENUM<ARRAY_FIND_MODE>, value=FIRST)
    |             | +-input_array#3 := Literal(type=ARRAY<STRING>, value=[])
    |             | +-target_element#4 := Literal(type=STRING, value="hello")
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: SAFE.
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:array_find(ARRAY<STRING> input_array, STRING target_element, optional(1) ENUM<ARRAY_FIND_MODE> find_mode) -> STRING)
    |     +-Literal(type=ARRAY<STRING>, value=[])
    |     +-Literal(type=STRING, value='hello')
    |     +-Literal(type=ENUM<ARRAY_FIND_MODE>, value=FIRST)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=STRING
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#9]
    |         +-expr_list=
    |         | +-$col1#9 :=
    |         |   +-FunctionCall(ZetaSQL:iferror(STRING, STRING) -> STRING)
    |         |     +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
    |         |     | +-FunctionCall(ZetaSQL:$or(BOOL, repeated(2) BOOL) -> BOOL)
    |         |     | | +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         |     | | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3)
    |         |     | | +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
    |         |     | | | +-ColumnRef(type=STRING, column=$subquery1.target_element#4)
    |         |     | | +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_FIND_MODE>) -> BOOL)
    |         |     | |   +-ColumnRef(type=ENUM<ARRAY_FIND_MODE>, column=$subquery1.find_mode#2)
    |         |     | +-Literal(type=STRING, value=NULL)
    |         |     | +-FunctionCall(ZetaSQL:$case_with_value(ENUM<ARRAY_FIND_MODE>, repeated(2) ENUM<ARRAY_FIND_MODE>, repeated(2) STRING, STRING) -> STRING)
    |         |     |   +-ColumnRef(type=ENUM<ARRAY_FIND_MODE>, column=$subquery1.find_mode#2)
    |         |     |   +-Literal(type=ENUM<ARRAY_FIND_MODE>, value=FIRST)
    |         |     |   +-SubqueryExpr
    |         |     |   | +-type=STRING
    |         |     |   | +-subquery_type=SCALAR
    |         |     |   | +-parameter_list=
    |         |     |   | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3)
    |         |     |   | | +-ColumnRef(type=STRING, column=$subquery1.target_element#4)
    |         |     |   | +-subquery=
    |         |     |   |   +-LimitOffsetScan
    |         |     |   |     +-column_list=[$array.e#5]
    |         |     |   |     +-input_scan=
    |         |     |   |     | +-OrderByScan
    |         |     |   |     |   +-column_list=[$array.e#5]
    |         |     |   |     |   +-is_ordered=TRUE
    |         |     |   |     |   +-input_scan=
    |         |     |   |     |   | +-FilterScan
    |         |     |   |     |   |   +-column_list=[$array.e#5, $array_offset.offset_idx#6]
    |         |     |   |     |   |   +-input_scan=
    |         |     |   |     |   |   | +-ArrayScan
    |         |     |   |     |   |   |   +-column_list=[$array.e#5, $array_offset.offset_idx#6]
    |         |     |   |     |   |   |   +-array_expr=
    |         |     |   |     |   |   |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3, is_correlated=TRUE)
    |         |     |   |     |   |   |   +-element_column=$array.e#5
    |         |     |   |     |   |   |   +-array_offset_column=
    |         |     |   |     |   |   |     +-ColumnHolder(column=$array_offset.offset_idx#6)
    |         |     |   |     |   |   +-filter_expr=
    |         |     |   |     |   |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |         |     |   |     |   |       +-ColumnRef(type=STRING, column=$array.e#5)
    |         |     |   |     |   |       +-ColumnRef(type=STRING, column=$subquery1.target_element#4, is_correlated=TRUE)
    |         |     |   |     |   +-order_by_item_list=
    |         |     |   |     |     +-OrderByItem
    |         |     |   |     |       +-column_ref=
    |         |     |   |     |         +-ColumnRef(type=INT64, column=$array_offset.offset_idx#6)
    |         |     |   |     +-limit=
    |         |     |   |       +-Literal(type=INT64, value=1)
    |         |     |   +-Literal(type=ENUM<ARRAY_FIND_MODE>, value=LAST)
    |         |     |   +-SubqueryExpr
    |         |     |   | +-type=STRING
    |         |     |   | +-subquery_type=SCALAR
    |         |     |   | +-parameter_list=
    |         |     |   | | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3)
    |         |     |   | | +-ColumnRef(type=STRING, column=$subquery1.target_element#4)
    |         |     |   | +-subquery=
    |         |     |   |   +-LimitOffsetScan
    |         |     |   |     +-column_list=[$array.e#7]
    |         |     |   |     +-input_scan=
    |         |     |   |     | +-OrderByScan
    |         |     |   |     |   +-column_list=[$array.e#7]
    |         |     |   |     |   +-is_ordered=TRUE
    |         |     |   |     |   +-input_scan=
    |         |     |   |     |   | +-FilterScan
    |         |     |   |     |   |   +-column_list=[$array.e#7, $array_offset.offset_idx#8]
    |         |     |   |     |   |   +-input_scan=
    |         |     |   |     |   |   | +-ArrayScan
    |         |     |   |     |   |   |   +-column_list=[$array.e#7, $array_offset.offset_idx#8]
    |         |     |   |     |   |   |   +-array_expr=
    |         |     |   |     |   |   |   | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.input_array#3, is_correlated=TRUE)
    |         |     |   |     |   |   |   +-element_column=$array.e#7
    |         |     |   |     |   |   |   +-array_offset_column=
    |         |     |   |     |   |   |     +-ColumnHolder(column=$array_offset.offset_idx#8)
    |         |     |   |     |   |   +-filter_expr=
    |         |     |   |     |   |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |         |     |   |     |   |       +-ColumnRef(type=STRING, column=$array.e#7)
    |         |     |   |     |   |       +-ColumnRef(type=STRING, column=$subquery1.target_element#4, is_correlated=TRUE)
    |         |     |   |     |   +-order_by_item_list=
    |         |     |   |     |     +-OrderByItem
    |         |     |   |     |       +-column_ref=
    |         |     |   |     |       | +-ColumnRef(type=INT64, column=$array_offset.offset_idx#8)
    |         |     |   |     |       +-is_descending=TRUE
    |         |     |   |     +-limit=
    |         |     |   |       +-Literal(type=INT64, value=1)
    |         |     |   +-Cast(STRING -> STRING)
    |         |     |     +-FunctionCall(ZetaSQL:error(STRING) -> STRING)
    |         |     |       +-FunctionCall(ZetaSQL:concat(STRING, repeated(2) STRING) -> STRING)
    |         |     |         +-Literal(type=STRING, value='ARRAY_FIND_MODE ')
    |         |     |         +-Cast(ENUM<ARRAY_FIND_MODE> -> STRING)
    |         |     |         | +-ColumnRef(type=ENUM<ARRAY_FIND_MODE>, column=$subquery1.find_mode#2)
    |         |     |         +-Literal(type=STRING, value=' ARRAY_FIND_MODE in ARRAY_FIND is unsupported.')
    |         |     +-Literal(type=STRING, value=NULL, has_explicit_type=TRUE)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[find_mode#2, input_array#3, target_element#4]
    |             +-expr_list=
    |             | +-find_mode#2 := Literal(type=ENUM<ARRAY_FIND_MODE>, value=FIRST)
    |             | +-input_array#3 := Literal(type=ARRAY<STRING>, value=[])
    |             | +-target_element#4 := Literal(type=STRING, value="hello")
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
