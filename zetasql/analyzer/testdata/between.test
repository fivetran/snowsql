select * from TestTable
where KitchenSink.int64_val BETWEEN 1 AND KitchenSink.int32_val + 1;
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(INT64, INT64, INT64) -> BOOL)
            +-GetProtoField
            | +-type=INT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=int64_val
            | +-default_value=0
            +-Literal(type=INT64, value=1)
            +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              +-Cast(INT32 -> INT64)
              | +-GetProtoField
              |   +-type=INT32
              |   +-expr=
              |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
              |   +-field_descriptor=int32_val
              |   +-default_value=77
              +-Literal(type=INT64, value=1)
==


select * from TestTable where KitchenSink.test_enum BETWEEN 1 AND 'TESTENUM2';
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(ENUM<zetasql_test__.TestEnum>, ENUM<zetasql_test__.TestEnum>, ENUM<zetasql_test__.TestEnum>) -> BOOL)
            +-GetProtoField
            | +-type=ENUM<zetasql_test__.TestEnum>
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=test_enum
            | +-default_value=TESTENUM0
            +-Literal(type=ENUM<zetasql_test__.TestEnum>, value=TESTENUM1)
            +-Literal(type=ENUM<zetasql_test__.TestEnum>, value=TESTENUM2)
==

select * from TestTable where KitchenSink.string_val BETWEEN 'A' AND 'Z';
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(STRING, STRING, STRING) -> BOOL)
            +-GetProtoField
            | +-type=STRING
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=string_val
            | +-default_value="default_name"
            +-Literal(type=STRING, value='A')
            +-Literal(type=STRING, value='Z')
==

select * from TestTable where KitchenSink.int64_val BETWEEN 1 AND 'Z';
--
ERROR: Could not cast literal "Z" to type INT64 [at 1:67]
select * from TestTable where KitchenSink.int64_val BETWEEN 1 AND 'Z';
                                                                  ^
==

select * from TestTable where KitchenSink BETWEEN NULL AND NULL;
--
ERROR: BETWEEN is not defined for arguments of type PROTO<zetasql_test__.KitchenSinkPB> [at 1:43]
select * from TestTable where KitchenSink BETWEEN NULL AND NULL;
                                          ^
==

select * from TestTable where KitchenSink.string_val NOT BETWEEN 'A' AND null;
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$between(STRING, STRING, STRING) -> BOOL)
              +-GetProtoField
              | +-type=STRING
              | +-expr=
              | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
              | +-field_descriptor=string_val
              | +-default_value="default_name"
              +-Literal(type=STRING, value='A')
              +-Literal(type=STRING, value=NULL)
==

select * from TestTable where (NULL NOT BETWEEN NULL AND NULL) IS NOT NULL;
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$is_null(BOOL) -> BOOL)
              +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
                +-FunctionCall(ZetaSQL:$between(INT64, INT64, INT64) -> BOOL)
                  +-Literal(type=INT64, value=NULL)
                  +-Literal(type=INT64, value=NULL)
                  +-Literal(type=INT64, value=NULL)
==

select * from TestTable where cast(2 as uint32) BETWEEN 1 AND 5;
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(UINT32, UINT32, UINT32) -> BOOL)
            +-Literal(type=UINT32, value=2, has_explicit_type=TRUE)
            +-Literal(type=UINT32, value=1)
            +-Literal(type=UINT32, value=5)
==

select * from TestTable
where 2.0 BETWEEN cast(1 as int32) AND cast(5 as uint32);
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(DOUBLE, DOUBLE, DOUBLE) -> BOOL)
            +-Literal(type=DOUBLE, value=2)
            +-Literal(type=DOUBLE, value=1, has_explicit_type=TRUE)
            +-Literal(type=DOUBLE, value=5, has_explicit_type=TRUE)
==

select * from TestTable
where 1.0 + 2.0 BETWEEN cast(1 as int32) AND cast(5 as uint32);
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(DOUBLE, DOUBLE, DOUBLE) -> BOOL)
            +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            | +-Literal(type=DOUBLE, value=1)
            | +-Literal(type=DOUBLE, value=2)
            +-Literal(type=DOUBLE, value=1, has_explicit_type=TRUE)
            +-Literal(type=DOUBLE, value=5, has_explicit_type=TRUE)
==

# Mix of int64/int32/double.  This is one test case from b/15671413.
select int64,
       int32 BETWEEN int64 AND 5.0,
       int64 BETWEEN int32 AND 5.0,
       2.0 BETWEEN int32 AND int64,
       int32 BETWEEN 2.0 AND int64
from SimpleTypes
--
QueryStmt
+-output_column_list=
| +-SimpleTypes.int64#2 AS int64 [INT64]
| +-$query.$col2#19 AS "$col2" [BOOL]
| +-$query.$col3#20 AS "$col3" [BOOL]
| +-$query.$col4#21 AS "$col4" [BOOL]
| +-$query.$col5#22 AS "$col5" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[SimpleTypes.int64#2, $query.$col2#19, $query.$col3#20, $query.$col4#21, $query.$col5#22]
    +-expr_list=
    | +-$col2#19 :=
    | | +-FunctionCall(ZetaSQL:$between(DOUBLE, DOUBLE, DOUBLE) -> BOOL)
    | |   +-Cast(INT32 -> DOUBLE)
    | |   | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    | |   +-Cast(INT64 -> DOUBLE)
    | |   | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    | |   +-Literal(type=DOUBLE, value=5)
    | +-$col3#20 :=
    | | +-FunctionCall(ZetaSQL:$between(DOUBLE, DOUBLE, DOUBLE) -> BOOL)
    | |   +-Cast(INT64 -> DOUBLE)
    | |   | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    | |   +-Cast(INT32 -> DOUBLE)
    | |   | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    | |   +-Literal(type=DOUBLE, value=5)
    | +-$col4#21 :=
    | | +-FunctionCall(ZetaSQL:$between(DOUBLE, DOUBLE, DOUBLE) -> BOOL)
    | |   +-Literal(type=DOUBLE, value=2)
    | |   +-Cast(INT32 -> DOUBLE)
    | |   | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    | |   +-Cast(INT64 -> DOUBLE)
    | |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    | +-$col5#22 :=
    |   +-FunctionCall(ZetaSQL:$between(DOUBLE, DOUBLE, DOUBLE) -> BOOL)
    |     +-Cast(INT32 -> DOUBLE)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Literal(type=DOUBLE, value=2)
    |     +-Cast(INT64 -> DOUBLE)
    |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
==

# Similar to above query, but with NOT BETWEEN.
select int32 NOT BETWEEN int64 AND 5.0,
       int64 NOT BETWEEN int32 AND 5.0,
       2.0 NOT BETWEEN int32 AND int64,
       int32 NOT BETWEEN 2.0 AND int64
from SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [BOOL]
| +-$query.$col2#20 AS "$col2" [BOOL]
| +-$query.$col3#21 AS "$col3" [BOOL]
| +-$query.$col4#22 AS "$col4" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#19, $col2#20, $col3#21, $col4#22]
    +-expr_list=
    | +-$col1#19 :=
    | | +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    | |   +-FunctionCall(ZetaSQL:$between(DOUBLE, DOUBLE, DOUBLE) -> BOOL)
    | |     +-Cast(INT32 -> DOUBLE)
    | |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    | |     +-Cast(INT64 -> DOUBLE)
    | |     | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    | |     +-Literal(type=DOUBLE, value=5)
    | +-$col2#20 :=
    | | +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    | |   +-FunctionCall(ZetaSQL:$between(DOUBLE, DOUBLE, DOUBLE) -> BOOL)
    | |     +-Cast(INT64 -> DOUBLE)
    | |     | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    | |     +-Cast(INT32 -> DOUBLE)
    | |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    | |     +-Literal(type=DOUBLE, value=5)
    | +-$col3#21 :=
    | | +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    | |   +-FunctionCall(ZetaSQL:$between(DOUBLE, DOUBLE, DOUBLE) -> BOOL)
    | |     +-Literal(type=DOUBLE, value=2)
    | |     +-Cast(INT32 -> DOUBLE)
    | |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    | |     +-Cast(INT64 -> DOUBLE)
    | |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    | +-$col4#22 :=
    |   +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |     +-FunctionCall(ZetaSQL:$between(DOUBLE, DOUBLE, DOUBLE) -> BOOL)
    |       +-Cast(INT32 -> DOUBLE)
    |       | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |       +-Literal(type=DOUBLE, value=2)
    |       +-Cast(INT64 -> DOUBLE)
    |         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
==

# Between with INT64 literal that cannot be downcasted to INT32.
select * from TestTable
where KitchenSink.int32_val BETWEEN -1 AND 5000000000 OR
      CAST(1 as INT32) BETWEEN -1 AND 5000000000 OR
      KitchenSink.int32_val BETWEEN -4294967296 AND 10 OR
      CAST(1 as INT32) BETWEEN -4294967296 AND 10;
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$or(BOOL, repeated(3) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$between(INT64, INT64, INT64) -> BOOL)
            | +-Cast(INT32 -> INT64)
            | | +-GetProtoField
            | |   +-type=INT32
            | |   +-expr=
            | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | |   +-field_descriptor=int32_val
            | |   +-default_value=77
            | +-Literal(type=INT64, value=-1, has_explicit_type=TRUE)
            | +-Literal(type=INT64, value=5000000000, has_explicit_type=TRUE)
            +-FunctionCall(ZetaSQL:$between(INT64, INT64, INT64) -> BOOL)
            | +-Literal(type=INT64, value=1, has_explicit_type=TRUE)
            | +-Literal(type=INT64, value=-1, has_explicit_type=TRUE)
            | +-Literal(type=INT64, value=5000000000, has_explicit_type=TRUE)
            +-FunctionCall(ZetaSQL:$between(INT64, INT64, INT64) -> BOOL)
            | +-Cast(INT32 -> INT64)
            | | +-GetProtoField
            | |   +-type=INT32
            | |   +-expr=
            | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | |   +-field_descriptor=int32_val
            | |   +-default_value=77
            | +-Literal(type=INT64, value=-4294967296, has_explicit_type=TRUE)
            | +-Literal(type=INT64, value=10, has_explicit_type=TRUE)
            +-FunctionCall(ZetaSQL:$between(INT64, INT64, INT64) -> BOOL)
              +-Literal(type=INT64, value=1, has_explicit_type=TRUE)
              +-Literal(type=INT64, value=-4294967296, has_explicit_type=TRUE)
              +-Literal(type=INT64, value=10, has_explicit_type=TRUE)
==

# Between with INT64 literal that cannot be downcasted to UINT32.
select * from TestTable
where KitchenSink.uint32_val BETWEEN 0 AND 4294967296 OR
      CAST(1 AS UINT32) BETWEEN 0 AND 4294967296 OR
      KitchenSink.uint32_val BETWEEN -1 AND 100 OR
      CAST(1 AS UINT32) BETWEEN -1 AND 100;
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$or(BOOL, repeated(3) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$between(INT64, INT64, INT64) -> BOOL)
            | +-Cast(UINT32 -> INT64)
            | | +-GetProtoField
            | |   +-type=UINT32
            | |   +-expr=
            | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | |   +-field_descriptor=uint32_val
            | |   +-default_value=777
            | +-Literal(type=INT64, value=0, has_explicit_type=TRUE)
            | +-Literal(type=INT64, value=4294967296, has_explicit_type=TRUE)
            +-FunctionCall(ZetaSQL:$between(INT64, INT64, INT64) -> BOOL)
            | +-Literal(type=INT64, value=1, has_explicit_type=TRUE)
            | +-Literal(type=INT64, value=0, has_explicit_type=TRUE)
            | +-Literal(type=INT64, value=4294967296, has_explicit_type=TRUE)
            +-FunctionCall(ZetaSQL:$between(INT64, INT64, INT64) -> BOOL)
            | +-Cast(UINT32 -> INT64)
            | | +-GetProtoField
            | |   +-type=UINT32
            | |   +-expr=
            | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | |   +-field_descriptor=uint32_val
            | |   +-default_value=777
            | +-Literal(type=INT64, value=-1, has_explicit_type=TRUE)
            | +-Literal(type=INT64, value=100, has_explicit_type=TRUE)
            +-FunctionCall(ZetaSQL:$between(INT64, INT64, INT64) -> BOOL)
              +-Literal(type=INT64, value=1, has_explicit_type=TRUE)
              +-Literal(type=INT64, value=-1, has_explicit_type=TRUE)
              +-Literal(type=INT64, value=100, has_explicit_type=TRUE)
==

# Between (UINT64, INT64, INT64).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.uint64_val from TestTable
where KitchenSink.uint64_val BETWEEN CAST(1 as INT64) AND CAST(3 as INT64)
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for operator BETWEEN for argument types: UINT64, INT64, INT64. Supported signature: (ANY) BETWEEN (ANY) AND (ANY) [at 2:30]
where KitchenSink.uint64_val BETWEEN CAST(1 as INT64) AND CAST(3 as INT64)
                             ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.uint64_val#4 AS uint64_val [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.uint64_val#4]
    +-expr_list=
    | +-uint64_val#4 :=
    |   +-GetProtoField
    |     +-type=UINT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=uint64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(UINT64, INT64, INT64) -> BOOL)
            +-GetProtoField
            | +-type=UINT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=uint64_val
            | +-default_value=0
            +-Literal(type=INT64, value=1, has_explicit_type=TRUE)
            +-Literal(type=INT64, value=3, has_explicit_type=TRUE)
==

# Between (UINT64, UINT64, INT64).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.uint64_val from TestTable
where KitchenSink.uint64_val BETWEEN CAST(1 as UINT64) AND CAST(3 as INT64)
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for operator BETWEEN for argument types: UINT64, UINT64, INT64. Supported signature: (ANY) BETWEEN (ANY) AND (ANY) [at 2:30]
where KitchenSink.uint64_val BETWEEN CAST(1 as UINT64) AND CAST(3 as INT64)
                             ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.uint64_val#4 AS uint64_val [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.uint64_val#4]
    +-expr_list=
    | +-uint64_val#4 :=
    |   +-GetProtoField
    |     +-type=UINT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=uint64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(UINT64, UINT64, INT64) -> BOOL)
            +-GetProtoField
            | +-type=UINT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=uint64_val
            | +-default_value=0
            +-Literal(type=UINT64, value=1, has_explicit_type=TRUE)
            +-Literal(type=INT64, value=3, has_explicit_type=TRUE)
==

# Between (UINT64, INT64, UINT64).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.uint64_val from TestTable
where KitchenSink.uint64_val BETWEEN CAST(1 as INT64) AND CAST(3 as UINT64)
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for operator BETWEEN for argument types: UINT64, INT64, UINT64. Supported signature: (ANY) BETWEEN (ANY) AND (ANY) [at 2:30]
where KitchenSink.uint64_val BETWEEN CAST(1 as INT64) AND CAST(3 as UINT64)
                             ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.uint64_val#4 AS uint64_val [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.uint64_val#4]
    +-expr_list=
    | +-uint64_val#4 :=
    |   +-GetProtoField
    |     +-type=UINT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=uint64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(UINT64, INT64, UINT64) -> BOOL)
            +-GetProtoField
            | +-type=UINT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=uint64_val
            | +-default_value=0
            +-Literal(type=INT64, value=1, has_explicit_type=TRUE)
            +-Literal(type=UINT64, value=3, has_explicit_type=TRUE)
==

# Between (INT64, UINT64, UINT64).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.int64_val from TestTable
where KitchenSink.int64_val BETWEEN CAST(1 as UINT64) AND CAST(3 as UINT64)
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for operator BETWEEN for argument types: INT64, UINT64, UINT64. Supported signature: (ANY) BETWEEN (ANY) AND (ANY) [at 2:29]
where KitchenSink.int64_val BETWEEN CAST(1 as UINT64) AND CAST(3 as UINT64)
                            ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.int64_val#4 AS int64_val [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.int64_val#4]
    +-expr_list=
    | +-int64_val#4 :=
    |   +-GetProtoField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=int64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(INT64, UINT64, UINT64) -> BOOL)
            +-GetProtoField
            | +-type=INT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=int64_val
            | +-default_value=0
            +-Literal(type=UINT64, value=1, has_explicit_type=TRUE)
            +-Literal(type=UINT64, value=3, has_explicit_type=TRUE)
==

# Between (INT64, INT64, UINT64).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.int64_val from TestTable
where KitchenSink.int64_val BETWEEN CAST(1 as INT64) AND CAST(3 as UINT64)
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for operator BETWEEN for argument types: INT64, INT64, UINT64. Supported signature: (ANY) BETWEEN (ANY) AND (ANY) [at 2:29]
where KitchenSink.int64_val BETWEEN CAST(1 as INT64) AND CAST(3 as UINT64)
                            ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.int64_val#4 AS int64_val [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.int64_val#4]
    +-expr_list=
    | +-int64_val#4 :=
    |   +-GetProtoField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=int64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(INT64, INT64, UINT64) -> BOOL)
            +-GetProtoField
            | +-type=INT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=int64_val
            | +-default_value=0
            +-Literal(type=INT64, value=1, has_explicit_type=TRUE)
            +-Literal(type=UINT64, value=3, has_explicit_type=TRUE)
==

# Between (INT64, UINT64, INT64).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.int64_val from TestTable
where KitchenSink.int64_val BETWEEN CAST(1 as UINT64) AND CAST(3 as INT64)
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for operator BETWEEN for argument types: INT64, UINT64, INT64. Supported signature: (ANY) BETWEEN (ANY) AND (ANY) [at 2:29]
where KitchenSink.int64_val BETWEEN CAST(1 as UINT64) AND CAST(3 as INT64)
                            ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.int64_val#4 AS int64_val [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.int64_val#4]
    +-expr_list=
    | +-int64_val#4 :=
    |   +-GetProtoField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=int64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(INT64, UINT64, INT64) -> BOOL)
            +-GetProtoField
            | +-type=INT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=int64_val
            | +-default_value=0
            +-Literal(type=UINT64, value=1, has_explicit_type=TRUE)
            +-Literal(type=INT64, value=3, has_explicit_type=TRUE)
==

# Between (INT64, UINT64 literal, UINT64 literal).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.int64_val from TestTable
where KitchenSink.int64_val
      BETWEEN 18000000000000000000 AND 18000000000000000001
--
ALTERNATION GROUP: <empty>
--
ERROR: Could not cast literal 18000000000000000000 to type INT64 [at 3:15]
      BETWEEN 18000000000000000000 AND 18000000000000000001
              ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.int64_val#4 AS int64_val [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.int64_val#4]
    +-expr_list=
    | +-int64_val#4 :=
    |   +-GetProtoField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=int64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(INT64, UINT64, UINT64) -> BOOL)
            +-GetProtoField
            | +-type=INT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=int64_val
            | +-default_value=0
            +-Literal(type=UINT64, value=18000000000000000000)
            +-Literal(type=UINT64, value=18000000000000000001)
==

# Between (INT64, INT64 literal, UINT64 literal).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.int64_val from TestTable
where KitchenSink.int64_val BETWEEN -1 AND 18000000000000000000
--
ALTERNATION GROUP: <empty>
--
ERROR: Could not cast literal 18000000000000000000 to type INT64 [at 2:44]
where KitchenSink.int64_val BETWEEN -1 AND 18000000000000000000
                                           ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.int64_val#4 AS int64_val [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.int64_val#4]
    +-expr_list=
    | +-int64_val#4 :=
    |   +-GetProtoField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=int64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(INT64, INT64, UINT64) -> BOOL)
            +-GetProtoField
            | +-type=INT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=int64_val
            | +-default_value=0
            +-Literal(type=INT64, value=-1)
            +-Literal(type=UINT64, value=18000000000000000000)
==

# Between (INT64, UINT64 literal, INT64 literal).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.int64_val from TestTable
where KitchenSink.int64_val BETWEEN 18000000000000000000 AND -1
--
ALTERNATION GROUP: <empty>
--
ERROR: Could not cast literal 18000000000000000000 to type INT64 [at 2:37]
where KitchenSink.int64_val BETWEEN 18000000000000000000 AND -1
                                    ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.int64_val#4 AS int64_val [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.int64_val#4]
    +-expr_list=
    | +-int64_val#4 :=
    |   +-GetProtoField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=int64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(INT64, UINT64, INT64) -> BOOL)
            +-GetProtoField
            | +-type=INT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=int64_val
            | +-default_value=0
            +-Literal(type=UINT64, value=18000000000000000000)
            +-Literal(type=INT64, value=-1)
==

# Between (UINT64, INT64 literal, INT64 literal).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.uint64_val from TestTable
where KitchenSink.uint64_val BETWEEN -2 AND -1
--
ALTERNATION GROUP: <empty>
--
ERROR: Could not cast literal -2 to type UINT64 [at 2:38]
where KitchenSink.uint64_val BETWEEN -2 AND -1
                                     ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.uint64_val#4 AS uint64_val [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.uint64_val#4]
    +-expr_list=
    | +-uint64_val#4 :=
    |   +-GetProtoField
    |     +-type=UINT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=uint64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(UINT64, INT64, INT64) -> BOOL)
            +-GetProtoField
            | +-type=UINT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=uint64_val
            | +-default_value=0
            +-Literal(type=INT64, value=-2)
            +-Literal(type=INT64, value=-1)
==

# Between (UINT64, INT64 literal, INT64 literal).
# This is an interesting case because the chosen BETWEEN function
# signature is different depending on whether the LanguageFeature
# is on or off.  For other cases, either the chosen signature is
# the same independent of the LanguageFeature, or the query failed
# with the LanguageFeature off and succeeds with the LanguageFeature
# on.
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.uint64_val from TestTable
where KitchenSink.uint64_val BETWEEN 0 AND 1
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.uint64_val#4 AS uint64_val [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.uint64_val#4]
    +-expr_list=
    | +-uint64_val#4 :=
    |   +-GetProtoField
    |     +-type=UINT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=uint64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(UINT64, UINT64, UINT64) -> BOOL)
            +-GetProtoField
            | +-type=UINT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=uint64_val
            | +-default_value=0
            +-Literal(type=UINT64, value=0)
            +-Literal(type=UINT64, value=1)
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.uint64_val#4 AS uint64_val [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.uint64_val#4]
    +-expr_list=
    | +-uint64_val#4 :=
    |   +-GetProtoField
    |     +-type=UINT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=uint64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(UINT64, INT64, INT64) -> BOOL)
            +-GetProtoField
            | +-type=UINT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=uint64_val
            | +-default_value=0
            +-Literal(type=INT64, value=0)
            +-Literal(type=INT64, value=1)
==

# Between (UINT64, INT64 literal, UINT64 literal).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.uint64_val from TestTable
where KitchenSink.uint64_val BETWEEN -1 AND 18000000000000000000
--
ALTERNATION GROUP: <empty>
--
ERROR: Could not cast literal -1 to type UINT64 [at 2:38]
where KitchenSink.uint64_val BETWEEN -1 AND 18000000000000000000
                                     ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.uint64_val#4 AS uint64_val [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.uint64_val#4]
    +-expr_list=
    | +-uint64_val#4 :=
    |   +-GetProtoField
    |     +-type=UINT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=uint64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(UINT64, INT64, UINT64) -> BOOL)
            +-GetProtoField
            | +-type=UINT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=uint64_val
            | +-default_value=0
            +-Literal(type=INT64, value=-1)
            +-Literal(type=UINT64, value=18000000000000000000)
==

# Between (UINT64, UINT64 literal, INT64 literal).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.uint64_val from TestTable
where KitchenSink.uint64_val BETWEEN 18000000000000000000 AND -1
--
ALTERNATION GROUP: <empty>
--
ERROR: Could not cast literal -1 to type UINT64 [at 2:63]
where KitchenSink.uint64_val BETWEEN 18000000000000000000 AND -1
                                                              ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.uint64_val#4 AS uint64_val [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.uint64_val#4]
    +-expr_list=
    | +-uint64_val#4 :=
    |   +-GetProtoField
    |     +-type=UINT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=uint64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(UINT64, UINT64, INT64) -> BOOL)
            +-GetProtoField
            | +-type=UINT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=uint64_val
            | +-default_value=0
            +-Literal(type=UINT64, value=18000000000000000000)
            +-Literal(type=INT64, value=-1)
==

# Between (INT64, UINT64 literal, UINT64 literal).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.int64_val from TestTable
where KitchenSink.int64_val
      BETWEEN 18000000000000000000 AND 18000000000000000001
--
ALTERNATION GROUP: <empty>
--
ERROR: Could not cast literal 18000000000000000000 to type INT64 [at 3:15]
      BETWEEN 18000000000000000000 AND 18000000000000000001
              ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.int64_val#4 AS int64_val [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.int64_val#4]
    +-expr_list=
    | +-int64_val#4 :=
    |   +-GetProtoField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=int64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(INT64, UINT64, UINT64) -> BOOL)
            +-GetProtoField
            | +-type=INT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=int64_val
            | +-default_value=0
            +-Literal(type=UINT64, value=18000000000000000000)
            +-Literal(type=UINT64, value=18000000000000000001)
==

# Between (INT64, INT64 literal, UINT64 literal).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.int64_val from TestTable
where KitchenSink.int64_val BETWEEN 0 AND 18000000000000000000
--
ALTERNATION GROUP: <empty>
--
ERROR: Could not cast literal 18000000000000000000 to type INT64 [at 2:43]
where KitchenSink.int64_val BETWEEN 0 AND 18000000000000000000
                                          ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.int64_val#4 AS int64_val [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.int64_val#4]
    +-expr_list=
    | +-int64_val#4 :=
    |   +-GetProtoField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=int64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(INT64, INT64, UINT64) -> BOOL)
            +-GetProtoField
            | +-type=INT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=int64_val
            | +-default_value=0
            +-Literal(type=INT64, value=0)
            +-Literal(type=UINT64, value=18000000000000000000)
==

# Between (INT64, UINT64 literal, INT64 literal).
[language_features={{|BETWEEN_UINT64_INT64}}]
select KitchenSink.int64_val from TestTable
where KitchenSink.int64_val BETWEEN 18000000000000000000 AND -1
--
ALTERNATION GROUP: <empty>
--
ERROR: Could not cast literal 18000000000000000000 to type INT64 [at 2:37]
where KitchenSink.int64_val BETWEEN 18000000000000000000 AND -1
                                    ^
--
ALTERNATION GROUP: BETWEEN_UINT64_INT64
--
QueryStmt
+-output_column_list=
| +-$query.int64_val#4 AS int64_val [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.int64_val#4]
    +-expr_list=
    | +-int64_val#4 :=
    |   +-GetProtoField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=int64_val
    |     +-default_value=0
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$between(INT64, UINT64, INT64) -> BOOL)
            +-GetProtoField
            | +-type=INT64
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=int64_val
            | +-default_value=0
            +-Literal(type=UINT64, value=18000000000000000000)
            +-Literal(type=INT64, value=-1)
