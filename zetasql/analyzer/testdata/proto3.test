# Creating proto3 messages using NEW
SELECT NEW zetasql_test__.SimpleProto3Message(expr1 as int32_val)
FROM (SELECT 1 as expr1 UNION ALL
      SELECT NULL)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [PROTO<zetasql_test__.SimpleProto3Message>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-MakeProto
    |     +-type=PROTO<zetasql_test__.SimpleProto3Message>
    |     +-field_list=
    |       +-int32_val :=
    |         +-Cast(INT64 -> INT32)
    |           +-ColumnRef(type=INT64, column=$union_all.expr1#3)
    +-input_scan=
      +-SetOperationScan
        +-column_list=[$union_all.expr1#3]
        +-op_type=UNION_ALL
        +-input_item_list=
          +-SetOperationItem
          | +-scan=
          | | +-ProjectScan
          | |   +-column_list=[$union_all1.expr1#1]
          | |   +-expr_list=
          | |   | +-expr1#1 := Literal(type=INT64, value=1)
          | |   +-input_scan=
          | |     +-SingleRowScan
          | +-output_column_list=[$union_all1.expr1#1]
          +-SetOperationItem
            +-scan=
            | +-ProjectScan
            |   +-column_list=[$union_all2.$col1#2]
            |   +-expr_list=
            |   | +-$col1#2 := Literal(type=INT64, value=NULL)
            |   +-input_scan=
            |     +-SingleRowScan
            +-output_column_list=[$union_all2.$col1#2]
==

# Creating proto3 messages using SELECT AS
SELECT AS zetasql_test__.SimpleProto3Message expr1 as int32_val
FROM (SELECT 1 as expr1 UNION ALL
      SELECT NULL)
--
QueryStmt
+-output_column_list=
| +-$make_proto.$proto#4 AS "$proto" [PROTO<zetasql_test__.SimpleProto3Message>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$make_proto.$proto#4]
    +-expr_list=
    | +-$proto#4 :=
    |   +-MakeProto
    |     +-type=PROTO<zetasql_test__.SimpleProto3Message>
    |     +-field_list=
    |       +-int32_val :=
    |         +-Cast(INT64 -> INT32)
    |           +-ColumnRef(type=INT64, column=$union_all.expr1#3)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$union_all.expr1#3]
        +-input_scan=
          +-SetOperationScan
            +-column_list=[$union_all.expr1#3]
            +-op_type=UNION_ALL
            +-input_item_list=
              +-SetOperationItem
              | +-scan=
              | | +-ProjectScan
              | |   +-column_list=[$union_all1.expr1#1]
              | |   +-expr_list=
              | |   | +-expr1#1 := Literal(type=INT64, value=1)
              | |   +-input_scan=
              | |     +-SingleRowScan
              | +-output_column_list=[$union_all1.expr1#1]
              +-SetOperationItem
                +-scan=
                | +-ProjectScan
                |   +-column_list=[$union_all2.$col1#2]
                |   +-expr_list=
                |   | +-$col1#2 := Literal(type=INT64, value=NULL)
                |   +-input_scan=
                |     +-SingleRowScan
                +-output_column_list=[$union_all2.$col1#2]
==

# This test is showing potentially undesirable behaviour as the Proto3 spec
# states primitive fields (excluding those in an oneof) cannot be tested for
# true presence. Currently the semantics for this check in ZetaSQL are not
# explicitly defined. The presence of message fields can be tested in the same
# manner as proto2 message fields.
SELECT Proto3KitchenSink.has_int32_val,
       Proto3KitchenSink.has_nested_value
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.has_int32_val#3 AS has_int32_val [BOOL]
| +-$query.has_nested_value#4 AS has_nested_value [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[has_int32_val#3, has_nested_value#4]
    +-expr_list=
    | +-has_int32_val#3 :=
    | | +-GetProtoField
    | |   +-type=BOOL
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=int32_val
    | |   +-get_has_bit=TRUE
    | +-has_nested_value#4 :=
    |   +-GetProtoField
    |     +-type=BOOL
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=nested_value
    |     +-get_has_bit=TRUE
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])

==

# Two different deprecation warnings.
SELECT Proto3KitchenSink.has_int32_val,
       Proto3KitchenSink.has_int64_val
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.has_int32_val#3 AS has_int32_val [BOOL]
| +-$query.has_int64_val#4 AS has_int64_val [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[has_int32_val#3, has_int64_val#4]
    +-expr_list=
    | +-has_int32_val#3 :=
    | | +-GetProtoField
    | |   +-type=BOOL
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=int32_val
    | |   +-get_has_bit=TRUE
    | +-has_int64_val#4 :=
    |   +-GetProtoField
    |     +-type=BOOL
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=int64_val
    |     +-get_has_bit=TRUE
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])

==

# Two deprecation warnings that are de-duped.
SELECT Proto3KitchenSink.has_int32_val,
       Proto3KitchenSink.has_int32_val
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.has_int32_val#3 AS has_int32_val [BOOL]
| +-$query.has_int32_val#4 AS has_int32_val [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[has_int32_val#3, has_int32_val#4]
    +-expr_list=
    | +-has_int32_val#3 :=
    | | +-GetProtoField
    | |   +-type=BOOL
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=int32_val
    | |   +-get_has_bit=TRUE
    | +-has_int32_val#4 :=
    |   +-GetProtoField
    |     +-type=BOOL
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=int32_val
    |     +-get_has_bit=TRUE
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])

==

# Proto3 fields are always optional. Their default values cannot be explicity
# set. The default values for each type are unchanged from the proto2 design.
SELECT Proto3KitchenSink,
       Proto3KitchenSink.int32_val,
       Proto3KitchenSink.uint32_val,
       Proto3KitchenSink.int64_val,
       Proto3KitchenSink.uint64_val,
       Proto3KitchenSink.string_val,
       Proto3KitchenSink.float_val,
       Proto3KitchenSink.double_val,
       Proto3KitchenSink.bytes_val,
       Proto3KitchenSink.bool_val
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-Proto3Table.Proto3KitchenSink#2 AS Proto3KitchenSink [PROTO<zetasql_test__.Proto3KitchenSink>]
| +-$query.int32_val#3 AS int32_val [INT32]
| +-$query.uint32_val#4 AS uint32_val [UINT32]
| +-$query.int64_val#5 AS int64_val [INT64]
| +-$query.uint64_val#6 AS uint64_val [UINT64]
| +-$query.string_val#7 AS string_val [STRING]
| +-$query.float_val#8 AS float_val [FLOAT]
| +-$query.double_val#9 AS double_val [DOUBLE]
| +-$query.bytes_val#10 AS bytes_val [BYTES]
| +-$query.bool_val#11 AS bool_val [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[Proto3Table.Proto3KitchenSink#2, $query.int32_val#3, $query.uint32_val#4, $query.int64_val#5, $query.uint64_val#6, $query.string_val#7, $query.float_val#8, $query.double_val#9, $query.bytes_val#10, $query.bool_val#11]
    +-expr_list=
    | +-int32_val#3 :=
    | | +-GetProtoField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=int32_val
    | |   +-default_value=0
    | +-uint32_val#4 :=
    | | +-GetProtoField
    | |   +-type=UINT32
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=uint32_val
    | |   +-default_value=0
    | +-int64_val#5 :=
    | | +-GetProtoField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=int64_val
    | |   +-default_value=0
    | +-uint64_val#6 :=
    | | +-GetProtoField
    | |   +-type=UINT64
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=uint64_val
    | |   +-default_value=0
    | +-string_val#7 :=
    | | +-GetProtoField
    | |   +-type=STRING
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=string_val
    | |   +-default_value=""
    | +-float_val#8 :=
    | | +-GetProtoField
    | |   +-type=FLOAT
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=float_val
    | |   +-default_value=0
    | +-double_val#9 :=
    | | +-GetProtoField
    | |   +-type=DOUBLE
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=double_val
    | |   +-default_value=0
    | +-bytes_val#10 :=
    | | +-GetProtoField
    | |   +-type=BYTES
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=bytes_val
    | |   +-default_value=b""
    | +-bool_val#11 :=
    |   +-GetProtoField
    |     +-type=BOOL
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=bool_val
    |     +-default_value=false
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

# All proto3 repeated fields are packed by the default. This does not have any
# effect on the analyzed statement as the packed option is encoded in the proto
# descriptor.
SELECT Proto3KitchenSink.repeated_int32_val,
       Proto3KitchenSink.repeated_uint32_val,
       Proto3KitchenSink.repeated_int64_val,
       Proto3KitchenSink.repeated_uint64_val,
       Proto3KitchenSink.repeated_string_val,
       Proto3KitchenSink.repeated_float_val,
       Proto3KitchenSink.repeated_double_val,
       Proto3KitchenSink.repeated_bytes_val,
       Proto3KitchenSink.repeated_bool_val
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.repeated_int32_val#3 AS repeated_int32_val [ARRAY<INT32>]
| +-$query.repeated_uint32_val#4 AS repeated_uint32_val [ARRAY<UINT32>]
| +-$query.repeated_int64_val#5 AS repeated_int64_val [ARRAY<INT64>]
| +-$query.repeated_uint64_val#6 AS repeated_uint64_val [ARRAY<UINT64>]
| +-$query.repeated_string_val#7 AS repeated_string_val [ARRAY<STRING>]
| +-$query.repeated_float_val#8 AS repeated_float_val [ARRAY<FLOAT>]
| +-$query.repeated_double_val#9 AS repeated_double_val [ARRAY<DOUBLE>]
| +-$query.repeated_bytes_val#10 AS repeated_bytes_val [ARRAY<BYTES>]
| +-$query.repeated_bool_val#11 AS repeated_bool_val [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=$query.[repeated_int32_val#3, repeated_uint32_val#4, repeated_int64_val#5, repeated_uint64_val#6, repeated_string_val#7, repeated_float_val#8, repeated_double_val#9, repeated_bytes_val#10, repeated_bool_val#11]
    +-expr_list=
    | +-repeated_int32_val#3 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<INT32>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=repeated_int32_val
    | |   +-default_value=[]
    | +-repeated_uint32_val#4 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<UINT32>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=repeated_uint32_val
    | |   +-default_value=[]
    | +-repeated_int64_val#5 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<INT64>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=repeated_int64_val
    | |   +-default_value=[]
    | +-repeated_uint64_val#6 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<UINT64>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=repeated_uint64_val
    | |   +-default_value=[]
    | +-repeated_string_val#7 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<STRING>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=repeated_string_val
    | |   +-default_value=[]
    | +-repeated_float_val#8 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<FLOAT>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=repeated_float_val
    | |   +-default_value=[]
    | +-repeated_double_val#9 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<DOUBLE>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=repeated_double_val
    | |   +-default_value=[]
    | +-repeated_bytes_val#10 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<BYTES>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=repeated_bytes_val
    | |   +-default_value=[]
    | +-repeated_bool_val#11 :=
    |   +-GetProtoField
    |     +-type=ARRAY<BOOL>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=repeated_bool_val
    |     +-default_value=[]
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

# The implicit default of enums in proto3 is zero. Therefore every enum has a
# constant mapped to zero.
SELECT Proto3KitchenSink.test_enum
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.test_enum#3 AS test_enum [ENUM<zetasql_test__.TestProto3Enum>]
+-query=
  +-ProjectScan
    +-column_list=[$query.test_enum#3]
    +-expr_list=
    | +-test_enum#3 :=
    |   +-GetProtoField
    |     +-type=ENUM<zetasql_test__.TestProto3Enum>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=test_enum
    |     +-default_value=ENUM0
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

# Maps have the same representation in proto2 and proto3.
SELECT Proto3KitchenSink.test_map
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.test_map#3 AS test_map [ARRAY<PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.test_map#3]
    +-expr_list=
    | +-test_map#3 :=
    |   +-GetProtoField
    |     +-type=ARRAY<PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=test_map
    |     +-default_value=[]
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

SELECT m
FROM Proto3Table t, t.Proto3KitchenSink.test_map m
--
QueryStmt
+-output_column_list=
| +-$array.m#3 AS m [PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>]
+-query=
  +-ProjectScan
    +-column_list=[$array.m#3]
    +-input_scan=
      +-ArrayScan
        +-column_list=[Proto3Table.Proto3KitchenSink#2, $array.m#3]
        +-input_scan=
        | +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1], alias="t")
        +-array_expr=
        | +-GetProtoField
        |   +-type=ARRAY<PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
        |   +-field_descriptor=test_map
        |   +-default_value=[]
        +-element_column=$array.m#3
==

SELECT m.*
FROM Proto3Table t, t.Proto3KitchenSink.test_map m
--
QueryStmt
+-output_column_list=
| +-$query.key#4 AS key [STRING]
| +-$query.value#5 AS value [INT32]
+-query=
  +-ProjectScan
    +-column_list=$query.[key#4, value#5]
    +-expr_list=
    | +-key#4 :=
    | | +-GetProtoField
    | |   +-type=STRING
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>, column=$array.m#3)
    | |   +-field_descriptor=key
    | |   +-default_value=""
    | +-value#5 :=
    |   +-GetProtoField
    |     +-type=INT32
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>, column=$array.m#3)
    |     +-field_descriptor=value
    |     +-default_value=0
    +-input_scan=
      +-ArrayScan
        +-column_list=[Proto3Table.Proto3KitchenSink#2, $array.m#3]
        +-input_scan=
        | +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1], alias="t")
        +-array_expr=
        | +-GetProtoField
        |   +-type=ARRAY<PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
        |   +-field_descriptor=test_map
        |   +-default_value=[]
        +-element_column=$array.m#3
==

SELECT m.key, m.value
FROM Proto3Table t, t.Proto3KitchenSink.test_map m
--
QueryStmt
+-output_column_list=
| +-$query.key#4 AS key [STRING]
| +-$query.value#5 AS value [INT32]
+-query=
  +-ProjectScan
    +-column_list=$query.[key#4, value#5]
    +-expr_list=
    | +-key#4 :=
    | | +-GetProtoField
    | |   +-type=STRING
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>, column=$array.m#3)
    | |   +-field_descriptor=key
    | |   +-default_value=""
    | +-value#5 :=
    |   +-GetProtoField
    |     +-type=INT32
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>, column=$array.m#3)
    |     +-field_descriptor=value
    |     +-default_value=0
    +-input_scan=
      +-ArrayScan
        +-column_list=[Proto3Table.Proto3KitchenSink#2, $array.m#3]
        +-input_scan=
        | +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1], alias="t")
        +-array_expr=
        | +-GetProtoField
        |   +-type=ARRAY<PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
        |   +-field_descriptor=test_map
        |   +-default_value=[]
        +-element_column=$array.m#3
==

SELECT ARRAY_LENGTH(Proto3KitchenSink.test_map)
FROM Proto3Table t
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:array_length(ARRAY<PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>>) -> INT64)
    |     +-GetProtoField
    |       +-type=ARRAY<PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>>
    |       +-expr=
    |       | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |       +-field_descriptor=test_map
    |       +-default_value=[]
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1], alias="t")
==

SELECT CAST(m as string),
       CAST(m as bytes)
FROM Proto3Table t, t.Proto3KitchenSink.test_map m
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [STRING]
| +-$query.$col2#5 AS "$col2" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#4, $col2#5]
    +-expr_list=
    | +-$col1#4 :=
    | | +-Cast(PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry> -> STRING)
    | |   +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>, column=$array.m#3)
    | +-$col2#5 :=
    |   +-Cast(PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry> -> BYTES)
    |     +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>, column=$array.m#3)
    +-input_scan=
      +-ArrayScan
        +-column_list=[Proto3Table.Proto3KitchenSink#2, $array.m#3]
        +-input_scan=
        | +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1], alias="t")
        +-array_expr=
        | +-GetProtoField
        |   +-type=ARRAY<PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
        |   +-field_descriptor=test_map
        |   +-default_value=[]
        +-element_column=$array.m#3
==

SELECT CAST('key: "hello", value: 123'
            as zetasql_test__.Proto3KitchenSink.TestMapEntry)
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-Cast(STRING -> PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>)
    |     +-Literal(type=STRING, value='key: "hello", value: 123')
    +-input_scan=
      +-TableScan(table=Proto3Table)
==

SELECT CAST(bytes_proto as zetasql_test__.Proto3KitchenSink.TestMapEntry)
FROM (SELECT CAST(m as bytes) bytes_proto
      FROM Proto3Table t, t.Proto3KitchenSink.test_map m)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-Cast(BYTES -> PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>)
    |     +-ColumnRef(type=BYTES, column=$subquery1.bytes_proto#4)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.bytes_proto#4]
        +-expr_list=
        | +-bytes_proto#4 :=
        |   +-Cast(PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry> -> BYTES)
        |     +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>, column=$array.m#3)
        +-input_scan=
          +-ArrayScan
            +-column_list=[Proto3Table.Proto3KitchenSink#2, $array.m#3]
            +-input_scan=
            | +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1], alias="t")
            +-array_expr=
            | +-GetProtoField
            |   +-type=ARRAY<PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
            |   +-field_descriptor=test_map
            |   +-default_value=[]
            +-element_column=$array.m#3
==

SELECT NEW zetasql_test__.Proto3KitchenSink.TestMapEntry(expr1 as key,
                                                         expr2 as value)
FROM (SELECT "hello" as expr1, 123 as expr2)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-MakeProto
    |     +-type=PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>
    |     +-field_list=
    |       +-key := ColumnRef(type=STRING, column=$subquery1.expr1#1)
    |       +-value :=
    |         +-Cast(INT64 -> INT32)
    |           +-ColumnRef(type=INT64, column=$subquery1.expr2#2)
    +-input_scan=
      +-ProjectScan
        +-column_list=$subquery1.[expr1#1, expr2#2]
        +-expr_list=
        | +-expr1#1 := Literal(type=STRING, value="hello")
        | +-expr2#2 := Literal(type=INT64, value=123)
        +-input_scan=
          +-SingleRowScan
==

SELECT AS zetasql_test__.Proto3KitchenSink.TestMapEntry expr1 key, expr2 value
FROM (SELECT "hello" as expr1, 123 as expr2)
--
QueryStmt
+-output_column_list=
| +-$make_proto.$proto#3 AS "$proto" [PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$make_proto.$proto#3]
    +-expr_list=
    | +-$proto#3 :=
    |   +-MakeProto
    |     +-type=PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>
    |     +-field_list=
    |       +-key := ColumnRef(type=STRING, column=$subquery1.expr1#1)
    |       +-value :=
    |         +-Cast(INT64 -> INT32)
    |           +-ColumnRef(type=INT64, column=$subquery1.expr2#2)
    +-input_scan=
      +-ProjectScan
        +-column_list=$subquery1.[expr1#1, expr2#2]
        +-input_scan=
          +-ProjectScan
            +-column_list=$subquery1.[expr1#1, expr2#2]
            +-expr_list=
            | +-expr1#1 := Literal(type=STRING, value="hello")
            | +-expr2#2 := Literal(type=INT64, value=123)
            +-input_scan=
              +-SingleRowScan
==

# Constructing a MapEntry with a missing key field
SELECT AS zetasql_test__.Proto3KitchenSink.TestMapEntry expr2 value
FROM (SELECT 123 as expr2)
--
QueryStmt
+-output_column_list=
| +-$make_proto.$proto#2 AS "$proto" [PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$make_proto.$proto#2]
    +-expr_list=
    | +-$proto#2 :=
    |   +-MakeProto
    |     +-type=PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>
    |     +-field_list=
    |       +-value :=
    |         +-Cast(INT64 -> INT32)
    |           +-ColumnRef(type=INT64, column=$subquery1.expr2#1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.expr2#1]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$subquery1.expr2#1]
            +-expr_list=
            | +-expr2#1 := Literal(type=INT64, value=123)
            +-input_scan=
              +-SingleRowScan
==

SELECT NEW zetasql_test__.Proto3KitchenSink.TestMapEntry(expr1 as key,
                                                         expr2 as value)
FROM (SELECT "hello" as expr1, b"123" as expr2)
--
ERROR: Could not store value with type BYTES into proto field zetasql_test__.Proto3KitchenSink.TestMapEntry.value which has SQL type INT32 [at 2:58]
                                                         expr2 as value)
                                                         ^
==

SELECT MessageWithInvalidMap.invalid_test_map
FROM Proto3InvalidMapTable
--
ERROR: Proto zetasql_test__.MessageWithInvalidMap has invalid zetasql.format for field: map<string, string> invalid_test_map = 63 [(.zetasql.format) = DATE];
 [at 1:30]
SELECT MessageWithInvalidMap.invalid_test_map
                             ^
==

# Proto3 defines a set of messages known as Well Known Types. Without any
# special handling they are just represented in their raw proto form.
SELECT Proto3KitchenSink.timestamp_wkt,
       Proto3KitchenSink.duration_wkt,
       Proto3KitchenSink.empty_wkt,
       Proto3KitchenSink.field_mask_wkt,
       Proto3KitchenSink.struct_wkt,
       Proto3KitchenSink.api_wkt,
       Proto3KitchenSink.source_context_wkt,
       Proto3KitchenSink.wrapped_int32_wkt
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.timestamp_wkt#3 AS timestamp_wkt [PROTO<google.protobuf.Timestamp>]
| +-$query.duration_wkt#4 AS duration_wkt [PROTO<google.protobuf.Duration>]
| +-$query.empty_wkt#5 AS empty_wkt [PROTO<google.protobuf.Empty>]
| +-$query.field_mask_wkt#6 AS field_mask_wkt [PROTO<google.protobuf.FieldMask>]
| +-$query.struct_wkt#7 AS struct_wkt [PROTO<google.protobuf.Struct>]
| +-$query.api_wkt#8 AS api_wkt [PROTO<google.protobuf.Api>]
| +-$query.source_context_wkt#9 AS source_context_wkt [PROTO<google.protobuf.SourceContext>]
| +-$query.wrapped_int32_wkt#10 AS wrapped_int32_wkt [PROTO<google.protobuf.Int32Value>]
+-query=
  +-ProjectScan
    +-column_list=$query.[timestamp_wkt#3, duration_wkt#4, empty_wkt#5, field_mask_wkt#6, struct_wkt#7, api_wkt#8, source_context_wkt#9, wrapped_int32_wkt#10]
    +-expr_list=
    | +-timestamp_wkt#3 :=
    | | +-GetProtoField
    | |   +-type=PROTO<google.protobuf.Timestamp>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=timestamp_wkt
    | |   +-default_value=NULL
    | +-duration_wkt#4 :=
    | | +-GetProtoField
    | |   +-type=PROTO<google.protobuf.Duration>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=duration_wkt
    | |   +-default_value=NULL
    | +-empty_wkt#5 :=
    | | +-GetProtoField
    | |   +-type=PROTO<google.protobuf.Empty>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=empty_wkt
    | |   +-default_value=NULL
    | +-field_mask_wkt#6 :=
    | | +-GetProtoField
    | |   +-type=PROTO<google.protobuf.FieldMask>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=field_mask_wkt
    | |   +-default_value=NULL
    | +-struct_wkt#7 :=
    | | +-GetProtoField
    | |   +-type=PROTO<google.protobuf.Struct>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=struct_wkt
    | |   +-default_value=NULL
    | +-api_wkt#8 :=
    | | +-GetProtoField
    | |   +-type=PROTO<google.protobuf.Api>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=api_wkt
    | |   +-default_value=NULL
    | +-source_context_wkt#9 :=
    | | +-GetProtoField
    | |   +-type=PROTO<google.protobuf.SourceContext>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=source_context_wkt
    | |   +-default_value=NULL
    | +-wrapped_int32_wkt#10 :=
    |   +-GetProtoField
    |     +-type=PROTO<google.protobuf.Int32Value>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=wrapped_int32_wkt
    |     +-default_value=NULL
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

SELECT Proto3KitchenSink.timestamp_wkt.seconds,
       Proto3KitchenSink.timestamp_wkt.nanos
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.seconds#3 AS seconds [INT64]
| +-$query.nanos#4 AS nanos [INT32]
+-query=
  +-ProjectScan
    +-column_list=$query.[seconds#3, nanos#4]
    +-expr_list=
    | +-seconds#3 :=
    | | +-GetProtoField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-GetProtoField
    | |   |   +-type=PROTO<google.protobuf.Timestamp>
    | |   |   +-expr=
    | |   |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   |   +-field_descriptor=timestamp_wkt
    | |   |   +-default_value=NULL
    | |   +-field_descriptor=seconds
    | |   +-default_value=0
    | +-nanos#4 :=
    |   +-GetProtoField
    |     +-type=INT32
    |     +-expr=
    |     | +-GetProtoField
    |     |   +-type=PROTO<google.protobuf.Timestamp>
    |     |   +-expr=
    |     |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     |   +-field_descriptor=timestamp_wkt
    |     |   +-default_value=NULL
    |     +-field_descriptor=nanos
    |     +-default_value=0
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

SELECT TIMESTAMP_ADD(Proto3KitchenSink.timestamp_wkt, INTERVAL 10 MINUTE)
FROM Proto3Table
--
ERROR: No matching signature for function TIMESTAMP_ADD for argument types: google.protobuf.Timestamp, INTERVAL INT64 DATE_TIME_PART. Supported signature: TIMESTAMP_ADD(TIMESTAMP, INTERVAL INT64 DATE_TIME_PART) [at 1:8]
SELECT TIMESTAMP_ADD(Proto3KitchenSink.timestamp_wkt, INTERVAL 10 MINUTE)
       ^
==

SELECT Proto3KitchenSink.empty_wkt.*
FROM Proto3Table
--
ERROR: Star expansion is not allowed on proto google.protobuf.Empty which has zero fields [at 1:8]
SELECT Proto3KitchenSink.empty_wkt.*
       ^
==

# The any WKT represents an arbitrary encoded message.
SELECT Proto3KitchenSink.any_wkt,
       Proto3KitchenSink.any_wkt.type_url,
       Proto3KitchenSink.any_wkt.value,
       fn_on_any_proto(Proto3KitchenSink.any_wkt)
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.any_wkt#3 AS any_wkt [PROTO<google.protobuf.Any>]
| +-$query.type_url#4 AS type_url [STRING]
| +-$query.value#5 AS value [BYTES]
| +-$query.$col4#6 AS "$col4" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[any_wkt#3, type_url#4, value#5, $col4#6]
    +-expr_list=
    | +-any_wkt#3 :=
    | | +-GetProtoField
    | |   +-type=PROTO<google.protobuf.Any>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=any_wkt
    | |   +-default_value=NULL
    | +-type_url#4 :=
    | | +-GetProtoField
    | |   +-type=STRING
    | |   +-expr=
    | |   | +-GetProtoField
    | |   |   +-type=PROTO<google.protobuf.Any>
    | |   |   +-expr=
    | |   |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   |   +-field_descriptor=any_wkt
    | |   |   +-default_value=NULL
    | |   +-field_descriptor=type_url
    | |   +-default_value=""
    | +-value#5 :=
    | | +-GetProtoField
    | |   +-type=BYTES
    | |   +-expr=
    | |   | +-GetProtoField
    | |   |   +-type=PROTO<google.protobuf.Any>
    | |   |   +-expr=
    | |   |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   |   +-field_descriptor=any_wkt
    | |   |   +-default_value=NULL
    | |   +-field_descriptor=value
    | |   +-default_value=b""
    | +-$col4#6 :=
    |   +-FunctionCall(sample_functions:fn_on_any_proto(PROTO<google.protobuf.Any>) -> BOOL)
    |     +-GetProtoField
    |       +-type=PROTO<google.protobuf.Any>
    |       +-expr=
    |       | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |       +-field_descriptor=any_wkt
    |       +-default_value=NULL
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

SELECT Proto3KitchenSink.struct_wkt != STRUCT('abc')
FROM Proto3Table
--
ERROR: No matching signature for operator != for argument types: google.protobuf.Struct, STRUCT<STRING>. Supported signatures: ANY != ANY; INT64 != UINT64; UINT64 != INT64 [at 1:8]
SELECT Proto3KitchenSink.struct_wkt != STRUCT('abc')
       ^
==

# Proto3 still supports annotations through extensions on the field descriptor.
SELECT Proto3KitchenSink.date,
       Proto3KitchenSink.timestamp_seconds,
       Proto3KitchenSink.timestamp_seconds_format,
       Proto3KitchenSink.nullable_string
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.date#3 AS date [DATE]
| +-$query.timestamp_seconds#4 AS timestamp_seconds [TIMESTAMP]
| +-$query.timestamp_seconds_format#5 AS timestamp_seconds_format [TIMESTAMP]
| +-$query.nullable_string#6 AS nullable_string [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[date#3, timestamp_seconds#4, timestamp_seconds_format#5, nullable_string#6]
    +-expr_list=
    | +-date#3 :=
    | | +-GetProtoField
    | |   +-type=DATE
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=date
    | |   +-default_value=1970-01-01
    | |   +-format=DATE
    | +-timestamp_seconds#4 :=
    | | +-GetProtoField
    | |   +-type=TIMESTAMP
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=timestamp_seconds
    | |   +-default_value=1970-01-01 00:00:00+00
    | |   +-format=TIMESTAMP_SECONDS
    | +-timestamp_seconds_format#5 :=
    | | +-GetProtoField
    | |   +-type=TIMESTAMP
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=timestamp_seconds_format
    | |   +-default_value=1970-01-01 00:00:00+00
    | |   +-format=TIMESTAMP_SECONDS
    | +-nullable_string#6 :=
    |   +-GetProtoField
    |     +-type=STRING
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=nullable_string
    |     +-default_value=NULL
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

SELECT CAST('int32_val:12345' AS zetasql_test__.Proto3KitchenSink)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [PROTO<zetasql_test__.Proto3KitchenSink>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> PROTO<zetasql_test__.Proto3KitchenSink>)
    |     +-Literal(type=STRING, value='int32_val:12345')
    +-input_scan=
      +-SingleRowScan
==

SELECT Proto3KitchenSink.test_struct
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.test_struct#3 AS test_struct [PROTO<zetasql_test__.Proto3AnnotatedStruct>]
+-query=
  +-ProjectScan
    +-column_list=[$query.test_struct#3]
    +-expr_list=
    | +-test_struct#3 :=
    |   +-GetProtoField
    |     +-type=PROTO<zetasql_test__.Proto3AnnotatedStruct>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=test_struct
    |     +-default_value=NULL
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

# Proto3 can have message fields of proto2.
SELECT Proto3KitchenSink.empty_message
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.empty_message#3 AS empty_message [PROTO<zetasql_test__.EmptyMessage>]
+-query=
  +-ProjectScan
    +-column_list=[$query.empty_message#3]
    +-expr_list=
    | +-empty_message#3 :=
    |   +-GetProtoField
    |     +-type=PROTO<zetasql_test__.EmptyMessage>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=empty_message
    |     +-default_value=NULL
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

SELECT Proto3KitchenSink.nested_value.nested_int64,
       Proto3KitchenSink.nested_value.nested_repeated_int64
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.nested_int64#3 AS nested_int64 [INT64]
| +-$query.nested_repeated_int64#4 AS nested_repeated_int64 [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=$query.[nested_int64#3, nested_repeated_int64#4]
    +-expr_list=
    | +-nested_int64#3 :=
    | | +-GetProtoField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-GetProtoField
    | |   |   +-type=PROTO<zetasql_test__.Proto3KitchenSink.Nested>
    | |   |   +-expr=
    | |   |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   |   +-field_descriptor=nested_value
    | |   |   +-default_value=NULL
    | |   +-field_descriptor=nested_int64
    | |   +-default_value=0
    | +-nested_repeated_int64#4 :=
    |   +-GetProtoField
    |     +-type=ARRAY<INT64>
    |     +-expr=
    |     | +-GetProtoField
    |     |   +-type=PROTO<zetasql_test__.Proto3KitchenSink.Nested>
    |     |   +-expr=
    |     |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     |   +-field_descriptor=nested_value
    |     |   +-default_value=NULL
    |     +-field_descriptor=nested_repeated_int64
    |     +-default_value=[]
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

# Passing a proto3 message into a function that expects any proto type.
SELECT fn_on_any_proto(Proto3KitchenSink)
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(sample_functions:fn_on_any_proto(PROTO<zetasql_test__.Proto3KitchenSink>) -> BOOL)
    |     +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

SELECT Proto3KitchenSink.nested_repeated_value.nested_int64
FROM Proto3Table
--
ERROR: Cannot access field nested_int64 on a value with type ARRAY<zetasql_test__.Proto3KitchenSink.Nested> [at 1:48]
SELECT Proto3KitchenSink.nested_repeated_value.nested_int64
                                               ^
==

SELECT Proto3KitchenSink.field_that_doesnt_exist
FROM Proto3Table
--
ERROR: Protocol buffer zetasql_test__.Proto3KitchenSink does not have a field called field_that_doesnt_exist [at 1:26]
SELECT Proto3KitchenSink.field_that_doesnt_exist
                         ^
==

# FEATURE_V_1_3_IGNORE_PROTO3_USE_DEFAULTS causes the use_defaults and
# use_field_defaults annotations to be ignored for proto3 scalar fields.
##########################################################################
[language_features={{|V_1_3_IGNORE_PROTO3_USE_DEFAULTS}}]
SELECT Proto3KitchenSink.int32_val, Proto3KitchenSink.int64_val,
       Proto3KitchenSink.date
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.int32_val#3 AS int32_val [INT32]
| +-$query.int64_val#4 AS int64_val [INT64]
| +-$query.date#5 AS date [DATE]
+-query=
  +-ProjectScan
    +-column_list=$query.[int32_val#3, int64_val#4, date#5]
    +-expr_list=
    | +-int32_val#3 :=
    | | +-GetProtoField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=int32_val
    | |   +-default_value=0
    | +-int64_val#4 :=
    | | +-GetProtoField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=int64_val
    | |   +-default_value=0
    | +-date#5 :=
    |   +-GetProtoField
    |     +-type=DATE
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=date
    |     +-default_value=1970-01-01
    |     +-format=DATE
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

[language_features={{|V_1_3_IGNORE_PROTO3_USE_DEFAULTS}}]
SELECT Proto3KitchenSink.nullable_string, Proto3KitchenSink.nullable_date
FROM Proto3Table
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.nullable_string#3 AS nullable_string [STRING]
| +-$query.nullable_date#4 AS nullable_date [DATE]
+-query=
  +-ProjectScan
    +-column_list=$query.[nullable_string#3, nullable_date#4]
    +-expr_list=
    | +-nullable_string#3 :=
    | | +-GetProtoField
    | |   +-type=STRING
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=nullable_string
    | |   +-default_value=NULL
    | +-nullable_date#4 :=
    |   +-GetProtoField
    |     +-type=DATE
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=nullable_date
    |     +-default_value=NULL
    |     +-format=DATE
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
--
ALTERNATION GROUP: V_1_3_IGNORE_PROTO3_USE_DEFAULTS
--
QueryStmt
+-output_column_list=
| +-$query.nullable_string#3 AS nullable_string [STRING]
| +-$query.nullable_date#4 AS nullable_date [DATE]
+-query=
  +-ProjectScan
    +-column_list=$query.[nullable_string#3, nullable_date#4]
    +-expr_list=
    | +-nullable_string#3 :=
    | | +-GetProtoField
    | |   +-type=STRING
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=nullable_string
    | |   +-default_value=""
    | +-nullable_date#4 :=
    |   +-GetProtoField
    |     +-type=DATE
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=nullable_date
    |     +-default_value=1970-01-01
    |     +-format=DATE
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

[language_features={{|V_1_3_IGNORE_PROTO3_USE_DEFAULTS}}]
SELECT Proto3KitchenSink.repeated_int32_val, Proto3KitchenSink.repeated_date
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.repeated_int32_val#3 AS repeated_int32_val [ARRAY<INT32>]
| +-$query.repeated_date#4 AS repeated_date [ARRAY<DATE>]
+-query=
  +-ProjectScan
    +-column_list=$query.[repeated_int32_val#3, repeated_date#4]
    +-expr_list=
    | +-repeated_int32_val#3 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<INT32>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=repeated_int32_val
    | |   +-default_value=[]
    | +-repeated_date#4 :=
    |   +-GetProtoField
    |     +-type=ARRAY<DATE>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=repeated_date
    |     +-default_value=[]
    |     +-format=DATE
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

[language_features={{|V_1_3_IGNORE_PROTO3_USE_DEFAULTS}}]
SELECT Proto3KitchenSink.nested_value,
       Proto3KitchenSink.nested_value.nested_int64
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.nested_value#3 AS nested_value [PROTO<zetasql_test__.Proto3KitchenSink.Nested>]
| +-$query.nested_int64#4 AS nested_int64 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[nested_value#3, nested_int64#4]
    +-expr_list=
    | +-nested_value#3 :=
    | | +-GetProtoField
    | |   +-type=PROTO<zetasql_test__.Proto3KitchenSink.Nested>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   +-field_descriptor=nested_value
    | |   +-default_value=NULL
    | +-nested_int64#4 :=
    |   +-GetProtoField
    |     +-type=INT64
    |     +-expr=
    |     | +-GetProtoField
    |     |   +-type=PROTO<zetasql_test__.Proto3KitchenSink.Nested>
    |     |   +-expr=
    |     |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     |   +-field_descriptor=nested_value
    |     |   +-default_value=NULL
    |     +-field_descriptor=nested_int64
    |     +-default_value=0
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

[language_features={{|V_1_3_IGNORE_PROTO3_USE_DEFAULTS}}]
SELECT Proto3KitchenSink.nullable_nested_value.nested_int64,
       Proto3KitchenSink.nullable_nested_value.nested_repeated_int64,
       Proto3KitchenSink.nullable_nested_value.date
FROM Proto3Table
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.nested_int64#3 AS nested_int64 [INT64]
| +-$query.nested_repeated_int64#4 AS nested_repeated_int64 [ARRAY<INT64>]
| +-$query.date#5 AS date [DATE]
+-query=
  +-ProjectScan
    +-column_list=$query.[nested_int64#3, nested_repeated_int64#4, date#5]
    +-expr_list=
    | +-nested_int64#3 :=
    | | +-GetProtoField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-GetProtoField
    | |   |   +-type=PROTO<zetasql_test__.Proto3KitchenSink.NullableNested>
    | |   |   +-expr=
    | |   |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   |   +-field_descriptor=nullable_nested_value
    | |   |   +-default_value=NULL
    | |   +-field_descriptor=nested_int64
    | |   +-default_value=NULL
    | +-nested_repeated_int64#4 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<INT64>
    | |   +-expr=
    | |   | +-GetProtoField
    | |   |   +-type=PROTO<zetasql_test__.Proto3KitchenSink.NullableNested>
    | |   |   +-expr=
    | |   |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   |   +-field_descriptor=nullable_nested_value
    | |   |   +-default_value=NULL
    | |   +-field_descriptor=nested_repeated_int64
    | |   +-default_value=[]
    | +-date#5 :=
    |   +-GetProtoField
    |     +-type=DATE
    |     +-expr=
    |     | +-GetProtoField
    |     |   +-type=PROTO<zetasql_test__.Proto3KitchenSink.NullableNested>
    |     |   +-expr=
    |     |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     |   +-field_descriptor=nullable_nested_value
    |     |   +-default_value=NULL
    |     +-field_descriptor=date
    |     +-default_value=NULL
    |     +-format=DATE
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
--
ALTERNATION GROUP: V_1_3_IGNORE_PROTO3_USE_DEFAULTS
--
QueryStmt
+-output_column_list=
| +-$query.nested_int64#3 AS nested_int64 [INT64]
| +-$query.nested_repeated_int64#4 AS nested_repeated_int64 [ARRAY<INT64>]
| +-$query.date#5 AS date [DATE]
+-query=
  +-ProjectScan
    +-column_list=$query.[nested_int64#3, nested_repeated_int64#4, date#5]
    +-expr_list=
    | +-nested_int64#3 :=
    | | +-GetProtoField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-GetProtoField
    | |   |   +-type=PROTO<zetasql_test__.Proto3KitchenSink.NullableNested>
    | |   |   +-expr=
    | |   |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   |   +-field_descriptor=nullable_nested_value
    | |   |   +-default_value=NULL
    | |   +-field_descriptor=nested_int64
    | |   +-default_value=0
    | +-nested_repeated_int64#4 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<INT64>
    | |   +-expr=
    | |   | +-GetProtoField
    | |   |   +-type=PROTO<zetasql_test__.Proto3KitchenSink.NullableNested>
    | |   |   +-expr=
    | |   |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    | |   |   +-field_descriptor=nullable_nested_value
    | |   |   +-default_value=NULL
    | |   +-field_descriptor=nested_repeated_int64
    | |   +-default_value=[]
    | +-date#5 :=
    |   +-GetProtoField
    |     +-type=DATE
    |     +-expr=
    |     | +-GetProtoField
    |     |   +-type=PROTO<zetasql_test__.Proto3KitchenSink.NullableNested>
    |     |   +-expr=
    |     |   | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     |   +-field_descriptor=nullable_nested_value
    |     |   +-default_value=NULL
    |     +-field_descriptor=date
    |     +-default_value=1970-01-01
    |     +-format=DATE
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

[language_features={{|V_1_3_IGNORE_PROTO3_USE_DEFAULTS}}]
SELECT Proto3KitchenSink.test_map
FROM Proto3Table
--
QueryStmt
+-output_column_list=
| +-$query.test_map#3 AS test_map [ARRAY<PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.test_map#3]
    +-expr_list=
    | +-test_map#3 :=
    |   +-GetProtoField
    |     +-type=ARRAY<PROTO<zetasql_test__.Proto3KitchenSink.TestMapEntry>>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
    |     +-field_descriptor=test_map
    |     +-default_value=[]
    +-input_scan=
      +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
==

# TODO: We should be ignoring the proto3 defaults when the feature
# flag is set, but we still obey them. This test is to demonstrate a problem
# that is fixed in a subsequent CL.
[language_features={{|V_1_3_IGNORE_PROTO3_USE_DEFAULTS}}]
SELECT Proto3KitchenSink.small_message_no_use_defaults.*
FROM Proto3Table;
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.s1#4 AS s1 [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.s1#4]
    +-expr_list=
    | +-s1#4 :=
    |   +-GetProtoField
    |     +-type=STRING
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3SmallMessageWithNoUseDefaults>, column=$preproject.$proto#3)
    |     +-field_descriptor=s1
    |     +-default_value=NULL
    +-input_scan=
      +-ProjectScan
        +-column_list=[Proto3Table.Proto3KitchenSink#2, $preproject.$proto#3]
        +-expr_list=
        | +-$proto#3 :=
        |   +-GetProtoField
        |     +-type=PROTO<zetasql_test__.Proto3SmallMessageWithNoUseDefaults>
        |     +-expr=
        |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
        |     +-field_descriptor=small_message_no_use_defaults
        |     +-default_value=NULL
        +-input_scan=
          +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
--
ALTERNATION GROUP: V_1_3_IGNORE_PROTO3_USE_DEFAULTS
--
QueryStmt
+-output_column_list=
| +-$query.s1#4 AS s1 [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.s1#4]
    +-expr_list=
    | +-s1#4 :=
    |   +-GetProtoField
    |     +-type=STRING
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3SmallMessageWithNoUseDefaults>, column=$preproject.$proto#3)
    |     +-field_descriptor=s1
    |     +-default_value=""
    +-input_scan=
      +-ProjectScan
        +-column_list=[Proto3Table.Proto3KitchenSink#2, $preproject.$proto#3]
        +-expr_list=
        | +-$proto#3 :=
        |   +-GetProtoField
        |     +-type=PROTO<zetasql_test__.Proto3SmallMessageWithNoUseDefaults>
        |     +-expr=
        |     | +-ColumnRef(type=PROTO<zetasql_test__.Proto3KitchenSink>, column=Proto3Table.Proto3KitchenSink#2)
        |     +-field_descriptor=small_message_no_use_defaults
        |     +-default_value=NULL
        +-input_scan=
          +-TableScan(column_list=[Proto3Table.Proto3KitchenSink#2], table=Proto3Table, column_index_list=[1])
