#########################
# Table name suggestions.
#
select key from KeyVal
--
ERROR: Table not found: KeyVal; Did you mean KeyValue? [at 1:17]
select key from KeyVal
                ^
==

select key from KeyValeu
--
ERROR: Table not found: KeyValeu; Did you mean KeyValue? [at 1:17]
select key from KeyValeu
                ^
==

select key from KEYVALEU
--
ERROR: Table not found: KEYVALEU; Did you mean KeyValue? [at 1:17]
select key from KEYVALEU
                ^
==

select key from kEYvALEU
--
ERROR: Table not found: kEYvALEU; Did you mean KeyValue? [at 1:17]
select key from kEYvALEU
                ^
==

select * from KitchenValueTable
--
ERROR: Table not found: KitchenValueTable; Did you mean KitchenSinkValueTable? [at 1:15]
select * from KitchenValueTable
              ^
==

select * from NstdKeyValeu
--
ERROR: Table not found: NstdKeyValeu [at 1:15]
select * from NstdKeyValeu
              ^
==

# We do not give any suggestions for mistypes in catalog names or paths.
select * from Nstd_Catalog.NestedKeyValue
--
ERROR: Table not found: Nstd_Catalog.NestedKeyValue [at 1:15]
select * from Nstd_Catalog.NestedKeyValue
              ^
==

# No suggestion found within the allowed ~20% edit-distance.
select * from SomeRandom
--
ERROR: Table not found: SomeRandom [at 1:15]
select * from SomeRandom
              ^
==

########################
# Namescope suggestions.
#
select KitchenSnk from TestTable
--
ERROR: Unrecognized name: KitchenSnk; Did you mean KitchenSink? [at 1:8]
select KitchenSnk from TestTable
       ^
==

select timestamp_nanoseconds from SimpleTypes
--
ERROR: Unrecognized name: timestamp_nanoseconds; Did you mean timestamp_seconds? [at 1:8]
select timestamp_nanoseconds from SimpleTypes
       ^
==

# TODO: Figure out how to suggest path expr to access proto fields
# for protos present in the namescope.
select int32_val from TestTable
--
ERROR: Unrecognized name: int32_val [at 1:8]
select int32_val from TestTable
       ^
==

select 1 from KeyValue kv join KeyValue kv2 ON kv1.key = kv2.key
--
ERROR: Unrecognized name: kv1; Did you mean kv? [at 1:48]
select 1 from KeyValue kv join KeyValue kv2 ON kv1.key = kv2.key
                                               ^
==

select 1 key1
union all
select 2 key2
order by key2
--
ERROR: Unrecognized name: key2; Did you mean key1? [at 4:10]
order by key2
         ^
==

select scop.value from (select * from KeyValue) scope
--
ERROR: Unrecognized name: scop; Did you mean scope? [at 1:8]
select scop.value from (select * from KeyValue) scope
       ^
==

##########################
# Proto/Struct field name suggestions.
#
select KitchenSink.int_val from TestTable
--
ERROR: Protocol buffer zetasql_test__.KitchenSinkPB does not have a field called int_val; Did you mean int32_val? [at 1:20]
select KitchenSink.int_val from TestTable
                   ^
==

select KitchenSInk.bol_val from TestTable
--
ERROR: Protocol buffer zetasql_test__.KitchenSinkPB does not have a field called bol_val; Did you mean bool_val? [at 1:20]
select KitchenSInk.bol_val from TestTable
                   ^
==

select KitchenSink.int16_val from TestTable
--
ERROR: Protocol buffer zetasql_test__.KitchenSinkPB does not have a field called int16_val; Did you mean int32_val? [at 1:20]
select KitchenSink.int16_val from TestTable
                   ^
==

select KitchenSink.some_random from TestTable
--
ERROR: Protocol buffer zetasql_test__.KitchenSinkPB does not have a field called some_random [at 1:20]
select KitchenSink.some_random from TestTable
                   ^
==

select st.kqy1, st.key2 from (select (select as struct 1 key, 2 key2) st)
--
ERROR: Field name kqy1 does not exist in STRUCT<key INT64, key2 INT64>; Did you mean key? [at 1:11]
select st.kqy1, st.key2 from (select (select as struct 1 key, 2 key2) st)
          ^
==

select st.some_random from (select (select as struct 1 key) st)
--
ERROR: Field name some_random does not exist in STRUCT<key INT64> [at 1:11]
select st.some_random from (select (select as struct 1 key) st)
          ^
==

# We do not give suggestions on value tables fields which are implicitly
# visible.
select bol_val from KitchenSinkValueTable
--
ERROR: Unrecognized name: bol_val [at 1:8]
select bol_val from KitchenSinkValueTable
       ^
==

############################
# Function name suggestions.
#
select mxa(key) from KeyValue
--
ERROR: Function not found: mxa [at 1:8]
select mxa(key) from KeyValue
       ^
==

select mx(key) from KeyValue
--
ERROR: Function not found: mx [at 1:8]
select mx(key) from KeyValue
       ^
==

select mac(key) from KeyValue
--
ERROR: Function not found: mac; Did you mean max? [at 1:8]
select mac(key) from KeyValue
       ^
==

select smu(key) from KeyValue
--
ERROR: Function not found: smu [at 1:8]
select smu(key) from KeyValue
       ^
==

select sun(key) from KeyValue
--
ERROR: Function not found: sun; Did you mean sin? [at 1:8]
select sun(key) from KeyValue
       ^
==

select cont(key) from KeyValue
--
ERROR: Function not found: cont; Did you mean cot? [at 1:8]
select cont(key) from KeyValue
       ^
==

select cnct(key) from KeyValue
--
ERROR: Function not found: cnct; Did you mean concat? [at 1:8]
select cnct(key) from KeyValue
       ^
==

select conut(key) from KeyValue
--
ERROR: Function not found: conut; Did you mean concat? [at 1:8]
select conut(key) from KeyValue
       ^
==

select logical_add(KitchenSink.bool_val) from TestTable
--
ERROR: Function not found: logical_add; Did you mean logical_and? [at 1:8]
select logical_add(KitchenSink.bool_val) from TestTable
       ^
==

select strng_agg(value) from KeyValue
--
ERROR: Function not found: strng_agg; Did you mean string_agg? [at 1:8]
select strng_agg(value) from KeyValue
       ^
==

[language_features=ANALYTIC_FUNCTIONS]
select row_num() over (partition by key order by value) from keyvalue
--
ERROR: Function not found: row_num; Did you mean row_number? [at 1:8]
select row_num() over (partition by key order by value) from keyvalue
       ^
==

# TODO: Add support for suggesting functions from nested_catalogs.
select nested_function(1) from KeyValue
--
ERROR: Function not found: nested_function; Did you mean test_function? [at 1:8]
select nested_function(1) from KeyValue
       ^
==

############################
# Enum Value Suggestions (Only works with coercion)
#
select '' = cast('TESTENUM1' as zetasql_test__.TestEnum)
--
ERROR: Could not cast literal '' to type zetasql_test__.TestEnum [at 1:8]
select '' = cast('TESTENUM1' as zetasql_test__.TestEnum)
       ^
==

select 'TESTENUM' = cast('TESTENUM1' as zetasql_test__.TestEnum)
--
ERROR: Could not cast literal 'TESTENUM' to type zetasql_test__.TestEnum; Did you mean 'TESTENUM0'? [at 1:8]
select 'TESTENUM' = cast('TESTENUM1' as zetasql_test__.TestEnum)
       ^
==

select 'testenum0' = cast('TESTENUM1' as zetasql_test__.TestEnum)
--
ERROR: Could not cast literal 'testenum0' to type zetasql_test__.TestEnum; Did you mean 'TESTENUM0'? (Note: ENUM values are case sensitive) [at 1:8]
select 'testenum0' = cast('TESTENUM1' as zetasql_test__.TestEnum)
       ^
