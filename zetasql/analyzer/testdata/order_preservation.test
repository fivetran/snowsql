# This file has tests specifically for order preservation, and the
# setting of the is_ordered flag on ResolvedScans.

# This query and the following query produce idential resolved ASTs,
# except this one has is_ordered=true.
select as struct key from KeyValue order by key
--
QueryStmt
+-output_column_list=
| +-$make_struct.$struct#3 AS "$struct" [STRUCT<key INT64>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$make_struct.$struct#3]
    +-is_ordered=TRUE
    +-expr_list=
    | +-$struct#3 :=
    |   +-MakeStruct
    |     +-type=STRUCT<key INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    +-input_scan=
      +-OrderByScan
        +-column_list=[KeyValue.Key#1]
        +-is_ordered=TRUE
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
==

# This query and the following query produce idential resolved ASTs,
# except this one has is_ordered=false.
select as value struct(key) from (select key from KeyValue order by key)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$value_column" [STRUCT<key INT64>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-MakeStruct
    |     +-type=STRUCT<key INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    +-input_scan=
      +-OrderByScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
==

# The ProjectScan added for the hint preserves order.
select @{hint=true} 1 from TestTable order by key
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-hint_list=
    | +-hint := Literal(type=BOOL, value=true)
    +-is_ordered=TRUE
    +-input_scan=
      +-OrderByScan
        +-column_list=[$query.$col1#4]
        +-is_ordered=TRUE
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[TestTable.key#1, $query.$col1#4]
        |   +-expr_list=
        |   | +-$col1#4 := Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
              +-ColumnRef(type=INT32, column=TestTable.key#1)
==

# This preserves is_ordered through the LimitOffsetScan.
select key from TestTable order by key limit 10
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
+-query=
  +-LimitOffsetScan
    +-column_list=[TestTable.key#1]
    +-is_ordered=TRUE
    +-input_scan=
    | +-OrderByScan
    |   +-column_list=[TestTable.key#1]
    |   +-is_ordered=TRUE
    |   +-input_scan=
    |   | +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
    |   +-order_by_item_list=
    |     +-OrderByItem
    |       +-column_ref=
    |         +-ColumnRef(type=INT32, column=TestTable.key#1)
    +-limit=
      +-Literal(type=INT64, value=10)
==

# This loses is_ordered at the LimitOffsetScan because it is a table subquery.
# We still have is_ordered on the OrderByScan inside, and that ordering is
# used by limit, but not after that.
select * from (select key from TestTable order by key limit 10)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1]
    +-input_scan=
      +-LimitOffsetScan
        +-column_list=[TestTable.key#1]
        +-input_scan=
        | +-OrderByScan
        |   +-column_list=[TestTable.key#1]
        |   +-is_ordered=TRUE
        |   +-input_scan=
        |   | +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
        |   +-order_by_item_list=
        |     +-OrderByItem
        |       +-column_ref=
        |         +-ColumnRef(type=INT32, column=TestTable.key#1)
        +-limit=
          +-Literal(type=INT64, value=10)
==

# With AS STRUCT, we get an extra ProjectScan in the subquery, and lose
# is_ordered at the ProjectScan rather than at the LimitOffsetScan.
select * from (select as struct key from TestTable order by key limit 10)
--
QueryStmt
+-output_column_list=
| +-$query.key#5 AS key [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.key#5]
    +-expr_list=
    | +-key#5 :=
    |   +-GetStructField
    |     +-type=INT32
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<key INT32>, column=$make_struct.$struct#4)
    |     +-field_idx=0
    +-input_scan=
      +-ProjectScan
        +-column_list=[$make_struct.$struct#4]
        +-expr_list=
        | +-$struct#4 :=
        |   +-MakeStruct
        |     +-type=STRUCT<key INT32>
        |     +-field_list=
        |       +-ColumnRef(type=INT32, column=TestTable.key#1)
        +-input_scan=
          +-LimitOffsetScan
            +-column_list=[TestTable.key#1]
            +-is_ordered=TRUE
            +-input_scan=
            | +-OrderByScan
            |   +-column_list=[TestTable.key#1]
            |   +-is_ordered=TRUE
            |   +-input_scan=
            |   | +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
            |   +-order_by_item_list=
            |     +-OrderByItem
            |       +-column_ref=
            |         +-ColumnRef(type=INT32, column=TestTable.key#1)
            +-limit=
              +-Literal(type=INT64, value=10)
==

# This has limit and project after order by, and preserves order.
select as struct key+1 k from TestTable order by key limit 10
--
QueryStmt
+-output_column_list=
| +-$make_struct.$struct#5 AS "$struct" [STRUCT<k INT64>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$make_struct.$struct#5]
    +-is_ordered=TRUE
    +-expr_list=
    | +-$struct#5 :=
    |   +-MakeStruct
    |     +-type=STRUCT<k INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=$query.k#4)
    +-input_scan=
      +-LimitOffsetScan
        +-column_list=[$query.k#4]
        +-is_ordered=TRUE
        +-input_scan=
        | +-OrderByScan
        |   +-column_list=[$query.k#4]
        |   +-is_ordered=TRUE
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[TestTable.key#1, $query.k#4]
        |   |   +-expr_list=
        |   |   | +-k#4 :=
        |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |   |     +-Cast(INT32 -> INT64)
        |   |   |     | +-ColumnRef(type=INT32, column=TestTable.key#1)
        |   |   |     +-Literal(type=INT64, value=1)
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
        |   +-order_by_item_list=
        |     +-OrderByItem
        |       +-column_ref=
        |         +-ColumnRef(type=INT32, column=TestTable.key#1)
        +-limit=
          +-Literal(type=INT64, value=10)
==

# This has limit and project after order by, but loses order at the subquery.
select k+1 from (select key+1 k from TestTable order by key limit 10)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=$subquery1.k#4)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-LimitOffsetScan
        +-column_list=[$subquery1.k#4]
        +-input_scan=
        | +-OrderByScan
        |   +-column_list=[$subquery1.k#4]
        |   +-is_ordered=TRUE
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[TestTable.key#1, $subquery1.k#4]
        |   |   +-expr_list=
        |   |   | +-k#4 :=
        |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |   |     +-Cast(INT32 -> INT64)
        |   |   |     | +-ColumnRef(type=INT32, column=TestTable.key#1)
        |   |   |     +-Literal(type=INT64, value=1)
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
        |   +-order_by_item_list=
        |     +-OrderByItem
        |       +-column_ref=
        |         +-ColumnRef(type=INT32, column=TestTable.key#1)
        +-limit=
          +-Literal(type=INT64, value=10)
==

# Expression subqueries don't need to preserve order.
select
  (select key from TestTable order by key),
  ARRAY(select key from TestTable order by key),
  EXISTS(select key from TestTable order by key),
  5 IN (select key from TestTable order by key)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#13 AS "$col1" [INT32]
| +-$query.$col2#14 AS "$col2" [ARRAY<INT32>]
| +-$query.$col3#15 AS "$col3" [BOOL]
| +-$query.$col4#16 AS "$col4" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#13, $col2#14, $col3#15, $col4#16]
    +-expr_list=
    | +-$col1#13 :=
    | | +-SubqueryExpr
    | |   +-type=INT32
    | |   +-subquery_type=SCALAR
    | |   +-subquery=
    | |     +-OrderByScan
    | |       +-column_list=[TestTable.key#1]
    | |       +-input_scan=
    | |       | +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
    | |       +-order_by_item_list=
    | |         +-OrderByItem
    | |           +-column_ref=
    | |             +-ColumnRef(type=INT32, column=TestTable.key#1)
    | +-$col2#14 :=
    | | +-SubqueryExpr
    | |   +-type=ARRAY<INT32>
    | |   +-subquery_type=ARRAY
    | |   +-subquery=
    | |     +-OrderByScan
    | |       +-column_list=[TestTable.key#4]
    | |       +-is_ordered=TRUE
    | |       +-input_scan=
    | |       | +-TableScan(column_list=[TestTable.key#4], table=TestTable, column_index_list=[0])
    | |       +-order_by_item_list=
    | |         +-OrderByItem
    | |           +-column_ref=
    | |             +-ColumnRef(type=INT32, column=TestTable.key#4)
    | +-$col3#15 :=
    | | +-SubqueryExpr
    | |   +-type=BOOL
    | |   +-subquery_type=EXISTS
    | |   +-subquery=
    | |     +-OrderByScan
    | |       +-column_list=[TestTable.key#7]
    | |       +-input_scan=
    | |       | +-TableScan(column_list=[TestTable.key#7], table=TestTable, column_index_list=[0])
    | |       +-order_by_item_list=
    | |         +-OrderByItem
    | |           +-column_ref=
    | |             +-ColumnRef(type=INT32, column=TestTable.key#7)
    | +-$col4#16 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=IN
    |     +-in_expr=
    |     | +-Literal(type=INT32, value=5)
    |     +-subquery=
    |       +-OrderByScan
    |         +-column_list=[TestTable.key#10]
    |         +-input_scan=
    |         | +-TableScan(column_list=[TestTable.key#10], table=TestTable, column_index_list=[0])
    |         +-order_by_item_list=
    |           +-OrderByItem
    |             +-column_ref=
    |               +-ColumnRef(type=INT32, column=TestTable.key#10)
    +-input_scan=
      +-SingleRowScan
==

# Order is not preserved when a WITH table alias is referenced.
with q as (select key from TestTable order by key)
select * from q
--
QueryStmt
+-output_column_list=
| +-q.key#4 AS key [INT32]
+-query=
  +-WithScan
    +-column_list=[q.key#4]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='q'
    |   +-with_subquery=
    |     +-OrderByScan
    |       +-column_list=[TestTable.key#1]
    |       +-is_ordered=TRUE
    |       +-input_scan=
    |       | +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
    |       +-order_by_item_list=
    |         +-OrderByItem
    |           +-column_ref=
    |             +-ColumnRef(type=INT32, column=TestTable.key#1)
    +-query=
      +-ProjectScan
        +-column_list=[q.key#4]
        +-input_scan=
          +-WithRefScan(column_list=[q.key#4], with_query_name="q")
==

# The outer WithScan node is ordered if the main query inside it is ordered.
with T1 as (select key from TestTable order by key),
     T2 as (select * from T1)
select * from T2 order by 1 desc;
--
QueryStmt
+-output_column_list=
| +-T2.key#5 AS key [INT32]
+-query=
  +-WithScan
    +-column_list=[T2.key#5]
    +-is_ordered=TRUE
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name='T1'
    | | +-with_subquery=
    | |   +-OrderByScan
    | |     +-column_list=[TestTable.key#1]
    | |     +-is_ordered=TRUE
    | |     +-input_scan=
    | |     | +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
    | |     +-order_by_item_list=
    | |       +-OrderByItem
    | |         +-column_ref=
    | |           +-ColumnRef(type=INT32, column=TestTable.key#1)
    | +-WithEntry
    |   +-with_query_name='T2'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[T1.key#4]
    |       +-input_scan=
    |         +-WithRefScan(column_list=[T1.key#4], with_query_name="T1")
    +-query=
      +-OrderByScan
        +-column_list=[T2.key#5]
        +-is_ordered=TRUE
        +-input_scan=
        | +-WithRefScan(column_list=[T2.key#5], with_query_name="T2")
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
            | +-ColumnRef(type=INT32, column=T2.key#5)
            +-is_descending=TRUE
==

# Array scans do not currently preserve order.
select * from unnest([1,2,3])
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS "$unnest1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.$unnest1#1]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.$unnest1#1]
        +-array_expr=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        +-element_column=$array.$unnest1#1
==

# The OrderByScan here does not have is_ordered because we do not
# propagate order out of the subquery into the AggregateScan.
select array_agg(x) from
(select x from unnest([1,2,3]) x with offset y order by y)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-OrderByScan
        |   +-column_list=[$array.x#1]
        |   +-input_scan=
        |   | +-ArrayScan
        |   |   +-column_list=[$array.x#1, $array_offset.y#2]
        |   |   +-array_expr=
        |   |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |   |   +-element_column=$array.x#1
        |   |   +-array_offset_column=
        |   |     +-ColumnHolder(column=$array_offset.y#2)
        |   +-order_by_item_list=
        |     +-OrderByItem
        |       +-column_ref=
        |         +-ColumnRef(type=INT64, column=$array_offset.y#2)
        +-aggregate_list=
          +-$agg1#3 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              +-ColumnRef(type=INT64, column=$array.x#1)
==

# The array subquery is ordered, but we don't (currently) preserve that
# coming out of unnest.
select * from unnest(array(select key from TestTable order by key))
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#4 AS "$unnest1" [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$array.$unnest1#4]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.$unnest1#4]
        +-array_expr=
        | +-SubqueryExpr
        |   +-type=ARRAY<INT32>
        |   +-subquery_type=ARRAY
        |   +-subquery=
        |     +-OrderByScan
        |       +-column_list=[TestTable.key#1]
        |       +-is_ordered=TRUE
        |       +-input_scan=
        |       | +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
        |       +-order_by_item_list=
        |         +-OrderByItem
        |           +-column_ref=
        |             +-ColumnRef(type=INT32, column=TestTable.key#1)
        +-element_column=$array.$unnest1#4
