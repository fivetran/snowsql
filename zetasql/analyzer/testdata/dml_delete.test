DELETE from TestTable
--
ERROR: DELETE must have a WHERE clause [at 1:1]
DELETE from TestTable
^
==

DELETE TestTable WHERE KitchenSink.int32_val = 1
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ
+-where_expr=
  +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
    +-GetProtoField
    | +-type=INT32
    | +-expr=
    | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | +-field_descriptor=int32_val
    | +-default_value=77
    +-Literal(type=INT32, value=1)
==

DELETE TestTable WHERE 5
--
ERROR: WHERE clause should return type BOOL, but returns INT64 [at 1:24]
DELETE TestTable WHERE 5
                       ^
==

[no_test_extract_table_names]
DELETE nested_catalog.NestedKeyValue
WHERE EXISTS(select key)
ASSERT_ROWS_MODIFIED 10
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Literal(type=INT64, value=10)
+-column_access_list=READ
+-where_expr=
  +-SubqueryExpr
    +-type=BOOL
    +-subquery_type=EXISTS
    +-parameter_list=
    | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    +-subquery=
      +-ProjectScan
        +-column_list=[$expr_subquery.key#3]
        +-expr_list=
        | +-key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
        +-input_scan=
          +-SingleRowScan
==

DELETE SimpleTypes
WHERE "int64" IN (select key from KeyValue)
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
+-column_access_list=READ
+-where_expr=
  +-SubqueryExpr
    +-type=BOOL
    +-subquery_type=IN
    +-in_expr=
    | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-subquery=
      +-ProjectScan
        +-column_list=[KeyValue.Key#19]
        +-input_scan=
          +-TableScan(column_list=[KeyValue.Key#19], table=KeyValue, column_index_list=[0])
==

DELETE TestTable
WHERE EXISTS(select 1 from KitchenSink.repeated_int32_val)
--
ERROR: Aliases referenced in the from clause must refer to preceding scans, and cannot refer to columns on those scans. KitchenSink refers to a column and must be qualified with a table name. [at 2:28]
WHERE EXISTS(select 1 from KitchenSink.repeated_int32_val)
                           ^
==

DELETE TestTable
WHERE EXISTS(select 1 from TestTable.KitchenSink.repeated_int32_val)
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ
+-where_expr=
  +-SubqueryExpr
    +-type=BOOL
    +-subquery_type=EXISTS
    +-parameter_list=
    | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    +-subquery=
      +-ProjectScan
        +-column_list=[$expr_subquery.$col1#5]
        +-expr_list=
        | +-$col1#5 := Literal(type=INT64, value=1)
        +-input_scan=
          +-ArrayScan
            +-array_expr=
            | +-GetProtoField
            |   +-type=ARRAY<INT32>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
            |   +-field_descriptor=repeated_int32_val
            |   +-default_value=[]
            +-element_column=$array.repeated_int32_val#4
==

# While resolving a subquery we override any global range variables with local
# range variables. So with "TestTable" in EXISTS subquery we are doing another
# scan of a second copy of TestTable.
DELETE TestTable
WHERE EXISTS(select 1 from TestTable, TestTable.KitchenSink.repeated_int32_val)
--
DeleteStmt
+-table_scan=
| +-TableScan(table=TestTable)
+-where_expr=
  +-SubqueryExpr
    +-type=BOOL
    +-subquery_type=EXISTS
    +-subquery=
      +-ProjectScan
        +-column_list=[$expr_subquery.$col1#8]
        +-expr_list=
        | +-$col1#8 := Literal(type=INT64, value=1)
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.KitchenSink#6]
            +-input_scan=
            | +-TableScan(column_list=[TestTable.KitchenSink#6], table=TestTable, column_index_list=[2])
            +-array_expr=
            | +-GetProtoField
            |   +-type=ARRAY<INT32>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#6)
            |   +-field_descriptor=repeated_int32_val
            |   +-default_value=[]
            +-element_column=$array.repeated_int32_val#7
==

DELETE TestTable
WHERE EXISTS(select 1 from UNNEST(KitchenSink.repeated_int32_val))
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ
+-where_expr=
  +-SubqueryExpr
    +-type=BOOL
    +-subquery_type=EXISTS
    +-parameter_list=
    | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    +-subquery=
      +-ProjectScan
        +-column_list=[$expr_subquery.$col1#5]
        +-expr_list=
        | +-$col1#5 := Literal(type=INT64, value=1)
        +-input_scan=
          +-ArrayScan
            +-array_expr=
            | +-GetProtoField
            |   +-type=ARRAY<INT32>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
            |   +-field_descriptor=repeated_int32_val
            |   +-default_value=[]
            +-element_column=$array.$unnest1#4
==

DELETE TestTable
WHERE KitchenSink.int32_val IN (select r
                                from TestTable.KitchenSink.repeated_int32_val r)
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ
+-where_expr=
  +-SubqueryExpr
    +-type=BOOL
    +-subquery_type=IN
    +-parameter_list=
    | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    +-in_expr=
    | +-GetProtoField
    |   +-type=INT32
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=int32_val
    |   +-default_value=77
    +-subquery=
      +-ProjectScan
        +-column_list=[$array.r#4]
        +-input_scan=
          +-ArrayScan
            +-column_list=[$array.r#4]
            +-array_expr=
            | +-GetProtoField
            |   +-type=ARRAY<INT32>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
            |   +-field_descriptor=repeated_int32_val
            |   +-default_value=[]
            +-element_column=$array.r#4
==

DELETE TestTable
WHERE KitchenSink.int32_val IN UNNEST(KitchenSink.repeated_int32_val)
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ
+-where_expr=
  +-FunctionCall(ZetaSQL:$in_array(INT32, ARRAY<INT32>) -> BOOL)
    +-GetProtoField
    | +-type=INT32
    | +-expr=
    | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | +-field_descriptor=int32_val
    | +-default_value=77
    +-GetProtoField
      +-type=ARRAY<INT32>
      +-expr=
      | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
      +-field_descriptor=repeated_int32_val
      +-default_value=[]
==

DELETE KitchenSinkValueTable
WHERE float_val > int32_val
ASSERT_ROWS_MODIFIED 0
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[KitchenSinkValueTable.value#1], table=KitchenSinkValueTable, column_index_list=[0])
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Literal(type=INT64, value=0)
+-column_access_list=READ
+-where_expr=
  +-FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
    +-Cast(FLOAT -> DOUBLE)
    | +-GetProtoField
    |   +-type=FLOAT
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
    |   +-field_descriptor=float_val
    |   +-default_value=0
    +-Cast(INT32 -> DOUBLE)
      +-GetProtoField
        +-type=INT32
        +-expr=
        | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
        +-field_descriptor=int32_val
        +-default_value=77
==

DELETE "zetasql_test__.KeyValueStruct"
WHERE key > 1
ASSERT_ROWS_MODIFIED 0
--
ERROR: Table not found: "zetasql_test__.KeyValueStruct" [at 1:8]
DELETE "zetasql_test__.KeyValueStruct"
       ^
==

DELETE TestTable WHERE true
ASSERT_ROWS_MODIFIED {{@test_param_int32|@test_param_int64|@test_param_uint32|@test_param_uint64}}
--
ALTERNATION GROUP: @test_param_int32
--
DeleteStmt
+-table_scan=
| +-TableScan(table=TestTable)
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Cast(INT32 -> INT64)
|       +-Parameter(type=INT32, name="test_param_int32")
+-where_expr=
  +-Literal(type=BOOL, value=true)
--
ALTERNATION GROUP: @test_param_int64
--
DeleteStmt
+-table_scan=
| +-TableScan(table=TestTable)
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Parameter(type=INT64, name="test_param_int64")
+-where_expr=
  +-Literal(type=BOOL, value=true)
--
ALTERNATION GROUP: @test_param_uint32
--
DeleteStmt
+-table_scan=
| +-TableScan(table=TestTable)
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Cast(UINT32 -> INT64)
|       +-Parameter(type=UINT32, name="test_param_uint32")
+-where_expr=
  +-Literal(type=BOOL, value=true)
--
ALTERNATION GROUP: @test_param_uint64
--
DeleteStmt
+-table_scan=
| +-TableScan(table=TestTable)
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Cast(UINT64 -> INT64)
|       +-Parameter(type=UINT64, name="test_param_uint64")
+-where_expr=
  +-Literal(type=BOOL, value=true)
==

# Casting literals to integer types works, casting parameters to int64 works.
DELETE TestTable WHERE true
ASSERT_ROWS_MODIFIED {{cast(1 as int32)|cast(1 as uint64)|cast(@test_param_int32 as int64)}}
--
ALTERNATION GROUPS:
    cast(1 as int32)
    cast(1 as uint64)
--
DeleteStmt
+-table_scan=
| +-TableScan(table=TestTable)
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Literal(type=INT64, value=1, has_explicit_type=TRUE)
+-where_expr=
  +-Literal(type=BOOL, value=true)
--
ALTERNATION GROUP: cast(@test_param_int32 as int64)
--
DeleteStmt
+-table_scan=
| +-TableScan(table=TestTable)
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Cast(INT32 -> INT64)
|       +-Parameter(type=INT32, name="test_param_int32")
+-where_expr=
  +-Literal(type=BOOL, value=true)
==

@{h1 = 5} DELETE TestTable WHERE true
--
DeleteStmt
+-hint_list=
| +-h1 := Literal(type=INT64, value=5)
+-table_scan=
| +-TableScan(table=TestTable)
+-where_expr=
  +-Literal(type=BOOL, value=true)
==

DELETE TestTable {{AS|}} T WHERE T.key > 1
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0], alias='T')
+-column_access_list=READ
+-where_expr=
  +-FunctionCall(ZetaSQL:$greater(INT32, INT32) -> BOOL)
    +-ColumnRef(type=INT32, column=TestTable.key#1)
    +-Literal(type=INT32, value=1)
==

# Table name is no longer available as an alias when we explicitly mention a
# table alias.
DELETE TestTable {{AS|}} T WHERE TestTable.key > 1
--
ALTERNATION GROUP: AS
--
ERROR: Unrecognized name: TestTable [at 1:29]
DELETE TestTable AS T WHERE TestTable.key > 1
                            ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Unrecognized name: TestTable [at 1:27]
DELETE TestTable  T WHERE TestTable.key > 1
                          ^
==

DELETE KitchenSinkValueTable {{AS|}} T
WHERE T.float_val > int32_val
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[KitchenSinkValueTable.value#1], table=KitchenSinkValueTable, column_index_list=[0], alias='T')
+-column_access_list=READ
+-where_expr=
  +-FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
    +-Cast(FLOAT -> DOUBLE)
    | +-GetProtoField
    |   +-type=FLOAT
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
    |   +-field_descriptor=float_val
    |   +-default_value=0
    +-Cast(INT32 -> DOUBLE)
      +-GetProtoField
        +-type=INT32
        +-expr=
        | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
        +-field_descriptor=int32_val
        +-default_value=77
==

DELETE TestTable {{AS|}} T
WHERE T.key = 1 AND key < 1 AND T1.key > 1
--
ERROR: Unrecognized name: T1 [at 2:33]
WHERE T.key = 1 AND key < 1 AND T1.key > 1
                                ^
==

DELETE SimpleTypes {{AS|}} S
WHERE S.int64 IN (select key from KeyValue)
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1], alias='S')
+-column_access_list=READ
+-where_expr=
  +-SubqueryExpr
    +-type=BOOL
    +-subquery_type=IN
    +-in_expr=
    | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-subquery=
      +-ProjectScan
        +-column_list=[KeyValue.Key#19]
        +-input_scan=
          +-TableScan(column_list=[KeyValue.Key#19], table=KeyValue, column_index_list=[0])
==

DELETE SimpleTypes {{AS|}} S
WHERE S.int128 = 1
--
ERROR: Name int128 not found inside S [at 2:9]
WHERE S.int128 = 1
        ^
==

# Delete from a value table using only a pseudo-column in the WHERE.
# This fails unparsing because of http://b/37291554.
[no_run_unparser]
DELETE TestExtraValueTable
WHERE rowid = b'123'
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[TestExtraValueTable.RowId#3], table=TestExtraValueTable, column_index_list=[2])
+-column_access_list=READ
+-where_expr=
  +-FunctionCall(ZetaSQL:$equal(BYTES, BYTES) -> BOOL)
    +-ColumnRef(type=BYTES, column=TestExtraValueTable.RowId#3)
    +-Literal(type=BYTES, value=b"123")
==

DELETE TestTable
WHERE NULL
--
DeleteStmt
+-table_scan=
| +-TableScan(table=TestTable)
+-where_expr=
  +-Literal(type=BOOL, value=NULL)
==

# Non-nested DELETE does not allow a generalized path.
DELETE TestTable.(a.b) WHERE True
--
ERROR: Non-nested DELETE statement requires a table name [at 1:19]
DELETE TestTable.(a.b) WHERE True
                  ^
==

# Non-nested DELETE does not allow a generalized path.
DELETE TestTable.(a.b).c WHERE True
--
ERROR: Non-nested DELETE statement requires a table name [at 1:19]
DELETE TestTable.(a.b).c WHERE True
                  ^
==

# Non-nested DELETE does not allow a generalized path.
DELETE TestTable.(a.b).c.d WHERE True
--
ERROR: Non-nested DELETE statement requires a table name [at 1:19]
DELETE TestTable.(a.b).c.d WHERE True
                  ^
==

# Non-nested DELETE does not allow a generalized path.
DELETE TestTable[3] WHERE True
--
ERROR: Non-nested DELETE statement requires a table name [at 1:18]
DELETE TestTable[3] WHERE True
                 ^
==

# Non-nested DELETE does not allow a generalized path.
DELETE TestTable.(a.b)[3] WHERE True
--
ERROR: Non-nested DELETE statement requires a table name [at 1:19]
DELETE TestTable.(a.b)[3] WHERE True
                  ^
==

# Non-nested DELETE does not allow a generalized path.
DELETE TestTable.(a.b).c[3] WHERE True
--
ERROR: Non-nested DELETE statement requires a table name [at 1:19]
DELETE TestTable.(a.b).c[3] WHERE True
                  ^
==

# Non-nested DELETE does not allow WITH OFFSET.
DELETE TestTable WITH OFFSET AS offset_idx WHERE true
--
ERROR: Non-nested DELETE statement does not support WITH OFFSET [at 1:18]
DELETE TestTable WITH OFFSET AS offset_idx WHERE true
                 ^
==

DELETE KeyValue@{force_index=index_name} WHERE key = 1;
--
DeleteStmt
+-table_scan=
| +-TableScan
|   +-column_list=[KeyValue.Key#1]
|   +-hint_list=
|   | +-force_index := Literal(type=STRING, value="index_name")
|   +-table=KeyValue
|   +-column_index_list=[0]
+-column_access_list=READ
+-where_expr=
  +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    +-Literal(type=INT64, value=1)
