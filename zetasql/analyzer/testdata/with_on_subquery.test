# This file has tests with WITH clauses on subqueries in various places.
# This is a 1.1 feature.  1.0 only had top-level WITH clauses.
#
# with_on_subquery_v1_0.test has the same queries on v1.0, showing errors.

[default language_features=V_1_1_WITH_ON_SUBQUERY]

SELECT * FROM
  (WITH q AS (select 1 x) SELECT x+1 AS y FROM q)
--
QueryStmt
+-output_column_list=
| +-$subquery1.y#3 AS y [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$subquery1.y#3]
    +-input_scan=
      +-WithScan
        +-column_list=[$subquery1.y#3]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="q"
        |   +-with_subquery=
        |     +-ProjectScan
        |       +-column_list=[q.x#1]
        |       +-expr_list=
        |       | +-x#1 := Literal(type=INT64, value=1)
        |       +-input_scan=
        |         +-SingleRowScan
        +-query=
          +-ProjectScan
            +-column_list=[$subquery1.y#3]
            +-expr_list=
            | +-y#3 :=
            |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |     +-ColumnRef(type=INT64, column=q.x#2)
            |     +-Literal(type=INT64, value=1)
            +-input_scan=
              +-WithRefScan(column_list=[q.x#2], with_query_name="q")
==

# WITH inside WITH
with q1 as (with q2 as (select 5) select * from q2) select * from q1
--
QueryStmt
+-output_column_list=
| +-q1.$col1#3 AS "$col1" [INT64]
+-query=
  +-WithScan
    +-column_list=[q1.$col1#3]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="q1"
    |   +-with_subquery=
    |     +-WithScan
    |       +-column_list=[q2.$col1#2]
    |       +-with_entry_list=
    |       | +-WithEntry
    |       |   +-with_query_name="q2"
    |       |   +-with_subquery=
    |       |     +-ProjectScan
    |       |       +-column_list=[q2.$col1#1]
    |       |       +-expr_list=
    |       |       | +-$col1#1 := Literal(type=INT64, value=5)
    |       |       +-input_scan=
    |       |         +-SingleRowScan
    |       +-query=
    |         +-ProjectScan
    |           +-column_list=[q2.$col1#2]
    |           +-input_scan=
    |             +-WithRefScan(column_list=[q2.$col1#2], with_query_name="q2")
    +-query=
      +-ProjectScan
        +-column_list=[q1.$col1#3]
        +-input_scan=
          +-WithRefScan(column_list=[q1.$col1#3], with_query_name="q1")
==

# WITH in an expression subquery.
# Note that we rename the second 'q' to make unique names in the resolved AST.
select (with q as (select 1 x) select * from q),
       array(with q as (select 'abc') select * from q)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [INT64]
| +-$query.$col2#6 AS "$col2" [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#5, $col2#6]
    +-expr_list=
    | +-$col1#5 :=
    | | +-SubqueryExpr
    | |   +-type=INT64
    | |   +-subquery_type=SCALAR
    | |   +-subquery=
    | |     +-WithScan
    | |       +-column_list=[q.x#2]
    | |       +-with_entry_list=
    | |       | +-WithEntry
    | |       |   +-with_query_name="q"
    | |       |   +-with_subquery=
    | |       |     +-ProjectScan
    | |       |       +-column_list=[q.x#1]
    | |       |       +-expr_list=
    | |       |       | +-x#1 := Literal(type=INT64, value=1)
    | |       |       +-input_scan=
    | |       |         +-SingleRowScan
    | |       +-query=
    | |         +-ProjectScan
    | |           +-column_list=[q.x#2]
    | |           +-input_scan=
    | |             +-WithRefScan(column_list=[q.x#2], with_query_name="q")
    | +-$col2#6 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<STRING>
    |     +-subquery_type=ARRAY
    |     +-subquery=
    |       +-WithScan
    |         +-column_list=[q_1.$col1#4]
    |         +-with_entry_list=
    |         | +-WithEntry
    |         |   +-with_query_name="q_1"
    |         |   +-with_subquery=
    |         |     +-ProjectScan
    |         |       +-column_list=[q.$col1#3]
    |         |       +-expr_list=
    |         |       | +-$col1#3 := Literal(type=STRING, value="abc")
    |         |       +-input_scan=
    |         |         +-SingleRowScan
    |         +-query=
    |           +-ProjectScan
    |             +-column_list=[q_1.$col1#4]
    |             +-input_scan=
    |               +-WithRefScan(column_list=[q_1.$col1#4], with_query_name="q_1")
    +-input_scan=
      +-SingleRowScan
==

# WITH in an IN subquery.
select 1 in (with q as (select 1) select * from q)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=IN
    |     +-in_expr=
    |     | +-Literal(type=INT64, value=1)
    |     +-subquery=
    |       +-WithScan
    |         +-column_list=[q.$col1#2]
    |         +-with_entry_list=
    |         | +-WithEntry
    |         |   +-with_query_name="q"
    |         |   +-with_subquery=
    |         |     +-ProjectScan
    |         |       +-column_list=[q.$col1#1]
    |         |       +-expr_list=
    |         |       | +-$col1#1 := Literal(type=INT64, value=1)
    |         |       +-input_scan=
    |         |         +-SingleRowScan
    |         +-query=
    |           +-ProjectScan
    |             +-column_list=[q.$col1#2]
    |             +-input_scan=
    |               +-WithRefScan(column_list=[q.$col1#2], with_query_name="q")
    +-input_scan=
      +-SingleRowScan
==

# WITH inside parenthesized set ops.
with q1 as (select 5)
select 6
union all
(with q2 as (select 7) select * from q2)
union all
select * from q1
--
QueryStmt
+-output_column_list=
| +-$union_all.$col1#6 AS "$col1" [INT64]
+-query=
  +-WithScan
    +-column_list=[$union_all.$col1#6]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="q1"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[q1.$col1#1]
    |       +-expr_list=
    |       | +-$col1#1 := Literal(type=INT64, value=5)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-SetOperationScan
        +-column_list=[$union_all.$col1#6]
        +-op_type=UNION_ALL
        +-input_item_list=
          +-SetOperationItem
          | +-scan=
          | | +-ProjectScan
          | |   +-column_list=[$union_all1.$col1#2]
          | |   +-expr_list=
          | |   | +-$col1#2 := Literal(type=INT64, value=6)
          | |   +-input_scan=
          | |     +-SingleRowScan
          | +-output_column_list=[$union_all1.$col1#2]
          +-SetOperationItem
          | +-scan=
          | | +-WithScan
          | |   +-column_list=[q2.$col1#4]
          | |   +-with_entry_list=
          | |   | +-WithEntry
          | |   |   +-with_query_name="q2"
          | |   |   +-with_subquery=
          | |   |     +-ProjectScan
          | |   |       +-column_list=[q2.$col1#3]
          | |   |       +-expr_list=
          | |   |       | +-$col1#3 := Literal(type=INT64, value=7)
          | |   |       +-input_scan=
          | |   |         +-SingleRowScan
          | |   +-query=
          | |     +-ProjectScan
          | |       +-column_list=[q2.$col1#4]
          | |       +-input_scan=
          | |         +-WithRefScan(column_list=[q2.$col1#4], with_query_name="q2")
          | +-output_column_list=[q2.$col1#4]
          +-SetOperationItem
            +-scan=
            | +-ProjectScan
            |   +-column_list=[q1.$col1#5]
            |   +-input_scan=
            |     +-WithRefScan(column_list=[q1.$col1#5], with_query_name="q1")
            +-output_column_list=[q1.$col1#5]
==

# The WITH alias is only visible inside the subquery, not after.
SELECT * FROM
  (WITH q AS (select 1 x) SELECT x+1 AS y FROM q),
  q
--
ERROR: Table not found: q [at 3:3]
  q
  ^
==

# This checks WITH clause scoping, so we resolve T1 to the outer
# WITH subquery before and after we resolve it to the inner WITH
# subquery in the middle.
# Note that for the inner WITH, we rename T1 to T1_1 to make the alias unique.
WITH T1 as (select 1 a)
select *
from
  T1 x,
  (WITH T1 as (select 2 b) select * from T1) y,
  T1 z
--
QueryStmt
+-output_column_list=
| +-T1.a#2 AS a [INT64]
| +-T1_1.b#4 AS b [INT64]
| +-T1.a#5 AS a [INT64]
+-query=
  +-WithScan
    +-column_list=[T1.a#2, T1_1.b#4, T1.a#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T1"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[T1.a#1]
    |       +-expr_list=
    |       | +-a#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[T1.a#2, T1_1.b#4, T1.a#5]
        +-input_scan=
          +-JoinScan
            +-column_list=[T1.a#2, T1_1.b#4, T1.a#5]
            +-left_scan=
            | +-JoinScan
            |   +-column_list=[T1.a#2, T1_1.b#4]
            |   +-left_scan=
            |   | +-WithRefScan(column_list=[T1.a#2], with_query_name="T1")
            |   +-right_scan=
            |     +-WithScan
            |       +-column_list=[T1_1.b#4]
            |       +-with_entry_list=
            |       | +-WithEntry
            |       |   +-with_query_name="T1_1"
            |       |   +-with_subquery=
            |       |     +-ProjectScan
            |       |       +-column_list=[T1.b#3]
            |       |       +-expr_list=
            |       |       | +-b#3 := Literal(type=INT64, value=2)
            |       |       +-input_scan=
            |       |         +-SingleRowScan
            |       +-query=
            |         +-ProjectScan
            |           +-column_list=[T1_1.b#4]
            |           +-input_scan=
            |             +-WithRefScan(column_list=[T1_1.b#4], with_query_name="T1_1")
            +-right_scan=
              +-WithRefScan(column_list=[T1.a#5], with_query_name="T1")
==

# Test unique name generation for WITH clause renaming in the case
# where we get a collision with a generated name.
# The second WITH name is chosen to match the implementation detail.
# Note that we get the suffix _2_2 on the renamed inner clause.
WITH TTtt as (select 1 a),
     "tTTt_2" as (select 2 a)
select *
from
  (WITH TtTt as (select 3 c) select * from ttTT, "tttT_2")
--
QueryStmt
+-output_column_list=
| +-TtTt_2_2.c#4 AS c [INT64]
| +-tTTt_2.a#5 AS a [INT64]
+-query=
  +-WithScan
    +-column_list=[TtTt_2_2.c#4, tTTt_2.a#5]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="TTtt"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[TTtt.a#1]
    | |     +-expr_list=
    | |     | +-a#1 := Literal(type=INT64, value=1)
    | |     +-input_scan=
    | |       +-SingleRowScan
    | +-WithEntry
    |   +-with_query_name="tTTt_2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[tTTt_2.a#2]
    |       +-expr_list=
    |       | +-a#2 := Literal(type=INT64, value=2)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[TtTt_2_2.c#4, tTTt_2.a#5]
        +-input_scan=
          +-WithScan
            +-column_list=[TtTt_2_2.c#4, tTTt_2.a#5]
            +-with_entry_list=
            | +-WithEntry
            |   +-with_query_name="TtTt_2_2"
            |   +-with_subquery=
            |     +-ProjectScan
            |       +-column_list=[TtTt.c#3]
            |       +-expr_list=
            |       | +-c#3 := Literal(type=INT64, value=3)
            |       +-input_scan=
            |         +-SingleRowScan
            +-query=
              +-ProjectScan
                +-column_list=[TtTt_2_2.c#4, tTTt_2.a#5]
                +-input_scan=
                  +-JoinScan
                    +-column_list=[TtTt_2_2.c#4, tTTt_2.a#5]
                    +-left_scan=
                    | +-WithRefScan(column_list=[TtTt_2_2.c#4], with_query_name="TtTt_2_2")
                    +-right_scan=
                      +-WithRefScan(column_list=[tTTt_2.a#5], with_query_name="tTTt_2")
==

# WITH subqueries currently cannot be correlated.  No names from outside are
# visible inside the WITH subquery.
select
  (select x),
  (select T.x),
  (WITH q AS (select {{T.x|x}}) select * from q)
from (select 1 x, 2 y) T
--
ALTERNATION GROUP: T.x
--
ERROR: Unrecognized name: T [at 4:22]
  (WITH q AS (select T.x) select * from q)
                     ^
--
ALTERNATION GROUP: x
--
ERROR: Unrecognized name: x [at 4:22]
  (WITH q AS (select x) select * from q)
                     ^
==

# WITH subqueries currently cannot be correlated.  A table alias from outside
# is never visible inside the WITH.
select
  (WITH q AS (select * from T) select * from q)
from (select 1 x, 2 y) T
--
ERROR: Table not found: T [at 2:29]
  (WITH q AS (select * from T) select * from q)
                            ^
==

# The main query inside WITH can be correlated.
select
  (WITH q AS (select 3 z) select x + t.y + z from q)
from (select 1 x, 2 y) T
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=T.x#1)
    |     | +-ColumnRef(type=INT64, column=T.y#2)
    |     +-subquery=
    |       +-WithScan
    |         +-column_list=[$expr_subquery.$col1#5]
    |         +-with_entry_list=
    |         | +-WithEntry
    |         |   +-with_query_name="q"
    |         |   +-with_subquery=
    |         |     +-ProjectScan
    |         |       +-column_list=[q.z#3]
    |         |       +-expr_list=
    |         |       | +-z#3 := Literal(type=INT64, value=3)
    |         |       +-input_scan=
    |         |         +-SingleRowScan
    |         +-query=
    |           +-ProjectScan
    |             +-column_list=[$expr_subquery.$col1#5]
    |             +-expr_list=
    |             | +-$col1#5 :=
    |             |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |             |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |             |     | +-ColumnRef(type=INT64, column=T.x#1, is_correlated=TRUE)
    |             |     | +-ColumnRef(type=INT64, column=T.y#2, is_correlated=TRUE)
    |             |     +-ColumnRef(type=INT64, column=q.z#4)
    |             +-input_scan=
    |               +-WithRefScan(column_list=[q.z#4], with_query_name="q")
    +-input_scan=
      +-ProjectScan
        +-column_list=T.[x#1, y#2]
        +-expr_list=
        | +-x#1 := Literal(type=INT64, value=1)
        | +-y#2 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
==

# A WITH subquery alias is visible inside a WITH clause subquery.
WITH q1 as (select 1 x)
select * from
  (with q2 as (select * from q1) select * from q2)
--
QueryStmt
+-output_column_list=
| +-q2.x#3 AS x [INT64]
+-query=
  +-WithScan
    +-column_list=[q2.x#3]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="q1"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[q1.x#1]
    |       +-expr_list=
    |       | +-x#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[q2.x#3]
        +-input_scan=
          +-WithScan
            +-column_list=[q2.x#3]
            +-with_entry_list=
            | +-WithEntry
            |   +-with_query_name="q2"
            |   +-with_subquery=
            |     +-ProjectScan
            |       +-column_list=[q1.x#2]
            |       +-input_scan=
            |         +-WithRefScan(column_list=[q1.x#2], with_query_name="q1")
            +-query=
              +-ProjectScan
                +-column_list=[q2.x#3]
                +-input_scan=
                  +-WithRefScan(column_list=[q2.x#3], with_query_name="q2")
==

# A WITH subquery alias is visible inside a WITH clause subquery,
# and in this case, it gets replaced by a query with the same alias.
WITH q1 as (select 1 x)
select * from
  (with q1 as (select * from q1) select * from q1)
--
QueryStmt
+-output_column_list=
| +-q1_1.x#3 AS x [INT64]
+-query=
  +-WithScan
    +-column_list=[q1_1.x#3]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="q1"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[q1.x#1]
    |       +-expr_list=
    |       | +-x#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[q1_1.x#3]
        +-input_scan=
          +-WithScan
            +-column_list=[q1_1.x#3]
            +-with_entry_list=
            | +-WithEntry
            |   +-with_query_name="q1_1"
            |   +-with_subquery=
            |     +-ProjectScan
            |       +-column_list=[q1.x#2]
            |       +-input_scan=
            |         +-WithRefScan(column_list=[q1.x#2], with_query_name="q1")
            +-query=
              +-ProjectScan
                +-column_list=[q1_1.x#3]
                +-input_scan=
                  +-WithRefScan(column_list=[q1_1.x#3], with_query_name="q1_1")
==

# Query starting with "(With" (b/70510110)
( WITH d AS ( SELECT 1 as x ) SELECT d.x as y FROM d )
--
QueryStmt
+-output_column_list=
| +-d.x#2 AS y [INT64]
+-query=
  +-WithScan
    +-column_list=[d.x#2]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="d"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[d.x#1]
    |       +-expr_list=
    |       | +-x#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[d.x#2]
        +-input_scan=
          +-WithRefScan(column_list=[d.x#2], with_query_name="d")
==

WITH table1 AS (SELECT 1 AS col1 )
    (WITH table2 AS (SELECT 1 AS col2)
     SELECT col2 FROM table2);
--
QueryStmt
+-output_column_list=
| +-table2.col2#3 AS col2 [INT64]
+-query=
  +-WithScan
    +-column_list=[table2.col2#3]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="table1"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[table1.col1#1]
    |       +-expr_list=
    |       | +-col1#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-WithScan
        +-column_list=[table2.col2#3]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="table2"
        |   +-with_subquery=
        |     +-ProjectScan
        |       +-column_list=[table2.col2#2]
        |       +-expr_list=
        |       | +-col2#2 := Literal(type=INT64, value=1)
        |       +-input_scan=
        |         +-SingleRowScan
        +-query=
          +-ProjectScan
            +-column_list=[table2.col2#3]
            +-input_scan=
              +-WithRefScan(column_list=[table2.col2#3], with_query_name="table2")
