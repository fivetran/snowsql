[default language_features=V_1_3_QUALIFY,ANALYTIC_FUNCTIONS]

[language_features=ANALYTIC_FUNCTIONS]
select 1 from KeyValue WHERE true QUALIFY row_number() over ()
--
ERROR: QUALIFY is not supported [at 1:35]
select 1 from KeyValue WHERE true QUALIFY row_number() over ()
                                  ^
==

# No analytic function present in the query
select Key from KeyValue WHERE true QUALIFY Key < 1
--
ERROR: The QUALIFY clause requires analytic function to be present [at 1:45]
select Key from KeyValue WHERE true QUALIFY Key < 1
                                            ^
==

# Qualify clause references analytic function present in the select list
select row_number() over () as a from KeyValue WHERE true QUALIFY a = 1
--
QueryStmt
+-output_column_list=
| +-$analytic.a#4 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.a#4]
    +-input_scan=
      +-FilterScan
        +-column_list=[$analytic.a#4]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$analytic.a#4]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-input_scan=
        |   |   | +-TableScan(table=KeyValue)
        |   |   +-filter_expr=
        |   |     +-Literal(type=BOOL, value=true)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-a#4 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.a#4)
            +-Literal(type=INT64, value=1)
==

# Qualify clause references analytic function present in the select list
# with additional computation
select {{|DISTINCT}} (row_number() over ()) + 1 as a from KeyValue WHERE true QUALIFY a = 1
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.a#5 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.a#5]
    +-input_scan=
      +-FilterScan
        +-column_list=[$analytic.$analytic1#4, $query.a#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$analytic.$analytic1#4, $query.a#5]
        |   +-expr_list=
        |   | +-a#5 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-ColumnRef(type=INT64, column=$analytic.$analytic1#4)
        |   |     +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-AnalyticScan
        |       +-column_list=[$analytic.$analytic1#4]
        |       +-input_scan=
        |       | +-FilterScan
        |       |   +-input_scan=
        |       |   | +-TableScan(table=KeyValue)
        |       |   +-filter_expr=
        |       |     +-Literal(type=BOOL, value=true)
        |       +-function_group_list=
        |         +-AnalyticFunctionGroup
        |           +-analytic_function_list=
        |             +-$analytic1#4 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$query.a#5)
            +-Literal(type=INT64, value=1)
--
ALTERNATION GROUP: DISTINCT
--
QueryStmt
+-output_column_list=
| +-$distinct.a#6 AS a [INT64]
+-query=
  +-AggregateScan
    +-column_list=[$distinct.a#6]
    +-input_scan=
    | +-FilterScan
    |   +-column_list=[$analytic.$analytic1#4, $query.a#5]
    |   +-input_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[$analytic.$analytic1#4, $query.a#5]
    |   |   +-expr_list=
    |   |   | +-a#5 :=
    |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |   |     +-ColumnRef(type=INT64, column=$analytic.$analytic1#4)
    |   |   |     +-Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-AnalyticScan
    |   |       +-column_list=[$analytic.$analytic1#4]
    |   |       +-input_scan=
    |   |       | +-FilterScan
    |   |       |   +-input_scan=
    |   |       |   | +-TableScan(table=KeyValue)
    |   |       |   +-filter_expr=
    |   |       |     +-Literal(type=BOOL, value=true)
    |   |       +-function_group_list=
    |   |         +-AnalyticFunctionGroup
    |   |           +-analytic_function_list=
    |   |             +-$analytic1#4 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
    |   +-filter_expr=
    |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |       +-ColumnRef(type=INT64, column=$query.a#5)
    |       +-Literal(type=INT64, value=1)
    +-group_by_list=
      +-a#6 := ColumnRef(type=INT64, column=$query.a#5)
==

# Qualify expression is not a bool
select row_number() over () as a from KeyValue WHERE true QUALIFY a
--
ERROR: QUALIFY clause should return type BOOL, but returns INT64 [at 1:67]
select row_number() over () as a from KeyValue WHERE true QUALIFY a
                                                                  ^
==

# Qualify clause references unqualified column name
select Key from KeyValue WHERE true QUALIFY row_number() over (order by Key) = 1
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-FilterScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#3]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[KeyValue.Key#1, $analytic.$analytic1#3]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[KeyValue.Key#1]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   |   +-filter_expr=
        |   |     +-Literal(type=BOOL, value=true)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-order_by=
        |       | +-WindowOrdering
        |       |   +-order_by_item_list=
        |       |     +-OrderByItem
        |       |       +-column_ref=
        |       |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |       +-analytic_function_list=
        |         +-$analytic1#3 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.$analytic1#3)
            +-Literal(type=INT64, value=1)
==

# QUALIFY clause references qualified column name
select Key from KeyValue WHERE true QUALIFY row_number() over
(order by KeyValue.Key) = 1
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-FilterScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#3]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[KeyValue.Key#1, $analytic.$analytic1#3]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[KeyValue.Key#1]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   |   +-filter_expr=
        |   |     +-Literal(type=BOOL, value=true)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-order_by=
        |       | +-WindowOrdering
        |       |   +-order_by_item_list=
        |       |     +-OrderByItem
        |       |       +-column_ref=
        |       |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |       +-analytic_function_list=
        |         +-$analytic1#3 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.$analytic1#3)
            +-Literal(type=INT64, value=1)
==

# Qualify clause references a qualified column name using table alias
select Key from KeyValue kv WHERE true QUALIFY row_number() over
(order by kv.Key) = 1
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-FilterScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#3]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[KeyValue.Key#1, $analytic.$analytic1#3]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[KeyValue.Key#1]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
        |   |   +-filter_expr=
        |   |     +-Literal(type=BOOL, value=true)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-order_by=
        |       | +-WindowOrdering
        |       |   +-order_by_item_list=
        |       |     +-OrderByItem
        |       |       +-column_ref=
        |       |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |       +-analytic_function_list=
        |         +-$analytic1#3 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.$analytic1#3)
            +-Literal(type=INT64, value=1)
==

# With Group by expression
SELECT COUNT(Key) as count_key, Value FROM KeyValue GROUP BY Value
QUALIFY count_key > 3 and row_number() over () = 1;
--
QueryStmt
+-output_column_list=
| +-$aggregate.count_key#3 AS count_key [INT64]
| +-$groupby.Value#4 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.count_key#3, $groupby.Value#4]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.Value#4, $aggregate.count_key#3, $analytic.$analytic1#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.Value#4, $aggregate.count_key#3, $analytic.$analytic1#5]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.Value#4, $aggregate.count_key#3]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   |   +-group_by_list=
        |   |   | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |   +-aggregate_list=
        |   |     +-count_key#3 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
        |   |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-$analytic1#5 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=$aggregate.count_key#3)
            | +-Literal(type=INT64, value=3)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
              +-ColumnRef(type=INT64, column=$analytic.$analytic1#5)
              +-Literal(type=INT64, value=1)
==

# QUALIFY clause referencing qualified column name not using the table alias
select Key from KeyValue kv WHERE true QUALIFY row_number() over
(order by KeyValue.Key) = 1
--
ERROR: Unrecognized name: KeyValue; Did you mean Value? [at 2:11]
(order by KeyValue.Key) = 1
          ^
==

# OVER alias uses the same name as a column from the KeyValue table, analytic
# function call takes precedence.
select row_number() over () as Key from KeyValue WHERE true QUALIFY Key = 1
--
QueryStmt
+-output_column_list=
| +-$analytic.Key#4 AS Key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.Key#4]
    +-input_scan=
      +-FilterScan
        +-column_list=[$analytic.Key#4]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$analytic.Key#4]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-input_scan=
        |   |   | +-TableScan(table=KeyValue)
        |   |   +-filter_expr=
        |   |     +-Literal(type=BOOL, value=true)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-Key#4 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.Key#4)
            +-Literal(type=INT64, value=1)
==

select 1 from KeyValue WHERE true QUALIFY row_number() over () = 1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-input_scan=
      +-FilterScan
        +-column_list=[$query.$col1#3, $analytic.$analytic1#4]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$query.$col1#3, $analytic.$analytic1#4]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$query.$col1#3]
        |   |   +-expr_list=
        |   |   | +-$col1#3 := Literal(type=INT64, value=1)
        |   |   +-input_scan=
        |   |     +-FilterScan
        |   |       +-input_scan=
        |   |       | +-TableScan(table=KeyValue)
        |   |       +-filter_expr=
        |   |         +-Literal(type=BOOL, value=true)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-$analytic1#4 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.$analytic1#4)
            +-Literal(type=INT64, value=1)
==

select int_a, int_b from MultipleColumns WHERE true QUALIFY AVG(int_b) over
(ORDER BY int_a ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) < 5
--
QueryStmt
+-output_column_list=
| +-MultipleColumns.int_a#1 AS int_a [INT64]
| +-MultipleColumns.int_b#3 AS int_b [INT64]
+-query=
  +-ProjectScan
    +-column_list=MultipleColumns.[int_a#1, int_b#3]
    +-input_scan=
      +-FilterScan
        +-column_list=[MultipleColumns.int_a#1, MultipleColumns.int_b#3, $analytic.$analytic1#7]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[MultipleColumns.int_a#1, MultipleColumns.int_b#3, $analytic.$analytic1#7]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=MultipleColumns.[int_a#1, int_b#3]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=MultipleColumns.[int_a#1, int_b#3], table=MultipleColumns, column_index_list=[0, 2])
        |   |   +-filter_expr=
        |   |     +-Literal(type=BOOL, value=true)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-order_by=
        |       | +-WindowOrdering
        |       |   +-order_by_item_list=
        |       |     +-OrderByItem
        |       |       +-column_ref=
        |       |         +-ColumnRef(type=INT64, column=MultipleColumns.int_a#1)
        |       +-analytic_function_list=
        |         +-$analytic1#7 :=
        |           +-AnalyticFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
        |             +-ColumnRef(type=INT64, column=MultipleColumns.int_b#3)
        |             +-window_frame=
        |               +-WindowFrame(frame_unit=ROWS)
        |                 +-start_expr=
        |                 | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
        |                 |   +-Literal(type=INT64, value=1)
        |                 +-end_expr=
        |                   +-WindowFrameExpr(boundary_type=OFFSET FOLLOWING)
        |                     +-Literal(type=INT64, value=1)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$less(DOUBLE, DOUBLE) -> BOOL)
            +-ColumnRef(type=DOUBLE, column=$analytic.$analytic1#7)
            +-Literal(type=DOUBLE, value=5)
==

# NULL coercion to bool expression succeeds.
select row_number() over () as a from KeyValue WHERE true QUALIFY NULL
--
QueryStmt
+-output_column_list=
| +-$analytic.a#4 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.a#4]
    +-input_scan=
      +-FilterScan
        +-column_list=[$analytic.a#4]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$analytic.a#4]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-input_scan=
        |   |   | +-TableScan(table=KeyValue)
        |   |   +-filter_expr=
        |   |     +-Literal(type=BOOL, value=true)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-a#4 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-Literal(type=BOOL, value=NULL)
==

# Analytic function present in select list, and QUALIFY references a
# non-analytic column
select 1 AS x, row_number() over () as a from KeyValue WHERE true QUALIFY x = 1
--
QueryStmt
+-output_column_list=
| +-$query.x#4 AS x [INT64]
| +-$analytic.a#5 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.x#4, $analytic.a#5]
    +-input_scan=
      +-FilterScan
        +-column_list=[$query.x#4, $analytic.a#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$query.x#4, $analytic.a#5]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$query.x#4]
        |   |   +-expr_list=
        |   |   | +-x#4 := Literal(type=INT64, value=1)
        |   |   +-input_scan=
        |   |     +-FilterScan
        |   |       +-input_scan=
        |   |       | +-TableScan(table=KeyValue)
        |   |       +-filter_expr=
        |   |         +-Literal(type=BOOL, value=true)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-a#5 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$query.x#4)
            +-Literal(type=INT64, value=1)
==

# Analytic function present in select list, and QUALIFY references a
# scalar function
select 'abc' AS x, row_number() over () as a from KeyValue WHERE true
QUALIFY CHAR_LENGTH(x) < 4
--
QueryStmt
+-output_column_list=
| +-$query.x#4 AS x [STRING]
| +-$analytic.a#5 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.x#4, $analytic.a#5]
    +-input_scan=
      +-FilterScan
        +-column_list=[$query.x#4, $analytic.a#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$query.x#4, $analytic.a#5]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$query.x#4]
        |   |   +-expr_list=
        |   |   | +-x#4 := Literal(type=STRING, value="abc")
        |   |   +-input_scan=
        |   |     +-FilterScan
        |   |       +-input_scan=
        |   |       | +-TableScan(table=KeyValue)
        |   |       +-filter_expr=
        |   |         +-Literal(type=BOOL, value=true)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-a#5 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            +-FunctionCall(ZetaSQL:char_length(STRING) -> INT64)
            | +-ColumnRef(type=STRING, column=$query.x#4)
            +-Literal(type=INT64, value=4)
==

# Analytic function present in select list, and QUALIFY references an
# aggregate function table column alias
select MIN(Key) as min_key, row_number() over () as a from KeyValue WHERE true
QUALIFY min_key < 2
--
QueryStmt
+-output_column_list=
| +-$aggregate.min_key#3 AS min_key [INT64]
| +-$analytic.a#5 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.min_key#3, $analytic.a#5]
    +-input_scan=
      +-FilterScan
        +-column_list=[$aggregate.min_key#3, $analytic.a#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$aggregate.min_key#3, $analytic.a#5]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$aggregate.min_key#3]
        |   |   +-input_scan=
        |   |   | +-FilterScan
        |   |   |   +-column_list=[KeyValue.Key#1]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   |   |   +-filter_expr=
        |   |   |     +-Literal(type=BOOL, value=true)
        |   |   +-aggregate_list=
        |   |     +-min_key#3 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
        |   |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-a#5 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$aggregate.min_key#3)
            +-Literal(type=INT64, value=2)
==

# Aggregation function no where else but in QUALIFY clause
SELECT 1 FROM KeyValue
WHERE true
QUALIFY SUM(KeyValue.Key) > 1 and ROW_NUMBER() OVER () > 0;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-input_scan=
      +-FilterScan
        +-column_list=[$query.$col1#3, $aggregate.$agg1#4, $analytic.$analytic1#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$query.$col1#3, $aggregate.$agg1#4, $analytic.$analytic1#5]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$query.$col1#3, $aggregate.$agg1#4]
        |   |   +-expr_list=
        |   |   | +-$col1#3 := Literal(type=INT64, value=1)
        |   |   +-input_scan=
        |   |     +-AggregateScan
        |   |       +-column_list=[$aggregate.$agg1#4]
        |   |       +-input_scan=
        |   |       | +-FilterScan
        |   |       |   +-column_list=[KeyValue.Key#1]
        |   |       |   +-input_scan=
        |   |       |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   |       |   +-filter_expr=
        |   |       |     +-Literal(type=BOOL, value=true)
        |   |       +-aggregate_list=
        |   |         +-$agg1#4 :=
        |   |           +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-$analytic1#5 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=$aggregate.$agg1#4)
            | +-Literal(type=INT64, value=1)
            +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
              +-ColumnRef(type=INT64, column=$analytic.$analytic1#5)
              +-Literal(type=INT64, value=0)
==

# Analytic function present both in the SELECT list and in the QUALIFY clause.
select Key, rank() over(ORDER BY Key ASC) as rank from KeyValue WHERE true
QUALIFY row_number() over () = 1
--

QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-$analytic.rank#4 AS rank [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, $analytic.rank#4]
    +-input_scan=
      +-FilterScan
        +-column_list=[KeyValue.Key#1, $analytic.rank#4, $analytic.$analytic2#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[KeyValue.Key#1, $analytic.rank#4, $analytic.$analytic2#5]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[KeyValue.Key#1]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   |   +-filter_expr=
        |   |     +-Literal(type=BOOL, value=true)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |     | +-order_by=
        |     | | +-WindowOrdering
        |     | |   +-order_by_item_list=
        |     | |     +-OrderByItem
        |     | |       +-column_ref=
        |     | |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |     | +-analytic_function_list=
        |     |   +-rank#4 := AnalyticFunctionCall(ZetaSQL:rank() -> INT64)
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-$analytic2#5 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.$analytic2#5)
            +-Literal(type=INT64, value=1)
==

# QUALIFY clause uses unqualified reference to a correlated column.
SELECT (
  SELECT x FROM (SELECT 1 AS x, 2 AS y) WHERE true QUALIFY row_number()
  over(order by Key) = 1 )
FROM (SELECT Key from KeyValue)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$subquery2.x#3]
    |         +-input_scan=
    |           +-FilterScan
    |             +-column_list=[$subquery2.x#3, $subquery2.y#4, $analytic.$analytic1#5]
    |             +-input_scan=
    |             | +-AnalyticScan
    |             |   +-column_list=[$subquery2.x#3, $subquery2.y#4, $analytic.$analytic1#5]
    |             |   +-input_scan=
    |             |   | +-FilterScan
    |             |   |   +-column_list=$subquery2.[x#3, y#4]
    |             |   |   +-input_scan=
    |             |   |   | +-ProjectScan
    |             |   |   |   +-column_list=$subquery2.[x#3, y#4]
    |             |   |   |   +-expr_list=
    |             |   |   |   | +-x#3 := Literal(type=INT64, value=1)
    |             |   |   |   | +-y#4 := Literal(type=INT64, value=2)
    |             |   |   |   +-input_scan=
    |             |   |   |     +-SingleRowScan
    |             |   |   +-filter_expr=
    |             |   |     +-Literal(type=BOOL, value=true)
    |             |   +-function_group_list=
    |             |     +-AnalyticFunctionGroup
    |             |       +-order_by=
    |             |       | +-WindowOrdering
    |             |       |   +-order_by_item_list=
    |             |       |     +-OrderByItem
    |             |       |       +-column_ref=
    |             |       |         +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |             |       +-analytic_function_list=
    |             |         +-$analytic1#5 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
    |             +-filter_expr=
    |               +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |                 +-ColumnRef(type=INT64, column=$analytic.$analytic1#5)
    |                 +-Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
          +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
==

# QUALIFY clause uses qualified reference to a correlated column.
SELECT (
  SELECT x FROM (SELECT 1 AS x, 2 AS y) WHERE true QUALIFY row_number()
  over(order by SubQuery.Key) = 1 )
FROM (SELECT Key from KeyValue) AS SubQuery
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$subquery1.x#3]
    |         +-input_scan=
    |           +-FilterScan
    |             +-column_list=[$subquery1.x#3, $subquery1.y#4, $analytic.$analytic1#5]
    |             +-input_scan=
    |             | +-AnalyticScan
    |             |   +-column_list=[$subquery1.x#3, $subquery1.y#4, $analytic.$analytic1#5]
    |             |   +-input_scan=
    |             |   | +-FilterScan
    |             |   |   +-column_list=$subquery1.[x#3, y#4]
    |             |   |   +-input_scan=
    |             |   |   | +-ProjectScan
    |             |   |   |   +-column_list=$subquery1.[x#3, y#4]
    |             |   |   |   +-expr_list=
    |             |   |   |   | +-x#3 := Literal(type=INT64, value=1)
    |             |   |   |   | +-y#4 := Literal(type=INT64, value=2)
    |             |   |   |   +-input_scan=
    |             |   |   |     +-SingleRowScan
    |             |   |   +-filter_expr=
    |             |   |     +-Literal(type=BOOL, value=true)
    |             |   +-function_group_list=
    |             |     +-AnalyticFunctionGroup
    |             |       +-order_by=
    |             |       | +-WindowOrdering
    |             |       |   +-order_by_item_list=
    |             |       |     +-OrderByItem
    |             |       |       +-column_ref=
    |             |       |         +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |             |       +-analytic_function_list=
    |             |         +-$analytic1#5 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
    |             +-filter_expr=
    |               +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |                 +-ColumnRef(type=INT64, column=$analytic.$analytic1#5)
    |                 +-Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
          +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
==

SELECT row_number() OVER ()
FROM KeyValue
WHERE true
QUALIFY key > 1;
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-FilterScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#4]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[KeyValue.Key#1, $analytic.$analytic1#4]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[KeyValue.Key#1]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   |   +-filter_expr=
        |   |     +-Literal(type=BOOL, value=true)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-$analytic1#4 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-Literal(type=INT64, value=1)
==

SELECT row_number() OVER ()
FROM KeyValue
WHERE true
QUALIFY sum(key) > 1;
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-FilterScan
        +-column_list=[$aggregate.$agg1#5, $analytic.$analytic1#4]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$aggregate.$agg1#5, $analytic.$analytic1#4]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$aggregate.$agg1#5]
        |   |   +-input_scan=
        |   |   | +-FilterScan
        |   |   |   +-column_list=[KeyValue.Key#1]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   |   |   +-filter_expr=
        |   |   |     +-Literal(type=BOOL, value=true)
        |   |   +-aggregate_list=
        |   |     +-$agg1#5 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-$analytic1#4 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$aggregate.$agg1#5)
            +-Literal(type=INT64, value=1)
==

SELECT sum(key) over() as x
FROM KeyValue
WHERE true
QUALIFY x > 1;
--
QueryStmt
+-output_column_list=
| +-$analytic.x#4 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.x#4]
    +-input_scan=
      +-FilterScan
        +-column_list=[KeyValue.Key#1, $analytic.x#4]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[KeyValue.Key#1, $analytic.x#4]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[KeyValue.Key#1]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   |   +-filter_expr=
        |   |     +-Literal(type=BOOL, value=true)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-x#4 :=
        |           +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |             +-window_frame=
        |               +-WindowFrame(frame_unit=ROWS)
        |                 +-start_expr=
        |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
        |                 +-end_expr=
        |                   +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.x#4)
            +-Literal(type=INT64, value=1)
==

SELECT 1
FROM KeyValue
WHERE true
QUALIFY SUM(SUM(key)) OVER () > 1;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-input_scan=
      +-FilterScan
        +-column_list=[$query.$col1#3, $aggregate.$agg1#4, $analytic.$analytic1#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$query.$col1#3, $aggregate.$agg1#4, $analytic.$analytic1#5]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$query.$col1#3, $aggregate.$agg1#4]
        |   |   +-expr_list=
        |   |   | +-$col1#3 := Literal(type=INT64, value=1)
        |   |   +-input_scan=
        |   |     +-AggregateScan
        |   |       +-column_list=[$aggregate.$agg1#4]
        |   |       +-input_scan=
        |   |       | +-FilterScan
        |   |       |   +-column_list=[KeyValue.Key#1]
        |   |       |   +-input_scan=
        |   |       |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   |       |   +-filter_expr=
        |   |       |     +-Literal(type=BOOL, value=true)
        |   |       +-aggregate_list=
        |   |         +-$agg1#4 :=
        |   |           +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-$analytic1#5 :=
        |           +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |             +-ColumnRef(type=INT64, column=$aggregate.$agg1#4)
        |             +-window_frame=
        |               +-WindowFrame(frame_unit=ROWS)
        |                 +-start_expr=
        |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
        |                 +-end_expr=
        |                   +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.$analytic1#5)
            +-Literal(type=INT64, value=1)
==

SELECT value
FROM KeyValue
GROUP BY value
QUALIFY SUM(SUM(key)) OVER (ORDER BY value ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) > 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.value#3 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.value#3]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.value#3, $aggregate.$agg1#4, $analytic.$analytic1#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.value#3, $aggregate.$agg1#4, $analytic.$analytic1#5]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.value#3, $aggregate.$agg1#4]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   |   +-group_by_list=
        |   |   | +-value#3 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |   +-aggregate_list=
        |   |     +-$agg1#4 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-order_by=
        |       | +-WindowOrdering
        |       |   +-order_by_item_list=
        |       |     +-OrderByItem
        |       |       +-column_ref=
        |       |         +-ColumnRef(type=STRING, column=$groupby.value#3)
        |       +-analytic_function_list=
        |         +-$analytic1#5 :=
        |           +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |             +-ColumnRef(type=INT64, column=$aggregate.$agg1#4)
        |             +-window_frame=
        |               +-WindowFrame(frame_unit=ROWS)
        |                 +-start_expr=
        |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
        |                 +-end_expr=
        |                   +-WindowFrameExpr(boundary_type=CURRENT ROW)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.$analytic1#5)
            +-Literal(type=INT64, value=1)
==

SELECT SUM(SUM(key)) OVER () as x
FROM KeyValue
WHERE true
QUALIFY x > 1;
--
QueryStmt
+-output_column_list=
| +-$analytic.x#5 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.x#5]
    +-input_scan=
      +-FilterScan
        +-column_list=[$aggregate.$agg1#3, $analytic.x#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$aggregate.$agg1#3, $analytic.x#5]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$aggregate.$agg1#3]
        |   |   +-input_scan=
        |   |   | +-FilterScan
        |   |   |   +-column_list=[KeyValue.Key#1]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   |   |   +-filter_expr=
        |   |   |     +-Literal(type=BOOL, value=true)
        |   |   +-aggregate_list=
        |   |     +-$agg1#3 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-x#5 :=
        |           +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |             +-ColumnRef(type=INT64, column=$aggregate.$agg1#3)
        |             +-window_frame=
        |               +-WindowFrame(frame_unit=ROWS)
        |                 +-start_expr=
        |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
        |                 +-end_expr=
        |                   +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.x#5)
            +-Literal(type=INT64, value=1)
==

SELECT value, SUM(key), row_number() over () as x
FROM KeyValue
GROUP BY value
QUALIFY x > 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.value#5 AS value [STRING]
| +-$aggregate.$agg1#3 AS "$col2" [INT64]
| +-$analytic.x#6 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.value#5, $aggregate.$agg1#3, $analytic.x#6]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.value#5, $aggregate.$agg1#3, $analytic.x#6]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.value#5, $aggregate.$agg1#3, $analytic.x#6]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.value#5, $aggregate.$agg1#3]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   |   +-group_by_list=
        |   |   | +-value#5 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |   +-aggregate_list=
        |   |     +-$agg1#3 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-x#6 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.x#6)
            +-Literal(type=INT64, value=1)
==

SELECT value, SUM(key) as x, row_number() over ()
FROM KeyValue
GROUP BY value
QUALIFY x > 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.value#5 AS value [STRING]
| +-$aggregate.x#3 AS x [INT64]
| +-$analytic.$analytic1#6 AS "$col3" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.value#5, $aggregate.x#3, $analytic.$analytic1#6]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.value#5, $aggregate.x#3, $analytic.$analytic1#6]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.value#5, $aggregate.x#3, $analytic.$analytic1#6]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.value#5, $aggregate.x#3]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   |   +-group_by_list=
        |   |   | +-value#5 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |   +-aggregate_list=
        |   |     +-x#3 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-$analytic1#6 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$aggregate.x#3)
            +-Literal(type=INT64, value=1)
==

SELECT key, row_number() over ()
FROM KeyValue
GROUP BY key
QUALIFY key > 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.key#4 AS key [INT64]
| +-$analytic.$analytic1#5 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#4, $analytic.$analytic1#5]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.key#4, $analytic.$analytic1#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.key#4, $analytic.$analytic1#5]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.key#4]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   |   +-group_by_list=
        |   |     +-key#4 := ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-$analytic1#5 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$groupby.key#4)
            +-Literal(type=INT64, value=1)
==

SELECT key+1 as x, row_number() over ()
FROM KeyValue
GROUP BY x
QUALIFY x > 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.x#5 AS x [INT64]
| +-$analytic.$analytic1#6 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.x#5, $analytic.$analytic1#6]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.x#5, $analytic.$analytic1#6]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.x#5, $analytic.$analytic1#6]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.x#5]
        |   |   +-input_scan=
        |   |   | +-ProjectScan
        |   |   |   +-column_list=[KeyValue.Key#1, $pre_groupby.x#4]
        |   |   |   +-expr_list=
        |   |   |   | +-x#4 :=
        |   |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |   |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |   |   |     +-Literal(type=INT64, value=1)
        |   |   |   +-input_scan=
        |   |   |     +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |   |   +-group_by_list=
        |   |     +-x#5 := ColumnRef(type=INT64, column=$pre_groupby.x#4)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-$analytic1#6 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$groupby.x#5)
            +-Literal(type=INT64, value=1)
==

SELECT value, sum(key), rank() over (order by sum(key)) as x
FROM KeyValue
GROUP BY value
QUALIFY x > 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.value#6 AS value [STRING]
| +-$aggregate.$agg1#3 AS "$col2" [INT64]
| +-$analytic.x#7 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.value#6, $aggregate.$agg1#3, $analytic.x#7]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.value#6, $aggregate.$agg1#3, $aggregate.$agg2#4, $analytic.x#7]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.value#6, $aggregate.$agg1#3, $aggregate.$agg2#4, $analytic.x#7]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.value#6, $aggregate.$agg1#3, $aggregate.$agg2#4]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   |   +-group_by_list=
        |   |   | +-value#6 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |   +-aggregate_list=
        |   |     +-$agg1#3 :=
        |   |     | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |     +-$agg2#4 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-order_by=
        |       | +-WindowOrdering
        |       |   +-order_by_item_list=
        |       |     +-OrderByItem
        |       |       +-column_ref=
        |       |         +-ColumnRef(type=INT64, column=$aggregate.$agg2#4)
        |       +-analytic_function_list=
        |         +-x#7 := AnalyticFunctionCall(ZetaSQL:rank() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.x#7)
            +-Literal(type=INT64, value=1)
==

SELECT value
FROM KeyValue
GROUP BY value
QUALIFY rank() over (order by sum(key)) > 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.value#3 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.value#3]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.value#3, $aggregate.$agg1#4, $analytic.$analytic1#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.value#3, $aggregate.$agg1#4, $analytic.$analytic1#5]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.value#3, $aggregate.$agg1#4]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   |   +-group_by_list=
        |   |   | +-value#3 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |   +-aggregate_list=
        |   |     +-$agg1#4 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-order_by=
        |       | +-WindowOrdering
        |       |   +-order_by_item_list=
        |       |     +-OrderByItem
        |       |       +-column_ref=
        |       |         +-ColumnRef(type=INT64, column=$aggregate.$agg1#4)
        |       +-analytic_function_list=
        |         +-$analytic1#5 := AnalyticFunctionCall(ZetaSQL:rank() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.$analytic1#5)
            +-Literal(type=INT64, value=1)
==

SELECT value, sum(key) as x
FROM KeyValue
GROUP BY value
QUALIFY rank() over (order by x) > 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.value#4 AS value [STRING]
| +-$aggregate.x#3 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.value#4, $aggregate.x#3]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.value#4, $aggregate.x#3, $analytic.$analytic1#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.value#4, $aggregate.x#3, $analytic.$analytic1#5]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.value#4, $aggregate.x#3]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   |   +-group_by_list=
        |   |   | +-value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |   +-aggregate_list=
        |   |     +-x#3 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-order_by=
        |       | +-WindowOrdering
        |       |   +-order_by_item_list=
        |       |     +-OrderByItem
        |       |       +-column_ref=
        |       |         +-ColumnRef(type=INT64, column=$aggregate.x#3)
        |       +-analytic_function_list=
        |         +-$analytic1#5 := AnalyticFunctionCall(ZetaSQL:rank() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.$analytic1#5)
            +-Literal(type=INT64, value=1)
==

SELECT row_number() over ()
FROM KeyValue
WHERE true
GROUP BY value
QUALIFY sum(key) > 1;
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#5 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#5]
    +-input_scan=
      +-FilterScan
        +-column_list=[$aggregate.$agg1#6, $analytic.$analytic1#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$aggregate.$agg1#6, $analytic.$analytic1#5]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$aggregate.$agg1#6]
        |   |   +-input_scan=
        |   |   | +-FilterScan
        |   |   |   +-column_list=KeyValue.[Key#1, Value#2]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   |   |   +-filter_expr=
        |   |   |     +-Literal(type=BOOL, value=true)
        |   |   +-group_by_list=
        |   |   | +-value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |   +-aggregate_list=
        |   |     +-$agg1#6 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-$analytic1#5 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$aggregate.$agg1#6)
            +-Literal(type=INT64, value=1)
==

# Includes grouping, along with aggregation and analytic in both SELECT list and
# QUALIFY clause.
SELECT value, MIN(key), row_number() over ()
FROM KeyValue
GROUP BY value
QUALIFY MAX(key) > 1 AND SUM(SUM(key)) OVER (ORDER BY value ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) > 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.value#5 AS value [STRING]
| +-$aggregate.$agg1#3 AS "$col2" [INT64]
| +-$analytic.$analytic1#6 AS "$col3" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.value#5, $aggregate.$agg1#3, $analytic.$analytic1#6]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.value#5, $aggregate.$agg1#3, $aggregate.$agg2#7, $aggregate.$agg3#8, $analytic.$analytic1#6, $analytic.$analytic2#9]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.value#5, $aggregate.$agg1#3, $aggregate.$agg2#7, $aggregate.$agg3#8, $analytic.$analytic1#6, $analytic.$analytic2#9]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.value#5, $aggregate.$agg1#3, $aggregate.$agg2#7, $aggregate.$agg3#8]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   |   +-group_by_list=
        |   |   | +-value#5 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |   +-aggregate_list=
        |   |     +-$agg1#3 :=
        |   |     | +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
        |   |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |     +-$agg2#7 :=
        |   |     | +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
        |   |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |     +-$agg3#8 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |     | +-analytic_function_list=
        |     |   +-$analytic1#6 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        |     +-AnalyticFunctionGroup
        |       +-order_by=
        |       | +-WindowOrdering
        |       |   +-order_by_item_list=
        |       |     +-OrderByItem
        |       |       +-column_ref=
        |       |         +-ColumnRef(type=STRING, column=$groupby.value#5)
        |       +-analytic_function_list=
        |         +-$analytic2#9 :=
        |           +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |             +-ColumnRef(type=INT64, column=$aggregate.$agg3#8)
        |             +-window_frame=
        |               +-WindowFrame(frame_unit=ROWS)
        |                 +-start_expr=
        |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
        |                 +-end_expr=
        |                   +-WindowFrameExpr(boundary_type=CURRENT ROW)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=$aggregate.$agg2#7)
            | +-Literal(type=INT64, value=1)
            +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
              +-ColumnRef(type=INT64, column=$analytic.$analytic2#9)
              +-Literal(type=INT64, value=1)
==

# Analytic functions in the QUALIFY clause can reference named windows.
SELECT value
FROM KeyValue
GROUP BY value
QUALIFY SUM(SUM(key)) OVER (w) > 1
WINDOW w AS (ORDER BY value ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW);
--
QueryStmt
+-output_column_list=
| +-$groupby.value#3 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.value#3]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.value#3, $aggregate.$agg1#4, $analytic.$analytic1#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.value#3, $aggregate.$agg1#4, $analytic.$analytic1#5]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.value#3, $aggregate.$agg1#4]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   |   +-group_by_list=
        |   |   | +-value#3 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |   +-aggregate_list=
        |   |     +-$agg1#4 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-order_by=
        |       | +-WindowOrdering
        |       |   +-order_by_item_list=
        |       |     +-OrderByItem
        |       |       +-column_ref=
        |       |         +-ColumnRef(type=STRING, column=$groupby.value#3)
        |       +-analytic_function_list=
        |         +-$analytic1#5 :=
        |           +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |             +-ColumnRef(type=INT64, column=$aggregate.$agg1#4)
        |             +-window_frame=
        |               +-WindowFrame(frame_unit=ROWS)
        |                 +-start_expr=
        |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
        |                 +-end_expr=
        |                   +-WindowFrameExpr(boundary_type=CURRENT ROW)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$analytic.$analytic1#5)
            +-Literal(type=INT64, value=1)
==

# Aggregate functions in the QUALIFY clause reference pre-grouped column. The
# "value" in "QUALIFY COUNT(value) > 1" references the "value" column before
# GROUP BY aggregation, so "COUNT(value)" make sense.
SELECT value, row_number() over ()
FROM KeyValue
GROUP BY value
QUALIFY COUNT(value) > 1
--
QueryStmt
+-output_column_list=
| +-$groupby.value#4 AS value [STRING]
| +-$analytic.$analytic1#5 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.value#4, $analytic.$analytic1#5]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.value#4, $aggregate.$agg1#6, $analytic.$analytic1#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.value#4, $aggregate.$agg1#6, $analytic.$analytic1#5]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.value#4, $aggregate.$agg1#6]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
        |   |   +-group_by_list=
        |   |   | +-value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |   +-aggregate_list=
        |   |     +-$agg1#6 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
        |   |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-$analytic1#5 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$aggregate.$agg1#6)
            +-Literal(type=INT64, value=1)
==

# QUALIFY clause can reference post-grouped column. The "value" in "QUALIFY
# value > 1" references the "value" column after GROUP BY aggregation.
SELECT value, row_number() over ()
FROM KeyValue
GROUP BY value
QUALIFY value > 'abc'
--
QueryStmt
+-output_column_list=
| +-$groupby.value#4 AS value [STRING]
| +-$analytic.$analytic1#5 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.value#4, $analytic.$analytic1#5]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.value#4, $analytic.$analytic1#5]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.value#4, $analytic.$analytic1#5]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.value#4]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-$analytic1#5 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(STRING, STRING) -> BOOL)
            +-ColumnRef(type=STRING, column=$groupby.value#4)
            +-Literal(type=STRING, value='abc')
==

# Qualify clause can reference scalar, aggregate and analytical functions.
SELECT value, row_number() over ()
FROM KeyValue
GROUP BY value
QUALIFY value > 'abc' AND SUM(key) > 10 AND SUM(SUM(key)) OVER () > 0;
--
QueryStmt
+-output_column_list=
| +-$groupby.value#4 AS value [STRING]
| +-$analytic.$analytic1#5 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.value#4, $analytic.$analytic1#5]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.value#4, $aggregate.$agg1#6, $aggregate.$agg2#7, $analytic.$analytic1#5, $analytic.$analytic2#8]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.value#4, $aggregate.$agg1#6, $aggregate.$agg2#7, $analytic.$analytic1#5, $analytic.$analytic2#8]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.value#4, $aggregate.$agg1#6, $aggregate.$agg2#7]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   |   +-group_by_list=
        |   |   | +-value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |   +-aggregate_list=
        |   |     +-$agg1#6 :=
        |   |     | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |     +-$agg2#7 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |       +-analytic_function_list=
        |         +-$analytic1#5 := AnalyticFunctionCall(ZetaSQL:row_number() -> INT64)
        |         +-$analytic2#8 :=
        |           +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |             +-ColumnRef(type=INT64, column=$aggregate.$agg2#7)
        |             +-window_frame=
        |               +-WindowFrame(frame_unit=ROWS)
        |                 +-start_expr=
        |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
        |                 +-end_expr=
        |                   +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$and(BOOL, repeated(2) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$greater(STRING, STRING) -> BOOL)
            | +-ColumnRef(type=STRING, column=$groupby.value#4)
            | +-Literal(type=STRING, value='abc')
            +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=$aggregate.$agg1#6)
            | +-Literal(type=INT64, value=10)
            +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
              +-ColumnRef(type=INT64, column=$analytic.$analytic2#8)
              +-Literal(type=INT64, value=0)

==

# Qualify clause referencing a column that is not grouped or aggregated.
with t as (select 1 AS x, 2 as y)
SELECT SUM(x) AS s, row_number() over() as row_num FROM t where true group by t.x QUALIFY 1 < y;
--
ERROR: QUALIFY clause expression references column y which is neither grouped nor aggregated [at 2:95]
...row_num FROM t where true group by t.x QUALIFY 1 < y;
                                                      ^
==

select * QUALIFY(3)
--
ERROR: Query without FROM clause cannot have an QUALIFY clause [at 1:10]
select * QUALIFY(3)
         ^
