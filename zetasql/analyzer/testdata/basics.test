select /* comment */ 1, # comment
  2,
  3
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
| +-$query.$col2#2 AS "$col2" [INT64]
| +-$query.$col3#3 AS "$col3" [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=1)
    | +-$col2#2 := Literal(type=INT64, value=2)
    | +-$col3#3 := Literal(type=INT64, value=3)
    +-input_scan=
      +-SingleRowScan
==

select 1,2,3; select
--
ERROR: Syntax error: Expected end of input but got keyword SELECT [at 1:15]
select 1,2,3; select
              ^
==

# Trailing whitespace and comments after semicolon is okay.
select 1
;

  # comment
   /* comment */

--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan
==

select 1 where true;
--
ERROR: Query without FROM clause cannot have a WHERE clause [at 1:10]
select 1 where true;
         ^
==

SELECT SUM(1);
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#1]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#1]
        +-input_scan=
        | +-SingleRowScan
        +-aggregate_list=
          +-$agg1#1 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-Literal(type=INT64, value=1)
==

[language_features={{|ANALYTIC_FUNCTIONS}}]
SELECT sum(1) OVER ();
--
ALTERNATION GROUP: <empty>
--
ERROR: Analytic functions not supported [at 1:8]
SELECT sum(1) OVER ();
       ^
--
ALTERNATION GROUP: ANALYTIC_FUNCTIONS
--
ERROR: SELECT without FROM clause cannot use analytic functions [at 1:1]
SELECT sum(1) OVER ();
^
==

select 1 group by abc;
--
ERROR: Query without FROM clause cannot have a GROUP BY clause [at 1:10]
select 1 group by abc;
         ^
==

select 1 having true;
--
ERROR: Query without FROM clause cannot have a HAVING clause [at 1:10]
select 1 having true;
         ^
==

select 'abc';
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value='abc')
    +-input_scan=
      +-SingleRowScan
==

# Note: Backslashes are unescaped by the test framework.
# Then the \x escapes are unescaped to S and T by zetasql.
select T from (select '\x53' as "\x54")
--
QueryStmt
+-output_column_list=
| +-$subquery1.T#1 AS T [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$subquery1.T#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.T#1]
        +-expr_list=
        | +-T#1 := Literal(type=STRING, value='S')
        +-input_scan=
          +-SingleRowScan
==

select 1 from NoTable
--
ERROR: Table not found: NoTable; Did you mean abTable? [at 1:15]
select 1 from NoTable
              ^
==

# NOTE: If the output of this query changes to not include "$col1", then
# the test below should also be updated.
select * from (select 1+2);
--
QueryStmt
+-output_column_list=
| +-$subquery1.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$subquery1.$col1#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.$col1#1]
        +-expr_list=
        | +-$col1#1 :=
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
==

# We should have a virtual column called $col1 (see previous query),
# but shouldn't be able to select it.
select "$col1" from (select 1+2);
--
ERROR: Unrecognized name: "$col1" [at 1:8]
select "$col1" from (select 1+2);
       ^
==

select "Key", Value from "KeyValue";
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

sELEct KEYvalue.vaLUE as V fROm keYvALue;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Value#2 AS V [STRING]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Value#2]
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
==


select key, value from KeyValue kv where true;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
| +-KeyValue.Value#2 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias='kv')
        +-filter_expr=
          +-Literal(type=BOOL, value=true)
==

select key, value from KeyValue kv where NULL;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
| +-KeyValue.Value#2 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias='kv')
        +-filter_expr=
          +-Literal(type=BOOL, value=NULL)
==

select key, value from KeyValue kv where 5;
--
ERROR: WHERE clause should return type BOOL, but returns INT64 [at 1:42]
select key, value from KeyValue kv where 5;
                                         ^
==

select key as k, kv.key as k, kv.value from KeyValue kv;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS k [INT64]
| +-KeyValue.Key#1 AS k [INT64]
| +-KeyValue.Value#2 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Key#1, Value#2]
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias='kv')
==

# Introducing an alias prevents using the original table name as an alias.
select KeyValue.key from KeyValue kv;
--
ERROR: Unrecognized name: KeyValue; Did you mean Value? [at 1:8]
select KeyValue.key from KeyValue kv;
       ^
==

select 1 from KeyValue kv, kv
--
ERROR: Table not found: kv (Unqualified identifiers in a FROM clause are always resolved as tables. Identifier kv is in scope but unqualified names cannot be resolved here.) [at 1:28]
select 1 from KeyValue kv, kv
                           ^
==

select 1 from KeyValue, key
--
ERROR: Table not found: key (Unqualified identifiers in a FROM clause are always resolved as tables. Identifier key is in scope but unqualified names cannot be resolved here.) [at 1:25]
select 1 from KeyValue, key
                        ^
==

select 1 from KeyValue kv, kv.xxx
--
ERROR: Name xxx not found inside kv [at 1:31]
select 1 from KeyValue kv, kv.xxx
                              ^
==

select kv from KeyValue kv
--
QueryStmt
+-output_column_list=
| +-$query.kv#4 AS kv [STRUCT<Key INT64, Value STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.kv#4]
    +-expr_list=
    | +-kv#4 :=
    |   +-MakeStruct
    |     +-type=STRUCT<Key INT64, Value STRING>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias='kv')
==

select key, kv.key, kv, (kv).key from KeyValue kv;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
| +-KeyValue.Key#1 AS key [INT64]
| +-$query.kv#5 AS kv [STRUCT<Key INT64, Value STRING>]
| +-$query.key#6 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Key#1, $query.kv#5, $query.key#6]
    +-expr_list=
    | +-kv#5 :=
    | | +-MakeStruct
    | |   +-type=STRUCT<Key INT64, Value STRING>
    | |   +-field_list=
    | |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    | |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    | +-key#6 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-MakeStruct
    |     |   +-type=STRUCT<Key INT64, Value STRING>
    |     |   +-field_list=
    |     |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-field_idx=0
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias='kv')
==

select * from (select KeyValue from KeyValue);
--
QueryStmt
+-output_column_list=
| +-$subquery1.KeyValue#4 AS KeyValue [STRUCT<Key INT64, Value STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$subquery1.KeyValue#4]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.KeyValue#4]
        +-expr_list=
        | +-KeyValue#4 :=
        |   +-MakeStruct
        |     +-type=STRUCT<Key INT64, Value STRING>
        |     +-field_list=
        |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-input_scan=
          +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

select key from KeyValue kv1, KeyValue kv2;
--
ERROR: Column name key is ambiguous [at 1:8]
select key from KeyValue kv1, KeyValue kv2;
       ^
==

# The kv in the select-list can hide the from-clause alias.
select key AS kv from KeyValue AS kv
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS kv [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias='kv')
==

select key from KeyValue as key;
--
QueryStmt
+-output_column_list=
| +-$query.key#4 AS key [STRUCT<Key INT64, Value STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.key#4]
    +-expr_list=
    | +-key#4 :=
    |   +-MakeStruct
    |     +-type=STRUCT<Key INT64, Value STRING>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias='key')
==

select key.key as k from KeyValue AS key
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS k [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias='key')
==

select key as keyvalue from KeyValue as kv;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS keyvalue [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias='kv')
==

# We can't see alias kv from inside kv. (No cyclic lookups in NameList.)
select kv.kv from KeyValue AS kv
--
ERROR: Name kv not found inside kv [at 1:11]
select kv.kv from KeyValue AS kv
          ^
==

# "key" as a scan alias takes precedence over "key" as a column.
select value, key.value from KeyValue as key
--
QueryStmt
+-output_column_list=
| +-KeyValue.Value#2 AS value [STRING]
| +-KeyValue.Value#2 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Value#2, Value#2]
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1], alias='key')
==

select kv1.xxx from KeyValue kv1, KeyValue kv2
--
ERROR: Name xxx not found inside kv1 [at 1:12]
select kv1.xxx from KeyValue kv1, KeyValue kv2
           ^
==

select KitchenSink.date, KitchenSink.timestamp_seconds,
       KitchenSink.timestamp_millis, KitchenSink.timestamp_micros
from TestTable;
--
QueryStmt
+-output_column_list=
| +-$query.date#4 AS date [DATE]
| +-$query.timestamp_seconds#5 AS timestamp_seconds [TIMESTAMP]
| +-$query.timestamp_millis#6 AS timestamp_millis [TIMESTAMP]
| +-$query.timestamp_micros#7 AS timestamp_micros [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=$query.[date#4, timestamp_seconds#5, timestamp_millis#6, timestamp_micros#7]
    +-expr_list=
    | +-date#4 :=
    | | +-GetProtoField
    | |   +-type=DATE
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |   +-field_descriptor=date
    | |   +-default_value=1970-01-01
    | |   +-format=DATE
    | +-timestamp_seconds#5 :=
    | | +-GetProtoField
    | |   +-type=TIMESTAMP
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |   +-field_descriptor=timestamp_seconds
    | |   +-default_value=1970-01-01 00:00:00+00
    | |   +-format=TIMESTAMP_SECONDS
    | +-timestamp_millis#6 :=
    | | +-GetProtoField
    | |   +-type=TIMESTAMP
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |   +-field_descriptor=timestamp_millis
    | |   +-default_value=1970-01-01 00:00:00+00
    | |   +-format=TIMESTAMP_MILLIS
    | +-timestamp_micros#7 :=
    |   +-GetProtoField
    |     +-type=TIMESTAMP
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=timestamp_micros
    |     +-default_value=1970-01-01 00:00:00+00
    |     +-format=TIMESTAMP_MICROS
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

# All proto field date encodings just look like DATE type to zetasql.
select KitchenSink.date,
       KitchenSink.date64,
       KitchenSink.date_decimal,
       KitchenSink.date64_decimal,
       KitchenSink.date_decimal_legacy,
       KitchenSink.date64_decimal_legacy
from TestTable
--
QueryStmt
+-output_column_list=
| +-$query.date#4 AS date [DATE]
| +-$query.date64#5 AS date64 [DATE]
| +-$query.date_decimal#6 AS date_decimal [DATE]
| +-$query.date64_decimal#7 AS date64_decimal [DATE]
| +-$query.date_decimal_legacy#8 AS date_decimal_legacy [DATE]
| +-$query.date64_decimal_legacy#9 AS date64_decimal_legacy [DATE]
+-query=
  +-ProjectScan
    +-column_list=$query.[date#4, date64#5, date_decimal#6, date64_decimal#7, date_decimal_legacy#8, date64_decimal_legacy#9]
    +-expr_list=
    | +-date#4 :=
    | | +-GetProtoField
    | |   +-type=DATE
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |   +-field_descriptor=date
    | |   +-default_value=1970-01-01
    | |   +-format=DATE
    | +-date64#5 :=
    | | +-GetProtoField
    | |   +-type=DATE
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |   +-field_descriptor=date64
    | |   +-default_value=1970-01-01
    | |   +-format=DATE
    | +-date_decimal#6 :=
    | | +-GetProtoField
    | |   +-type=DATE
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |   +-field_descriptor=date_decimal
    | |   +-default_value=NULL
    | |   +-format=DATE_DECIMAL
    | +-date64_decimal#7 :=
    | | +-GetProtoField
    | |   +-type=DATE
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |   +-field_descriptor=date64_decimal
    | |   +-default_value=NULL
    | |   +-format=DATE_DECIMAL
    | +-date_decimal_legacy#8 :=
    | | +-GetProtoField
    | |   +-type=DATE
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |   +-field_descriptor=date_decimal_legacy
    | |   +-default_value=NULL
    | |   +-format=DATE_DECIMAL
    | +-date64_decimal_legacy#9 :=
    |   +-GetProtoField
    |     +-type=DATE
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=date64_decimal_legacy
    |     +-default_value=NULL
    |     +-format=DATE_DECIMAL
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

select KitchenSink.repeated_date, KitchenSink.repeated_timestamp_micros
from TestTable;
--
QueryStmt
+-output_column_list=
| +-$query.repeated_date#4 AS repeated_date [ARRAY<DATE>]
| +-$query.repeated_timestamp_micros#5 AS repeated_timestamp_micros [ARRAY<TIMESTAMP>]
+-query=
  +-ProjectScan
    +-column_list=$query.[repeated_date#4, repeated_timestamp_micros#5]
    +-expr_list=
    | +-repeated_date#4 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<DATE>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |   +-field_descriptor=repeated_date
    | |   +-default_value=[]
    | |   +-format=DATE
    | +-repeated_timestamp_micros#5 :=
    |   +-GetProtoField
    |     +-type=ARRAY<TIMESTAMP>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=repeated_timestamp_micros
    |     +-default_value=[]
    |     +-format=TIMESTAMP_MICROS
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

explain select 1;
--
ExplainStmt
+-statement=
  +-QueryStmt
    +-output_column_list=
    | +-$query.$col1#1 AS "$col1" [INT64]
    +-query=
      +-ProjectScan
        +-column_list=[$query.$col1#1]
        +-expr_list=
        | +-$col1#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
==

explain explain select 1;
--
ERROR: EXPLAIN EXPLAIN is not allowed [at 1:1]
explain explain select 1;
^
==

EXPLAIN select KitchenSink.repeated_date, KitchenSink.repeated_timestamp_micros
from TestTable;
--
ExplainStmt
+-statement=
  +-QueryStmt
    +-output_column_list=
    | +-$query.repeated_date#4 AS repeated_date [ARRAY<DATE>]
    | +-$query.repeated_timestamp_micros#5 AS repeated_timestamp_micros [ARRAY<TIMESTAMP>]
    +-query=
      +-ProjectScan
        +-column_list=$query.[repeated_date#4, repeated_timestamp_micros#5]
        +-expr_list=
        | +-repeated_date#4 :=
        | | +-GetProtoField
        | |   +-type=ARRAY<DATE>
        | |   +-expr=
        | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        | |   +-field_descriptor=repeated_date
        | |   +-default_value=[]
        | |   +-format=DATE
        | +-repeated_timestamp_micros#5 :=
        |   +-GetProtoField
        |     +-type=ARRAY<TIMESTAMP>
        |     +-expr=
        |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |     +-field_descriptor=repeated_timestamp_micros
        |     +-default_value=[]
        |     +-format=TIMESTAMP_MICROS
        +-input_scan=
          +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

# This parses as three nested ASTQuery nodes but we get out only one Scan.
(((select key from KeyValue)))
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
==

# Parenthesized query expressions.
# TODO Add ORDER BY once it's allowed here.
(((((select Key from KeyValue) limit 1) /* order by 1 */) limit 2)
 union all
 (select 1 union all select 2))
--
QueryStmt
+-output_column_list=
| +-$union_all.Key#6 AS Key [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$union_all.Key#6]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-LimitOffsetScan
      | |   +-column_list=[KeyValue.Key#1]
      | |   +-input_scan=
      | |   | +-LimitOffsetScan
      | |   |   +-column_list=[KeyValue.Key#1]
      | |   |   +-input_scan=
      | |   |   | +-ProjectScan
      | |   |   |   +-column_list=[KeyValue.Key#1]
      | |   |   |   +-input_scan=
      | |   |   |     +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
      | |   |   +-limit=
      | |   |     +-Literal(type=INT64, value=1)
      | |   +-limit=
      | |     +-Literal(type=INT64, value=2)
      | +-output_column_list=[KeyValue.Key#1]
      +-SetOperationItem
        +-scan=
        | +-SetOperationScan
        |   +-column_list=[$union_all.$col1#5]
        |   +-op_type=UNION_ALL
        |   +-input_item_list=
        |     +-SetOperationItem
        |     | +-scan=
        |     | | +-ProjectScan
        |     | |   +-column_list=[$union_all1.$col1#3]
        |     | |   +-expr_list=
        |     | |   | +-$col1#3 := Literal(type=INT64, value=1)
        |     | |   +-input_scan=
        |     | |     +-SingleRowScan
        |     | +-output_column_list=[$union_all1.$col1#3]
        |     +-SetOperationItem
        |       +-scan=
        |       | +-ProjectScan
        |       |   +-column_list=[$union_all2.$col1#4]
        |       |   +-expr_list=
        |       |   | +-$col1#4 := Literal(type=INT64, value=2)
        |       |   +-input_scan=
        |       |     +-SingleRowScan
        |       +-output_column_list=[$union_all2.$col1#4]
        +-output_column_list=[$union_all.$col1#5]
==

# Run a query using a custom column_id sequence.
# We'll get the same resolved AST but with unique column_ids per run.
[use_shared_column_id_sequence_number]
select value, key+1 AS {{a|b|c}} from KeyValue
--
ALTERNATION GROUP: a
--
QueryStmt
+-output_column_list=
| +-KeyValue.Value#2 AS value [STRING]
| +-$query.a#3 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Value#2, $query.a#3]
    +-expr_list=
    | +-a#3 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
--
ALTERNATION GROUP: b
--
QueryStmt
+-output_column_list=
| +-KeyValue.Value#5 AS value [STRING]
| +-$query.b#6 AS b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Value#5, $query.b#6]
    +-expr_list=
    | +-b#6 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=KeyValue.Key#4)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#4, Value#5], table=KeyValue, column_index_list=[0, 1])
--
ALTERNATION GROUP: c
--
QueryStmt
+-output_column_list=
| +-KeyValue.Value#8 AS value [STRING]
| +-$query.c#9 AS c [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Value#8, $query.c#9]
    +-expr_list=
    | +-c#9 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=KeyValue.Key#7)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#7, Value#8], table=KeyValue, column_index_list=[0, 1])
==

# Using SQL reserved and non-reserved keywords as identifiers.
# Where an identifier gets printed with ToIdentifierLiteral, it will be quoted.
select 1 "select", 2 "SELect", 3 options, "from".key
from KeyValue "from"
--
QueryStmt
+-output_column_list=
| +-$query.select#3 AS "select" [INT64]
| +-$query.SELect#4 AS "SELect" [INT64]
| +-$query.options#5 AS options [INT64]
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.select#3, $query.SELect#4, $query.options#5, KeyValue.Key#1]
    +-expr_list=
    | +-select#3 := Literal(type=INT64, value=1)
    | +-SELect#4 := Literal(type=INT64, value=2)
    | +-options#5 := Literal(type=INT64, value=3)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias='from')
==

# Reserved keyword in an identifier in an error message.
select "select"."from" from KeyValue
--
ERROR: Unrecognized name: "select" [at 1:8]
select "select"."from" from KeyValue
       ^
==

# Tables with no columns are allowed but we can only count rows from them.
select 5 from NoColumns
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=5)
    +-input_scan=
      +-TableScan(table=NoColumns)
==

select x from NoColumns
--
ERROR: Unrecognized name: x [at 1:8]
select x from NoColumns
       ^
==

select * from NoColumns
--
ERROR: SELECT * would expand to zero columns [at 1:8]
select * from NoColumns
       ^
==

select nc.x from NoColumns nc
--
ERROR: Name x not found inside nc [at 1:11]
select nc.x from NoColumns nc
          ^
==

# When we have a table with no columns, we can have multiple scan nodes
# stacked up with empty column_lists.
select count(*) from NoColumns nc1, NoColumns nc2
where true
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#1]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#1]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-left_scan=
        |   |   | +-TableScan(table=NoColumns, alias='nc1')
        |   |   +-right_scan=
        |   |     +-TableScan(table=NoColumns, alias='nc2')
        |   +-filter_expr=
        |     +-Literal(type=BOOL, value=true)
        +-aggregate_list=
          +-$agg1#1 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
