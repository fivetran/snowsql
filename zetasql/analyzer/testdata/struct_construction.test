select (1,2,3), ((1,2,3)), (((1,2,3)))
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<INT64, INT64, INT64>]
| +-$query.$col2#2 AS "$col2" [STRUCT<INT64, INT64, INT64>]
| +-$query.$col3#3 AS "$col3" [STRUCT<INT64, INT64, INT64>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<INT64, INT64, INT64>, value={1, 2, 3})
    | +-$col2#2 := Literal(type=STRUCT<INT64, INT64, INT64>, value={1, 2, 3})
    | +-$col3#3 := Literal(type=STRUCT<INT64, INT64, INT64>, value={1, 2, 3})
    +-input_scan=
      +-SingleRowScan
==

select (1, 'abc')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<INT64, STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<INT64, STRING>, value={1, "abc"})
    +-input_scan=
      +-SingleRowScan
==

select (1, NULL)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<INT64, INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-MakeStruct
    |     +-type=STRUCT<INT64, INT64>
    |     +-field_list=
    |       +-Literal(type=INT64, value=1)
    |       +-Literal(type=INT64, value=NULL)
    +-input_scan=
      +-SingleRowScan
==

select (key, value)
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [STRUCT<INT64, STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-MakeStruct
    |     +-type=STRUCT<INT64, STRING>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

select ((1, 2), (key, value)) as struct_1
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.struct_1#3 AS struct_1 [STRUCT<STRUCT<INT64, INT64>, STRUCT<INT64, STRING>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.struct_1#3]
    +-expr_list=
    | +-struct_1#3 :=
    |   +-MakeStruct
    |     +-type=STRUCT<STRUCT<INT64, INT64>, STRUCT<INT64, STRING>>
    |     +-field_list=
    |       +-Literal(type=STRUCT<INT64, INT64>, value={1, 2})
    |       +-MakeStruct
    |         +-type=STRUCT<INT64, STRING>
    |         +-field_list=
    |           +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |           +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

select (1, (2), ((3)), (((4))), ((((5)))))
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<INT64, INT64, INT64, INT64, INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<INT64, INT64, INT64, INT64, INT64>, value={1, 2, 3, 4, 5})
    +-input_scan=
      +-SingleRowScan
==

select ((1, ((2, (3))), ((((2), ((3)))))))
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<INT64, STRUCT<INT64, INT64>, STRUCT<INT64, INT64>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<INT64, STRUCT<INT64, INT64>, STRUCT<INT64, INT64>>, value={1, {2, 3}, {2, 3}})
    +-input_scan=
      +-SingleRowScan
==

select (1+key+2, 3+4+key), (+(key+key+5), 6+key), ((-(key+7), -(key+8)))
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [STRUCT<INT64, INT64>]
| +-$query.$col2#4 AS "$col2" [STRUCT<INT64, INT64>]
| +-$query.$col3#5 AS "$col3" [STRUCT<INT64, INT64>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#3, $col2#4, $col3#5]
    +-expr_list=
    | +-$col1#3 :=
    | | +-MakeStruct
    | |   +-type=STRUCT<INT64, INT64>
    | |   +-field_list=
    | |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    | |     | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    | |     | | +-Literal(type=INT64, value=1)
    | |     | | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    | |     | +-Literal(type=INT64, value=2)
    | |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    | |       +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    | |       | +-Literal(type=INT64, value=3)
    | |       | +-Literal(type=INT64, value=4)
    | |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    | +-$col2#4 :=
    | | +-MakeStruct
    | |   +-type=STRUCT<INT64, INT64>
    | |   +-field_list=
    | |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    | |     | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    | |     | | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    | |     | | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    | |     | +-Literal(type=INT64, value=5)
    | |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    | |       +-Literal(type=INT64, value=6)
    | |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    | +-$col3#5 :=
    |   +-MakeStruct
    |     +-type=STRUCT<INT64, INT64>
    |     +-field_list=
    |       +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    |       | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |       |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       |   +-Literal(type=INT64, value=7)
    |       +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    |         +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |           +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |           +-Literal(type=INT64, value=8)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
==

select ( (1, 2), (4, 5, key), ( (7, 8), (9, value, 11) ) )
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [STRUCT<STRUCT<INT64, INT64>, STRUCT<INT64, INT64, INT64>, STRUCT<STRUCT<INT64, INT64>, STRUCT<INT64, STRING, INT64>>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-MakeStruct
    |     +-type=STRUCT<STRUCT<INT64, INT64>, STRUCT<INT64, INT64, INT64>, STRUCT<STRUCT<INT64, INT64>, STRUCT<INT64, STRING, INT64>>>
    |     +-field_list=
    |       +-Literal(type=STRUCT<INT64, INT64>, value={1, 2})
    |       +-MakeStruct
    |       | +-type=STRUCT<INT64, INT64, INT64>
    |       | +-field_list=
    |       |   +-Literal(type=INT64, value=4)
    |       |   +-Literal(type=INT64, value=5)
    |       |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       +-MakeStruct
    |         +-type=STRUCT<STRUCT<INT64, INT64>, STRUCT<INT64, STRING, INT64>>
    |         +-field_list=
    |           +-Literal(type=STRUCT<INT64, INT64>, value={7, 8})
    |           +-MakeStruct
    |             +-type=STRUCT<INT64, STRING, INT64>
    |             +-field_list=
    |               +-Literal(type=INT64, value=9)
    |               +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |               +-Literal(type=INT64, value=11)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# Array of structs, all literals, the result is an array literal.
select [(1, 'abc'), (2, 'def'), (3, 'ghi')]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<STRUCT<INT64, STRING>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<STRUCT<INT64, STRING>>, value=[{1, "abc"}, {2, "def"}, {3, "ghi"}])
    +-input_scan=
      +-SingleRowScan
==

select [(cast(1 as int32), 'abc'), (2, 'def'), (3, 'ghi')]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<STRUCT<INT32, STRING>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) STRUCT<INT32, STRING>) -> ARRAY<STRUCT<INT32, STRING>>)
    |     +-MakeStruct
    |     | +-type=STRUCT<INT32, STRING>
    |     | +-field_list=
    |     |   +-Literal(type=INT32, value=1, has_explicit_type=TRUE)
    |     |   +-Literal(type=STRING, value='abc')
    |     +-Literal(type=STRUCT<INT32, STRING>, value={2, "def"})
    |     +-Literal(type=STRUCT<INT32, STRING>, value={3, "ghi"})
    +-input_scan=
      +-SingleRowScan
==

# Array of structs
select [(1, 'abc'), (key, value), (2, 'def'), (key + 4, value)]
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [ARRAY<STRUCT<INT64, STRING>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:$make_array(repeated(4) STRUCT<INT64, STRING>) -> ARRAY<STRUCT<INT64, STRING>>)
    |     +-Literal(type=STRUCT<INT64, STRING>, value={1, "abc"})
    |     +-MakeStruct
    |     | +-type=STRUCT<INT64, STRING>
    |     | +-field_list=
    |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-Literal(type=STRUCT<INT64, STRING>, value={2, "def"})
    |     +-MakeStruct
    |       +-type=STRUCT<INT64, STRING>
    |       +-field_list=
    |         +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |         | +-Literal(type=INT64, value=4)
    |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# Struct of arrays
select ([1,2,3], [key, 4])
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [STRUCT<ARRAY<INT64>, ARRAY<INT64>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-MakeStruct
    |     +-type=STRUCT<ARRAY<INT64>, ARRAY<INT64>>
    |     +-field_list=
    |       +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |       +-FunctionCall(ZetaSQL:$make_array(repeated(2) INT64) -> ARRAY<INT64>)
    |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |         +-Literal(type=INT64, value=4)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
==

# Mix of nested arrays, structs
select ([(2,3),(key, key+1)], key, value, [value, 'abc'])
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [STRUCT<ARRAY<STRUCT<INT64, INT64>>, INT64, STRING, ARRAY<STRING>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-MakeStruct
    |     +-type=STRUCT<ARRAY<STRUCT<INT64, INT64>>, INT64, STRING, ARRAY<STRING>>
    |     +-field_list=
    |       +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<INT64, INT64>) -> ARRAY<STRUCT<INT64, INT64>>)
    |       | +-Literal(type=STRUCT<INT64, INT64>, value={2, 3})
    |       | +-MakeStruct
    |       |   +-type=STRUCT<INT64, INT64>
    |       |   +-field_list=
    |       |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |       |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       |       +-Literal(type=INT64, value=1)
    |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |       +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |         +-Literal(type=STRING, value='abc')
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

select [(1, 2), (int32, uint32)]
from SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [ARRAY<STRUCT<INT32, UINT32>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<INT32, UINT32>) -> ARRAY<STRUCT<INT32, UINT32>>)
    |     +-Literal(type=STRUCT<INT32, UINT32>, value={1, 2})
    |     +-MakeStruct
    |       +-type=STRUCT<INT32, UINT32>
    |       +-field_list=
    |         +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |         +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, uint32#3], table=SimpleTypes, column_index_list=[0, 2])
==

select [(int32, uint32), (int64, uint64)]
from SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [ARRAY<STRUCT<INT64, UINT64>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<INT64, UINT64>) -> ARRAY<STRUCT<INT64, UINT64>>)
    |     +-MakeStruct
    |     | +-type=STRUCT<INT64, UINT64>
    |     | +-field_list=
    |     |   +-Cast(INT32 -> INT64)
    |     |   | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     |   +-Cast(UINT32 -> UINT64)
    |     |     +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-MakeStruct
    |       +-type=STRUCT<INT64, UINT64>
    |       +-field_list=
    |         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |         +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, uint32#3, uint64#4], table=SimpleTypes, column_index_list=[0, 1, 2, 3])
==

# Array elements do not have the same type
select [(int64, int64), (int64, int64, int64) ]
from SimpleTypes
--
ERROR: Array elements of types {STRUCT<INT64, INT64, INT64>, STRUCT<INT64, INT64>} do not have a common supertype [at 1:8]
select [(int64, int64), (int64, int64, int64) ]
       ^
==

# Cast of struct with all literal fields, requiring implicit literal coercion.
select cast((1,1) as struct<int32, uint64>)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<INT32, UINT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<INT32, UINT64>, value={1, 1}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select key, value
from KeyValue
where (key, value) in ((1, 'abc'), (2, 'abc'), (key, value))
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
| +-KeyValue.Value#2 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$in(STRUCT<INT64, STRING>, repeated(3) STRUCT<INT64, STRING>) -> BOOL)
            +-MakeStruct
            | +-type=STRUCT<INT64, STRING>
            | +-field_list=
            |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            +-Literal(type=STRUCT<INT64, STRING>, value={1, "abc"})
            +-Literal(type=STRUCT<INT64, STRING>, value={2, "abc"})
            +-MakeStruct
              +-type=STRUCT<INT64, STRING>
              +-field_list=
                +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                +-ColumnRef(type=STRING, column=KeyValue.Value#2)
==

select key, value
from KeyValue
where (key, value) = (1, 'abc');
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
| +-KeyValue.Value#2 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(STRUCT<INT64, STRING>, STRUCT<INT64, STRING>) -> BOOL)
            +-MakeStruct
            | +-type=STRUCT<INT64, STRING>
            | +-field_list=
            |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            +-Literal(type=STRUCT<INT64, STRING>, value={1, "abc"})
==

select struct(), struct<>()
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<>]
| +-$query.$col2#2 AS "$col2" [STRUCT<>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<>, value={})
    | +-$col2#2 := Literal(type=STRUCT<>, value={}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select struct(1)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<INT64>, value={1})
    +-input_scan=
      +-SingleRowScan
==

# The inferred struct type name includes the alias x.
select struct(x) from (select 1 x)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [STRUCT<x INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-MakeStruct
    |     +-type=STRUCT<x INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=$subquery1.x#1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.x#1]
        +-expr_list=
        | +-x#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
==

select struct(x as y) from (select 1 x)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [STRUCT<y INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-MakeStruct
    |     +-type=STRUCT<y INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=$subquery1.x#1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.x#1]
        +-expr_list=
        | +-x#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
==

select struct<int64>(5)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<INT64>, value={5}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select struct<int32>(5), struct<uint32>(5)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<INT32>]
| +-$query.$col2#2 AS "$col2" [STRUCT<UINT32>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<INT32>, value={5}, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=STRUCT<UINT32>, value={5}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select struct<int32>(500000000000)
--
ERROR: Could not cast literal 500000000000 to type INT32 [at 1:22]
select struct<int32>(500000000000)
                     ^
==

select struct<uint32>(-1)
--
ERROR: Could not cast literal -1 to type UINT32 [at 1:23]
select struct<uint32>(-1)
                      ^
==

select struct<string>(5)
--
ERROR: Struct field 1 has type INT64 which does not coerce to STRING [at 1:23]
select struct<string>(5)
                      ^
==

select struct<xyz int64>(5)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<xyz INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<xyz INT64>, value={xyz:5}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select struct<int64>(KitchenSink.int64_val) from TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [STRUCT<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-MakeStruct
    |     +-type=STRUCT<INT64>
    |     +-field_list=
    |       +-GetProtoField
    |         +-type=INT64
    |         +-expr=
    |         | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |         +-field_descriptor=int64_val
    |         +-default_value=0
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

select struct<int32>(KitchenSink.int64_val) from TestTable
--
ERROR: Struct field 1 has type INT64 which does not coerce to INT32 [at 1:22]
select struct<int32>(KitchenSink.int64_val) from TestTable
                     ^
==

select struct<xyz int64>(abc)
FROM (select 1 abc)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [STRUCT<xyz INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-MakeStruct
    |     +-type=STRUCT<xyz INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=$subquery1.abc#1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.abc#1]
        +-expr_list=
        | +-abc#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
==

select struct<xyz int64>(abc AS def)
FROM (select 1 abc)
--
ERROR: STRUCT constructors cannot specify both an explicit type and field names with AS [at 1:30]
select struct<xyz int64>(abc AS def)
                             ^
==

# A field name is inferred for the third field only.
select struct(1, 1+2, KitchenSink.int64_key_1) from TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [STRUCT<INT64, INT64, int64_key_1 INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-MakeStruct
    |     +-type=STRUCT<INT64, INT64, int64_key_1 INT64>
    |     +-field_list=
    |       +-Literal(type=INT64, value=1)
    |       +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |       | +-Literal(type=INT64, value=1)
    |       | +-Literal(type=INT64, value=2)
    |       +-GetProtoField
    |         +-type=INT64
    |         +-expr=
    |         | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |         +-field_descriptor=int64_key_1
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

select struct<f1 date, zetasql_test__.TestEnum>("2011-02-05", "TESTENUM1")
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<f1 DATE, ENUM<zetasql_test__.TestEnum>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<f1 DATE, ENUM<zetasql_test__.TestEnum>>, value={f1:2011-02-05, TESTENUM1}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# b/28942765
WITH T1 AS (
  SELECT STRUCT(true AS x) AS s UNION ALL
  SELECT STRUCT(false AS x) AS s
),
T2 AS (
  SELECT true AS y UNION ALL
  SELECT false AS y
)
SELECT * FROM T1
CROSS JOIN (SELECT y FROM T2) b
WHERE s IN (b);
--
QueryStmt
+-output_column_list=
| +-T1.s#7 AS s [STRUCT<x BOOL>]
| +-T2.y#8 AS y [BOOL]
+-query=
  +-WithScan
    +-column_list=[T1.s#7, T2.y#8]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name='T1'
    | | +-with_subquery=
    | |   +-SetOperationScan
    | |     +-column_list=[$union_all.s#3]
    | |     +-op_type=UNION_ALL
    | |     +-input_item_list=
    | |       +-SetOperationItem
    | |       | +-scan=
    | |       | | +-ProjectScan
    | |       | |   +-column_list=[$union_all1.s#1]
    | |       | |   +-expr_list=
    | |       | |   | +-s#1 := Literal(type=STRUCT<x BOOL>, value={x:true})
    | |       | |   +-input_scan=
    | |       | |     +-SingleRowScan
    | |       | +-output_column_list=[$union_all1.s#1]
    | |       +-SetOperationItem
    | |         +-scan=
    | |         | +-ProjectScan
    | |         |   +-column_list=[$union_all2.s#2]
    | |         |   +-expr_list=
    | |         |   | +-s#2 := Literal(type=STRUCT<x BOOL>, value={x:false})
    | |         |   +-input_scan=
    | |         |     +-SingleRowScan
    | |         +-output_column_list=[$union_all2.s#2]
    | +-WithEntry
    |   +-with_query_name='T2'
    |   +-with_subquery=
    |     +-SetOperationScan
    |       +-column_list=[$union_all.y#6]
    |       +-op_type=UNION_ALL
    |       +-input_item_list=
    |         +-SetOperationItem
    |         | +-scan=
    |         | | +-ProjectScan
    |         | |   +-column_list=[$union_all1.y#4]
    |         | |   +-expr_list=
    |         | |   | +-y#4 := Literal(type=BOOL, value=true)
    |         | |   +-input_scan=
    |         | |     +-SingleRowScan
    |         | +-output_column_list=[$union_all1.y#4]
    |         +-SetOperationItem
    |           +-scan=
    |           | +-ProjectScan
    |           |   +-column_list=[$union_all2.y#5]
    |           |   +-expr_list=
    |           |   | +-y#5 := Literal(type=BOOL, value=false)
    |           |   +-input_scan=
    |           |     +-SingleRowScan
    |           +-output_column_list=[$union_all2.y#5]
    +-query=
      +-ProjectScan
        +-column_list=[T1.s#7, T2.y#8]
        +-input_scan=
          +-FilterScan
            +-column_list=[T1.s#7, T2.y#8]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[T1.s#7, T2.y#8]
            |   +-left_scan=
            |   | +-WithRefScan(column_list=[T1.s#7], with_query_name='T1')
            |   +-right_scan=
            |     +-ProjectScan
            |       +-column_list=[T2.y#8]
            |       +-input_scan=
            |         +-WithRefScan(column_list=[T2.y#8], with_query_name='T2')
            +-filter_expr=
              +-FunctionCall(ZetaSQL:$in(STRUCT<x BOOL>, repeated(1) STRUCT<x BOOL>) -> BOOL)
                +-ColumnRef(type=STRUCT<x BOOL>, column=T1.s#7)
                +-Cast(STRUCT<y BOOL> -> STRUCT<x BOOL>)
                  +-MakeStruct
                    +-type=STRUCT<y BOOL>
                    +-field_list=
                      +-ColumnRef(type=BOOL, column=T2.y#8)
==

# b/28942765
WITH T1 AS (
  SELECT STRUCT(true AS x, 1.0 AS y) AS s UNION ALL
  SELECT STRUCT(false AS x, 2.3 AS y) AS s
),
T2 AS (
  SELECT true AS a UNION ALL
  SELECT false AS a
)
SELECT * FROM T1
CROSS JOIN (SELECT a, IF(a, 1, 2) AS b FROM T2) t2
WHERE s IN (t2);
--
QueryStmt
+-output_column_list=
| +-T1.s#7 AS s [STRUCT<x BOOL, y DOUBLE>]
| +-T2.a#8 AS a [BOOL]
| +-t2.b#9 AS b [INT64]
+-query=
  +-WithScan
    +-column_list=[T1.s#7, T2.a#8, t2.b#9]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name='T1'
    | | +-with_subquery=
    | |   +-SetOperationScan
    | |     +-column_list=[$union_all.s#3]
    | |     +-op_type=UNION_ALL
    | |     +-input_item_list=
    | |       +-SetOperationItem
    | |       | +-scan=
    | |       | | +-ProjectScan
    | |       | |   +-column_list=[$union_all1.s#1]
    | |       | |   +-expr_list=
    | |       | |   | +-s#1 := Literal(type=STRUCT<x BOOL, y DOUBLE>, value={x:true, y:1})
    | |       | |   +-input_scan=
    | |       | |     +-SingleRowScan
    | |       | +-output_column_list=[$union_all1.s#1]
    | |       +-SetOperationItem
    | |         +-scan=
    | |         | +-ProjectScan
    | |         |   +-column_list=[$union_all2.s#2]
    | |         |   +-expr_list=
    | |         |   | +-s#2 := Literal(type=STRUCT<x BOOL, y DOUBLE>, value={x:false, y:2.3})
    | |         |   +-input_scan=
    | |         |     +-SingleRowScan
    | |         +-output_column_list=[$union_all2.s#2]
    | +-WithEntry
    |   +-with_query_name='T2'
    |   +-with_subquery=
    |     +-SetOperationScan
    |       +-column_list=[$union_all.a#6]
    |       +-op_type=UNION_ALL
    |       +-input_item_list=
    |         +-SetOperationItem
    |         | +-scan=
    |         | | +-ProjectScan
    |         | |   +-column_list=[$union_all1.a#4]
    |         | |   +-expr_list=
    |         | |   | +-a#4 := Literal(type=BOOL, value=true)
    |         | |   +-input_scan=
    |         | |     +-SingleRowScan
    |         | +-output_column_list=[$union_all1.a#4]
    |         +-SetOperationItem
    |           +-scan=
    |           | +-ProjectScan
    |           |   +-column_list=[$union_all2.a#5]
    |           |   +-expr_list=
    |           |   | +-a#5 := Literal(type=BOOL, value=false)
    |           |   +-input_scan=
    |           |     +-SingleRowScan
    |           +-output_column_list=[$union_all2.a#5]
    +-query=
      +-ProjectScan
        +-column_list=[T1.s#7, T2.a#8, t2.b#9]
        +-input_scan=
          +-FilterScan
            +-column_list=[T1.s#7, T2.a#8, t2.b#9]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[T1.s#7, T2.a#8, t2.b#9]
            |   +-left_scan=
            |   | +-WithRefScan(column_list=[T1.s#7], with_query_name='T1')
            |   +-right_scan=
            |     +-ProjectScan
            |       +-column_list=[T2.a#8, t2.b#9]
            |       +-expr_list=
            |       | +-b#9 :=
            |       |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |       |     +-ColumnRef(type=BOOL, column=T2.a#8)
            |       |     +-Literal(type=INT64, value=1)
            |       |     +-Literal(type=INT64, value=2)
            |       +-input_scan=
            |         +-WithRefScan(column_list=[T2.a#8], with_query_name='T2')
            +-filter_expr=
              +-FunctionCall(ZetaSQL:$in(STRUCT<x BOOL, y DOUBLE>, repeated(1) STRUCT<x BOOL, y DOUBLE>) -> BOOL)
                +-ColumnRef(type=STRUCT<x BOOL, y DOUBLE>, column=T1.s#7)
                +-Cast(STRUCT<a BOOL, b INT64> -> STRUCT<x BOOL, y DOUBLE>)
                  +-MakeStruct
                    +-type=STRUCT<a BOOL, b INT64>
                    +-field_list=
                      +-ColumnRef(type=BOOL, column=T2.a#8)
                      +-ColumnRef(type=INT64, column=t2.b#9)
==

# b/28942765
SELECT CAST(q AS STRUCT<a INT64>) FROM (SELECT 1) AS q;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [STRUCT<a INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-Cast(STRUCT<INT64> -> STRUCT<a INT64>)
    |     +-MakeStruct
    |       +-type=STRUCT<INT64>
    |       +-field_list=
    |         +-ColumnRef(type=INT64, column=q.$col1#1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[q.$col1#1]
        +-expr_list=
        | +-$col1#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
==

select struct<f1 date>("bad date")
--
ERROR: Could not cast literal "bad date" to type DATE [at 1:24]
select struct<f1 date>("bad date")
                       ^
==

select struct<int32>()
--
ERROR: STRUCT type has 1 fields but constructor call has 0 fields [at 1:8]
select struct<int32>()
       ^
==

select struct<>(55)
--
ERROR: STRUCT type has 0 fields but constructor call has 1 fields [at 1:8]
select struct<>(55)
       ^
==

select struct<x int32, y string>(55)
--
ERROR: STRUCT type has 2 fields but constructor call has 1 fields [at 1:8]
select struct<x int32, y string>(55)
       ^
==

select struct<x int32, y string>(55, "abc", 77)
--
ERROR: STRUCT type has 2 fields but constructor call has 3 fields [at 1:8]
select struct<x int32, y string>(55, "abc", 77)
       ^
==

select s.x FROM (SELECT AS STRUCT 1 AS a, 2 AS b, 3 AS c, 4 AS d, 5 AS e) AS s;
--
ERROR: Field name x does not exist in STRUCT<a INT64, b INT64, c INT64, ...> [at 1:10]
select s.x FROM (SELECT AS STRUCT 1 AS a, 2 AS b, 3 AS c, 4 AS d, 5 AS e) AS s;
         ^
==

SELECT s.a FROM (SELECT ARRAY<STRUCT<a INT64, b BOOL, c DOUBLE, d STRING, e INT32>>[] AS s);
--
ERROR: Cannot access field a on a value with type ARRAY<STRUCT<a INT64, b BOOL, c DOUBLE, ...>> [at 1:10]
SELECT s.a FROM (SELECT ARRAY<STRUCT<a INT64, b BOOL, c DOUBLE, d STRING, e I...
         ^
==

select struct(cast(1 as uint32))
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<UINT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<UINT32>, value={1}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select struct<uint64>(cast(1 as uint32))
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<UINT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<UINT64>, value={1}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# TODO: The literal should have has_explicit_type = true.
select struct(b'123')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<BYTES>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<BYTES>, value={b"123"})
    +-input_scan=
      +-SingleRowScan
==

# TODO: The literal should have has_explicit_type = true.
select struct(date '2011-01-01')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<DATE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<DATE>, value={2011-01-01}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# TODO: The literal should have has_explicit_type = true.
[language_features=V_1_2_CIVIL_TIME]
select struct(datetime '2011-01-01 00:00:00')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<DATETIME>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<DATETIME>, value={2011-01-01 00:00:00}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# TODO: The literal should have has_explicit_type = true.
[language_features=V_1_2_CIVIL_TIME]
select struct(time '12:01:59')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<TIME>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<TIME>, value={12:01:59}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# TODO: The literal should have has_explicit_type = true.
select struct(timestamp '2011-01-01 00:00:00')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<TIMESTAMP>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<TIMESTAMP>, value={2011-01-01 08:00:00+00}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NUMERIC_TYPE]
select struct(numeric '0')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<NUMERIC>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRUCT<NUMERIC>, value={0}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select struct<a string(10)>('abc');
--
ERROR: Parameterized types are not supported in literal value construction [at 1:23]
select struct<a string(10)>('abc');
                      ^
==

select struct<a string collate 'und:ci'>('abc');
--
ERROR: Type with collation name is not supported in literal value construction [at 1:24]
select struct<a string collate 'und:ci'>('abc');
                       ^
