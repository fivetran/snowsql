select cast(true as BOOL), cast(1 AS INT32), cast(1 AS INT64),
  cast(1 AS UINT32), cast(1 as uint64), cast(1 as float), cast(1 as float32),
  cast(1 as Double), cast(1 AS FLOAT64), cast('foo' as string);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
| +-$query.$col2#2 AS `$col2` [INT32]
| +-$query.$col3#3 AS `$col3` [INT64]
| +-$query.$col4#4 AS `$col4` [UINT32]
| +-$query.$col5#5 AS `$col5` [UINT64]
| +-$query.$col6#6 AS `$col6` [FLOAT]
| +-$query.$col7#7 AS `$col7` [FLOAT]
| +-$query.$col8#8 AS `$col8` [DOUBLE]
| +-$query.$col9#9 AS `$col9` [DOUBLE]
| +-$query.$col10#10 AS `$col10` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10]
    +-expr_list=
    | +-$col1#1 := Literal(type=BOOL, value=true, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=INT32, value=1, has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=INT64, value=1, has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=UINT32, value=1, has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=UINT64, value=1, has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=FLOAT, value=1, has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=FLOAT, value=1, has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=DOUBLE, value=1, has_explicit_type=TRUE)
    | +-$col9#9 := Literal(type=DOUBLE, value=1, has_explicit_type=TRUE)
    | +-$col10#10 := Literal(type=STRING, value="foo", has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast(true as bool), cast(1 as int32), cast(1 as inT64),
       cast(1 as UINT32), cast(1 as uint64), cast(1 as float),
       cast(1 as double), cast('foo' as string);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
| +-$query.$col2#2 AS `$col2` [INT32]
| +-$query.$col3#3 AS `$col3` [INT64]
| +-$query.$col4#4 AS `$col4` [UINT32]
| +-$query.$col5#5 AS `$col5` [UINT64]
| +-$query.$col6#6 AS `$col6` [FLOAT]
| +-$query.$col7#7 AS `$col7` [DOUBLE]
| +-$query.$col8#8 AS `$col8` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8]
    +-expr_list=
    | +-$col1#1 := Literal(type=BOOL, value=true, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=INT32, value=1, has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=INT64, value=1, has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=UINT32, value=1, has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=UINT64, value=1, has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=FLOAT, value=1, has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=DOUBLE, value=1, has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=STRING, value="foo", has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast(`bool` as string), cast(`bool` as int32), cast(`bool` as int64),
       cast(`bool` as uint32), cast(`bool` as uint64),
       "-------------------------------------------" as separator,
       cast(`string` as bool), cast(`int32` as bool), cast(`int64` as bool),
       cast(`uint32` as bool), cast(`uint64` as bool)
from SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [STRING]
| +-$query.$col2#20 AS `$col2` [INT32]
| +-$query.$col3#21 AS `$col3` [INT64]
| +-$query.$col4#22 AS `$col4` [UINT32]
| +-$query.$col5#23 AS `$col5` [UINT64]
| +-$query.separator#24 AS separator [STRING]
| +-$query.$col7#25 AS `$col7` [BOOL]
| +-$query.$col8#26 AS `$col8` [BOOL]
| +-$query.$col9#27 AS `$col9` [BOOL]
| +-$query.$col10#28 AS `$col10` [BOOL]
| +-$query.$col11#29 AS `$col11` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#19, $col2#20, $col3#21, $col4#22, $col5#23, separator#24, $col7#25, $col8#26, $col9#27, $col10#28, $col11#29]
    +-expr_list=
    | +-$col1#19 :=
    | | +-Cast(BOOL -> STRING)
    | |   +-ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
    | +-$col2#20 :=
    | | +-Cast(BOOL -> INT32)
    | |   +-ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
    | +-$col3#21 :=
    | | +-Cast(BOOL -> INT64)
    | |   +-ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
    | +-$col4#22 :=
    | | +-Cast(BOOL -> UINT32)
    | |   +-ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
    | +-$col5#23 :=
    | | +-Cast(BOOL -> UINT64)
    | |   +-ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
    | +-separator#24 := Literal(type=STRING, value="-------------------------------------------")
    | +-$col7#25 :=
    | | +-Cast(STRING -> BOOL)
    | |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    | +-$col8#26 :=
    | | +-Cast(INT32 -> BOOL)
    | |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    | +-$col9#27 :=
    | | +-Cast(INT64 -> BOOL)
    | |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    | +-$col10#28 :=
    | | +-Cast(UINT32 -> BOOL)
    | |   +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    | +-$col11#29 :=
    |   +-Cast(UINT64 -> BOOL)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, uint32#3, uint64#4, string#5, bool#7], table=SimpleTypes, column_index_list=[0, 1, 2, 3, 4, 6])
==

select cast(`int32` as string), cast(`int64` as string),
       cast(`uint32` as string), cast(`uint64` as string),
       cast(`float` as string), cast(`double` as string),
       "-------------------------------------------" as separator,
       cast(`string` as int32), cast(`string` as int64),
       cast(`string` as uint32), cast(`string` as uint64),
       cast(`string` as float), cast(`string` as double)
from SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [STRING]
| +-$query.$col2#20 AS `$col2` [STRING]
| +-$query.$col3#21 AS `$col3` [STRING]
| +-$query.$col4#22 AS `$col4` [STRING]
| +-$query.$col5#23 AS `$col5` [STRING]
| +-$query.$col6#24 AS `$col6` [STRING]
| +-$query.separator#25 AS separator [STRING]
| +-$query.$col8#26 AS `$col8` [INT32]
| +-$query.$col9#27 AS `$col9` [INT64]
| +-$query.$col10#28 AS `$col10` [UINT32]
| +-$query.$col11#29 AS `$col11` [UINT64]
| +-$query.$col12#30 AS `$col12` [FLOAT]
| +-$query.$col13#31 AS `$col13` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#19, $col2#20, $col3#21, $col4#22, $col5#23, $col6#24, separator#25, $col8#26, $col9#27, $col10#28, $col11#29, $col12#30, $col13#31]
    +-expr_list=
    | +-$col1#19 :=
    | | +-Cast(INT32 -> STRING)
    | |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    | +-$col2#20 :=
    | | +-Cast(INT64 -> STRING)
    | |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    | +-$col3#21 :=
    | | +-Cast(UINT32 -> STRING)
    | |   +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    | +-$col4#22 :=
    | | +-Cast(UINT64 -> STRING)
    | |   +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    | +-$col5#23 :=
    | | +-Cast(FLOAT -> STRING)
    | |   +-ColumnRef(type=FLOAT, column=SimpleTypes.float#8)
    | +-$col6#24 :=
    | | +-Cast(DOUBLE -> STRING)
    | |   +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
    | +-separator#25 := Literal(type=STRING, value="-------------------------------------------")
    | +-$col8#26 :=
    | | +-Cast(STRING -> INT32)
    | |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    | +-$col9#27 :=
    | | +-Cast(STRING -> INT64)
    | |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    | +-$col10#28 :=
    | | +-Cast(STRING -> UINT32)
    | |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    | +-$col11#29 :=
    | | +-Cast(STRING -> UINT64)
    | |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    | +-$col12#30 :=
    | | +-Cast(STRING -> FLOAT)
    | |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    | +-$col13#31 :=
    |   +-Cast(STRING -> DOUBLE)
    |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, uint32#3, uint64#4, string#5, float#8, double#9], table=SimpleTypes, column_index_list=[0, 1, 2, 3, 4, 7, 8])
==

select cast(`string` as bytes format 'hex') from SimpleTypes;
--
ERROR: CAST with FORMAT is not supported [at 1:31]
select cast(`string` as bytes format 'hex') from SimpleTypes;
                              ^
==

[language_features=V_1_3_FORMAT_IN_CAST]
select cast(`string` as bytes format 'hex') from SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-Cast(STRING -> BYTES)
    |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     +-format=
    |       +-Literal(type=STRING, value="hex")
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

# Test the case when format is an explicitly-typed null.
[language_features=V_1_3_FORMAT_IN_CAST]
select cast(`string` as bytes format CAST(NULL as STRING)) from SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-Cast(STRING -> BYTES)
    |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     +-format=
    |       +-Literal(type=STRING, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

# Test the case when format is untyped null.
[language_features=V_1_3_FORMAT_IN_CAST]
select cast(`string` as bytes format NULL) from SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-Cast(STRING -> BYTES)
    |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     +-format=
    |       +-Literal(type=STRING, value=NULL)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

# Test the case when format is null with explicit type int64
[language_features=V_1_3_FORMAT_IN_CAST]
select cast(`string` as bytes format CAST(NULL as int64)) from SimpleTypes;
--
ERROR: FORMAT expression should return type STRING, but returns INT64 [at 1:38]
select cast(`string` as bytes format CAST(NULL as int64)) from SimpleTypes;
                                     ^
==

[language_features=V_1_3_FORMAT_IN_CAST]
select cast(`string` as bytes format 123) from SimpleTypes;
--
ERROR: FORMAT expression should return type STRING, but returns INT64 [at 1:38]
select cast(`string` as bytes format 123) from SimpleTypes;
                                     ^
==

[language_features=V_1_3_FORMAT_IN_CAST]
select cast(`string` as bool format 'hex') from SimpleTypes;
--
ERROR: FORMAT is not allowed for cast from STRING to BOOL [at 1:30]
select cast(`string` as bool format 'hex') from SimpleTypes;
                             ^
==

# When format is a literal, it is validated at analysis time.
# Error is generated for cast(), while null is generated by safe_cast.
[language_features=V_1_3_FORMAT_IN_CAST]
select {{cast|safe_cast}}(`string` as bytes format 'abc') from SimpleTypes;
--
ALTERNATION GROUP: cast
--
ERROR: Invalid format 'abc' [at 1:38]
select cast(`string` as bytes format 'abc') from SimpleTypes;
                                     ^
--
ALTERNATION GROUP: safe_cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 := Literal(type=BYTES, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

# Test format with type parameters on format string
[language_features=V_1_3_FORMAT_IN_CAST,PARAMETERIZED_TYPES,NUMERIC_TYPE]
select cast(`string` as bytes format CAST(123 as STRING(MAX))) from SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-Cast(STRING -> BYTES)
    |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     +-format=
    |       +-Cast(STRING -> STRING)
    |         +-Literal(type=STRING, value="123", has_explicit_type=TRUE)
    |         +-type_parameters=(max_length=MAX)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

# Test format with type parameters
[language_features=V_1_3_FORMAT_IN_CAST,V_1_3_COLLATION_SUPPORT,PARAMETERIZED_TYPES,NUMERIC_TYPE]
select cast(`string` as BYTES(10) format 'hex') from SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-Cast(STRING -> BYTES)
    |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     +-format=
    |     | +-Literal(type=STRING, value="hex")
    |     +-type_parameters=(max_length=10)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

# Test format with type parameters
select {{safe_cast|cast}}('a' as STRING collate 'und:ci');
--
ALTERNATION GROUP: safe_cast
--
ERROR: Type with collation name is not supported [at 1:32]
select safe_cast('a' as STRING collate 'und:ci');
                               ^
--
ALTERNATION GROUP: cast
--
ERROR: Type with collation name is not supported [at 1:27]
select cast('a' as STRING collate 'und:ci');
                          ^
==

# Test format with AT TIME ZONE
[language_features=V_1_3_FORMAT_IN_CAST]
select cast(`string` as timestamp format 'yyyy' at time zone 'UTC') from SimpleTypes;
--

QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-Cast(STRING -> TIMESTAMP)
    |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     +-format=
    |     | +-Literal(type=STRING, value="yyyy")
    |     +-time_zone=
    |       +-Literal(type=STRING, value="UTC")
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

# Test that AT TIME ZONE is only allowed for cast from/to timestamp
[language_features=V_1_3_FORMAT_IN_CAST]
select cast(`string` as bytes format 'hex' at time zone 'UTC') from SimpleTypes;
--

ERROR: AT TIME ZONE is not allowed for cast from STRING to BYTES [at 1:57]
select cast(`string` as bytes format 'hex' at time zone 'UTC') from SimpleTypes;
                                                        ^
==

# Test that AT TIME ZONE expression has to be a string
[language_features=V_1_3_FORMAT_IN_CAST]
select cast(`string` as timestamp format 'abc' at time zone 1) from SimpleTypes;
--
ERROR: AT TIME ZONE expression should return type STRING, but returns INT64 [at 1:61]
select cast(`string` as timestamp format 'abc' at time zone 1) from SimpleTypes;
                                                            ^
==

# Test that format literal is validated in cast from/to timestamp
[language_features=V_1_3_FORMAT_IN_CAST]
select cast(`string` as timestamp format 'abc' {{at time zone 'UTC'|}}) from SimpleTypes;
--

ALTERNATION GROUP: at time zone 'UTC'
--
ERROR: Cannot find matched format element at 0 [at 1:42]
select cast(`string` as timestamp format 'abc' at time zone 'UTC') from Simpl...
                                         ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Cannot find matched format element at 0 [at 1:42]
select cast(`string` as timestamp format 'abc' ) from SimpleTypes;
                                         ^
==

# Test that format literal is validated in cast from Date to String:
# 'HH' (hour) is not valid for Date.
[language_features=V_1_3_FORMAT_IN_CAST]
select cast(date'1234-05-06' as string format 'HH');
--
ERROR: DATE does not support 'HH' [at 1:47]
select cast(date'1234-05-06' as string format 'HH');
                                              ^
==

# Test that format literal is validated in cast from DateTime to String:
# 'TZH' (timezone hour) is not valid for DateTime.
[language_features=V_1_3_FORMAT_IN_CAST,V_1_2_CIVIL_TIME]
select cast(datetime '1234-05-06 07:08:09' as string format 'TZH');
--
ERROR: DATETIME does not support 'TZH' [at 1:61]
select cast(datetime '1234-05-06 07:08:09' as string format 'TZH');
                                                            ^
==

# Test that format literal is validated in cast from Time to String:
# 'MM' (month) is not valid for Time.
[language_features=V_1_3_FORMAT_IN_CAST,V_1_2_CIVIL_TIME]
select cast(time '07:08:09' as string format 'MM');
--
ERROR: TIME does not support 'MM' [at 1:46]
select cast(time '07:08:09' as string format 'MM');
                                             ^
==

# Test that format literal is validated in cast from Timestamp to String:
# 'a' is a valid format element.
[language_features=V_1_3_FORMAT_IN_CAST]
select cast(timestamp '1234-05-06 07:08:09-10' as string format 'a');
--
ERROR: Cannot find matched format element at 0 [at 1:65]
select cast(timestamp '1234-05-06 07:08:09-10' as string format 'a');
                                                                ^
==

# Test the success case of cast date and time to string with format.
[language_features=V_1_3_FORMAT_IN_CAST,V_1_2_CIVIL_TIME]
select cast(date'1234-05-06' as string format 'YYYY'),
       cast(datetime '1234-05-06 07:08:09' as string format 'HH'),
       cast(time '07:08:09' as string format 'MI'),
       cast(timestamp '1234-05-06 07:08:09-10' as string format 'MM');
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [STRING]
| +-$query.$col3#3 AS `$col3` [STRING]
| +-$query.$col4#4 AS `$col4` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4]
    +-expr_list=
    | +-$col1#1 :=
    | | +-Cast(DATE -> STRING)
    | |   +-Literal(type=DATE, value=1234-05-06, has_explicit_type=TRUE)
    | |   +-format=
    | |     +-Literal(type=STRING, value="YYYY")
    | +-$col2#2 :=
    | | +-Cast(DATETIME -> STRING)
    | |   +-Literal(type=DATETIME, value=1234-05-06 07:08:09, has_explicit_type=TRUE)
    | |   +-format=
    | |     +-Literal(type=STRING, value="HH")
    | +-$col3#3 :=
    | | +-Cast(TIME -> STRING)
    | |   +-Literal(type=TIME, value=07:08:09, has_explicit_type=TRUE)
    | |   +-format=
    | |     +-Literal(type=STRING, value="MI")
    | +-$col4#4 :=
    |   +-Cast(TIMESTAMP -> STRING)
    |     +-Literal(type=TIMESTAMP, value=1234-05-06 17:08:09+00, has_explicit_type=TRUE)
    |     +-format=
    |       +-Literal(type=STRING, value="MM")
    +-input_scan=
      +-SingleRowScan
==

# Test the case when time zone expression is null string.
[language_features=V_1_3_FORMAT_IN_CAST]
select cast(`string` as timestamp format 'yyyy' at time zone CAST(NULL as STRING)) from SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-Cast(STRING -> TIMESTAMP)
    |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     +-format=
    |     | +-Literal(type=STRING, value="yyyy")
    |     +-time_zone=
    |       +-Literal(type=STRING, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

# Test the case when time zone expression is untyped null.
[language_features=V_1_3_FORMAT_IN_CAST]
select cast(`string` as timestamp format 'yyyy' at time zone NULL) from SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-Cast(STRING -> TIMESTAMP)
    |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     +-format=
    |     | +-Literal(type=STRING, value="yyyy")
    |     +-time_zone=
    |       +-Literal(type=STRING, value=NULL)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

# Test the case when time zone expression is null with explicit type int64,
# error is generated.
[language_features=V_1_3_FORMAT_IN_CAST]
select cast(`string` as timestamp format 'yyyy' at time zone CAST(NULL as int64)) from SimpleTypes;
--
ERROR: AT TIME ZONE expression should return type STRING, but returns INT64 [at 1:62]
...string` as timestamp format 'yyyy' at time zone CAST(NULL as int64)) from ...
                                                   ^
==

# Test that the time zone expression is validated at analysis time.
[language_features=V_1_3_FORMAT_IN_CAST]
select cast(`string` as timestamp format 'yyyy' at time zone 'xyz') from SimpleTypes;
--
ERROR: Invalid time zone: xyz [at 1:62]
...string` as timestamp format 'yyyy' at time zone 'xyz') from SimpleTypes;
                                                   ^
==

# Test that the safe_cast expression is resolved to NULL if the time zone literal is not valid.
[language_features=V_1_3_FORMAT_IN_CAST]
select safe_cast(`string` as timestamp format 'yyyy' at time zone 'xyz') from SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 := Literal(type=TIMESTAMP, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

# Test that constant format string is validated at analysis time in
# CAST(string as date)
[language_features=V_1_3_FORMAT_IN_CAST,V_1_2_CIVIL_TIME]
select cast('1234' as date format 'hh24');
--
ERROR: Format element in category HOUR ('HH24') is not allowed for output type DATE [at 1:35]
select cast('1234' as date format 'hh24');
                                  ^
==

# Test that constant format string is validated at analysis time in
# CAST(string as datetime)
[language_features=V_1_3_FORMAT_IN_CAST,V_1_2_CIVIL_TIME]
select cast('1234' as datetime format 'tzh');
--
ERROR: Format element in category TIME_ZONE ('TZH') is not allowed for output type DATETIME [at 1:39]
select cast('1234' as datetime format 'tzh');
                                      ^
==

# Test that constant format string is validated at analysis time in
# CAST(string as time)
[language_features=V_1_3_FORMAT_IN_CAST,V_1_2_CIVIL_TIME]
select cast('1234' as time format 'yyyy');
--
ERROR: Format element in category YEAR ('YYYY') is not allowed for output type TIME [at 1:35]
select cast('1234' as time format 'yyyy');
                                  ^
==

# Test that constant format string is validated at analysis time in
# CAST(string as timestamp)
[language_features=V_1_3_FORMAT_IN_CAST,V_1_2_CIVIL_TIME]
select cast('1234' as timestamp format 'a');
--
ERROR: Cannot find matched format element at 0 [at 1:40]
select cast('1234' as timestamp format 'a');
                                       ^
==

# Test that constant time zone string is validated at analysis time in
# CAST(string as timestamp)
[language_features=V_1_3_FORMAT_IN_CAST,V_1_2_CIVIL_TIME]
select cast('1234' as timestamp format 'yyyy' at time zone 'abc');
--
ERROR: Invalid time zone: abc [at 1:60]
select cast('1234' as timestamp format 'yyyy' at time zone 'abc');
                                                           ^
==

# Test constant format string to date/datetime/time/timestamp.
[language_features=V_1_3_FORMAT_IN_CAST,V_1_2_CIVIL_TIME]
select cast('1234' as date format 'yyyy'),
       cast('1234' as datetime format 'yyyy'),
       cast('01:02:03' as time format 'hh24:mi:ss'),
       cast('1234 01:02:03' as timestamp format 'yyyy hh24:mi:ss'),
       cast('1234 01:02:03' as timestamp format 'yyyy hh24:mi:ss' at time zone '+7:00');
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATE]
| +-$query.$col2#2 AS `$col2` [DATETIME]
| +-$query.$col3#3 AS `$col3` [TIME]
| +-$query.$col4#4 AS `$col4` [TIMESTAMP]
| +-$query.$col5#5 AS `$col5` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5]
    +-expr_list=
    | +-$col1#1 :=
    | | +-Cast(STRING -> DATE)
    | |   +-Literal(type=STRING, value="1234")
    | |   +-format=
    | |     +-Literal(type=STRING, value="yyyy")
    | +-$col2#2 :=
    | | +-Cast(STRING -> DATETIME)
    | |   +-Literal(type=STRING, value="1234")
    | |   +-format=
    | |     +-Literal(type=STRING, value="yyyy")
    | +-$col3#3 :=
    | | +-Cast(STRING -> TIME)
    | |   +-Literal(type=STRING, value="01:02:03")
    | |   +-format=
    | |     +-Literal(type=STRING, value="hh24:mi:ss")
    | +-$col4#4 :=
    | | +-Cast(STRING -> TIMESTAMP)
    | |   +-Literal(type=STRING, value="1234 01:02:03")
    | |   +-format=
    | |     +-Literal(type=STRING, value="yyyy hh24:mi:ss")
    | +-$col5#5 :=
    |   +-Cast(STRING -> TIMESTAMP)
    |     +-Literal(type=STRING, value="1234 01:02:03")
    |     +-format=
    |     | +-Literal(type=STRING, value="yyyy hh24:mi:ss")
    |     +-time_zone=
    |       +-Literal(type=STRING, value="+7:00")
    +-input_scan=
      +-SingleRowScan
==

# Test cast to date/datetime/time/timestamp where the format strings are
# expressions. In this case, they are not validated at the analysis time.
[language_features=V_1_3_FORMAT_IN_CAST,V_1_2_CIVIL_TIME]
select cast('1234' as date format 'invalid' || 'yyyy'),
       cast('1234' as datetime format 'invalid' || 'yyyy'),
       cast('01:02:03' as time format 'invalid' || 'hh24:mi:ss'),
       cast('1234 01:02:03' as timestamp format 'invalid' || 'yyyy hh24:mi:ss'),
       cast('1234 01:02:03' as timestamp format 'invalid' || 'yyyy hh24:mi:ss'
            at time zone 'invalid' || '+7:00');
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATE]
| +-$query.$col2#2 AS `$col2` [DATETIME]
| +-$query.$col3#3 AS `$col3` [TIME]
| +-$query.$col4#4 AS `$col4` [TIMESTAMP]
| +-$query.$col5#5 AS `$col5` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5]
    +-expr_list=
    | +-$col1#1 :=
    | | +-Cast(STRING -> DATE)
    | |   +-Literal(type=STRING, value="1234")
    | |   +-format=
    | |     +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
    | |       +-Literal(type=STRING, value="invalid")
    | |       +-Literal(type=STRING, value="yyyy")
    | +-$col2#2 :=
    | | +-Cast(STRING -> DATETIME)
    | |   +-Literal(type=STRING, value="1234")
    | |   +-format=
    | |     +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
    | |       +-Literal(type=STRING, value="invalid")
    | |       +-Literal(type=STRING, value="yyyy")
    | +-$col3#3 :=
    | | +-Cast(STRING -> TIME)
    | |   +-Literal(type=STRING, value="01:02:03")
    | |   +-format=
    | |     +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
    | |       +-Literal(type=STRING, value="invalid")
    | |       +-Literal(type=STRING, value="hh24:mi:ss")
    | +-$col4#4 :=
    | | +-Cast(STRING -> TIMESTAMP)
    | |   +-Literal(type=STRING, value="1234 01:02:03")
    | |   +-format=
    | |     +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
    | |       +-Literal(type=STRING, value="invalid")
    | |       +-Literal(type=STRING, value="yyyy hh24:mi:ss")
    | +-$col5#5 :=
    |   +-Cast(STRING -> TIMESTAMP)
    |     +-Literal(type=STRING, value="1234 01:02:03")
    |     +-format=
    |     | +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
    |     |   +-Literal(type=STRING, value="invalid")
    |     |   +-Literal(type=STRING, value="yyyy hh24:mi:ss")
    |     +-time_zone=
    |       +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
    |         +-Literal(type=STRING, value="invalid")
    |         +-Literal(type=STRING, value="+7:00")
    +-input_scan=
      +-SingleRowScan
==

# Simple case of cast number with format string.
[language_features=V_1_3_FORMAT_IN_CAST,NUMERIC_TYPE,BIGNUMERIC_TYPE]
select cast(cast(1.23 as int32) as STRING format '99'),
       cast(cast(1.23 as uint32) as STRING format '99'),
       cast(cast(1.23 as int64) as STRING format '99'),
       cast(cast(1.23 as uint64) as STRING format '99'),
       cast(cast(1.23 as float) as STRING format '99'),
       cast(cast(1.23 as double) as STRING format '99'),
       cast(cast(1.23 as numeric) as STRING format '99'),
       cast(cast(1.23 as bignumeric) as STRING format '99');
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [STRING]
| +-$query.$col3#3 AS `$col3` [STRING]
| +-$query.$col4#4 AS `$col4` [STRING]
| +-$query.$col5#5 AS `$col5` [STRING]
| +-$query.$col6#6 AS `$col6` [STRING]
| +-$query.$col7#7 AS `$col7` [STRING]
| +-$query.$col8#8 AS `$col8` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8]
    +-expr_list=
    | +-$col1#1 :=
    | | +-Cast(INT32 -> STRING)
    | |   +-Literal(type=INT32, value=1, has_explicit_type=TRUE)
    | |   +-format=
    | |     +-Literal(type=STRING, value="99")
    | +-$col2#2 :=
    | | +-Cast(UINT32 -> STRING)
    | |   +-Literal(type=UINT32, value=1, has_explicit_type=TRUE)
    | |   +-format=
    | |     +-Literal(type=STRING, value="99")
    | +-$col3#3 :=
    | | +-Cast(INT64 -> STRING)
    | |   +-Literal(type=INT64, value=1, has_explicit_type=TRUE)
    | |   +-format=
    | |     +-Literal(type=STRING, value="99")
    | +-$col4#4 :=
    | | +-Cast(UINT64 -> STRING)
    | |   +-Literal(type=UINT64, value=1, has_explicit_type=TRUE)
    | |   +-format=
    | |     +-Literal(type=STRING, value="99")
    | +-$col5#5 :=
    | | +-Cast(FLOAT -> STRING)
    | |   +-Literal(type=FLOAT, value=1.23, has_explicit_type=TRUE)
    | |   +-format=
    | |     +-Literal(type=STRING, value="99")
    | +-$col6#6 :=
    | | +-Cast(DOUBLE -> STRING)
    | |   +-Literal(type=DOUBLE, value=1.23, has_explicit_type=TRUE)
    | |   +-format=
    | |     +-Literal(type=STRING, value="99")
    | +-$col7#7 :=
    | | +-Cast(NUMERIC -> STRING)
    | |   +-Literal(type=NUMERIC, value=1.23, has_explicit_type=TRUE)
    | |   +-format=
    | |     +-Literal(type=STRING, value="99")
    | +-$col8#8 :=
    |   +-Cast(BIGNUMERIC -> STRING)
    |     +-Literal(type=BIGNUMERIC, value=1.23, has_explicit_type=TRUE)
    |     +-format=
    |       +-Literal(type=STRING, value="99")
    +-input_scan=
      +-SingleRowScan
==

# Test that format string literals are validated at analysis time.
[language_features=V_1_3_FORMAT_IN_CAST]
select cast(cast(1.23 as int32) as STRING format ',99');
--
ERROR: Error in format string: Unexpected ',' [at 1:50]
select cast(cast(1.23 as int32) as STRING format ',99');
                                                 ^
==

select {{cast|safe_cast}}(date '2014-01-01' as int64);
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from DATE to INT64 [at 1:13]
select cast(date '2014-01-01' as int64);
            ^
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from DATE to INT64 [at 1:18]
select safe_cast(date '2014-01-01' as int64);
                 ^
==

select {{cast|safe_cast}}(1 as DATE)
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from INT64 to DATE [at 1:13]
select cast(1 as DATE)
            ^
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from INT64 to DATE [at 1:18]
select safe_cast(1 as DATE)
                 ^
==

select {{cast|safe_cast}}(`int32` as date)
from SimpleTypes;
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from INT32 to DATE [at 1:13]
select cast(`int32` as date)
            ^
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from INT32 to DATE [at 1:18]
select safe_cast(`int32` as date)
                 ^
==

select {{cast|safe_cast}}(`int64` as date)
from SimpleTypes;
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from INT64 to DATE [at 1:13]
select cast(`int64` as date)
            ^
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from INT64 to DATE [at 1:18]
select safe_cast(`int64` as date)
                 ^
==

select {{cast|safe_cast}}(`date` as int32)
from SimpleTypes;
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from DATE to INT32 [at 1:13]
select cast(`date` as int32)
            ^
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from DATE to INT32 [at 1:18]
select safe_cast(`date` as int32)
                 ^
==

select {{cast|safe_cast}}(`date` as int64)
from SimpleTypes;
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from DATE to INT64 [at 1:13]
select cast(`date` as int64)
            ^
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from DATE to INT64 [at 1:18]
select safe_cast(`date` as int64)
                 ^
==

select cast(`date` as string),
       cast(timestamp as string),
       "-------------------------------------------" as separator,
       cast(`string` as date),
       cast(string as timestamp),
       "-------------------------------------------" as separator2,
       cast(TIMESTAMP '2012-02-29 01:23:45' AS STRING),
       cast(DATE '2012-02-29' AS STRING),
       "-------------------------------------------" as separator3,
       cast('2012-02-29' as DATE),
       cast('2012-02-29 01:23:45' AS TIMESTAMP)
from SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [STRING]
| +-$query.$col2#20 AS `$col2` [STRING]
| +-$query.separator#21 AS separator [STRING]
| +-$query.$col4#22 AS `$col4` [DATE]
| +-$query.$col5#23 AS `$col5` [TIMESTAMP]
| +-$query.separator2#24 AS separator2 [STRING]
| +-$query.$col7#25 AS `$col7` [STRING]
| +-$query.$col8#26 AS `$col8` [STRING]
| +-$query.separator3#27 AS separator3 [STRING]
| +-$query.$col10#28 AS `$col10` [DATE]
| +-$query.$col11#29 AS `$col11` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#19, $col2#20, separator#21, $col4#22, $col5#23, separator2#24, $col7#25, $col8#26, separator3#27, $col10#28, $col11#29]
    +-expr_list=
    | +-$col1#19 :=
    | | +-Cast(DATE -> STRING)
    | |   +-ColumnRef(type=DATE, column=SimpleTypes.date#10)
    | +-$col2#20 :=
    | | +-Cast(TIMESTAMP -> STRING)
    | |   +-ColumnRef(type=TIMESTAMP, column=SimpleTypes.timestamp#15)
    | +-separator#21 := Literal(type=STRING, value="-------------------------------------------")
    | +-$col4#22 :=
    | | +-Cast(STRING -> DATE)
    | |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    | +-$col5#23 :=
    | | +-Cast(STRING -> TIMESTAMP)
    | |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    | +-separator2#24 := Literal(type=STRING, value="-------------------------------------------")
    | +-$col7#25 := Literal(type=STRING, value="2012-02-29 01:23:45-08", has_explicit_type=TRUE)
    | +-$col8#26 := Literal(type=STRING, value="2012-02-29", has_explicit_type=TRUE)
    | +-separator3#27 := Literal(type=STRING, value="-------------------------------------------")
    | +-$col10#28 := Literal(type=DATE, value=2012-02-29, has_explicit_type=TRUE)
    | +-$col11#29 := Literal(type=TIMESTAMP, value=2012-02-29 09:23:45+00, has_explicit_type=TRUE)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[string#5, date#10, timestamp#15], table=SimpleTypes, column_index_list=[4, 9, 14])
==

select safe_cast(`date` as string),
       safe_cast(timestamp as string),
       "-------------------------------------------" as separator,
       safe_cast(`string` as date),
       safe_cast(string as timestamp),
       "-------------------------------------------" as separator2,
       safe_cast(TIMESTAMP '2012-02-29 01:23:45' AS STRING),
       safe_cast(DATE '2012-02-29' AS STRING),
       "-------------------------------------------" as separator3,
       safe_cast('2012-02-29' as DATE),
       safe_cast('2012-02-29 01:23:45' AS TIMESTAMP)
from SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [STRING]
| +-$query.$col2#20 AS `$col2` [STRING]
| +-$query.separator#21 AS separator [STRING]
| +-$query.$col4#22 AS `$col4` [DATE]
| +-$query.$col5#23 AS `$col5` [TIMESTAMP]
| +-$query.separator2#24 AS separator2 [STRING]
| +-$query.$col7#25 AS `$col7` [STRING]
| +-$query.$col8#26 AS `$col8` [STRING]
| +-$query.separator3#27 AS separator3 [STRING]
| +-$query.$col10#28 AS `$col10` [DATE]
| +-$query.$col11#29 AS `$col11` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#19, $col2#20, separator#21, $col4#22, $col5#23, separator2#24, $col7#25, $col8#26, separator3#27, $col10#28, $col11#29]
    +-expr_list=
    | +-$col1#19 :=
    | | +-Cast(DATE -> STRING)
    | |   +-ColumnRef(type=DATE, column=SimpleTypes.date#10)
    | |   +-return_null_on_error=TRUE
    | +-$col2#20 :=
    | | +-Cast(TIMESTAMP -> STRING)
    | |   +-ColumnRef(type=TIMESTAMP, column=SimpleTypes.timestamp#15)
    | |   +-return_null_on_error=TRUE
    | +-separator#21 := Literal(type=STRING, value="-------------------------------------------")
    | +-$col4#22 :=
    | | +-Cast(STRING -> DATE)
    | |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    | |   +-return_null_on_error=TRUE
    | +-$col5#23 :=
    | | +-Cast(STRING -> TIMESTAMP)
    | |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    | |   +-return_null_on_error=TRUE
    | +-separator2#24 := Literal(type=STRING, value="-------------------------------------------")
    | +-$col7#25 := Literal(type=STRING, value="2012-02-29 01:23:45-08", has_explicit_type=TRUE)
    | +-$col8#26 := Literal(type=STRING, value="2012-02-29", has_explicit_type=TRUE)
    | +-separator3#27 := Literal(type=STRING, value="-------------------------------------------")
    | +-$col10#28 := Literal(type=DATE, value=2012-02-29, has_explicit_type=TRUE)
    | +-$col11#29 := Literal(type=TIMESTAMP, value=2012-02-29 09:23:45+00, has_explicit_type=TRUE)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[string#5, date#10, timestamp#15], table=SimpleTypes, column_index_list=[4, 9, 14])
==

# Timestamp literals casted to string get constant-folded, so we see the
# timestamp-to-string cast semantics in action.
select cast(TIMESTAMP '2012-02-29 01:23:45' AS STRING),
       cast(TIMESTAMP '2012-02-29 01:23:45.1' AS STRING),
       cast(TIMESTAMP '2012-02-29 01:23:45.12' AS STRING),
       cast(TIMESTAMP '2012-02-29 01:23:45.123' AS STRING),
       cast(TIMESTAMP '2012-02-29 01:23:45.1234' AS STRING),
       cast(TIMESTAMP '2012-02-29 01:23:45.12345' AS STRING),
       cast(TIMESTAMP '2012-02-29 01:23:45.123456' AS STRING),
       cast(TIMESTAMP '2012-02-29 01:23:45.000001' AS STRING),
       cast(TIMESTAMP '2012-02-29 01:23:45.000010' AS STRING),
       cast(TIMESTAMP '2012-02-29 01:23:45.000100' AS STRING),
       cast(TIMESTAMP '2012-02-29 01:23:45.001000' AS STRING),
       cast(TIMESTAMP '2012-02-29 01:23:45.010000' AS STRING),
       cast(TIMESTAMP '2012-02-29 01:23:45.100000' AS STRING),
       cast(TIMESTAMP '2012-02-29 01:23:45.000000' AS STRING)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [STRING]
| +-$query.$col3#3 AS `$col3` [STRING]
| +-$query.$col4#4 AS `$col4` [STRING]
| +-$query.$col5#5 AS `$col5` [STRING]
| +-$query.$col6#6 AS `$col6` [STRING]
| +-$query.$col7#7 AS `$col7` [STRING]
| +-$query.$col8#8 AS `$col8` [STRING]
| +-$query.$col9#9 AS `$col9` [STRING]
| +-$query.$col10#10 AS `$col10` [STRING]
| +-$query.$col11#11 AS `$col11` [STRING]
| +-$query.$col12#12 AS `$col12` [STRING]
| +-$query.$col13#13 AS `$col13` [STRING]
| +-$query.$col14#14 AS `$col14` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12, $col13#13, $col14#14]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="2012-02-29 01:23:45-08", has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=STRING, value="2012-02-29 01:23:45.100-08", has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=STRING, value="2012-02-29 01:23:45.120-08", has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=STRING, value="2012-02-29 01:23:45.123-08", has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=STRING, value="2012-02-29 01:23:45.123400-08", has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=STRING, value="2012-02-29 01:23:45.123450-08", has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=STRING, value="2012-02-29 01:23:45.123456-08", has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=STRING, value="2012-02-29 01:23:45.000001-08", has_explicit_type=TRUE)
    | +-$col9#9 := Literal(type=STRING, value="2012-02-29 01:23:45.000010-08", has_explicit_type=TRUE)
    | +-$col10#10 := Literal(type=STRING, value="2012-02-29 01:23:45.000100-08", has_explicit_type=TRUE)
    | +-$col11#11 := Literal(type=STRING, value="2012-02-29 01:23:45.001-08", has_explicit_type=TRUE)
    | +-$col12#12 := Literal(type=STRING, value="2012-02-29 01:23:45.010-08", has_explicit_type=TRUE)
    | +-$col13#13 := Literal(type=STRING, value="2012-02-29 01:23:45.100-08", has_explicit_type=TRUE)
    | +-$col14#14 := Literal(type=STRING, value="2012-02-29 01:23:45-08", has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# Timestamp() is a conversion function with an optional second timezone argument.
select timestamp(`string`),
       timestamp(string, string)
from SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [TIMESTAMP]
| +-$query.$col2#20 AS `$col2` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#19, $col2#20]
    +-expr_list=
    | +-$col1#19 :=
    | | +-FunctionCall(ZetaSQL:timestamp(STRING, optional(0) STRING) -> TIMESTAMP)
    | |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    | +-$col2#20 :=
    |   +-FunctionCall(ZetaSQL:timestamp(STRING, optional(1) STRING) -> TIMESTAMP)
    |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

select cast(date as timestamp),
       cast(DATE '2014-01-01' as timestamp),
       cast(date as date),
       cast(timestamp as date),
       cast(TIMESTAMP '2012-02-29 01:23:45' AS DATE),
       cast(timestamp as timestamp)
from SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [TIMESTAMP]
| +-$query.$col2#20 AS `$col2` [TIMESTAMP]
| +-SimpleTypes.date#10 AS `$col3` [DATE]
| +-$query.$col4#21 AS `$col4` [DATE]
| +-$query.$col5#22 AS `$col5` [DATE]
| +-SimpleTypes.timestamp#15 AS `$col6` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19, $query.$col2#20, SimpleTypes.date#10, $query.$col4#21, $query.$col5#22, SimpleTypes.timestamp#15]
    +-expr_list=
    | +-$col1#19 :=
    | | +-Cast(DATE -> TIMESTAMP)
    | |   +-ColumnRef(type=DATE, column=SimpleTypes.date#10)
    | +-$col2#20 := Literal(type=TIMESTAMP, value=2014-01-01 08:00:00+00, has_explicit_type=TRUE)
    | +-$col4#21 :=
    | | +-Cast(TIMESTAMP -> DATE)
    | |   +-ColumnRef(type=TIMESTAMP, column=SimpleTypes.timestamp#15)
    | +-$col5#22 := Literal(type=DATE, value=2012-02-29, has_explicit_type=TRUE)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[date#10, timestamp#15], table=SimpleTypes, column_index_list=[9, 14])
==

select {{safe_cast|cast}}(timestamp '2014-01-01 12:34:56' as int64);
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from TIMESTAMP to INT64 [at 1:18]
select safe_cast(timestamp '2014-01-01 12:34:56' as int64);
                 ^
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from TIMESTAMP to INT64 [at 1:13]
select cast(timestamp '2014-01-01 12:34:56' as int64);
            ^
==

select {{safe_cast|cast}}(1 as TIMESTAMP)
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from INT64 to TIMESTAMP [at 1:18]
select safe_cast(1 as TIMESTAMP)
                 ^
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from INT64 to TIMESTAMP [at 1:13]
select cast(1 as TIMESTAMP)
            ^
==

select {{safe_cast|cast}}(`int64` as timestamp)
from SimpleTypes;
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from INT64 to TIMESTAMP [at 1:18]
select safe_cast(`int64` as timestamp)
                 ^
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from INT64 to TIMESTAMP [at 1:13]
select cast(`int64` as timestamp)
            ^
==

select {{safe_cast|cast}}(timestamp as int64)
from SimpleTypes;
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from TIMESTAMP to INT64 [at 1:18]
select safe_cast(timestamp as int64)
                 ^
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from TIMESTAMP to INT64 [at 1:13]
select cast(timestamp as int64)
            ^
==

select {{safe_cast|cast}}(`int32` as timestamp)
from SimpleTypes;
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from INT32 to TIMESTAMP [at 1:18]
select safe_cast(`int32` as timestamp)
                 ^
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from INT32 to TIMESTAMP [at 1:13]
select cast(`int32` as timestamp)
            ^
==

select {{safe_cast|cast}}(timestamp as int32)
from SimpleTypes;
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from TIMESTAMP to INT32 [at 1:18]
select safe_cast(timestamp as int32)
                 ^
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from TIMESTAMP to INT32 [at 1:13]
select cast(timestamp as int32)
            ^
==

select {{safe_cast|cast}}(1 as TIMESTAMP)
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from INT64 to TIMESTAMP [at 1:18]
select safe_cast(1 as TIMESTAMP)
                 ^
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from INT64 to TIMESTAMP [at 1:13]
select cast(1 as TIMESTAMP)
            ^
==

select {{safe_cast|cast}}(1.5 as TIMESTAMP);
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from DOUBLE to TIMESTAMP [at 1:18]
select safe_cast(1.5 as TIMESTAMP);
                 ^
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from DOUBLE to TIMESTAMP [at 1:13]
select cast(1.5 as TIMESTAMP);
            ^
==

# Casts from FLOAT/DOUBLE to BOOL are invalid.
select cast({{0.0|CAST(0.0 as float)}} as bool);
--
ALTERNATION GROUP: 0.0
--
ERROR: Invalid cast from DOUBLE to BOOL [at 1:13]
select cast(0.0 as bool);
            ^
--
ALTERNATION GROUP: CAST(0.0 as float)
--
ERROR: Invalid cast from FLOAT to BOOL [at 1:13]
select cast(CAST(0.0 as float) as bool);
            ^
==

# Casts from BOOL to FLOAT/DOUBLE are invalid.
select cast(false as {{float|double}});
--
ALTERNATION GROUP: float
--
ERROR: Invalid cast from BOOL to FLOAT [at 1:13]
select cast(false as float);
            ^
--
ALTERNATION GROUP: double
--
ERROR: Invalid cast from BOOL to DOUBLE [at 1:13]
select cast(false as double);
            ^
==

# Casts from BOOL to FLOAT/DOUBLE are invalid, even for NULL bools.
select cast(cast(null as bool) as {{float|double}});
--
ALTERNATION GROUP: float
--
ERROR: Invalid cast from BOOL to FLOAT [at 1:13]
select cast(cast(null as bool) as float);
            ^
--
ALTERNATION GROUP: double
--
ERROR: Invalid cast from BOOL to DOUBLE [at 1:13]
select cast(cast(null as bool) as double);
            ^
==

# Casts from NUMERIC to BOOL are invalid.
[language_features={{NUMERIC_TYPE|}}]
select cast(NUMERIC '0' as bool);
--
ALTERNATION GROUP: NUMERIC_TYPE
--
ERROR: Invalid cast from NUMERIC to BOOL [at 1:13]
select cast(NUMERIC '0' as bool);
            ^
--
ALTERNATION GROUP: <empty>
--
ERROR: NUMERIC literals are not supported [at 1:13]
select cast(NUMERIC '0' as bool);
            ^
==

# Casts from BOOL to NUMERIC are invalid.
[language_features={{NUMERIC_TYPE|}}]
select cast(false as numeric);
--
ALTERNATION GROUP: NUMERIC_TYPE
--
ERROR: Invalid cast from BOOL to NUMERIC [at 1:13]
select cast(false as numeric);
            ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: numeric [at 1:22]
select cast(false as numeric);
                     ^
==

# Casts from BOOL to NUMERIC are invalid, even for NULL bools.
[language_features={{NUMERIC_TYPE|}}]
select cast(cast(null as bool) as numeric);
--
ALTERNATION GROUP: NUMERIC_TYPE
--
ERROR: Invalid cast from BOOL to NUMERIC [at 1:13]
select cast(cast(null as bool) as numeric);
            ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: numeric [at 1:35]
select cast(cast(null as bool) as numeric);
                                  ^
==

# Casts from NUMERIC to BOOL are invalid.
[language_features={{NUMERIC_TYPE|}}]
select cast(NUMERIC '0' as bool);
--
ALTERNATION GROUP: NUMERIC_TYPE
--
ERROR: Invalid cast from NUMERIC to BOOL [at 1:13]
select cast(NUMERIC '0' as bool);
            ^
--
ALTERNATION GROUP: <empty>
--
ERROR: NUMERIC literals are not supported [at 1:13]
select cast(NUMERIC '0' as bool);
            ^
==

# Casts from BOOL to BIGNUMERIC are invalid.
[language_features={{BIGNUMERIC_TYPE|}}]
select cast(false as bignumeric);
--
ALTERNATION GROUP: BIGNUMERIC_TYPE
--
ERROR: Invalid cast from BOOL to BIGNUMERIC [at 1:13]
select cast(false as bignumeric);
            ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: bignumeric [at 1:22]
select cast(false as bignumeric);
                     ^
==

# Casts from BOOL to BIGNUMERIC are invalid, even for NULL bools.
[language_features={{BIGNUMERIC_TYPE|}}]
select cast(cast(null as bool) as bignumeric);
--
ALTERNATION GROUP: BIGNUMERIC_TYPE
--
ERROR: Invalid cast from BOOL to BIGNUMERIC [at 1:13]
select cast(cast(null as bool) as bignumeric);
            ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: bignumeric [at 1:35]
select cast(cast(null as bool) as bignumeric);
                                  ^
==

select {{safe_cast|cast}}(1 AS ARRAY(INT32));
--
ALTERNATION GROUP: safe_cast
--
ERROR: Syntax error: Expected "<" but got "(" [at 1:28]
select safe_cast(1 AS ARRAY(INT32));
                           ^
--
ALTERNATION GROUP: cast
--
ERROR: Syntax error: Expected "<" but got "(" [at 1:23]
select cast(1 AS ARRAY(INT32));
                      ^
==

select {{safe_cast|cast}}(1 AS ARRAY<INT32>);
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from INT64 to ARRAY<INT32> [at 1:18]
select safe_cast(1 AS ARRAY<INT32>);
                 ^
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from INT64 to ARRAY<INT32> [at 1:13]
select cast(1 AS ARRAY<INT32>);
            ^
==

select {{safe_cast|cast}}(NULL AS ARRAY<INT32>);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT32>, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# After casting NULL to int32, it is no longer treated as a NULL literal so
# it cannot be later cast to another (incompatible) type.
select cast(cast(NULL as int32) as ARRAY<int32>);
--
ERROR: Invalid cast from INT32 to ARRAY<INT32> [at 1:13]
select cast(cast(NULL as int32) as ARRAY<int32>);
            ^
==

select safe_cast(safe_cast(NULL as int32) as ARRAY<int32>);
--

ERROR: Invalid cast from INT32 to ARRAY<INT32> [at 1:18]
select safe_cast(safe_cast(NULL as int32) as ARRAY<int32>);
                 ^
==

select cast(1 AS ARRAY<ARRAY<INT32>>);
--
ERROR: Arrays of arrays are not supported [at 1:18]
select cast(1 AS ARRAY<ARRAY<INT32>>);
                 ^
==

# Can cast an array to an array of exactly the same type.
select {{safe_cast|cast}}([1,2,3] as ARRAY<INT64>);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[1, 2, 3], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast(cast(null as ARRAY<INT32>) as ARRAY<INT32>);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT32>, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select safe_cast(safe_cast(null as ARRAY<INT32>) as ARRAY<INT32>);
--

QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT32>, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select {{safe_cast|cast}}(Int32Array as ARRAY<INT32>)
from ComplexTypes;
--
QueryStmt
+-output_column_list=
| +-ComplexTypes.Int32Array#4 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[ComplexTypes.Int32Array#4]
    +-input_scan=
      +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
==

# Array can be cast to an array of different types as long as the element
# types are castable.
[language_features={{V_1_1_CAST_DIFFERENT_ARRAY_TYPES|}}]
select cast([0,1,2] as {{ARRAY<BOOL>|ARRAY<DOUBLE>|ARRAY<zetasql_test__.TestEnum>|ARRAY<FLOAT>|ARRAY<INT32>|ARRAY<INT64>|ARRAY<STRING>|ARRAY<UINT32>|ARRAY<UINT64>}});
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<BOOL>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<BOOL>, value=[false, true, true], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<DOUBLE>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<DOUBLE>, value=[0, 1, 2], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<zetasql_test__.TestEnum>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<ENUM<zetasql_test__.TestEnum>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<ENUM<zetasql_test__.TestEnum>>, value=[TESTENUM0, TESTENUM1, TESTENUM2], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<FLOAT>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<FLOAT>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<FLOAT>, value=[0, 1, 2], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<INT32>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT32>, value=[0, 1, 2], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<INT64>
    ARRAY<INT64>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[0, 1, 2], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<STRING>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<STRING>, value=["0", "1", "2"], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<UINT32>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<UINT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<UINT32>, value=[0, 1, 2], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<UINT64>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<UINT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<UINT64>, value=[0, 1, 2], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ARRAY<BOOL>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT64> to ARRAY<BOOL> [at 1:13]
select cast([0,1,2] as ARRAY<BOOL>);
            ^
--
ALTERNATION GROUP: ARRAY<DOUBLE>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT64> to ARRAY<DOUBLE> [at 1:13]
select cast([0,1,2] as ARRAY<DOUBLE>);
            ^
--
ALTERNATION GROUP: ARRAY<zetasql_test__.TestEnum>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT64> to ARRAY<zetasql_test__.TestEnum> [at 1:13]
select cast([0,1,2] as ARRAY<zetasql_test__.TestEnum>);
            ^
--
ALTERNATION GROUP: ARRAY<FLOAT>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT64> to ARRAY<FLOAT> [at 1:13]
select cast([0,1,2] as ARRAY<FLOAT>);
            ^
--
ALTERNATION GROUP: ARRAY<INT32>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT64> to ARRAY<INT32> [at 1:13]
select cast([0,1,2] as ARRAY<INT32>);
            ^
--
ALTERNATION GROUP: ARRAY<STRING>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT64> to ARRAY<STRING> [at 1:13]
select cast([0,1,2] as ARRAY<STRING>);
            ^
--
ALTERNATION GROUP: ARRAY<UINT32>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT64> to ARRAY<UINT32> [at 1:13]
select cast([0,1,2] as ARRAY<UINT32>);
            ^
--
ALTERNATION GROUP: ARRAY<UINT64>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT64> to ARRAY<UINT64> [at 1:13]
select cast([0,1,2] as ARRAY<UINT64>);
            ^
==

[language_features={{V_1_1_CAST_DIFFERENT_ARRAY_TYPES|}}]
select cast(Int32Array as {{ARRAY<BOOL>|ARRAY<DOUBLE>|ARRAY<zetasql_test__.TestEnum>|ARRAY<FLOAT>|ARRAY<INT32>|ARRAY<INT64>|ARRAY<STRING>|ARRAY<UINT32>|ARRAY<UINT64>}})
from ComplexTypes
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<BOOL>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#7 AS `$col1` [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#7]
    +-expr_list=
    | +-$col1#7 :=
    |   +-Cast(ARRAY<INT32> -> ARRAY<BOOL>)
    |     +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-input_scan=
      +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<DOUBLE>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#7 AS `$col1` [ARRAY<DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#7]
    +-expr_list=
    | +-$col1#7 :=
    |   +-Cast(ARRAY<INT32> -> ARRAY<DOUBLE>)
    |     +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-input_scan=
      +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<zetasql_test__.TestEnum>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#7 AS `$col1` [ARRAY<ENUM<zetasql_test__.TestEnum>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#7]
    +-expr_list=
    | +-$col1#7 :=
    |   +-Cast(ARRAY<INT32> -> ARRAY<ENUM<zetasql_test__.TestEnum>>)
    |     +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-input_scan=
      +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<FLOAT>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#7 AS `$col1` [ARRAY<FLOAT>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#7]
    +-expr_list=
    | +-$col1#7 :=
    |   +-Cast(ARRAY<INT32> -> ARRAY<FLOAT>)
    |     +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-input_scan=
      +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<INT32>
    ARRAY<INT32>
--
QueryStmt
+-output_column_list=
| +-ComplexTypes.Int32Array#4 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[ComplexTypes.Int32Array#4]
    +-input_scan=
      +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<INT64>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#7 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#7]
    +-expr_list=
    | +-$col1#7 :=
    |   +-Cast(ARRAY<INT32> -> ARRAY<INT64>)
    |     +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-input_scan=
      +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<STRING>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#7 AS `$col1` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#7]
    +-expr_list=
    | +-$col1#7 :=
    |   +-Cast(ARRAY<INT32> -> ARRAY<STRING>)
    |     +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-input_scan=
      +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<UINT32>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#7 AS `$col1` [ARRAY<UINT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#7]
    +-expr_list=
    | +-$col1#7 :=
    |   +-Cast(ARRAY<INT32> -> ARRAY<UINT32>)
    |     +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-input_scan=
      +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<UINT64>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#7 AS `$col1` [ARRAY<UINT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#7]
    +-expr_list=
    | +-$col1#7 :=
    |   +-Cast(ARRAY<INT32> -> ARRAY<UINT64>)
    |     +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
    +-input_scan=
      +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
--
ALTERNATION GROUP: ARRAY<BOOL>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT32> to ARRAY<BOOL> [at 1:13]
select cast(Int32Array as ARRAY<BOOL>)
            ^
--
ALTERNATION GROUP: ARRAY<DOUBLE>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT32> to ARRAY<DOUBLE> [at 1:13]
select cast(Int32Array as ARRAY<DOUBLE>)
            ^
--
ALTERNATION GROUP: ARRAY<zetasql_test__.TestEnum>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT32> to ARRAY<zetasql_test__.TestEnum> [at 1:13]
select cast(Int32Array as ARRAY<zetasql_test__.TestEnum>)
            ^
--
ALTERNATION GROUP: ARRAY<FLOAT>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT32> to ARRAY<FLOAT> [at 1:13]
select cast(Int32Array as ARRAY<FLOAT>)
            ^
--
ALTERNATION GROUP: ARRAY<INT64>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT32> to ARRAY<INT64> [at 1:13]
select cast(Int32Array as ARRAY<INT64>)
            ^
--
ALTERNATION GROUP: ARRAY<STRING>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT32> to ARRAY<STRING> [at 1:13]
select cast(Int32Array as ARRAY<STRING>)
            ^
--
ALTERNATION GROUP: ARRAY<UINT32>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT32> to ARRAY<UINT32> [at 1:13]
select cast(Int32Array as ARRAY<UINT32>)
            ^
--
ALTERNATION GROUP: ARRAY<UINT64>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT32> to ARRAY<UINT64> [at 1:13]
select cast(Int32Array as ARRAY<UINT64>)
            ^
==

# Casting an array of proto or enum to an array of equivalent types is allowed.
# Cast is allowed between structs with equivalent field types.
select cast(coalesce(array<zetasql_test__.TestEnum>[1]) AS
            array<alt_descriptor_pool.zetasql_test__.TestEnum>),
       cast(coalesce(array<zetasql_test__.TestExtraPB>[""]) AS
            array<alt_descriptor_pool.zetasql_test__.TestExtraPB>),
       cast(coalesce(struct(false,
                            array<zetasql_test__.TestExtraPB>[""],
                            CAST(1 AS zetasql_test__.TestEnum))) AS
            STRUCT<BOOL, ARRAY<alt_descriptor_pool.zetasql_test__.TestExtraPB>,
                   alt_descriptor_pool.zetasql_test__.TestEnum>)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<ENUM<zetasql_test__.TestEnum>>]
| +-$query.$col2#2 AS `$col2` [ARRAY<PROTO<zetasql_test__.TestExtraPB>>]
| +-$query.$col3#3 AS `$col3` [STRUCT<BOOL, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    +-expr_list=
    | +-$col1#1 :=
    | | +-Cast(ARRAY<ENUM<zetasql_test__.TestEnum>> -> ARRAY<ENUM<zetasql_test__.TestEnum>>)
    | |   +-FunctionCall(ZetaSQL:coalesce(repeated(1) ARRAY<ENUM<zetasql_test__.TestEnum>>) -> ARRAY<ENUM<zetasql_test__.TestEnum>>)
    | |     +-Literal(type=ARRAY<ENUM<zetasql_test__.TestEnum>>, value=[TESTENUM1], has_explicit_type=TRUE)
    | +-$col2#2 :=
    | | +-Cast(ARRAY<PROTO<zetasql_test__.TestExtraPB>> -> ARRAY<PROTO<zetasql_test__.TestExtraPB>>)
    | |   +-FunctionCall(ZetaSQL:coalesce(repeated(1) ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> ARRAY<PROTO<zetasql_test__.TestExtraPB>>)
    | |     +-Literal(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, value=[{}], has_explicit_type=TRUE)
    | +-$col3#3 :=
    |   +-Cast(STRUCT<BOOL, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>> -> STRUCT<BOOL, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>)
    |     +-FunctionCall(ZetaSQL:coalesce(repeated(1) STRUCT<BOOL, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>) -> STRUCT<BOOL, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>)
    |       +-MakeStruct
    |         +-type=STRUCT<BOOL, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>
    |         +-field_list=
    |           +-Literal(type=BOOL, value=false)
    |           +-Literal(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, value=[{}], has_explicit_type=TRUE)
    |           +-Literal(type=ENUM<zetasql_test__.TestEnum>, value=TESTENUM1, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select safe_cast(coalesce(array<zetasql_test__.TestEnum>[1]) AS
                 array<alt_descriptor_pool.zetasql_test__.TestEnum>),
       safe_cast(coalesce(array<zetasql_test__.TestExtraPB>[""]) AS
                 array<alt_descriptor_pool.zetasql_test__.TestExtraPB>),
       safe_cast(coalesce(struct(false,
                                 array<zetasql_test__.TestExtraPB>[""],
                                 CAST(1 AS zetasql_test__.TestEnum))) AS
           STRUCT<BOOL, ARRAY<alt_descriptor_pool.zetasql_test__.TestExtraPB>,
                  alt_descriptor_pool.zetasql_test__.TestEnum>)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<ENUM<zetasql_test__.TestEnum>>]
| +-$query.$col2#2 AS `$col2` [ARRAY<PROTO<zetasql_test__.TestExtraPB>>]
| +-$query.$col3#3 AS `$col3` [STRUCT<BOOL, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    +-expr_list=
    | +-$col1#1 :=
    | | +-Cast(ARRAY<ENUM<zetasql_test__.TestEnum>> -> ARRAY<ENUM<zetasql_test__.TestEnum>>)
    | |   +-FunctionCall(ZetaSQL:coalesce(repeated(1) ARRAY<ENUM<zetasql_test__.TestEnum>>) -> ARRAY<ENUM<zetasql_test__.TestEnum>>)
    | |     +-Literal(type=ARRAY<ENUM<zetasql_test__.TestEnum>>, value=[TESTENUM1], has_explicit_type=TRUE)
    | |   +-return_null_on_error=TRUE
    | +-$col2#2 :=
    | | +-Cast(ARRAY<PROTO<zetasql_test__.TestExtraPB>> -> ARRAY<PROTO<zetasql_test__.TestExtraPB>>)
    | |   +-FunctionCall(ZetaSQL:coalesce(repeated(1) ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> ARRAY<PROTO<zetasql_test__.TestExtraPB>>)
    | |     +-Literal(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, value=[{}], has_explicit_type=TRUE)
    | |   +-return_null_on_error=TRUE
    | +-$col3#3 :=
    |   +-Cast(STRUCT<BOOL, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>> -> STRUCT<BOOL, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>)
    |     +-FunctionCall(ZetaSQL:coalesce(repeated(1) STRUCT<BOOL, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>) -> STRUCT<BOOL, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>)
    |       +-MakeStruct
    |         +-type=STRUCT<BOOL, ARRAY<PROTO<zetasql_test__.TestExtraPB>>, ENUM<zetasql_test__.TestEnum>>
    |         +-field_list=
    |           +-Literal(type=BOOL, value=false)
    |           +-Literal(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, value=[{}], has_explicit_type=TRUE)
    |           +-Literal(type=ENUM<zetasql_test__.TestEnum>, value=TESTENUM1, has_explicit_type=TRUE)
    |     +-return_null_on_error=TRUE
    +-input_scan=
      +-SingleRowScan
==

select cast(1 AS STRUCT(A INT32, B STRING));
--
ERROR: Syntax error: Expected "<" but got "(" [at 1:24]
select cast(1 AS STRUCT(A INT32, B STRING));
                       ^
==

select cast(1 AS STRUCT< >);
--
ERROR: Invalid cast from INT64 to STRUCT<> [at 1:13]
select cast(1 AS STRUCT< >);
            ^
==

select cast(1 AS STRUCT<A INT32, B STRING>);
--
ERROR: Invalid cast from INT64 to STRUCT<A INT32, B STRING> [at 1:13]
select cast(1 AS STRUCT<A INT32, B STRING>);
            ^
==

select cast(1 AS TestEnum);
--
ERROR: Type not found: TestEnum [at 1:18]
select cast(1 AS TestEnum);
                 ^
==

select cast(1.0 AS `zetasql_test__.TestEnum`);
--
ERROR: Invalid cast from DOUBLE to zetasql_test__.TestEnum [at 1:13]
select cast(1.0 AS `zetasql_test__.TestEnum`);
            ^
==

select cast(1 AS `zetasql_test__.TestEnum`);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ENUM<zetasql_test__.TestEnum>, value=TESTENUM1, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select {{cast|safe_cast}}(1000 AS `zetasql_test__.TestEnum`);
--

ALTERNATION GROUP: cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(INT64 -> ENUM<zetasql_test__.TestEnum>)
    |     +-Literal(type=INT64, value=1000)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: safe_cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ENUM<zetasql_test__.TestEnum>, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast(NULL AS `zetasql_test__.TestEnum`);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ENUM<zetasql_test__.TestEnum>, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast(1 AS zetasql_test__.TestEnum);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ENUM<zetasql_test__.TestEnum>, value=TESTENUM1, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast(1 AS `zetasql_test__.TestEnum`);
--
[SAME AS PREVIOUS]
==

select ENUM<zetasql_test__.TestEnum>(1);
--
ERROR: Syntax error: Unexpected keyword ENUM [at 1:8]
select ENUM<zetasql_test__.TestEnum>(1);
       ^
==

select `zetasql_test__.TestEnum`(1);
--
ERROR: Function not found: `zetasql_test__.TestEnum` [at 1:8]
select `zetasql_test__.TestEnum`(1);
       ^
==

select cast('TESTENUM0' AS `zetasql_test__.TestEnum`)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ENUM<zetasql_test__.TestEnum>, value=TESTENUM0, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# Same as above, but with different case string literal.
select cast('TestEnum0' AS `zetasql_test__.TestEnum`)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> ENUM<zetasql_test__.TestEnum>)
    |     +-Literal(type=STRING, value="TestEnum0")
    +-input_scan=
      +-SingleRowScan
==

select {{cast|safe_cast}}('TESTENUM1000' AS `zetasql_test__.TestEnum`)
--

ALTERNATION GROUP: cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> ENUM<zetasql_test__.TestEnum>)
    |     +-Literal(type=STRING, value="TESTENUM1000")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: safe_cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ENUM<zetasql_test__.TestEnum>, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast(cast('TESTENUM0' AS `zetasql_test__.TestEnum`) as string);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="TESTENUM0", has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select safe_cast(safe_cast('TESTENUM0' AS `zetasql_test__.TestEnum`) as string);
--

QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="TESTENUM0", has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast(KitchenSink.string_val AS `zetasql_test__.TestEnum`),
       cast(KitchenSink.test_enum AS STRING)
  FROM TestTable;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
| +-$query.$col2#5 AS `$col2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#4, $col2#5]
    +-expr_list=
    | +-$col1#4 :=
    | | +-Cast(STRING -> ENUM<zetasql_test__.TestEnum>)
    | |   +-GetProtoField
    | |     +-type=STRING
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=string_val
    | |     +-default_value="default_name"
    | +-$col2#5 :=
    |   +-Cast(ENUM<zetasql_test__.TestEnum> -> STRING)
    |     +-GetProtoField
    |       +-type=ENUM<zetasql_test__.TestEnum>
    |       +-expr=
    |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |       +-field_descriptor=test_enum
    |       +-default_value=TESTENUM0
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

select safe_cast(KitchenSink.string_val AS `zetasql_test__.TestEnum`),
       safe_cast(KitchenSink.test_enum AS STRING)
  FROM TestTable;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
| +-$query.$col2#5 AS `$col2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#4, $col2#5]
    +-expr_list=
    | +-$col1#4 :=
    | | +-Cast(STRING -> ENUM<zetasql_test__.TestEnum>)
    | |   +-GetProtoField
    | |     +-type=STRING
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=string_val
    | |     +-default_value="default_name"
    | |   +-return_null_on_error=TRUE
    | +-$col2#5 :=
    |   +-Cast(ENUM<zetasql_test__.TestEnum> -> STRING)
    |     +-GetProtoField
    |       +-type=ENUM<zetasql_test__.TestEnum>
    |       +-expr=
    |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |       +-field_descriptor=test_enum
    |       +-default_value=TESTENUM0
    |     +-return_null_on_error=TRUE
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

select cast(KitchenSink.int32_val AS `zetasql_test__.TestEnum`),
       cast(KitchenSink.int64_val AS `zetasql_test__.TestEnum`),
       cast(KitchenSink.uint32_val AS `zetasql_test__.TestEnum`),
       cast(KitchenSink.uint64_val AS `zetasql_test__.TestEnum`),
       "-------------------------------------------" as separator,
       cast(KitchenSink.test_enum AS INT32),
       cast(KitchenSink.test_enum AS INT64),
       cast(KitchenSink.test_enum AS UINT32),
       cast(KitchenSink.test_enum AS UINT64)
  FROM TestTable;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
| +-$query.$col2#5 AS `$col2` [ENUM<zetasql_test__.TestEnum>]
| +-$query.$col3#6 AS `$col3` [ENUM<zetasql_test__.TestEnum>]
| +-$query.$col4#7 AS `$col4` [ENUM<zetasql_test__.TestEnum>]
| +-$query.separator#8 AS separator [STRING]
| +-$query.$col6#9 AS `$col6` [INT32]
| +-$query.$col7#10 AS `$col7` [INT64]
| +-$query.$col8#11 AS `$col8` [UINT32]
| +-$query.$col9#12 AS `$col9` [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#4, $col2#5, $col3#6, $col4#7, separator#8, $col6#9, $col7#10, $col8#11, $col9#12]
    +-expr_list=
    | +-$col1#4 :=
    | | +-Cast(INT32 -> ENUM<zetasql_test__.TestEnum>)
    | |   +-GetProtoField
    | |     +-type=INT32
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=int32_val
    | |     +-default_value=77
    | +-$col2#5 :=
    | | +-Cast(INT64 -> ENUM<zetasql_test__.TestEnum>)
    | |   +-GetProtoField
    | |     +-type=INT64
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=int64_val
    | |     +-default_value=0
    | +-$col3#6 :=
    | | +-Cast(UINT32 -> ENUM<zetasql_test__.TestEnum>)
    | |   +-GetProtoField
    | |     +-type=UINT32
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=uint32_val
    | |     +-default_value=777
    | +-$col4#7 :=
    | | +-Cast(UINT64 -> ENUM<zetasql_test__.TestEnum>)
    | |   +-GetProtoField
    | |     +-type=UINT64
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=uint64_val
    | |     +-default_value=0
    | +-separator#8 := Literal(type=STRING, value="-------------------------------------------")
    | +-$col6#9 :=
    | | +-Cast(ENUM<zetasql_test__.TestEnum> -> INT32)
    | |   +-GetProtoField
    | |     +-type=ENUM<zetasql_test__.TestEnum>
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=test_enum
    | |     +-default_value=TESTENUM0
    | +-$col7#10 :=
    | | +-Cast(ENUM<zetasql_test__.TestEnum> -> INT64)
    | |   +-GetProtoField
    | |     +-type=ENUM<zetasql_test__.TestEnum>
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=test_enum
    | |     +-default_value=TESTENUM0
    | +-$col8#11 :=
    | | +-Cast(ENUM<zetasql_test__.TestEnum> -> UINT32)
    | |   +-GetProtoField
    | |     +-type=ENUM<zetasql_test__.TestEnum>
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=test_enum
    | |     +-default_value=TESTENUM0
    | +-$col9#12 :=
    |   +-Cast(ENUM<zetasql_test__.TestEnum> -> UINT64)
    |     +-GetProtoField
    |       +-type=ENUM<zetasql_test__.TestEnum>
    |       +-expr=
    |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |       +-field_descriptor=test_enum
    |       +-default_value=TESTENUM0
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

select safe_cast(KitchenSink.int32_val AS `zetasql_test__.TestEnum`),
       safe_cast(KitchenSink.int64_val AS `zetasql_test__.TestEnum`),
       safe_cast(KitchenSink.uint32_val AS `zetasql_test__.TestEnum`),
       safe_cast(KitchenSink.uint64_val AS `zetasql_test__.TestEnum`),
       "-------------------------------------------" as separator,
       safe_cast(KitchenSink.test_enum AS INT32),
       safe_cast(KitchenSink.test_enum AS INT64),
       safe_cast(KitchenSink.test_enum AS UINT32),
       safe_cast(KitchenSink.test_enum AS UINT64)
  FROM TestTable;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
| +-$query.$col2#5 AS `$col2` [ENUM<zetasql_test__.TestEnum>]
| +-$query.$col3#6 AS `$col3` [ENUM<zetasql_test__.TestEnum>]
| +-$query.$col4#7 AS `$col4` [ENUM<zetasql_test__.TestEnum>]
| +-$query.separator#8 AS separator [STRING]
| +-$query.$col6#9 AS `$col6` [INT32]
| +-$query.$col7#10 AS `$col7` [INT64]
| +-$query.$col8#11 AS `$col8` [UINT32]
| +-$query.$col9#12 AS `$col9` [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#4, $col2#5, $col3#6, $col4#7, separator#8, $col6#9, $col7#10, $col8#11, $col9#12]
    +-expr_list=
    | +-$col1#4 :=
    | | +-Cast(INT32 -> ENUM<zetasql_test__.TestEnum>)
    | |   +-GetProtoField
    | |     +-type=INT32
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=int32_val
    | |     +-default_value=77
    | |   +-return_null_on_error=TRUE
    | +-$col2#5 :=
    | | +-Cast(INT64 -> ENUM<zetasql_test__.TestEnum>)
    | |   +-GetProtoField
    | |     +-type=INT64
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=int64_val
    | |     +-default_value=0
    | |   +-return_null_on_error=TRUE
    | +-$col3#6 :=
    | | +-Cast(UINT32 -> ENUM<zetasql_test__.TestEnum>)
    | |   +-GetProtoField
    | |     +-type=UINT32
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=uint32_val
    | |     +-default_value=777
    | |   +-return_null_on_error=TRUE
    | +-$col4#7 :=
    | | +-Cast(UINT64 -> ENUM<zetasql_test__.TestEnum>)
    | |   +-GetProtoField
    | |     +-type=UINT64
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=uint64_val
    | |     +-default_value=0
    | |   +-return_null_on_error=TRUE
    | +-separator#8 := Literal(type=STRING, value="-------------------------------------------")
    | +-$col6#9 :=
    | | +-Cast(ENUM<zetasql_test__.TestEnum> -> INT32)
    | |   +-GetProtoField
    | |     +-type=ENUM<zetasql_test__.TestEnum>
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=test_enum
    | |     +-default_value=TESTENUM0
    | |   +-return_null_on_error=TRUE
    | +-$col7#10 :=
    | | +-Cast(ENUM<zetasql_test__.TestEnum> -> INT64)
    | |   +-GetProtoField
    | |     +-type=ENUM<zetasql_test__.TestEnum>
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=test_enum
    | |     +-default_value=TESTENUM0
    | |   +-return_null_on_error=TRUE
    | +-$col8#11 :=
    | | +-Cast(ENUM<zetasql_test__.TestEnum> -> UINT32)
    | |   +-GetProtoField
    | |     +-type=ENUM<zetasql_test__.TestEnum>
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=test_enum
    | |     +-default_value=TESTENUM0
    | |   +-return_null_on_error=TRUE
    | +-$col9#12 :=
    |   +-Cast(ENUM<zetasql_test__.TestEnum> -> UINT64)
    |     +-GetProtoField
    |       +-type=ENUM<zetasql_test__.TestEnum>
    |       +-expr=
    |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |       +-field_descriptor=test_enum
    |       +-default_value=TESTENUM0
    |     +-return_null_on_error=TRUE
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

select {{cast|safe_cast}}(KitchenSink.test_enum AS `zetasql_test__.TestEnum`)
from TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-GetProtoField
    |     +-type=ENUM<zetasql_test__.TestEnum>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=test_enum
    |     +-default_value=TESTENUM0
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

select {{cast|safe_cast}}(KitchenSink.test_enum
    AS `zetasql_test__.AnotherTestEnum`)
from TestTable
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from zetasql_test__.TestEnum to zetasql_test__.AnotherTestEnum [at 1:13]
select cast(KitchenSink.test_enum
            ^
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from zetasql_test__.TestEnum to zetasql_test__.AnotherTestEnum [at 1:18]
select safe_cast(KitchenSink.test_enum
                 ^
==

select cast('1' AS KitchenSinkPB);
--
ERROR: Type not found: KitchenSinkPB [at 1:20]
select cast('1' AS KitchenSinkPB);
                   ^
==

select {{cast|safe_cast}}(NULL as `zetasql_test__.KitchenSinkPB`);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=PROTO<zetasql_test__.KitchenSinkPB>, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select {{cast|safe_cast}}(1 AS `zetasql_test__.KitchenSinkPB`);
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from INT64 to zetasql_test__.KitchenSinkPB [at 1:13]
select cast(1 AS `zetasql_test__.KitchenSinkPB`);
            ^
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from INT64 to zetasql_test__.KitchenSinkPB [at 1:18]
select safe_cast(1 AS `zetasql_test__.KitchenSinkPB`);
                 ^
==

select {{cast|safe_cast}}(1 AS zetasql_test__.KitchenSinkPB);
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from INT64 to zetasql_test__.KitchenSinkPB [at 1:13]
select cast(1 AS zetasql_test__.KitchenSinkPB);
            ^
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from INT64 to zetasql_test__.KitchenSinkPB [at 1:18]
select safe_cast(1 AS zetasql_test__.KitchenSinkPB);
                 ^
==

select {{cast|safe_cast}}(1 AS zetasql_test__.KitchenSinkPB.XXX);
--
ALTERNATION GROUP: cast
--
ERROR: Type not found: zetasql_test__.KitchenSinkPB.XXX [at 1:18]
select cast(1 AS zetasql_test__.KitchenSinkPB.XXX);
                 ^
--
ALTERNATION GROUP: safe_cast
--
ERROR: Type not found: zetasql_test__.KitchenSinkPB.XXX [at 1:23]
select safe_cast(1 AS zetasql_test__.KitchenSinkPB.XXX);
                      ^
==

select cast({{'1'|'''1'''}} AS `zetasql_test__.KitchenSinkPB`)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> PROTO<zetasql_test__.KitchenSinkPB>)
    |     +-Literal(type=STRING, value="1")
    +-input_scan=
      +-SingleRowScan
==

select cast({{b"1"|b"""1"""}} AS `zetasql_test__.KitchenSinkPB`)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(BYTES -> PROTO<zetasql_test__.KitchenSinkPB>)
    |     +-Literal(type=BYTES, value=b"1")
    +-input_scan=
      +-SingleRowScan
==

select {{cast|safe_cast}}('1' AS zetasql_test__.KitchenSinkPB);
--
ALTERNATION GROUP: cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> PROTO<zetasql_test__.KitchenSinkPB>)
    |     +-Literal(type=STRING, value="1")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: safe_cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> PROTO<zetasql_test__.KitchenSinkPB>)
    |     +-Literal(type=STRING, value="1")
    |     +-return_null_on_error=TRUE
    +-input_scan=
      +-SingleRowScan
==

select {{cast|safe_cast}}('1' AS nested_catalog.zetasql_test__.KitchenSinkPB);
--
ALTERNATION GROUP: cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> PROTO<zetasql_test__.KitchenSinkPB>)
    |     +-Literal(type=STRING, value="1")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: safe_cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> PROTO<zetasql_test__.KitchenSinkPB>)
    |     +-Literal(type=STRING, value="1")
    |     +-return_null_on_error=TRUE
    +-input_scan=
      +-SingleRowScan
==

select {{cast|safe_cast}}('1' AS nested_catalog.`zetasql_test__.KitchenSinkPB`);
--
[SAME AS PREVIOUS]
==

select PROTO<zetasql_test__.KitchenSinkPB>("1")
--
ERROR: Syntax error: Unexpected keyword PROTO [at 1:8]
select PROTO<zetasql_test__.KitchenSinkPB>("1")
       ^
==

select `zetasql_test__.KitchenSinkPB`("1")
--
ERROR: Function not found: `zetasql_test__.KitchenSinkPB` [at 1:8]
select `zetasql_test__.KitchenSinkPB`("1")
       ^
==

select cast(cast('1' AS `zetasql_test__.KitchenSinkPB`) as string),
       cast(cast(b'1' AS `zetasql_test__.KitchenSinkPB`) as bytes);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 :=
    | | +-Cast(PROTO<zetasql_test__.KitchenSinkPB> -> STRING)
    | |   +-Cast(STRING -> PROTO<zetasql_test__.KitchenSinkPB>)
    | |     +-Literal(type=STRING, value="1")
    | +-$col2#2 :=
    |   +-Cast(PROTO<zetasql_test__.KitchenSinkPB> -> BYTES)
    |     +-Cast(BYTES -> PROTO<zetasql_test__.KitchenSinkPB>)
    |       +-Literal(type=BYTES, value=b"1")
    +-input_scan=
      +-SingleRowScan
==

select {{cast|safe_cast}}(KitchenSink as `zetasql_test__.KitchenSinkPB`)
from TestTable;
--
QueryStmt
+-output_column_list=
| +-TestTable.KitchenSink#3 AS `$col1` [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.KitchenSink#3]
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

select cast(KitchenSink.string_val AS `zetasql_test__.KitchenSinkPB`),
       cast(KitchenSink.bytes_val AS `zetasql_test__.KitchenSinkPB`),
       cast(KitchenSink.nested_value AS STRING),
       cast(KitchenSink.nested_value AS BYTES)
from TestTable;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$query.$col2#5 AS `$col2` [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$query.$col3#6 AS `$col3` [STRING]
| +-$query.$col4#7 AS `$col4` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#4, $col2#5, $col3#6, $col4#7]
    +-expr_list=
    | +-$col1#4 :=
    | | +-Cast(STRING -> PROTO<zetasql_test__.KitchenSinkPB>)
    | |   +-GetProtoField
    | |     +-type=STRING
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=string_val
    | |     +-default_value="default_name"
    | +-$col2#5 :=
    | | +-Cast(BYTES -> PROTO<zetasql_test__.KitchenSinkPB>)
    | |   +-GetProtoField
    | |     +-type=BYTES
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=bytes_val
    | |     +-default_value=b""
    | +-$col3#6 :=
    | | +-Cast(PROTO<zetasql_test__.KitchenSinkPB.Nested> -> STRING)
    | |   +-GetProtoField
    | |     +-type=PROTO<zetasql_test__.KitchenSinkPB.Nested>
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=nested_value
    | |     +-default_value=NULL
    | +-$col4#7 :=
    |   +-Cast(PROTO<zetasql_test__.KitchenSinkPB.Nested> -> BYTES)
    |     +-GetProtoField
    |       +-type=PROTO<zetasql_test__.KitchenSinkPB.Nested>
    |       +-expr=
    |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |       +-field_descriptor=nested_value
    |       +-default_value=NULL
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

select cast(1 as int32.xxx);
--
ERROR: Type not found: int32.xxx [at 1:18]
select cast(1 as int32.xxx);
                 ^
==

select {{cast|safe_cast}}('abc' as bytes);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=BYTES, value=b"abc", has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# Nested cast expressions.
select cast(cast(1 as int32) as uint32)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [UINT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=UINT32, value=1, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# Cast nested inside operator.
select cast(1 as int32) + cast(2 as int32)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=2, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select safe_cast(1 as int32) + safe_cast(2 as int32)
--

QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=2, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select safe_cast("abc" as int32) + safe_cast(2 as int32)
--

QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=NULL, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=2, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select safe_cast("abc" as int32) + safe_cast("def" as int32)
--

QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=NULL, has_explicit_type=TRUE)
    |     +-Literal(type=INT64, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast("abc" as int32) + cast("def" as int32)
--

QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-Cast(STRING -> INT32)
    |     |   +-Literal(type=STRING, value="abc")
    |     +-Cast(INT32 -> INT64)
    |       +-Cast(STRING -> INT32)
    |         +-Literal(type=STRING, value="def")
    +-input_scan=
      +-SingleRowScan
==

# Cast nested inside function.
select SQRT({{cast|safe_cast}}({{1|9999999999|999999999999999999999}} as int32))
--
ALTERNATION GROUPS:
    cast,1
    safe_cast,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:sqrt(DOUBLE) -> DOUBLE)
    |     +-Literal(type=DOUBLE, value=1, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: cast,9999999999
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:sqrt(DOUBLE) -> DOUBLE)
    |     +-Cast(INT32 -> DOUBLE)
    |       +-Cast(INT64 -> INT32)
    |         +-Literal(type=INT64, value=9999999999)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: cast,999999999999999999999
--
ERROR: Invalid integer literal: 999999999999999999999 [at 1:18]
select SQRT(cast(999999999999999999999 as int32))
                 ^
--
ALTERNATION GROUP: safe_cast,9999999999
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:sqrt(DOUBLE) -> DOUBLE)
    |     +-Literal(type=DOUBLE, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: safe_cast,999999999999999999999
--
ERROR: Invalid integer literal: 999999999999999999999 [at 1:23]
select SQRT(safe_cast(999999999999999999999 as int32))
                      ^
==

# Function nested inside cast.
select {{cast|safe_cast}}(sqrt(4) as int32)
--
ALTERNATION GROUP: cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(DOUBLE -> INT32)
    |     +-FunctionCall(ZetaSQL:sqrt(DOUBLE) -> DOUBLE)
    |       +-Literal(type=DOUBLE, value=4)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: safe_cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(DOUBLE -> INT32)
    |     +-FunctionCall(ZetaSQL:sqrt(DOUBLE) -> DOUBLE)
    |       +-Literal(type=DOUBLE, value=4)
    |     +-return_null_on_error=TRUE
    +-input_scan=
      +-SingleRowScan
==

select cast(cast(1 as uint64) as int64),
       cast(cast(1 as int64) as uint64)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=1, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=UINT64, value=1, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# INT64_MAX + 1 => 9223372036854775808
select {{cast|safe_cast}}(9223372036854775808 as int64), 9223372036854775808
--
ALTERNATION GROUP: cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 :=
    | | +-Cast(UINT64 -> INT64)
    | |   +-Literal(type=UINT64, value=9223372036854775808)
    | +-$col2#2 := Literal(type=UINT64, value=9223372036854775808)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: safe_cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=NULL, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=UINT64, value=9223372036854775808)
    +-input_scan=
      +-SingleRowScan
==

# Aliases for type names in CAST work
select {{cast|safe_cast}}(TRUE AS BOOLEAN)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=BOOL, value=true, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan

==

# Aliases for type names don't work as function names
select boolean(0)
--
ERROR: Function not found: boolean [at 1:8]
select boolean(0)
       ^
==

# Cast shorthands are not supported.
[language_features={{V_1_3_ADDITIONAL_STRING_FUNCTIONS|}}]
select int32(1)
--
ALTERNATION GROUP: V_1_3_ADDITIONAL_STRING_FUNCTIONS
--
ERROR: Function not found: int32; Did you mean instr? [at 1:8]
select int32(1)
       ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Function not found: int32 [at 1:8]
select int32(1)
       ^
==

# TODO: Provide a better error message here.
select string("zzz")
--
ERROR: Could not cast literal "zzz" to type TIMESTAMP [at 1:15]
select string("zzz")
              ^
==

select cast(cast(null as int32) as int64)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast(cast(null as int64) as int64)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# Explicit casts between protos are okay if the protos have the same full_name.
select {{cast|safe_cast}}(KitchenSink
    as alt_descriptor_pool.zetasql_test__.KitchenSinkPB)
from TestTable
--
ALTERNATION GROUP: cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-Cast(PROTO<zetasql_test__.KitchenSinkPB> -> PROTO<zetasql_test__.KitchenSinkPB>)
    |     +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
--
ALTERNATION GROUP: safe_cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-Cast(PROTO<zetasql_test__.KitchenSinkPB> -> PROTO<zetasql_test__.KitchenSinkPB>)
    |     +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-return_null_on_error=TRUE
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

select {{cast|safe_cast}}(KitchenSink as zetasql_test__.TestExtraPB)
from TestTable
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from zetasql_test__.KitchenSinkPB to zetasql_test__.TestExtraPB [at 1:13]
select cast(KitchenSink as zetasql_test__.TestExtraPB)
            ^
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from zetasql_test__.KitchenSinkPB to zetasql_test__.TestExtraPB [at 1:18]
select safe_cast(KitchenSink as zetasql_test__.TestExtraPB)
                 ^
==

# Explicit casts between enums are okay if the enums have the same full_name.
select
  cast(KitchenSink.test_enum as alt_descriptor_pool.zetasql_test__.TestEnum)
from TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [ENUM<zetasql_test__.TestEnum>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-Cast(ENUM<zetasql_test__.TestEnum> -> ENUM<zetasql_test__.TestEnum>)
    |     +-GetProtoField
    |       +-type=ENUM<zetasql_test__.TestEnum>
    |       +-expr=
    |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |       +-field_descriptor=test_enum
    |       +-default_value=TESTENUM0
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

select {{cast|safe_cast}}(KitchenSink as zetasql_test__.AnotherTestEnum)
from TestTable
--
ALTERNATION GROUP: cast
--
ERROR: Invalid cast from zetasql_test__.KitchenSinkPB to zetasql_test__.AnotherTestEnum [at 1:13]
select cast(KitchenSink as zetasql_test__.AnotherTestEnum)
            ^
--
ALTERNATION GROUP: safe_cast
--
ERROR: Invalid cast from zetasql_test__.KitchenSinkPB to zetasql_test__.AnotherTestEnum [at 1:18]
select safe_cast(KitchenSink as zetasql_test__.AnotherTestEnum)
                 ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select cast(null as time)
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=TIME, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: time [at 1:21]
select cast(null as time)
                    ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select cast('12:34:56.123456' as time)
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=TIME, value=12:34:56.123456, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: time [at 1:34]
select cast('12:34:56.123456' as time)
                                 ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select cast('abc' as time)
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> TIME)
    |     +-Literal(type=STRING, value="abc")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: time [at 1:22]
select cast('abc' as time)
                     ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select cast('24:00:00' as time)
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> TIME)
    |     +-Literal(type=STRING, value="24:00:00")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: time [at 1:27]
select cast('24:00:00' as time)
                          ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select cast(123 as time)
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
ERROR: Invalid cast from INT64 to TIME [at 1:13]
select cast(123 as time)
            ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: time [at 1:20]
select cast(123 as time)
                   ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select cast(null as datetime)
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=DATETIME, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: datetime [at 1:21]
select cast(null as datetime)
                    ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select cast('2015-11-03 11:05:20' as datetime)
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=DATETIME, value=2015-11-03 11:05:20, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: datetime [at 1:38]
select cast('2015-11-03 11:05:20' as datetime)
                                     ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select cast('abc' as datetime)
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> DATETIME)
    |     +-Literal(type=STRING, value="abc")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: datetime [at 1:22]
select cast('abc' as datetime)
                     ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select cast('2015-13-05 01:02:03' as datetime)
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> DATETIME)
    |     +-Literal(type=STRING, value="2015-13-05 01:02:03")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: datetime [at 1:38]
select cast('2015-13-05 01:02:03' as datetime)
                                     ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select cast('2006-01-02 01:02:03.123456 UTC' as datetime)
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> DATETIME)
    |     +-Literal(type=STRING, value="2006-01-02 01:02:03.123456 UTC")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: datetime [at 1:49]
select cast('2006-01-02 01:02:03.123456 UTC' as datetime)
                                                ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select cast(TIME '01:02:03.123456' as STRING)
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="01:02:03.123456", has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: TIME [at 1:13]
select cast(TIME '01:02:03.123456' as STRING)
            ^
==

[language_features={{V_1_2_CIVIL_TIME|}}]
select cast(DATETIME '2006-01-02 03:04:05.123456' as STRING)
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="2006-01-02 03:04:05.123456", has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: DATETIME [at 1:13]
select cast(DATETIME '2006-01-02 03:04:05.123456' as STRING)
            ^

==

[language_features={{V_1_2_CIVIL_TIME|}}]
select cast(KitchenSink.string_val as TIME),
       cast(KitchenSink.string_val as DATETIME),
       cast(cast(KitchenSink.string_val as TIME) as string),
       cast(cast(KitchenSink.string_val as DATETIME) as string)
from TestTable;
--
ALTERNATION GROUP: V_1_2_CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [TIME]
| +-$query.$col2#5 AS `$col2` [DATETIME]
| +-$query.$col3#6 AS `$col3` [STRING]
| +-$query.$col4#7 AS `$col4` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#4, $col2#5, $col3#6, $col4#7]
    +-expr_list=
    | +-$col1#4 :=
    | | +-Cast(STRING -> TIME)
    | |   +-GetProtoField
    | |     +-type=STRING
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=string_val
    | |     +-default_value="default_name"
    | +-$col2#5 :=
    | | +-Cast(STRING -> DATETIME)
    | |   +-GetProtoField
    | |     +-type=STRING
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=string_val
    | |     +-default_value="default_name"
    | +-$col3#6 :=
    | | +-Cast(TIME -> STRING)
    | |   +-Cast(STRING -> TIME)
    | |     +-GetProtoField
    | |       +-type=STRING
    | |       +-expr=
    | |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |       +-field_descriptor=string_val
    | |       +-default_value="default_name"
    | +-$col4#7 :=
    |   +-Cast(DATETIME -> STRING)
    |     +-Cast(STRING -> DATETIME)
    |       +-GetProtoField
    |         +-type=STRING
    |         +-expr=
    |         | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |         +-field_descriptor=string_val
    |         +-default_value="default_name"
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: TIME [at 1:39]
select cast(KitchenSink.string_val as TIME),
                                      ^

==

[language_features={{GEOGRAPHY|}}]
select cast(null as Geography)
--
ALTERNATION GROUP: GEOGRAPHY
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [GEOGRAPHY]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=GEOGRAPHY, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: Geography [at 1:21]
select cast(null as Geography)
                    ^

==

select cast([] as {{ARRAY<BOOL>|ARRAY<INT32>|ARRAY<INT64>|ARRAY<UINT32>|ARRAY<UINT64>|ARRAY<FLOAT>|ARRAY<FLOAT32>|ARRAY<DOUBLE>|ARRAY<FLOAT64>|ARRAY<STRING>}})
--
ALTERNATION GROUP: ARRAY<BOOL>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<BOOL>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ARRAY<INT32>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT32>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ARRAY<INT64>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ARRAY<UINT32>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<UINT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<UINT32>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ARRAY<UINT64>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<UINT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<UINT64>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    ARRAY<FLOAT>
    ARRAY<FLOAT32>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<FLOAT>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<FLOAT>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    ARRAY<DOUBLE>
    ARRAY<FLOAT64>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<DOUBLE>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ARRAY<STRING>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<STRING>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast([] as {{int32|int64|string}})
--
ALTERNATION GROUP: int32
--
ERROR: Invalid cast from ARRAY<INT64> to INT32 [at 1:13]
select cast([] as int32)
            ^
--
ALTERNATION GROUP: int64
--
ERROR: Invalid cast from ARRAY<INT64> to INT64 [at 1:13]
select cast([] as int64)
            ^
--
ALTERNATION GROUP: string
--
ERROR: Invalid cast from ARRAY<INT64> to STRING [at 1:13]
select cast([] as string)
            ^
==

[language_features={{V_1_1_CAST_DIFFERENT_ARRAY_TYPES|}}]
select cast(ARRAY<int32>[] as {{ARRAY<int64>|ARRAY<int32>|ARRAY<string>}})
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<int64>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<int32>
    ARRAY<int32>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT32>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<string>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<STRING>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ARRAY<int64>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT32> to ARRAY<INT64> [at 1:13]
select cast(ARRAY<int32>[] as ARRAY<int64>)
            ^
--
ALTERNATION GROUP: ARRAY<string>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT32> to ARRAY<STRING> [at 1:13]
select cast(ARRAY<int32>[] as ARRAY<string>)
            ^
==

[language_features={{V_1_1_CAST_DIFFERENT_ARRAY_TYPES|}}]
select cast(cast([] as ARRAY<INT32>) as {{ARRAY<INT32>|ARRAY<INT64>}})
--
ALTERNATION GROUPS:
    V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<INT32>
    ARRAY<INT32>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT32>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,ARRAY<INT64>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ARRAY<INT64>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT32> to ARRAY<INT64> [at 1:13]
select cast(cast([] as ARRAY<INT32>) as ARRAY<INT64>)
            ^
==

select cast({{[]|ARRAY<BOOL>[]|[TRUE, FALSE]}}
    as ARRAY<zetasql_test__.TestEnum>)
--
ALTERNATION GROUP: []
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<ENUM<zetasql_test__.TestEnum>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<ENUM<zetasql_test__.TestEnum>>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ARRAY<BOOL>[]
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<BOOL> to ARRAY<zetasql_test__.TestEnum> [at 1:13]
select cast(ARRAY<BOOL>[]
            ^
--
ALTERNATION GROUP: [TRUE, FALSE]
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<BOOL> to ARRAY<zetasql_test__.TestEnum> [at 1:13]
select cast([TRUE, FALSE]
            ^
==

[language_features={{V_1_1_CAST_DIFFERENT_ARRAY_TYPES|}}]
select cast(ARRAY<INT64>[-2147483648, 2147483647] as ARRAY<INT32>)
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT32>, value=[-2147483648, 2147483647], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT64> to ARRAY<INT32> [at 1:13]
select cast(ARRAY<INT64>[-2147483648, 2147483647] as ARRAY<INT32>)
            ^
==

[language_features={{V_1_1_CAST_DIFFERENT_ARRAY_TYPES|}}]
select safe_cast(ARRAY<INT64>[-2147483648, 2147483647] as ARRAY<INT32>)
--

ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT32>, value=[-2147483648, 2147483647], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT64> to ARRAY<INT32> [at 1:18]
select safe_cast(ARRAY<INT64>[-2147483648, 2147483647] as ARRAY<INT32>)
                 ^
==

[language_features={{V_1_1_CAST_DIFFERENT_ARRAY_TYPES|}}]
select cast(ARRAY<INT64>[{{-21474836480|21474836470}}] as ARRAY<INT32>)
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,-21474836480
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(ARRAY<INT64> -> ARRAY<INT32>)
    |     +-Literal(type=ARRAY<INT64>, value=[-21474836480], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,21474836470
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(ARRAY<INT64> -> ARRAY<INT32>)
    |     +-Literal(type=ARRAY<INT64>, value=[21474836470], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: -21474836480
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT64> to ARRAY<INT32> [at 1:13]
select cast(ARRAY<INT64>[-21474836480] as ARRAY<INT32>)
            ^
--
ALTERNATION GROUP: 21474836470
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT64> to ARRAY<INT32> [at 1:13]
select cast(ARRAY<INT64>[21474836470] as ARRAY<INT32>)
            ^
==

[language_features={{V_1_1_CAST_DIFFERENT_ARRAY_TYPES|}}]
select safe_cast(ARRAY<INT64>[{{-21474836480|21474836470}}] as ARRAY<INT32>)
--

ALTERNATION GROUPS:
    V_1_1_CAST_DIFFERENT_ARRAY_TYPES,-21474836480
    V_1_1_CAST_DIFFERENT_ARRAY_TYPES,21474836470
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT32>, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: -21474836480
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT64> to ARRAY<INT32> [at 1:18]
select safe_cast(ARRAY<INT64>[-21474836480] as ARRAY<INT32>)
                 ^
--
ALTERNATION GROUP: 21474836470
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT64> to ARRAY<INT32> [at 1:18]
select safe_cast(ARRAY<INT64>[21474836470] as ARRAY<INT32>)
                 ^
==

select {{cast|safe_cast}}("abc" as INT64)
--
ALTERNATION GROUP: cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> INT64)
    |     +-Literal(type=STRING, value="abc")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: safe_cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features={{V_1_1_CAST_DIFFERENT_ARRAY_TYPES|}}]
select {{cast|safe_cast}}(["100", "abc"] as ARRAY<INT64>);
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(ARRAY<STRING> -> ARRAY<INT64>)
    |     +-Literal(type=ARRAY<STRING>, value=["100", "abc"])
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,safe_cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: cast
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<STRING> to ARRAY<INT64> [at 1:13]
select cast(["100", "abc"] as ARRAY<INT64>);
            ^
--
ALTERNATION GROUP: safe_cast
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<STRING> to ARRAY<INT64> [at 1:18]
select safe_cast(["100", "abc"] as ARRAY<INT64>);
                 ^
==

select cast('0x10' AS {{INT32|UINT32|INT64|UINT64}})
--
ALTERNATION GROUP: INT32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT32, value=16, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: UINT32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [UINT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=UINT32, value=16, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: INT64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=16, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: UINT64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=UINT64, value=16, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select cast('-0x100' AS {{INT32|UINT32|INT64|UINT64}})
--
ALTERNATION GROUP: INT32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT32, value=-256, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: UINT32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [UINT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> UINT32)
    |     +-Literal(type=STRING, value="-0x100")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: INT64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=-256, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: UINT64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> UINT64)
    |     +-Literal(type=STRING, value="-0x100")
    +-input_scan=
      +-SingleRowScan
==

select cast('- 0x10' AS INT32)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> INT32)
    |     +-Literal(type=STRING, value="- 0x10")
    +-input_scan=
      +-SingleRowScan
==

select {{cast('010' AS INT32)|cast('-010' AS INT32)}}
--
ALTERNATION GROUP: cast('010' AS INT32)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT32, value=10, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: cast('-010' AS INT32)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT32, value=-10, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

'table' is not a valid target type for cast functions.
select (1, "aaa"),
       cast((1,"aaa") as table<int32, string>)
--
ERROR: Syntax error: Unexpected string literal 'table' [at 1:1]
'table' is not a valid target type for cast functions.
^
==

[language_features={{NUMERIC_TYPE|}}]
select cast(1 AS NUMERIC)
--
ALTERNATION GROUP: NUMERIC_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=NUMERIC, value=1, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: NUMERIC [at 1:18]
select cast(1 AS NUMERIC)
                 ^
==

[language_features=NUMERIC_TYPE]
select cast(cast(1 as int32) as NUMERIC),
       cast(2 as NUMERIC),
       cast(cast(3 as uint32) as NUMERIC),
       cast(cast(4 as uint64) as NUMERIC),
       cast(cast(5 as NUMERIC) as NUMERIC),
       cast(cast(1.5 as float) as NUMERIC),
       cast(2.5 as NUMERIC),
       cast("123.4" as NUMERIC)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [NUMERIC]
| +-$query.$col2#2 AS `$col2` [NUMERIC]
| +-$query.$col3#3 AS `$col3` [NUMERIC]
| +-$query.$col4#4 AS `$col4` [NUMERIC]
| +-$query.$col5#5 AS `$col5` [NUMERIC]
| +-$query.$col6#6 AS `$col6` [NUMERIC]
| +-$query.$col7#7 AS `$col7` [NUMERIC]
| +-$query.$col8#8 AS `$col8` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8]
    +-expr_list=
    | +-$col1#1 := Literal(type=NUMERIC, value=1, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=NUMERIC, value=2, has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=NUMERIC, value=3, has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=NUMERIC, value=4, has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=NUMERIC, value=5, has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=NUMERIC, value=1.5, has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=NUMERIC, value=2.5, has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=NUMERIC, value=123.4, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NUMERIC_TYPE]
select cast("abc" as NUMERIC)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> NUMERIC)
    |     +-Literal(type=STRING, value="abc")
    +-input_scan=
      +-SingleRowScan
==

[language_features=NUMERIC_TYPE]
select cast("99999999999999999999999999999.999999999" as NUMERIC),
       cast("-99999999999999999999999999999.999999999" as NUMERIC)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [NUMERIC]
| +-$query.$col2#2 AS `$col2` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=NUMERIC, value=99999999999999999999999999999.999999999, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=NUMERIC, value=-99999999999999999999999999999.999999999, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features={{NUMERIC_TYPE,V_1_3_DECIMAL_ALIAS|NUMERIC_TYPE|V_1_3_DECIMAL_ALIAS|}}]
select cast("99999999999999999999999999999.999999999" as DECIMAL),
       cast("-99999999999999999999999999999.999999999" as DECIMAL)
--
ALTERNATION GROUP: NUMERIC_TYPE,V_1_3_DECIMAL_ALIAS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [NUMERIC]
| +-$query.$col2#2 AS `$col2` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=NUMERIC, value=99999999999999999999999999999.999999999, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=NUMERIC, value=-99999999999999999999999999999.999999999, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    NUMERIC_TYPE
    V_1_3_DECIMAL_ALIAS
    <empty>
--
ERROR: Type not found: DECIMAL [at 1:58]
select cast("99999999999999999999999999999.999999999" as DECIMAL),
                                                         ^
==

select cast("123" as SMALLINT)
--
ERROR: Type not found: SMALLINT [at 1:22]
select cast("123" as SMALLINT)
                     ^
==

select cast("123" as BIGINT)
--
ERROR: Type not found: BIGINT [at 1:22]
select cast("123" as BIGINT)
                     ^
==

select cast("123" as INT)
--
ERROR: Type not found: INT [at 1:22]
select cast("123" as INT)
                     ^
==

select cast("123" as INTEGER)
--
ERROR: Type not found: INTEGER [at 1:22]
select cast("123" as INTEGER)
                     ^
==

select cast("123" as INT64AliasType)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=123, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features={{BIGNUMERIC_TYPE,V_1_3_DECIMAL_ALIAS|BIGNUMERIC_TYPE|V_1_3_DECIMAL_ALIAS|}}]
select cast("1e-38" as BIGDECIMAL),
       cast("-1e-38" as BIGDECIMAL)
--
ALTERNATION GROUP: BIGNUMERIC_TYPE,V_1_3_DECIMAL_ALIAS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BIGNUMERIC]
| +-$query.$col2#2 AS `$col2` [BIGNUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=BIGNUMERIC, value=0.00000000000000000000000000000000000001, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=BIGNUMERIC, value=-0.00000000000000000000000000000000000001, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    BIGNUMERIC_TYPE
    V_1_3_DECIMAL_ALIAS
    <empty>
--
ERROR: Type not found: BIGDECIMAL [at 1:24]
select cast("1e-38" as BIGDECIMAL),
                       ^
==

[language_features=NUMERIC_TYPE]
select cast(numeric_col as `zetasql_test__.TestEnum`)
from NumericTypeTable
--
ERROR: Invalid cast from NUMERIC to zetasql_test__.TestEnum [at 1:13]
select cast(numeric_col as `zetasql_test__.TestEnum`)
            ^
==

[language_features=NUMERIC_TYPE]
select cast(numeric_col as BOOL)
from NumericTypeTable
--
ERROR: Invalid cast from NUMERIC to BOOL [at 1:13]
select cast(numeric_col as BOOL)
            ^
==

[language_features=NUMERIC_TYPE]
select cast(numeric_col as INT32),
       cast(numeric_col as INT64),
       cast(numeric_col as UINT32),
       cast(numeric_col as UINT64),
       cast(numeric_col as NUMERIC),
       cast(numeric_col as FLOAT),
       cast(numeric_col as DOUBLE),
       cast(numeric_col as STRING)
from NumericTypeTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [INT32]
| +-$query.$col2#3 AS `$col2` [INT64]
| +-$query.$col3#4 AS `$col3` [UINT32]
| +-$query.$col4#5 AS `$col4` [UINT64]
| +-NumericTypeTable.numeric_col#1 AS `$col5` [NUMERIC]
| +-$query.$col6#6 AS `$col6` [FLOAT]
| +-$query.$col7#7 AS `$col7` [DOUBLE]
| +-$query.$col8#8 AS `$col8` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2, $query.$col2#3, $query.$col3#4, $query.$col4#5, NumericTypeTable.numeric_col#1, $query.$col6#6, $query.$col7#7, $query.$col8#8]
    +-expr_list=
    | +-$col1#2 :=
    | | +-Cast(NUMERIC -> INT32)
    | |   +-ColumnRef(type=NUMERIC, column=NumericTypeTable.numeric_col#1)
    | +-$col2#3 :=
    | | +-Cast(NUMERIC -> INT64)
    | |   +-ColumnRef(type=NUMERIC, column=NumericTypeTable.numeric_col#1)
    | +-$col3#4 :=
    | | +-Cast(NUMERIC -> UINT32)
    | |   +-ColumnRef(type=NUMERIC, column=NumericTypeTable.numeric_col#1)
    | +-$col4#5 :=
    | | +-Cast(NUMERIC -> UINT64)
    | |   +-ColumnRef(type=NUMERIC, column=NumericTypeTable.numeric_col#1)
    | +-$col6#6 :=
    | | +-Cast(NUMERIC -> FLOAT)
    | |   +-ColumnRef(type=NUMERIC, column=NumericTypeTable.numeric_col#1)
    | +-$col7#7 :=
    | | +-Cast(NUMERIC -> DOUBLE)
    | |   +-ColumnRef(type=NUMERIC, column=NumericTypeTable.numeric_col#1)
    | +-$col8#8 :=
    |   +-Cast(NUMERIC -> STRING)
    |     +-ColumnRef(type=NUMERIC, column=NumericTypeTable.numeric_col#1)
    +-input_scan=
      +-TableScan(column_list=[NumericTypeTable.numeric_col#1], table=NumericTypeTable, column_index_list=[0])
==

[language_features={{BIGNUMERIC_TYPE,NUMERIC_TYPE|NUMERIC_TYPE|}}]
select cast(numeric_col as BIGNUMERIC)
from NumericTypeTable
--
ALTERNATION GROUP: BIGNUMERIC_TYPE,NUMERIC_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [BIGNUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-Cast(NUMERIC -> BIGNUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=NumericTypeTable.numeric_col#1)
    +-input_scan=
      +-TableScan(column_list=[NumericTypeTable.numeric_col#1], table=NumericTypeTable, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE
    <empty>
--
ERROR: Type not found: BIGNUMERIC [at 1:28]
select cast(numeric_col as BIGNUMERIC)
                           ^
==

[language_features=NUMERIC_TYPE]
select cast(KitchenSink.test_enum AS NUMERIC) from TestTable;
--
ERROR: Invalid cast from zetasql_test__.TestEnum to NUMERIC [at 1:13]
select cast(KitchenSink.test_enum AS NUMERIC) from TestTable;
            ^
==

[language_features=NUMERIC_TYPE]
select cast(`bool` as NUMERIC) from SimpleTypes;
--
ERROR: Invalid cast from BOOL to NUMERIC [at 1:13]
select cast(`bool` as NUMERIC) from SimpleTypes;
            ^
==

[language_features={{BIGNUMERIC_TYPE|}}]
select cast(1 AS BIGNUMERIC)
--
ALTERNATION GROUP: BIGNUMERIC_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BIGNUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=BIGNUMERIC, value=1, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: BIGNUMERIC [at 1:18]
select cast(1 AS BIGNUMERIC)
                 ^
==

[language_features={{BIGNUMERIC_TYPE,NUMERIC_TYPE|NUMERIC_TYPE}}]
select cast(cast(1 as int32) as BIGNUMERIC),
       cast(2 as BIGNUMERIC),
       cast(cast(3 as uint32) as BIGNUMERIC),
       cast(cast(4 as uint64) as BIGNUMERIC),
       cast(cast(5 as NUMERIC) as BIGNUMERIC),
       cast(cast(6 as BIGNUMERIC) as BIGNUMERIC),
       cast(cast(1.5 as float) as BIGNUMERIC),
       cast(2.5 as BIGNUMERIC),
       cast("123.4" as BIGNUMERIC)
--
ALTERNATION GROUP: BIGNUMERIC_TYPE,NUMERIC_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BIGNUMERIC]
| +-$query.$col2#2 AS `$col2` [BIGNUMERIC]
| +-$query.$col3#3 AS `$col3` [BIGNUMERIC]
| +-$query.$col4#4 AS `$col4` [BIGNUMERIC]
| +-$query.$col5#5 AS `$col5` [BIGNUMERIC]
| +-$query.$col6#6 AS `$col6` [BIGNUMERIC]
| +-$query.$col7#7 AS `$col7` [BIGNUMERIC]
| +-$query.$col8#8 AS `$col8` [BIGNUMERIC]
| +-$query.$col9#9 AS `$col9` [BIGNUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9]
    +-expr_list=
    | +-$col1#1 := Literal(type=BIGNUMERIC, value=1, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=BIGNUMERIC, value=2, has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=BIGNUMERIC, value=3, has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=BIGNUMERIC, value=4, has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=BIGNUMERIC, value=5, has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=BIGNUMERIC, value=6, has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=BIGNUMERIC, value=1.5, has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=BIGNUMERIC, value=2.5, has_explicit_type=TRUE)
    | +-$col9#9 := Literal(type=BIGNUMERIC, value=123.4, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: NUMERIC_TYPE
--
ERROR: Type not found: BIGNUMERIC [at 1:33]
select cast(cast(1 as int32) as BIGNUMERIC),
                                ^
==

[language_features=BIGNUMERIC_TYPE]
select cast("abc" as BIGNUMERIC)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BIGNUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRING -> BIGNUMERIC)
    |     +-Literal(type=STRING, value="abc")
    +-input_scan=
      +-SingleRowScan
==

[language_features=BIGNUMERIC_TYPE]
select cast("578960446186580977117854925043439539266.34992332820282019728792003956564819967" as BIGNUMERIC),
       cast("-578960446186580977117854925043439539266.34992332820282019728792003956564819968" as BIGNUMERIC)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BIGNUMERIC]
| +-$query.$col2#2 AS `$col2` [BIGNUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=BIGNUMERIC, value=578960446186580977117854925043439539266.34992332820282019728792003956564819967, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=BIGNUMERIC, value=-578960446186580977117854925043439539266.34992332820282019728792003956564819968, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features=BIGNUMERIC_TYPE]
select cast(bignumeric_col as `zetasql_test__.TestEnum`)
from BigNumericTypeTable
--
ERROR: Invalid cast from BIGNUMERIC to zetasql_test__.TestEnum [at 1:13]
select cast(bignumeric_col as `zetasql_test__.TestEnum`)
            ^
==

[language_features=BIGNUMERIC_TYPE]
select cast(bignumeric_col as BOOL)
from BigNumericTypeTable
--
ERROR: Invalid cast from BIGNUMERIC to BOOL [at 1:13]
select cast(bignumeric_col as BOOL)
            ^
==

[language_features={{BIGNUMERIC_TYPE,NUMERIC_TYPE|NUMERIC_TYPE}}]
select cast(bignumeric_col as INT32),
       cast(bignumeric_col as INT64),
       cast(bignumeric_col as UINT32),
       cast(bignumeric_col as UINT64),
       cast(bignumeric_col as NUMERIC),
       cast(bignumeric_col as BIGNUMERIC),
       cast(bignumeric_col as FLOAT),
       cast(bignumeric_col as DOUBLE),
       cast(bignumeric_col as STRING)
from BigNumericTypeTable
--
ALTERNATION GROUP: BIGNUMERIC_TYPE,NUMERIC_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [INT32]
| +-$query.$col2#3 AS `$col2` [INT64]
| +-$query.$col3#4 AS `$col3` [UINT32]
| +-$query.$col4#5 AS `$col4` [UINT64]
| +-$query.$col5#6 AS `$col5` [NUMERIC]
| +-BigNumericTypeTable.bignumeric_col#1 AS `$col6` [BIGNUMERIC]
| +-$query.$col7#7 AS `$col7` [FLOAT]
| +-$query.$col8#8 AS `$col8` [DOUBLE]
| +-$query.$col9#9 AS `$col9` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2, $query.$col2#3, $query.$col3#4, $query.$col4#5, $query.$col5#6, BigNumericTypeTable.bignumeric_col#1, $query.$col7#7, $query.$col8#8, $query.$col9#9]
    +-expr_list=
    | +-$col1#2 :=
    | | +-Cast(BIGNUMERIC -> INT32)
    | |   +-ColumnRef(type=BIGNUMERIC, column=BigNumericTypeTable.bignumeric_col#1)
    | +-$col2#3 :=
    | | +-Cast(BIGNUMERIC -> INT64)
    | |   +-ColumnRef(type=BIGNUMERIC, column=BigNumericTypeTable.bignumeric_col#1)
    | +-$col3#4 :=
    | | +-Cast(BIGNUMERIC -> UINT32)
    | |   +-ColumnRef(type=BIGNUMERIC, column=BigNumericTypeTable.bignumeric_col#1)
    | +-$col4#5 :=
    | | +-Cast(BIGNUMERIC -> UINT64)
    | |   +-ColumnRef(type=BIGNUMERIC, column=BigNumericTypeTable.bignumeric_col#1)
    | +-$col5#6 :=
    | | +-Cast(BIGNUMERIC -> NUMERIC)
    | |   +-ColumnRef(type=BIGNUMERIC, column=BigNumericTypeTable.bignumeric_col#1)
    | +-$col7#7 :=
    | | +-Cast(BIGNUMERIC -> FLOAT)
    | |   +-ColumnRef(type=BIGNUMERIC, column=BigNumericTypeTable.bignumeric_col#1)
    | +-$col8#8 :=
    | | +-Cast(BIGNUMERIC -> DOUBLE)
    | |   +-ColumnRef(type=BIGNUMERIC, column=BigNumericTypeTable.bignumeric_col#1)
    | +-$col9#9 :=
    |   +-Cast(BIGNUMERIC -> STRING)
    |     +-ColumnRef(type=BIGNUMERIC, column=BigNumericTypeTable.bignumeric_col#1)
    +-input_scan=
      +-TableScan(column_list=[BigNumericTypeTable.bignumeric_col#1], table=BigNumericTypeTable, column_index_list=[0])
--
ALTERNATION GROUP: NUMERIC_TYPE
--
ERROR: Type not found: BIGNUMERIC [at 6:31]
       cast(bignumeric_col as BIGNUMERIC),
                              ^
==

[language_features=BIGNUMERIC_TYPE]
select cast(KitchenSink.test_enum AS BIGNUMERIC) from TestTable;
--
ERROR: Invalid cast from zetasql_test__.TestEnum to BIGNUMERIC [at 1:13]
select cast(KitchenSink.test_enum AS BIGNUMERIC) from TestTable;
            ^
==

==

# Casts from BOOL to JSON are invalid.
[language_features={{JSON_TYPE|}}]
select cast(false as json);
--
ALTERNATION GROUP: JSON_TYPE
--
ERROR: Invalid cast from BOOL to JSON [at 1:13]
select cast(false as json);
            ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Type not found: json [at 1:22]
select cast(false as json);
                     ^
==

# Casts from INT64 to JSON are invalid.
[language_features=JSON_TYPE]
select cast(1 as json);
--
ERROR: Invalid cast from INT64 to JSON [at 1:13]
select cast(1 as json);
            ^
==

# Casts from INT32 to JSON are invalid.
[language_features=JSON_TYPE]
select cast(cast(1 as int32) as json);
--
ERROR: Invalid cast from INT32 to JSON [at 1:13]
select cast(cast(1 as int32) as json);
            ^
==

# Casts from DOUBLE to JSON are invalid.
[language_features=JSON_TYPE]
select cast(1.0 as json);
--
ERROR: Invalid cast from DOUBLE to JSON [at 1:13]
select cast(1.0 as json);
            ^
==

# Casts from TIMESTAMP to JSON are invalid.
[language_features=JSON_TYPE]
select cast(TIMESTAMP '2012-02-29 01:23:45' as json);
--
ERROR: Invalid cast from TIMESTAMP to JSON [at 1:13]
select cast(TIMESTAMP '2012-02-29 01:23:45' as json);
            ^
==

# Casts from DATE to JSON are invalid.
[language_features=JSON_TYPE]
select cast(date '2014-01-01' as json);
--
ERROR: Invalid cast from DATE to JSON [at 1:13]
select cast(date '2014-01-01' as json);
            ^
==

[language_features=JSON_TYPE]
select cast(JSON '1' as STRING)
--
ERROR: Invalid cast from JSON to STRING [at 1:13]
select cast(JSON '1' as STRING)
            ^
==

[language_features=JSON_TYPE]
select cast("str" as JSON)
--
ERROR: Invalid cast from STRING to JSON [at 1:13]
select cast("str" as JSON)
            ^
==

[language_features=JSON_TYPE]
select cast(json_col as JSON)
from JSONTable
--
QueryStmt
+-output_column_list=
| +-JSONTable.json_col#1 AS `$col1` [JSON]
+-query=
  +-ProjectScan
    +-column_list=[JSONTable.json_col#1]
    +-input_scan=
      +-TableScan(column_list=[JSONTable.json_col#1], table=JSONTable, column_index_list=[0])

==

[language_features=JSON_TYPE,JSON_NO_VALIDATION]
select cast(json_col as JSON)
from JSONTable
--
QueryStmt
+-output_column_list=
| +-JSONTable.json_col#1 AS `$col1` [JSON]
+-query=
  +-ProjectScan
    +-column_list=[JSONTable.json_col#1]
    +-input_scan=
      +-TableScan(column_list=[JSONTable.json_col#1], table=JSONTable, column_index_list=[0])

==

# Casting from JSON to STRING is invalid
[language_features=JSON_TYPE]
select cast(json_col as STRING) FROM JSONTable;
--
ERROR: Invalid cast from JSON to STRING [at 1:13]
select cast(json_col as STRING) FROM JSONTable;
            ^
==

# Casting from JSON to STRING is invalid
[language_features=JSON_TYPE]
select cast(JSON '10' as STRING);
--
ERROR: Invalid cast from JSON to STRING [at 1:13]
select cast(JSON '10' as STRING);
            ^
==

# Casting from enum to bool is invalid.
select {{safe_|}}cast(cast(null as zetasql_test__.TestEnum) as bool);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from zetasql_test__.TestEnum to BOOL [at 1:18]
select safe_cast(cast(null as zetasql_test__.TestEnum) as bool);
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from zetasql_test__.TestEnum to BOOL [at 1:13]
select cast(cast(null as zetasql_test__.TestEnum) as bool);
            ^
==

# Casting from an enum to a different enum is invalid.
select {{safe_|}}cast(cast(null as zetasql_test__.TestEnum) as
                     zetasql_test__.AnotherTestEnum);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from zetasql_test__.TestEnum to zetasql_test__.AnotherTestEnum [at 1:18]
select safe_cast(cast(null as zetasql_test__.TestEnum) as
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from zetasql_test__.TestEnum to zetasql_test__.AnotherTestEnum [at 1:13]
select cast(cast(null as zetasql_test__.TestEnum) as
            ^
==

# Casting from enum to array is invalid.
select {{safe_|}}cast(cast(null as zetasql_test__.TestEnum) as array<int64>);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from zetasql_test__.TestEnum to ARRAY<INT64> [at 1:18]
select safe_cast(cast(null as zetasql_test__.TestEnum) as array<int64>);
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from zetasql_test__.TestEnum to ARRAY<INT64> [at 1:13]
select cast(cast(null as zetasql_test__.TestEnum) as array<int64>);
            ^
==

# Casting from array to enum is invalid.
select {{safe_|}}cast([1] as zetasql_test__.TestEnum);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from ARRAY<INT64> to zetasql_test__.TestEnum [at 1:18]
select safe_cast([1] as zetasql_test__.TestEnum);
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from ARRAY<INT64> to zetasql_test__.TestEnum [at 1:13]
select cast([1] as zetasql_test__.TestEnum);
            ^
==

# Casting from array to struct is invalid.
select {{safe_|}}cast([1] as struct<a int64>);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from ARRAY<INT64> to STRUCT<a INT64> [at 1:18]
select safe_cast([1] as struct<a int64>);
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from ARRAY<INT64> to STRUCT<a INT64> [at 1:13]
select cast([1] as struct<a int64>);
            ^
==

# Casting from STRUCT to non-STRUCT is invalid.
select {{safe_|}}cast(struct<a int64>(1) as int64);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from STRUCT<a INT64> to INT64 [at 1:18]
select safe_cast(struct<a int64>(1) as int64);
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from STRUCT<a INT64> to INT64 [at 1:13]
select cast(struct<a int64>(1) as int64);
            ^
==

select {{safe_|}}cast(cast(NULL as struct<a int64>) as int64);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from STRUCT<a INT64> to INT64 [at 1:18]
select safe_cast(cast(NULL as struct<a int64>) as int64);
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from STRUCT<a INT64> to INT64 [at 1:13]
select cast(cast(NULL as struct<a int64>) as int64);
            ^
==

# Casting from STRUCT to incompatible non-STRUCT is invalid.
select {{safe_|}}cast(struct<a int64>(1) as struct<a int64, b int64>);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from STRUCT<a INT64> to STRUCT<a INT64, b INT64> [at 1:18]
select safe_cast(struct<a int64>(1) as struct<a int64, b int64>);
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from STRUCT<a INT64> to STRUCT<a INT64, b INT64> [at 1:13]
select cast(struct<a int64>(1) as struct<a int64, b int64>);
            ^
==

select {{safe_|}}cast(cast(NULL as struct<a int64>) as struct<a int64, b int64>);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from STRUCT<a INT64> to STRUCT<a INT64, b INT64> [at 1:18]
select safe_cast(cast(NULL as struct<a int64>) as struct<a int64, b int64>);
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from STRUCT<a INT64> to STRUCT<a INT64, b INT64> [at 1:13]
select cast(cast(NULL as struct<a int64>) as struct<a int64, b int64>);
            ^
==

select {{safe_|}}cast(cast(NULL as struct<a int64>) as struct<a bytes>);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from STRUCT<a INT64> to STRUCT<a BYTES> [at 1:18]
select safe_cast(cast(NULL as struct<a int64>) as struct<a bytes>);
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from STRUCT<a INT64> to STRUCT<a BYTES> [at 1:13]
select cast(cast(NULL as struct<a int64>) as struct<a bytes>);
            ^
==

# Casting from STRUCT to ENUM is invalid.
select {{safe_|}}cast(struct<a int64>(1) as zetasql_test__.TestEnum);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from STRUCT<a INT64> to zetasql_test__.TestEnum [at 1:18]
select safe_cast(struct<a int64>(1) as zetasql_test__.TestEnum);
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from STRUCT<a INT64> to zetasql_test__.TestEnum [at 1:13]
select cast(struct<a int64>(1) as zetasql_test__.TestEnum);
            ^
==

select {{safe_|}}cast(cast(null as struct<a int64>) as zetasql_test__.TestEnum);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from STRUCT<a INT64> to zetasql_test__.TestEnum [at 1:18]
select safe_cast(cast(null as struct<a int64>) as zetasql_test__.TestEnum);
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from STRUCT<a INT64> to zetasql_test__.TestEnum [at 1:13]
select cast(cast(null as struct<a int64>) as zetasql_test__.TestEnum);
            ^
==

# Casting from STRUCT to ARRAY is invalid.
select {{safe_|}}cast(struct<a int64>(1) as array<int64>);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from STRUCT<a INT64> to ARRAY<INT64> [at 1:18]
select safe_cast(struct<a int64>(1) as array<int64>);
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from STRUCT<a INT64> to ARRAY<INT64> [at 1:13]
select cast(struct<a int64>(1) as array<int64>);
            ^
==

select {{safe_|}}cast(cast(null as struct<a int64>) as array<int64>);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from STRUCT<a INT64> to ARRAY<INT64> [at 1:18]
select safe_cast(cast(null as struct<a int64>) as array<int64>);
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from STRUCT<a INT64> to ARRAY<INT64> [at 1:13]
select cast(cast(null as struct<a int64>) as array<int64>);
            ^
==

select {{safe_|}}cast(struct<a string, b bool>("a", NULL) AS
                     struct<a string, b zetasql_test__.TestEnum>);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from STRUCT<a STRING, b BOOL> to STRUCT<a STRING, b zetasql_test__.TestEnum> [at 1:18]
select safe_cast(struct<a string, b bool>("a", NULL) AS
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from STRUCT<a STRING, b BOOL> to STRUCT<a STRING, b zetasql_test__.TestEnum> [at 1:13]
select cast(struct<a string, b bool>("a", NULL) AS
            ^
==

# Casting from proto to different proto is invalid.
select {{safe_|}}cast(cast(NULL as zetasql_test__.KitchenSinkPB) as
                     zetasql_test__.NullableInt);
--
ALTERNATION GROUP: safe_
--
ERROR: Invalid cast from zetasql_test__.KitchenSinkPB to zetasql_test__.NullableInt [at 1:18]
select safe_cast(cast(NULL as zetasql_test__.KitchenSinkPB) as
                 ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid cast from zetasql_test__.KitchenSinkPB to zetasql_test__.NullableInt [at 1:13]
select cast(cast(NULL as zetasql_test__.KitchenSinkPB) as
            ^
==

# Preserve the casts even when the source and target types are the same.
[language_features=NUMERIC_TYPE,BIGNUMERIC_TYPE,JSON_TYPE]
[{{preserve_unnecessary_cast|no_preserve_unnecessary_cast}}]
select
  cast(`int32` as int32),
  cast(`int64` as int64),
  cast(`uint32` as uint32),
  cast(`uint64` as uint64),
  cast(`string` as STRING),
  cast(`bytes` as bytes),
  cast(`bool` as bool),
  cast(`float` as float),
  cast(`double` as double),
  cast(`date` as date),
  cast(`timestamp` as timestamp),
  cast(`numeric` as numeric),
  cast(`bignumeric` as bignumeric),
  cast(`json` as json)
from SimpleTypes;
--
ALTERNATION GROUP: preserve_unnecessary_cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [INT32]
| +-$query.$col2#20 AS `$col2` [INT64]
| +-$query.$col3#21 AS `$col3` [UINT32]
| +-$query.$col4#22 AS `$col4` [UINT64]
| +-$query.$col5#23 AS `$col5` [STRING]
| +-$query.$col6#24 AS `$col6` [BYTES]
| +-$query.$col7#25 AS `$col7` [BOOL]
| +-$query.$col8#26 AS `$col8` [FLOAT]
| +-$query.$col9#27 AS `$col9` [DOUBLE]
| +-$query.$col10#28 AS `$col10` [DATE]
| +-$query.$col11#29 AS `$col11` [TIMESTAMP]
| +-$query.$col12#30 AS `$col12` [NUMERIC]
| +-$query.$col13#31 AS `$col13` [BIGNUMERIC]
| +-$query.$col14#32 AS `$col14` [JSON]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#19, $col2#20, $col3#21, $col4#22, $col5#23, $col6#24, $col7#25, $col8#26, $col9#27, $col10#28, $col11#29, $col12#30, $col13#31, $col14#32]
    +-expr_list=
    | +-$col1#19 :=
    | | +-Cast(INT32 -> INT32)
    | |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    | +-$col2#20 :=
    | | +-Cast(INT64 -> INT64)
    | |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    | +-$col3#21 :=
    | | +-Cast(UINT32 -> UINT32)
    | |   +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    | +-$col4#22 :=
    | | +-Cast(UINT64 -> UINT64)
    | |   +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    | +-$col5#23 :=
    | | +-Cast(STRING -> STRING)
    | |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    | +-$col6#24 :=
    | | +-Cast(BYTES -> BYTES)
    | |   +-ColumnRef(type=BYTES, column=SimpleTypes.bytes#6)
    | +-$col7#25 :=
    | | +-Cast(BOOL -> BOOL)
    | |   +-ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
    | +-$col8#26 :=
    | | +-Cast(FLOAT -> FLOAT)
    | |   +-ColumnRef(type=FLOAT, column=SimpleTypes.float#8)
    | +-$col9#27 :=
    | | +-Cast(DOUBLE -> DOUBLE)
    | |   +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
    | +-$col10#28 :=
    | | +-Cast(DATE -> DATE)
    | |   +-ColumnRef(type=DATE, column=SimpleTypes.date#10)
    | +-$col11#29 :=
    | | +-Cast(TIMESTAMP -> TIMESTAMP)
    | |   +-ColumnRef(type=TIMESTAMP, column=SimpleTypes.timestamp#15)
    | +-$col12#30 :=
    | | +-Cast(NUMERIC -> NUMERIC)
    | |   +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    | +-$col13#31 :=
    | | +-Cast(BIGNUMERIC -> BIGNUMERIC)
    | |   +-ColumnRef(type=BIGNUMERIC, column=SimpleTypes.bignumeric#17)
    | +-$col14#32 :=
    |   +-Cast(JSON -> JSON)
    |     +-ColumnRef(type=JSON, column=SimpleTypes.json#18)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, timestamp#15, numeric#16, bignumeric#17, json#18], table=SimpleTypes, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17])
--
ALTERNATION GROUP: no_preserve_unnecessary_cast
--
QueryStmt
+-output_column_list=
| +-SimpleTypes.int32#1 AS `$col1` [INT32]
| +-SimpleTypes.int64#2 AS `$col2` [INT64]
| +-SimpleTypes.uint32#3 AS `$col3` [UINT32]
| +-SimpleTypes.uint64#4 AS `$col4` [UINT64]
| +-SimpleTypes.string#5 AS `$col5` [STRING]
| +-SimpleTypes.bytes#6 AS `$col6` [BYTES]
| +-SimpleTypes.bool#7 AS `$col7` [BOOL]
| +-SimpleTypes.float#8 AS `$col8` [FLOAT]
| +-SimpleTypes.double#9 AS `$col9` [DOUBLE]
| +-SimpleTypes.date#10 AS `$col10` [DATE]
| +-SimpleTypes.timestamp#15 AS `$col11` [TIMESTAMP]
| +-SimpleTypes.numeric#16 AS `$col12` [NUMERIC]
| +-SimpleTypes.bignumeric#17 AS `$col13` [BIGNUMERIC]
| +-SimpleTypes.json#18 AS `$col14` [JSON]
+-query=
  +-ProjectScan
    +-column_list=SimpleTypes.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, timestamp#15, numeric#16, bignumeric#17, json#18]
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, timestamp#15, numeric#16, bignumeric#17, json#18], table=SimpleTypes, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17])
==

# Preserve the casts even when the source and target types are the same.
[language_features=NUMERIC_TYPE,BIGNUMERIC_TYPE,JSON_TYPE]
[{{preserve_unnecessary_cast|no_preserve_unnecessary_cast}}]
select
  cast(77 as int64),
  cast('string' as STRING),
  cast(b'bytes' as bytes),
  cast(true as bool),
  cast(3.14 as double),
  cast(DATE '2021-12-01' as date),
  cast(TIMESTAMP '2021-12-01 09:00:00' as timestamp),
  cast(NUMERIC '1.23456e05' as numeric),
  cast(BIGNUMERIC '-0.54321' as bignumeric),
  cast(JSON '{"id": 10, "type": "fruit"}' as json)
--
ALTERNATION GROUP: preserve_unnecessary_cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [STRING]
| +-$query.$col3#3 AS `$col3` [BYTES]
| +-$query.$col4#4 AS `$col4` [BOOL]
| +-$query.$col5#5 AS `$col5` [DOUBLE]
| +-$query.$col6#6 AS `$col6` [DATE]
| +-$query.$col7#7 AS `$col7` [TIMESTAMP]
| +-$query.$col8#8 AS `$col8` [NUMERIC]
| +-$query.$col9#9 AS `$col9` [BIGNUMERIC]
| +-$query.$col10#10 AS `$col10` [JSON]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10]
    +-expr_list=
    | +-$col1#1 :=
    | | +-Cast(INT64 -> INT64)
    | |   +-Literal(type=INT64, value=77, has_explicit_type=TRUE)
    | +-$col2#2 :=
    | | +-Cast(STRING -> STRING)
    | |   +-Literal(type=STRING, value="string", has_explicit_type=TRUE)
    | +-$col3#3 :=
    | | +-Cast(BYTES -> BYTES)
    | |   +-Literal(type=BYTES, value=b"bytes", has_explicit_type=TRUE)
    | +-$col4#4 :=
    | | +-Cast(BOOL -> BOOL)
    | |   +-Literal(type=BOOL, value=true, has_explicit_type=TRUE)
    | +-$col5#5 :=
    | | +-Cast(DOUBLE -> DOUBLE)
    | |   +-Literal(type=DOUBLE, value=3.14, has_explicit_type=TRUE)
    | +-$col6#6 :=
    | | +-Cast(DATE -> DATE)
    | |   +-Literal(type=DATE, value=2021-12-01, has_explicit_type=TRUE)
    | +-$col7#7 :=
    | | +-Cast(TIMESTAMP -> TIMESTAMP)
    | |   +-Literal(type=TIMESTAMP, value=2021-12-01 17:00:00+00, has_explicit_type=TRUE)
    | +-$col8#8 :=
    | | +-Cast(NUMERIC -> NUMERIC)
    | |   +-Literal(type=NUMERIC, value=123456, has_explicit_type=TRUE)
    | +-$col9#9 :=
    | | +-Cast(BIGNUMERIC -> BIGNUMERIC)
    | |   +-Literal(type=BIGNUMERIC, value=-0.54321, has_explicit_type=TRUE)
    | +-$col10#10 :=
    |   +-Cast(JSON -> JSON)
    |     +-Literal(type=JSON, value={"id":10,"type":"fruit"}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: no_preserve_unnecessary_cast
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [STRING]
| +-$query.$col3#3 AS `$col3` [BYTES]
| +-$query.$col4#4 AS `$col4` [BOOL]
| +-$query.$col5#5 AS `$col5` [DOUBLE]
| +-$query.$col6#6 AS `$col6` [DATE]
| +-$query.$col7#7 AS `$col7` [TIMESTAMP]
| +-$query.$col8#8 AS `$col8` [NUMERIC]
| +-$query.$col9#9 AS `$col9` [BIGNUMERIC]
| +-$query.$col10#10 AS `$col10` [JSON]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=77, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=STRING, value="string", has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=BYTES, value=b"bytes", has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=BOOL, value=true, has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=DOUBLE, value=3.14, has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=DATE, value=2021-12-01, has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=TIMESTAMP, value=2021-12-01 17:00:00+00, has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=NUMERIC, value=123456, has_explicit_type=TRUE)
    | +-$col9#9 := Literal(type=BIGNUMERIC, value=-0.54321, has_explicit_type=TRUE)
    | +-$col10#10 := Literal(type=JSON, value={"id":10,"type":"fruit"}, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# Nested safe and unsafe casts with protobufs
SELECT {{SAFE_CAST|CAST}}({{SAFE_CAST|CAST}}(NULL AS `zetasql_test__.KitchenSinkPB`) AS `zetasql_test__.KitchenSinkPB`)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=PROTO<zetasql_test__.KitchenSinkPB>, value=NULL, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# NOOP Cast makes the type explicit
select "a", CAST("b" AS STRING);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="a")
    | +-$col2#2 := Literal(type=STRING, value="b", has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==
