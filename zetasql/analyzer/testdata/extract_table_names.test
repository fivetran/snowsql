# This file has tests for ExtractTableNamesFromStatement and
# ExtractTemporalTableReferencesFromStatement.
# While extraction of temporal references is straightforward, some cases
# of table name extraction are tricky.
#
# run_analyzer_test.cc is always checking that the extracted table names match
# what actually shows up in ResolvedTableScan nodes.
#
# For this test, we also use this option to print out the table names,
# and skip printing the resolved AST (for successfully resolved queries).
# This allows us to compare the output more explicitly, and also test cases
# where the query analysis will fail because the tables don't exist.
[default language_features=V_1_1_FOR_SYSTEM_TIME_AS_OF]
[default show_extracted_table_names]
[default show_table_resolution_time]
[default no_show_resolved_ast]
[default no_run_unparser]

select 1 from KeyValue, TestTable
--
Table resolution time:
KeyValue => {
DEFAULT;
}
TestTable => {
DEFAULT;
}

Extracted table names:
KeyValue
TestTable
==

select *
from KeyValue kv1, KeyValue kv2 for system_time as of TIMESTAMP_ADD(CURRENT_TIMESTAMP, INTERVAL 0 DAY)
--
Table resolution time:
KeyValue => {
FunctionCall(ZetaSQL:timestamp_add(TIMESTAMP, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIMESTAMP)
+-FunctionCall(ZetaSQL:current_timestamp() -> TIMESTAMP)
+-Literal(type=INT64, value=0)
+-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY);
DEFAULT;
}

Extracted table names:
KeyValue
==

select (select AS STRUCT 1, (select 2 from TestTable) from KeyValue)
--
Table resolution time:
KeyValue => {
DEFAULT;
}
TestTable => {
DEFAULT;
}

Extracted table names:
KeyValue
TestTable
==

select (select AS STRUCT 1, (select 2 from TestTable) from KeyValue FOR SYSTEM_TIME AS OF CURRENT_TIMESTAMP)
--
Table resolution time:
KeyValue => {
FunctionCall(ZetaSQL:current_timestamp() -> TIMESTAMP);
}
TestTable => {
DEFAULT;
}

Extracted table names:
KeyValue
TestTable
==

select (select AS STRUCT 1, (select 2 from TestTable for system_time as of CURRENT_TIMESTAMP()) from KeyValue)
--
Table resolution time:
KeyValue => {
DEFAULT;
}
TestTable => {
FunctionCall(ZetaSQL:current_timestamp() -> TIMESTAMP);
}

Extracted table names:
KeyValue
TestTable
==

select 0 from TestTable FOR SYSTEM_TIME AS OF CURRENT_TIMESTAMP()
where 1 in (select 1 from TestTable)
group by (select 2 from TestTable FOR SYSTEM_TIME AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL 1 DAY))
order by (select 3 from TestTable)
--
Table resolution time:
TestTable => {
FunctionCall(ZetaSQL:current_timestamp() -> TIMESTAMP);
FunctionCall(ZetaSQL:timestamp_sub(TIMESTAMP, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIMESTAMP)
+-FunctionCall(ZetaSQL:current_timestamp() -> TIMESTAMP)
+-Literal(type=INT64, value=1)
+-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY);
DEFAULT;
}

Extracted table names:
TestTable
==

[parameter_mode=none]
select 0 from TestTable FOR SYSTEM_TIME AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL @test_param_int32 DAY)
--
Table resolution time:
ERROR: generic::invalid_argument: Parameters are not supported [at 1:89]
...AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL @test_param_int32 DAY)
                                                   ^
Extracted table names:
TestTable

ERROR: Parameters are not supported [at 1:89]
...AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL @test_param_int32 DAY)
                                                   ^
==

[parameter_mode=none]
select 0 from TestTable FOR SYSTEM_TIME AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL ? DAY)
--
Table resolution time:
ERROR: generic::invalid_argument: Parameters are not supported [at 1:89]
...AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL ? DAY)
                                                   ^
Extracted table names:
TestTable

ERROR: Parameters are not supported [at 1:89]
...AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL ? DAY)
                                                   ^
==

[parameter_mode=named]
select 0 from TestTable FOR SYSTEM_TIME AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL @test_param_int32 DAY)
--
Table resolution time:
TestTable => {
FunctionCall(ZetaSQL:timestamp_sub(TIMESTAMP, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIMESTAMP)
+-FunctionCall(ZetaSQL:current_timestamp() -> TIMESTAMP)
+-Cast(INT32 -> INT64)
| +-Parameter(type=INT32, name="test_param_int32")
+-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY);
}

Extracted table names:
TestTable
==

[parameter_mode=named]
select 0 from TestTable FOR SYSTEM_TIME AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL ? DAY)
--
Table resolution time:
ERROR: generic::invalid_argument: Positional parameters are not supported [at 1:89]
...AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL ? DAY)
                                                   ^
Extracted table names:
TestTable

ERROR: Positional parameters are not supported [at 1:89]
...AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL ? DAY)
                                                   ^
==

[parameter_mode=none]
select 0 from TestTable FOR SYSTEM_TIME AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL @look_back_days DAY)
--
Table resolution time:
ERROR: generic::invalid_argument: Parameters are not supported [at 1:89]
...AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL @look_back_days DAY)
                                                   ^
Extracted table names:
TestTable

ERROR: Parameters are not supported [at 1:89]
...AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL @look_back_days DAY)
                                                   ^
==

[parameter_mode=positional]
[positional_parameter_types=int32]
select 0 from TestTable FOR SYSTEM_TIME AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL ? DAY)
--
Table resolution time:
TestTable => {
FunctionCall(ZetaSQL:timestamp_sub(TIMESTAMP, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> TIMESTAMP)
+-FunctionCall(ZetaSQL:current_timestamp() -> TIMESTAMP)
+-Cast(INT32 -> INT64)
| +-Parameter(type=INT32, position=1)
+-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY);
}

Extracted table names:
TestTable
==

[parameter_mode=positional]
select 0 from TestTable FOR SYSTEM_TIME AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL @test_param_int32 DAY)
--
Table resolution time:
ERROR: generic::invalid_argument: Named parameters are not supported [at 1:89]
...AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL @test_param_int32 DAY)
                                                   ^
Extracted table names:
TestTable

ERROR: Named parameters are not supported [at 1:89]
...AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL @test_param_int32 DAY)
                                                   ^
==

select 0
from KeyValue
where (select 1 from EnumTable)
group by (select 2 from KeyValue2)
having (select true from SimpleTypes)
order by (select 3 from TestTable)
--
Table resolution time:
EnumTable => {
DEFAULT;
}
KeyValue => {
DEFAULT;
}
KeyValue2 => {
DEFAULT;
}
SimpleTypes => {
DEFAULT;
}
TestTable => {
DEFAULT;
}

Extracted table names:
EnumTable
KeyValue
KeyValue2
SimpleTypes
TestTable

ERROR: WHERE clause should return type BOOL, but returns INT64 [at 3:7]
where (select 1 from EnumTable)
      ^
==

select 1
from KEYVALUE kv, keyvaLUE kv2, KEYvalue kv3
--
Table resolution time:
KEYVALUE => {
DEFAULT;
}
KEYvalue => {
DEFAULT;
}
keyvaLUE => {
DEFAULT;
}

Extracted table names:
KEYVALUE
KEYvalue
keyvaLUE
==

select 1
from KEYVALUE kv for system_time as of cast('2017-01-01' as TIMESTAMP),
     keyvaLUE kv2 for system_time as of cast('2017-01-02' as TIMESTAMP),
     KEYvalue kv3 for system_time as of cast('2017-01-03' as TIMESTAMP)
--
Table resolution time:
KEYVALUE => {
Literal(type=TIMESTAMP, value=2017-01-01 08:00:00+00, has_explicit_type=TRUE);
}
KEYvalue => {
Literal(type=TIMESTAMP, value=2017-01-03 08:00:00+00, has_explicit_type=TRUE);
}
keyvaLUE => {
Literal(type=TIMESTAMP, value=2017-01-02 08:00:00+00, has_explicit_type=TRUE);
}

Extracted table names:
KEYVALUE
KEYvalue
keyvaLUE
==

# The aliases are resolved case insensitively, so we still only
# see one table name here.
select (select count(*) from KEYvalue.s)
from KeyValue, KeyValue.x, KEYVALUE.y, keyvalue.z, Y.yyy.zzz
--
Table resolution time:
KeyValue => {
DEFAULT;
}

Extracted table names:
KeyValue

ERROR: Name x not found inside KeyValue [at 2:25]
from KeyValue, KeyValue.x, KEYVALUE.y, keyvalue.z, Y.yyy.zzz
                        ^
==

with w1 as (select 1 from KeyValue),
     w2 as (select 2 a),
     w3 as (select * from w2)
select 1 from w1, w2, w3
--
Table resolution time:
KeyValue => {
DEFAULT;
}

Extracted table names:
KeyValue
==

with KeyValue as (select 1 a)
select 1 from KeyValue;
--
Table resolution time:

Extracted table names:
==

select 1 from KeyValue, KeyValue kv2
--
Table resolution time:
KeyValue => {
DEFAULT;
}

Extracted table names:
KeyValue
==

select * from T1, T2.t3, t1.t4, t3.t4, t4.t5, t4
--
Table resolution time:
T1 => {
DEFAULT;
}
T2.t3 => {
DEFAULT;
}
t4 => {
DEFAULT;
}

Extracted table names:
T1
T2.t3
t4

ERROR: Table not found: T1 [at 1:15]
select * from T1, T2.t3, t1.t4, t3.t4, t4.t5, t4
              ^
==

select * from MyCatalog.MyTable, Catalog.MyTable t2, MyTable.xxx, t2.yyy, xxx, yyy.abc
--
Table resolution time:
Catalog.MyTable => {
DEFAULT;
}
MyCatalog.MyTable => {
DEFAULT;
}
xxx => {
DEFAULT;
}

Extracted table names:
Catalog.MyTable
MyCatalog.MyTable
xxx

ERROR: Table not found: MyCatalog.MyTable [at 1:15]
select * from MyCatalog.MyTable, Catalog.MyTable t2, MyTable.xxx, t2.yyy, xxx...
              ^
==

select (select count(*) from t1.abc),
       (select count(*) from t2.abc)
from (select 1 a) t1
--
Table resolution time:
t2.abc => {
DEFAULT;
}

Extracted table names:
t2.abc

ERROR: Name abc not found inside t1 [at 1:33]
select (select count(*) from t1.abc),
                                ^
==

# One-word identifier is always a table name.
select (select count(*) from t1)
from (select 1 a) t1
--
Table resolution time:
t1 => {
DEFAULT;
}

Extracted table names:
t1

ERROR: Table not found: t1 (Unqualified identifiers in a FROM clause are always resolved as tables. Identifier t1 is in scope but unqualified names cannot be resolved here.) [at 1:30]
select (select count(*) from t1)
                             ^
==

# No correlated reference inside a subquery.
select 1
from (select 1) t1, (select * from t1.abc),
     (select 1) t2, t2.abc
--
Table resolution time:
t1.abc => {
DEFAULT;
}

Extracted table names:
t1.abc

ERROR: Table not found: t1.abc [at 2:36]
from (select 1) t1, (select * from t1.abc),
                                   ^
==

select 1
from t1, t1.a join t1.b
--
Table resolution time:
t1 => {
DEFAULT;
}

Extracted table names:
t1

ERROR: Table not found: t1 [at 2:6]
from t1, t1.a join t1.b
     ^
==

# Name from outside is not visible inside the parenthesized join, so those
# paths look like table names.
# The name from inside parentheses is visible outside.
select 1
from t1, (t1.a join t1.b), b.xyz
--
Table resolution time:
t1 => {
DEFAULT;
}
t1.a => {
DEFAULT;
}
t1.b => {
DEFAULT;
}

Extracted table names:
t1
t1.a
t1.b

ERROR: Table not found: t1 [at 2:6]
from t1, (t1.a join t1.b), b.xyz
     ^
==

select 1
from t1.a, t1
--
Table resolution time:
t1 => {
DEFAULT;
}
t1.a => {
DEFAULT;
}

Extracted table names:
t1
t1.a

ERROR: Table not found: t1.a [at 2:6]
from t1.a, t1
     ^
==

select 1 abc, abc.def
--
Table resolution time:

Extracted table names:

ERROR: Cannot access field def on a value with type INT64 [at 1:19]
select 1 abc, abc.def
                  ^
==

select t.arr, (select count(*) from t.arr)
from (select ARRAY(select 1) arr) t
--
Table resolution time:

Extracted table names:

==

select arr, (select count(*) from arr)
from (select ARRAY(select 1) arr) t
--
Table resolution time:
arr => {
DEFAULT;
}

Extracted table names:
arr

ERROR: Table not found: arr (Unqualified identifiers in a FROM clause are always resolved as tables. Identifier arr is in scope but unqualified names cannot be resolved here.) [at 1:35]
select arr, (select count(*) from arr)
                                  ^
==

# Parser error propagating through ExtractTableNames.
select 1 from select select
--
Table resolution time:
ERROR: generic::invalid_argument: Syntax error: Unexpected keyword SELECT [at 1:15]
select 1 from select select
              ^
Extracted table names:
ERROR: generic::invalid_argument: Syntax error: Unexpected keyword SELECT [at 1:15]
select 1 from select select
              ^
ERROR: Syntax error: Unexpected keyword SELECT [at 1:15]
select 1 from select select
              ^
==

select 1
from unnest(a.b.c), c.d.e,
     unnest(a.b.c) as d, d.e.f,
     unnest(1 + (select a from k.j))
--
Table resolution time:
c.d.e => {
DEFAULT;
}
k.j => {
DEFAULT;
}

Extracted table names:
c.d.e
k.j

ERROR: Unrecognized name: a [at 2:13]
from unnest(a.b.c), c.d.e,
            ^
==

select 1 from KeyValue join KeyValue2 on false or (select true from TestTable)
--
Table resolution time:
KeyValue => {
DEFAULT;
}
KeyValue2 => {
DEFAULT;
}
TestTable => {
DEFAULT;
}

Extracted table names:
KeyValue
KeyValue2
TestTable
==

create table t as select * from KeyValue
--
Table resolution time:
KeyValue => {
DEFAULT;
}

Extracted table names:
KeyValue
==

create model t as select key, value from KeyValue
--
Table resolution time:
KeyValue => {
DEFAULT;
}

Extracted table names:
KeyValue
==

[error_message_mode={{multi_line_with_caret|one_line|with_payload}}]
select 0 from TestTable 4 SYSTEM TIME AS OF CURRENT_TIMESTAMP
--
ALTERNATION GROUP: multi_line_with_caret
--
Table resolution time:
ERROR: generic::invalid_argument: Syntax error: Expected end of input but got integer literal "4" [at 1:25]
select 0 from TestTable 4 SYSTEM TIME AS OF CURRENT_TIMESTAMP
                        ^
Extracted table names:
ERROR: generic::invalid_argument: Syntax error: Expected end of input but got integer literal "4" [at 1:25]
select 0 from TestTable 4 SYSTEM TIME AS OF CURRENT_TIMESTAMP
                        ^
ERROR: Syntax error: Expected end of input but got integer literal "4" [at 1:25]
select 0 from TestTable 4 SYSTEM TIME AS OF CURRENT_TIMESTAMP
                        ^
--
ALTERNATION GROUP: one_line
--
Table resolution time:
ERROR: generic::invalid_argument: Syntax error: Expected end of input but got integer literal "4" [at 1:25]
Extracted table names:
ERROR: generic::invalid_argument: Syntax error: Expected end of input but got integer literal "4" [at 1:25]
ERROR: Syntax error: Expected end of input but got integer literal "4" [at 1:25]
--
ALTERNATION GROUP: with_payload
--
Table resolution time:
ERROR: generic::invalid_argument: Syntax error: Expected end of input but got integer literal "4" [zetasql.ErrorLocation] { line: 1 column: 25 }
Extracted table names:
ERROR: generic::invalid_argument: Syntax error: Expected end of input but got integer literal "4" [zetasql.ErrorLocation] { line: 1 column: 25 }
ERROR: Syntax error: Expected end of input but got integer literal "4" [at 1:25]
==

[error_message_mode={{multi_line_with_caret|one_line|with_payload}}]
select 0 from TestTable FOR SYSTEM_TIME AS OF UNKNOWN_FUNCTION()
--
ALTERNATION GROUP: multi_line_with_caret
--
Table resolution time:
ERROR: generic::invalid_argument: Function not found: UNKNOWN_FUNCTION [at 1:47]
select 0 from TestTable FOR SYSTEM_TIME AS OF UNKNOWN_FUNCTION()
                                              ^
Extracted table names:
TestTable

ERROR: Function not found: UNKNOWN_FUNCTION [at 1:47]
select 0 from TestTable FOR SYSTEM_TIME AS OF UNKNOWN_FUNCTION()
                                              ^
--
ALTERNATION GROUP: one_line
--
Table resolution time:
ERROR: generic::invalid_argument: Function not found: UNKNOWN_FUNCTION [at 1:47]
Extracted table names:
TestTable

ERROR: Function not found: UNKNOWN_FUNCTION [at 1:47]
--
ALTERNATION GROUP: with_payload
--
Table resolution time:
ERROR: generic::invalid_argument: Function not found: UNKNOWN_FUNCTION [zetasql.ErrorLocation] { line: 1 column: 47 }
Extracted table names:
TestTable

ERROR: Function not found: UNKNOWN_FUNCTION [at 1:47]
==

select 0 from TestTable FOR SYSTEM_TIME AS OF 12345
--
Table resolution time:
TestTable => {
Literal(type=INT64, value=12345);
}

Extracted table names:
TestTable

ERROR: FOR SYSTEM_TIME AS OF must be of type TIMESTAMP but was of type INT64 [at 1:47]
select 0 from TestTable FOR SYSTEM_TIME AS OF 12345
                                              ^
==

[language_features=]
select 0 from TestTable FOR SYSTEM_TIME AS OF CURRENT_TIMESTAMP
--
Table resolution time:
ERROR: generic::invalid_argument: FOR SYSTEM_TIME AS OF is not supported [at 1:25]
select 0 from TestTable FOR SYSTEM_TIME AS OF CURRENT_TIMESTAMP
                        ^
Extracted table names:
TestTable

ERROR: FOR SYSTEM_TIME AS OF is not supported [at 1:25]
select 0 from TestTable FOR SYSTEM_TIME AS OF CURRENT_TIMESTAMP
                        ^
==

delete from KeyValue where true
--
Table resolution time:
KeyValue => {
DEFAULT;
}

Extracted table names:
KeyValue
==

delete from KeyValue where ((select 0 from KeyValue) in (select 0))
--
Table resolution time:
KeyValue => {
DEFAULT;
}

Extracted table names:
KeyValue
==

delete from KeyValue where ((select 0 from KeyValue for system_time as of CURRENT_TIMESTAMP) in (select 0))
--
Table resolution time:
KeyValue => {
FunctionCall(ZetaSQL:current_timestamp() -> TIMESTAMP);
}

Extracted table names:
KeyValue
==

create table a.b.c (x int64)
--
Table resolution time:

Extracted table names:
==

create table a.b.c (x int64) options (x = (select key from KeyValue limit 1))
--
Table resolution time:
KeyValue => {
DEFAULT;
}

Extracted table names:
KeyValue
==

drop table KeyValue
--
Table resolution time:

Extracted table names:
==

create view a.b.c as select * from KeyValue as kv
--
Table resolution time:
KeyValue => {
DEFAULT;
}

Extracted table names:
KeyValue
==

create view a.b.c
options (x = (select key from KeyValue2 limit 1))
as select * from KeyValue as kv
--
Table resolution time:
KeyValue => {
DEFAULT;
}
KeyValue2 => {
DEFAULT;
}

Extracted table names:
KeyValue
KeyValue2
==

create view a.b.c as select * from KeyValue for system_time as of CURRENT_TIMESTAMP
--
Table resolution time:
KeyValue => {
FunctionCall(ZetaSQL:current_timestamp() -> TIMESTAMP);
}

Extracted table names:
KeyValue
==

export data options(path='some-path', owner='some-owner', overwrite=true, x = (select key from KeyValue2 limit 1))
as select * from KeyValue;
--
Table resolution time:
KeyValue => {
DEFAULT;
}
KeyValue2 => {
DEFAULT;
}

Extracted table names:
KeyValue
KeyValue2
==

alter table any_table
set options (x = (select key from KeyValue limit 1)),
set options (x = (select key from KeyValue2 limit 1))
--
Table resolution time:
KeyValue => {
DEFAULT;
}
KeyValue2 => {
DEFAULT;
}

Extracted table names:
KeyValue
KeyValue2

==

alter table any_table
set options (x = (select key from KeyValue limit 1),
             y = (select key from KeyValue2 limit 1))
--
Table resolution time:
KeyValue => {
DEFAULT;
}
KeyValue2 => {
DEFAULT;
}

Extracted table names:
KeyValue
KeyValue2

==

alter view KeyValue2 set options (x = (select key from KeyValue limit 1))
--
Table resolution time:
KeyValue => {
DEFAULT;
}

Extracted table names:
KeyValue
