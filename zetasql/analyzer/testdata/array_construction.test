select 1, [1], ARRAY[1], ARRAY<int64>[1], ARRAY<int32>[1], ARRAY<uint32>[1],
       ARRAY<uint64>[1]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [ARRAY<INT64>]
| +-$query.$col3#3 AS `$col3` [ARRAY<INT64>]
| +-$query.$col4#4 AS `$col4` [ARRAY<INT64>]
| +-$query.$col5#5 AS `$col5` [ARRAY<INT32>]
| +-$query.$col6#6 AS `$col6` [ARRAY<UINT32>]
| +-$query.$col7#7 AS `$col7` [ARRAY<UINT64>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=1)
    | +-$col2#2 := Literal(type=ARRAY<INT64>, value=[1])
    | +-$col3#3 := Literal(type=ARRAY<INT64>, value=[1])
    | +-$col4#4 := Literal(type=ARRAY<INT64>, value=[1], has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=ARRAY<INT32>, value=[1], has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=ARRAY<UINT32>, value=[1], has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=ARRAY<UINT64>, value=[1], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select [1, 2, 3], ARRAY[1, 2, 3], ARRAY<int64>[1, 2, 3], ARRAY<int32>[1, 2, 3],
       ARRAY<uint32>[1, 2, 3], ARRAY<uint64>[1, 2, 3]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
| +-$query.$col2#2 AS `$col2` [ARRAY<INT64>]
| +-$query.$col3#3 AS `$col3` [ARRAY<INT64>]
| +-$query.$col4#4 AS `$col4` [ARRAY<INT32>]
| +-$query.$col5#5 AS `$col5` [ARRAY<UINT32>]
| +-$query.$col6#6 AS `$col6` [ARRAY<UINT64>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    | +-$col2#2 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    | +-$col3#3 := Literal(type=ARRAY<INT64>, value=[1, 2, 3], has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=ARRAY<INT32>, value=[1, 2, 3], has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=ARRAY<UINT32>, value=[1, 2, 3], has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=ARRAY<UINT64>, value=[1, 2, 3], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select ARRAY<int32>[], ARRAY<int64>[], ARRAY<uint32>[],
       ARRAY<uint64>[], ARRAY<string>[], ARRAY<float>[], ARRAY<bytes>[]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
| +-$query.$col2#2 AS `$col2` [ARRAY<INT64>]
| +-$query.$col3#3 AS `$col3` [ARRAY<UINT32>]
| +-$query.$col4#4 AS `$col4` [ARRAY<UINT64>]
| +-$query.$col5#5 AS `$col5` [ARRAY<STRING>]
| +-$query.$col6#6 AS `$col6` [ARRAY<FLOAT>]
| +-$query.$col7#7 AS `$col7` [ARRAY<BYTES>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT32>, value=[], has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=ARRAY<INT64>, value=[], has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=ARRAY<UINT32>, value=[], has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=ARRAY<UINT64>, value=[], has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=ARRAY<STRING>, value=[], has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=ARRAY<FLOAT>, value=[], has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=ARRAY<BYTES>, value=[], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select []
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[])
    +-input_scan=
      +-SingleRowScan
==

select ARRAY[]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[])
    +-input_scan=
      +-SingleRowScan
==

select [NULL], ARRAY[NULL], ARRAY<int64>[NULL], ARRAY<int32>[NULL],
       ARRAY<uint32>[NULL], ARRAY<uint64>[NULL], ARRAY<string>[NULL],
       ARRAY<float>[NULL], ARRAY<bytes>[NULL]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
| +-$query.$col2#2 AS `$col2` [ARRAY<INT64>]
| +-$query.$col3#3 AS `$col3` [ARRAY<INT64>]
| +-$query.$col4#4 AS `$col4` [ARRAY<INT32>]
| +-$query.$col5#5 AS `$col5` [ARRAY<UINT32>]
| +-$query.$col6#6 AS `$col6` [ARRAY<UINT64>]
| +-$query.$col7#7 AS `$col7` [ARRAY<STRING>]
| +-$query.$col8#8 AS `$col8` [ARRAY<FLOAT>]
| +-$query.$col9#9 AS `$col9` [ARRAY<BYTES>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[NULL])
    | +-$col2#2 := Literal(type=ARRAY<INT64>, value=[NULL])
    | +-$col3#3 := Literal(type=ARRAY<INT64>, value=[NULL], has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=ARRAY<INT32>, value=[NULL], has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=ARRAY<UINT32>, value=[NULL], has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=ARRAY<UINT64>, value=[NULL], has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=ARRAY<STRING>, value=[NULL], has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=ARRAY<FLOAT>, value=[NULL], has_explicit_type=TRUE)
    | +-$col9#9 := Literal(type=ARRAY<BYTES>, value=[NULL], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select [cast(NULL as STRING)], [cast(NULL as bytes)]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<STRING>]
| +-$query.$col2#2 AS `$col2` [ARRAY<BYTES>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<STRING>, value=[NULL], has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=ARRAY<BYTES>, value=[NULL], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select [cast(NULL as STRING), cast(NULL as BYTES)]
--
ERROR: Array elements of types {STRING, BYTES} do not have a common supertype [at 1:8]
select [cast(NULL as STRING), cast(NULL as BYTES)]
       ^
==

# Adding coalesce so that elements could be treated as non-literals.
select ARRAY<int32>[cast(cast(coalesce(1) as int64) as int32)],
       ARRAY<uint32>[cast(cast(coalesce(1) as int64)as uint32)],
       ARRAY<uint64>[cast(cast(coalesce(1) as int64) as uint32),
                     cast(cast(coalesce(1) as int64) as uint64)],
       ARRAY<int64>[cast(cast(coalesce(1) as int64) as int32),
                    cast(cast(coalesce(1) as int64) as uint32), 1]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
| +-$query.$col2#2 AS `$col2` [ARRAY<UINT32>]
| +-$query.$col3#3 AS `$col3` [ARRAY<UINT64>]
| +-$query.$col4#4 AS `$col4` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:$make_array(repeated(1) INT32) -> ARRAY<INT32>)
    | |   +-Cast(INT64 -> INT32)
    | |     +-FunctionCall(ZetaSQL:coalesce(repeated(1) INT64) -> INT64)
    | |       +-Literal(type=INT64, value=1)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:$make_array(repeated(1) UINT32) -> ARRAY<UINT32>)
    | |   +-Cast(INT64 -> UINT32)
    | |     +-FunctionCall(ZetaSQL:coalesce(repeated(1) INT64) -> INT64)
    | |       +-Literal(type=INT64, value=1)
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:$make_array(repeated(2) UINT64) -> ARRAY<UINT64>)
    | |   +-Cast(UINT32 -> UINT64)
    | |   | +-Cast(INT64 -> UINT32)
    | |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(1) INT64) -> INT64)
    | |   |     +-Literal(type=INT64, value=1)
    | |   +-Cast(INT64 -> UINT64)
    | |     +-FunctionCall(ZetaSQL:coalesce(repeated(1) INT64) -> INT64)
    | |       +-Literal(type=INT64, value=1)
    | +-$col4#4 :=
    |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |     +-Cast(INT32 -> INT64)
    |     | +-Cast(INT64 -> INT32)
    |     |   +-FunctionCall(ZetaSQL:coalesce(repeated(1) INT64) -> INT64)
    |     |     +-Literal(type=INT64, value=1)
    |     +-Cast(UINT32 -> INT64)
    |     | +-Cast(INT64 -> UINT32)
    |     |   +-FunctionCall(ZetaSQL:coalesce(repeated(1) INT64) -> INT64)
    |     |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan
==

select ARRAY<uint32>[-1]
--
ERROR: Could not cast literal -1 to type UINT32 [at 1:22]
select ARRAY<uint32>[-1]
                     ^
==

select ARRAY<uint64>[-1]
--
ERROR: Could not cast literal -1 to type UINT64 [at 1:22]
select ARRAY<uint64>[-1]
                     ^
==

select ARRAY<int64>[cast(1 as uint64)]
--
ERROR: Array element type UINT64 does not coerce to INT64 [at 1:21]
select ARRAY<int64>[cast(1 as uint64)]
                    ^
==

select ARRAY<uint64>[cast(1 as int64)]
--
ERROR: Array element type INT64 does not coerce to UINT64 [at 1:22]
select ARRAY<uint64>[cast(1 as int64)]
                     ^
==

select ARRAY<uint64>[cast(9223372036854775808 /* INT64_MAX + 1 */ as int64)]
--
ERROR: Array element type INT64 does not coerce to UINT64 [at 1:22]
select ARRAY<uint64>[cast(9223372036854775808 /* INT64_MAX + 1 */ as int64)]
                     ^
==

select [1, sqrt(1.5), 1 + 1.5]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) DOUBLE) -> ARRAY<DOUBLE>)
    |     +-Literal(type=DOUBLE, value=1)
    |     +-FunctionCall(ZetaSQL:sqrt(DOUBLE) -> DOUBLE)
    |     | +-Literal(type=DOUBLE, value=1.5)
    |     +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
    |       +-Literal(type=DOUBLE, value=1)
    |       +-Literal(type=DOUBLE, value=1.5)
    +-input_scan=
      +-SingleRowScan
==

select [1, `int64`] from SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) INT64) -> ARRAY<INT64>)
    |     +-Literal(type=INT64, value=1)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
==

select [1.5, `double`] from SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [ARRAY<DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) DOUBLE) -> ARRAY<DOUBLE>)
    |     +-Literal(type=DOUBLE, value=1.5)
    |     +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.double#9], table=SimpleTypes, column_index_list=[8])
==

select [1.5, 1], [1, 1.5]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<DOUBLE>]
| +-$query.$col2#2 AS `$col2` [ARRAY<DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<DOUBLE>, value=[1.5, 1])
    | +-$col2#2 := Literal(type=ARRAY<DOUBLE>, value=[1, 1.5])
    +-input_scan=
      +-SingleRowScan
==

select [1.5, `int64`] from SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [ARRAY<DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) DOUBLE) -> ARRAY<DOUBLE>)
    |     +-Literal(type=DOUBLE, value=1.5)
    |     +-Cast(INT64 -> DOUBLE)
    |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
==

select [`double`, `int64`] from SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [ARRAY<DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) DOUBLE) -> ARRAY<DOUBLE>)
    |     +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
    |     +-Cast(INT64 -> DOUBLE)
    |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, double#9], table=SimpleTypes, column_index_list=[1, 8])
==

select ArrayOfInt32(1, 2, 3)
--
ERROR: Function not found: ArrayOfInt32; Did you mean array_filter? [at 1:8]
select ArrayOfInt32(1, 2, 3)
       ^
==

select 1 + ARRAY[1]
--
ERROR: No matching signature for operator + for argument types: INT64, ARRAY<INT64>. Supported signatures: INT64 + INT64; UINT64 + UINT64; DOUBLE + DOUBLE [at 1:8]
select 1 + ARRAY[1]
       ^
==

select [[1]]
--
ERROR: Cannot construct array with element type ARRAY<INT64> because nested arrays are not supported [at 1:9]
select [[1]]
        ^
==

select ARRAY[ARRAY[1]]
--
ERROR: Cannot construct array with element type ARRAY<INT64> because nested arrays are not supported [at 1:14]
select ARRAY[ARRAY[1]]
             ^
==

select ARRAY[1, 2, 3][DEFAULT_OFFSET(0)], [1][DEFAULT_OFFSET(0)]
from TestTable where [1, 1][ORDINAL(2)] = 1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [INT64]
| +-$query.$col2#5 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#4, $col2#5]
    +-expr_list=
    | +-$col1#4 :=
    | | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    | |   +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    | |   +-Literal(type=INT64, value=0)
    | +-$col2#5 :=
    |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |     +-Literal(type=ARRAY<INT64>, value=[1])
    |     +-Literal(type=INT64, value=0)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(table=TestTable)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-FunctionCall(ZetaSQL:$array_at_ordinal(ARRAY<INT64>, INT64) -> INT64)
            | +-Literal(type=ARRAY<INT64>, value=[1, 1])
            | +-Literal(type=INT64, value=2)
            +-Literal(type=INT64, value=1)
==

select [1].a
--
ERROR: Cannot access field a on a value with type ARRAY<INT64> [at 1:12]
select [1].a
           ^
==

select ARRAY<date>["1970-01-01"]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<DATE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<DATE>, value=[1970-01-01], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select ARRAY<date>["bad_date"]
--
ERROR: Could not cast literal "bad_date" to type DATE [at 1:20]
select ARRAY<date>["bad_date"]
                   ^
==

# Out of bounds.
select ARRAY<date>["10000-01-01"]
--
ERROR: Could not cast literal "10000-01-01" to type DATE [at 1:20]
select ARRAY<date>["10000-01-01"]
                   ^
==

# Trailing blank.
select ARRAY<date>["1970-01-01 "]
--
ERROR: Could not cast literal "1970-01-01 " to type DATE [at 1:20]
select ARRAY<date>["1970-01-01 "]
                   ^
==

# Leading blank.
select ARRAY<date>[" 1970-01-01"]
--
ERROR: Could not cast literal " 1970-01-01" to type DATE [at 1:20]
select ARRAY<date>[" 1970-01-01"]
                   ^
==

select ["1970-01-01", `date`] from SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS `$col1` [ARRAY<DATE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) DATE) -> ARRAY<DATE>)
    |     +-Literal(type=DATE, value=1970-01-01)
    |     +-ColumnRef(type=DATE, column=SimpleTypes.date#10)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.date#10], table=SimpleTypes, column_index_list=[9])
==

select [19700101, `date`] from SimpleTypes
--
ERROR: Array elements of types {INT64, DATE} do not have a common supertype [at 1:8]
select [19700101, `date`] from SimpleTypes
       ^
==

# Only implicit casts (if necessary) are allowed while constructing an array.
select ARRAY<double>[1, cast(1 as int32), cast(1 as int64), cast(1 as uint32),
                     cast(1 as uint64), cast(1.0 as float), NULL],
       ARRAY<int64>[1, cast(1 as int32), cast(1 as uint32), NULL],
       ARRAY<uint64>[1, cast(1 as uint32), NULL]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<DOUBLE>]
| +-$query.$col2#2 AS `$col2` [ARRAY<INT64>]
| +-$query.$col3#3 AS `$col3` [ARRAY<UINT64>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<DOUBLE>, value=[1, 1, 1, 1, 1, 1, NULL], has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=ARRAY<INT64>, value=[1, 1, 1, NULL], has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=ARRAY<UINT64>, value=[1, 1, NULL], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# Coercing uint64 to int64 is not allowed through implicit cast.
select ARRAY<int64>[cast(2 as uint64)]
--

ERROR: Array element type UINT64 does not coerce to INT64 [at 1:21]
select ARRAY<int64>[cast(2 as uint64)]
                    ^
==

# Coercing int64 to int32 is not allowed through implicit cast.
select ARRAY<int32>[1, cast(1 as int64)]
--
ERROR: Array element type INT64 does not coerce to INT32 [at 1:24]
select ARRAY<int32>[1, cast(1 as int64)]
                       ^
==

# Coercing int64 to date is not allowed through implicit cast.
select ARRAY<date>[1]
--
ERROR: Array element type INT64 does not coerce to DATE [at 1:20]
select ARRAY<date>[1]
                   ^
==

# Coercing from int64 to uint64 is not allowed through implicit cast.
select ARRAY<uint64>[cast(1 as int64)]
--
ERROR: Array element type INT64 does not coerce to UINT64 [at 1:22]
select ARRAY<uint64>[cast(1 as int64)]
                     ^
==

# UINT64 literal and INT64 literal should yield an array of type UINT64.
select [9223372036854775808,1, 0, null]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<UINT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<UINT64>, value=[9223372036854775808, 1, 0, NULL])
    +-input_scan=
      +-SingleRowScan
==

# UINT64 literal and INT64 literal should yield an array of type UINT64, but
# the INT64 literal is not coercible to UINT64.
select [9223372036854775808,-1]
--
ERROR: Could not cast literal -1 to type UINT64 [at 1:29]
select [9223372036854775808,-1]
                            ^
==

select [cast(1 as uint32)]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<UINT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<UINT32>, value=[1], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan

==

select ARRAY[cast(1 as uint32)]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<UINT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<UINT32>, value=[1], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select ARRAY<uint64>[cast(1 as uint32)]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<UINT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<UINT64>, value=[1], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select [1, cast(2 as int32)]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT32>, value=[1, 2], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select ARRAY<int64>[1, cast(2 as int32)]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[1, 2], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select [cast(1 as int64), cast(2 as int32)]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[1, 2], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select ARRAY<int64>[cast(1 as int64), cast(2 as int32)]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[1, 2], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select [cast(1 as int32), cast(2 as uint32)]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<INT64>, value=[1, 2], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select [b'123', b'456']
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<BYTES>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<BYTES>, value=[b"123", b"456"])
    +-input_scan=
      +-SingleRowScan
==

select [date '2011-01-01', date '2011-01-02']
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<DATE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<DATE>, value=[2011-01-01, 2011-01-02], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_2_CIVIL_TIME]
select [datetime '2011-01-01 00:00:00', datetime '2011-01-02 00:00:00']
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<DATETIME>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<DATETIME>, value=[2011-01-01 00:00:00, 2011-01-02 00:00:00], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_2_CIVIL_TIME]
select [time '12:01:59', time '1:00:00']
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<TIME>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<TIME>, value=[12:01:59, 01:00:00], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select [timestamp '2011-01-01 00:00:00', timestamp '2011-01-02 00:00:00']
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<TIMESTAMP>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<TIMESTAMP>, value=[2011-01-01 08:00:00+00, 2011-01-02 08:00:00+00], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NUMERIC_TYPE]
select [numeric '0', numeric '1']
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<NUMERIC>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<NUMERIC>, value=[0, 1], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

select array<string(10)>['abc']
--
ERROR: Parameterized types are not supported in literal value construction [at 1:20]
select array<string(10)>['abc']
                   ^
==

select array<string collate 'und:ci'>['abc']
--
ERROR: Type with collation name is not supported in literal value construction [at 1:21]
select array<string collate 'und:ci'>['abc']
                    ^
