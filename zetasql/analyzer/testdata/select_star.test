select *
--
ERROR: SELECT * must have a FROM clause [at 1:8]
select *
       ^
==

select * from KeyValue
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# Note that column pruning does not prune Value from the ResolvedTableScan here.
# Using SELECT * in a subquery counts as referencing that column.
select key from (select * from KeyValue)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
          +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

select 1, key, *, 33, * from KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
| +-KeyValue.Key#1 AS key [INT64]
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$query.$col4#4 AS "$col4" [INT64]
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3, KeyValue.Key#1, KeyValue.Key#1, KeyValue.Value#2, $query.$col4#4, KeyValue.Key#1, KeyValue.Value#2]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    | +-$col4#4 := Literal(type=INT64, value=33)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

select * from TestTable
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
==

select * from KeyValue, TestTable
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-TestTable.key#3 AS key [INT32]
| +-TestTable.TestEnum#4 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#5 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, TestTable.key#3, TestTable.TestEnum#4, TestTable.KitchenSink#5]
    +-input_scan=
      +-JoinScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, TestTable.key#3, TestTable.TestEnum#4, TestTable.KitchenSink#5]
        +-left_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-right_scan=
          +-TableScan(column_list=TestTable.[key#3, TestEnum#4, KitchenSink#5], table=TestTable, column_index_list=[0, 1, 2])
==

select * from (select 1, 2)
--
QueryStmt
+-output_column_list=
| +-$subquery1.$col1#1 AS "$col1" [INT64]
| +-$subquery1.$col2#2 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=$subquery1.[$col1#1, $col2#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=$subquery1.[$col1#1, $col2#2]
        +-expr_list=
        | +-$col1#1 := Literal(type=INT64, value=1)
        | +-$col2#2 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
==

select value from (select * from KeyValue, TestTable)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Value#2 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Value#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, TestTable.key#3, TestTable.TestEnum#4, TestTable.KitchenSink#5]
        +-input_scan=
          +-JoinScan
            +-column_list=[KeyValue.Key#1, KeyValue.Value#2, TestTable.key#3, TestTable.TestEnum#4, TestTable.KitchenSink#5]
            +-left_scan=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-right_scan=
              +-TableScan(column_list=TestTable.[key#3, TestEnum#4, KitchenSink#5], table=TestTable, column_index_list=[0, 1, 2])
==

select 111, kv.*, 222 from KeyValue kv
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$query.$col3#4 AS "$col3" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3, KeyValue.Key#1, KeyValue.Value#2, $query.$col3#4]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=111)
    | +-$col3#4 := Literal(type=INT64, value=222)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="kv")
==

select
  subq.*,
  '---',
  TestTable.*,
  '---',
  kv.*,
  '---',
  *
from KeyValue kv,
     (select 1, 'abc', 'abc' as c3) subq,
     TestTable
--
QueryStmt
+-output_column_list=
| +-subq.$col1#3 AS "$col1" [INT64]
| +-subq.$col2#4 AS "$col2" [STRING]
| +-subq.c3#5 AS c3 [STRING]
| +-$query.$col2#9 AS "$col2" [STRING]
| +-TestTable.key#6 AS key [INT32]
| +-TestTable.TestEnum#7 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#8 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$query.$col4#10 AS "$col4" [STRING]
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$query.$col6#11 AS "$col6" [STRING]
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-subq.$col1#3 AS "$col1" [INT64]
| +-subq.$col2#4 AS "$col2" [STRING]
| +-subq.c3#5 AS c3 [STRING]
| +-TestTable.key#6 AS key [INT32]
| +-TestTable.TestEnum#7 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#8 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[subq.$col1#3, subq.$col2#4, subq.c3#5, $query.$col2#9, TestTable.key#6, TestTable.TestEnum#7, TestTable.KitchenSink#8, $query.$col4#10, KeyValue.Key#1, KeyValue.Value#2, $query.$col6#11, KeyValue.Key#1, KeyValue.Value#2, subq.$col1#3, subq.$col2#4, subq.c3#5, TestTable.key#6, TestTable.TestEnum#7, TestTable.KitchenSink#8]
    +-expr_list=
    | +-$col2#9 := Literal(type=STRING, value="---")
    | +-$col4#10 := Literal(type=STRING, value="---")
    | +-$col6#11 := Literal(type=STRING, value="---")
    +-input_scan=
      +-JoinScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, subq.$col1#3, subq.$col2#4, subq.c3#5, TestTable.key#6, TestTable.TestEnum#7, TestTable.KitchenSink#8]
        +-left_scan=
        | +-JoinScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, subq.$col1#3, subq.$col2#4, subq.c3#5]
        |   +-left_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="kv")
        |   +-right_scan=
        |     +-ProjectScan
        |       +-column_list=subq.[$col1#3, $col2#4, c3#5]
        |       +-expr_list=
        |       | +-$col1#3 := Literal(type=INT64, value=1)
        |       | +-$col2#4 := Literal(type=STRING, value="abc")
        |       | +-c3#5 := Literal(type=STRING, value="abc")
        |       +-input_scan=
        |         +-SingleRowScan
        +-right_scan=
          +-TableScan(column_list=TestTable.[key#6, TestEnum#7, KitchenSink#8], table=TestTable, column_index_list=[0, 1, 2])
==

select kv2.* from (select * from KeyValue kv1) as kv2;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
          +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="kv1")
==

# kv1 is not visible outside the subquery.
select kv1.* from (select * from KeyValue kv1) as kv2;
--
ERROR: Unrecognized name: kv1; Did you mean kv2? [at 1:8]
select kv1.* from (select * from KeyValue kv1) as kv2;
       ^
==

# Nested aliases never become visible like this.
select kv2.kv1.* from (select * from KeyValue kv1) as kv2;
--
ERROR: Name kv1 not found inside kv2 [at 1:12]
select kv2.kv1.* from (select * from KeyValue kv1) as kv2;
           ^
==

# Anonymous subqueries
select *
from (select 1),
     (select 2) subq2,
     (select 3 three)
--
QueryStmt
+-output_column_list=
| +-$subquery1.$col1#1 AS "$col1" [INT64]
| +-subq2.$col1#2 AS "$col1" [INT64]
| +-$subquery2.three#3 AS three [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$subquery1.$col1#1, subq2.$col1#2, $subquery2.three#3]
    +-input_scan=
      +-JoinScan
        +-column_list=[$subquery1.$col1#1, subq2.$col1#2, $subquery2.three#3]
        +-left_scan=
        | +-JoinScan
        |   +-column_list=[$subquery1.$col1#1, subq2.$col1#2]
        |   +-left_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$subquery1.$col1#1]
        |   |   +-expr_list=
        |   |   | +-$col1#1 := Literal(type=INT64, value=1)
        |   |   +-input_scan=
        |   |     +-SingleRowScan
        |   +-right_scan=
        |     +-ProjectScan
        |       +-column_list=[subq2.$col1#2]
        |       +-expr_list=
        |       | +-$col1#2 := Literal(type=INT64, value=2)
        |       +-input_scan=
        |         +-SingleRowScan
        +-right_scan=
          +-ProjectScan
            +-column_list=[$subquery2.three#3]
            +-expr_list=
            | +-three#3 := Literal(type=INT64, value=3)
            +-input_scan=
              +-SingleRowScan
==

select *, '---', kv2.*
from KeyValue kv1
     join KeyValue kv2 on true
     full join KeyValue kv3 on true
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-KeyValue.Key#3 AS Key [INT64]
| +-KeyValue.Value#4 AS Value [STRING]
| +-KeyValue.Key#5 AS Key [INT64]
| +-KeyValue.Value#6 AS Value [STRING]
| +-$query.$col2#7 AS "$col2" [STRING]
| +-KeyValue.Key#3 AS Key [INT64]
| +-KeyValue.Value#4 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, KeyValue.Key#3, KeyValue.Value#4, KeyValue.Key#5, KeyValue.Value#6, $query.$col2#7, KeyValue.Key#3, KeyValue.Value#4]
    +-expr_list=
    | +-$col2#7 := Literal(type=STRING, value="---")
    +-input_scan=
      +-JoinScan
        +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4, Key#5, Value#6]
        +-join_type=FULL
        +-left_scan=
        | +-JoinScan
        |   +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4]
        |   +-left_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="kv1")
        |   +-right_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1], alias="kv2")
        |   +-join_expr=
        |     +-Literal(type=BOOL, value=true)
        +-right_scan=
        | +-TableScan(column_list=KeyValue.[Key#5, Value#6], table=KeyValue, column_index_list=[0, 1], alias="kv3")
        +-join_expr=
          +-Literal(type=BOOL, value=true)
==

select * from
(select *,2 from
(select * from
(select *,1 from KeyValue)))
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$subquery3.$col2#3 AS "$col2" [INT64]
| +-$subquery1.$col2#4 AS "$col2" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $subquery3.$col2#3, $subquery1.$col2#4]
    +-input_scan=
      +-ProjectScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $subquery3.$col2#3, $subquery1.$col2#4]
        +-expr_list=
        | +-$col2#4 := Literal(type=INT64, value=2)
        +-input_scan=
          +-ProjectScan
            +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $subquery3.$col2#3]
            +-input_scan=
              +-ProjectScan
                +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $subquery3.$col2#3]
                +-expr_list=
                | +-$col2#3 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

select * from KeyValue group by 1
--
ERROR: Star expansion expression references column Value which is neither grouped nor aggregated [at 1:8]
select * from KeyValue group by 1
       ^
==

select * from KeyValue group by 1,2
--
QueryStmt
+-output_column_list=
| +-$groupby.Key#3 AS Key [INT64]
| +-$groupby.Value#4 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=$groupby.[Key#3, Value#4]
    +-input_scan=
      +-AggregateScan
        +-column_list=$groupby.[Key#3, Value#4]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
          +-Key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
          +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
==

select * from KeyValue group by 3
--
ERROR: GROUP BY is out of SELECT column number range: 3 [at 1:33]
select * from KeyValue group by 3
                                ^
==

# The subquery produces duplicate names, which would be illegal if
# they were explicit names, but they are implicit here.
select * from (select *,* from KeyValue)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2, Key#1, Value#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=KeyValue.[Key#1, Value#2, Key#1, Value#2]
        +-input_scan=
          +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# Star expansion matches grouping column, with and without qualifier.
#
# Regression test for b/23035512.
SELECT {{t.|}}* FROM KeyValue AS t GROUP BY {{t.Key|Key|1}}, {{t.Value|Value|2}}
--
QueryStmt
+-output_column_list=
| +-$groupby.Key#3 AS Key [INT64]
| +-$groupby.Value#4 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=$groupby.[Key#3, Value#4]
    +-input_scan=
      +-AggregateScan
        +-column_list=$groupby.[Key#3, Value#4]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="t")
        +-group_by_list=
          +-Key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
          +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
==

# Star expansion matches grouping column in subquery expression, with and
# without qualifier.
#
# Regression test for b/23035512.
SELECT (SELECT {{t.|}}* FROM (SELECT 1 AS a) AS t GROUP BY {{t.a|a|1}})
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$groupby.a#2]
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$groupby.a#2]
    |             +-input_scan=
    |             | +-ProjectScan
    |             |   +-column_list=[t.a#1]
    |             |   +-expr_list=
    |             |   | +-a#1 := Literal(type=INT64, value=1)
    |             |   +-input_scan=
    |             |     +-SingleRowScan
    |             +-group_by_list=
    |               +-a#2 := ColumnRef(type=INT64, column=t.a#1)
    +-input_scan=
      +-SingleRowScan
==

# Star expansion matches grouping column in subquery expression
# with correlated column reference, with and without qualifier.
SELECT (SELECT AS STRUCT {{t.|}}*, Key
        FROM (SELECT 1 a) AS t
        GROUP BY {{t.a|a|1}})
FROM KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#7 AS "$col1" [STRUCT<a INT64, Key INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#7]
    +-expr_list=
    | +-$col1#7 :=
    |   +-SubqueryExpr
    |     +-type=STRUCT<a INT64, Key INT64>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$make_struct.$struct#6]
    |         +-expr_list=
    |         | +-$struct#6 :=
    |         |   +-MakeStruct
    |         |     +-type=STRUCT<a INT64, Key INT64>
    |         |     +-field_list=
    |         |       +-ColumnRef(type=INT64, column=$groupby.a#4)
    |         |       +-ColumnRef(type=INT64, column=$expr_subquery.Key#5)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$groupby.a#4, $expr_subquery.Key#5]
    |             +-expr_list=
    |             | +-Key#5 := ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |             +-input_scan=
    |               +-AggregateScan
    |                 +-column_list=[$groupby.a#4]
    |                 +-input_scan=
    |                 | +-ProjectScan
    |                 |   +-column_list=[t.a#3]
    |                 |   +-expr_list=
    |                 |   | +-a#3 := Literal(type=INT64, value=1)
    |                 |   +-input_scan=
    |                 |     +-SingleRowScan
    |                 +-group_by_list=
    |                   +-a#4 := ColumnRef(type=INT64, column=t.a#3)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
==

select (select count(*)
        from (select outer_kv.*, *, kv.key, kv.value
              from KeyValue kv
              group by kv.key, kv.value))
from KeyValue outer_kv;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#10 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#10]
    +-expr_list=
    | +-$col1#10 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$aggregate.$agg1#9]
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$aggregate.$agg1#9]
    |             +-input_scan=
    |             | +-ProjectScan
    |             |   +-column_list=[$subquery1.Key#7, $subquery1.Value#8, $groupby.key#5, $groupby.value#6, $groupby.key#5, $groupby.value#6]
    |             |   +-expr_list=
    |             |   | +-Key#7 := ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |             |   | +-Value#8 := ColumnRef(type=STRING, column=KeyValue.Value#2, is_correlated=TRUE)
    |             |   +-input_scan=
    |             |     +-AggregateScan
    |             |       +-column_list=$groupby.[key#5, value#6]
    |             |       +-input_scan=
    |             |       | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1], alias="kv")
    |             |       +-group_by_list=
    |             |         +-key#5 := ColumnRef(type=INT64, column=KeyValue.Key#3)
    |             |         +-value#6 := ColumnRef(type=STRING, column=KeyValue.Value#4)
    |             +-aggregate_list=
    |               +-$agg1#9 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="outer_kv")
