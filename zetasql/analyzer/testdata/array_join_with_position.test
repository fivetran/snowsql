select pos, value
  FROM TestTable T, T.KitchenSink.repeated_int32_val value WITH OFFSET pos;
--
QueryStmt
+-output_column_list=
| +-$array_offset.pos#5 AS pos [INT64]
| +-$array.value#4 AS value [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$array_offset.pos#5, $array.value#4]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.KitchenSink#3, $array.value#4, $array_offset.pos#5]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="T")
        +-array_expr=
        | +-GetProtoField
        |   +-type=ARRAY<INT32>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_int32_val
        |   +-default_value=[]
        +-element_column=$array.value#4
        +-array_offset_column=
          +-ColumnHolder(column=$array_offset.pos#5)
==

select *
  FROM TestTable T, T.KitchenSink.repeated_int32_val value WITH OFFSET;
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.value#4 AS value [INT32]
| +-$array_offset.offset_idx#5 AS offset_idx [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.value#4, $array_offset.offset_idx#5]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.value#4, $array_offset.offset_idx#5]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2], alias="T")
        +-array_expr=
        | +-GetProtoField
        |   +-type=ARRAY<INT32>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_int32_val
        |   +-default_value=[]
        +-element_column=$array.value#4
        +-array_offset_column=
          +-ColumnHolder(column=$array_offset.offset_idx#5)
==

select *
  FROM TestTable T,
       T.KitchenSink.repeated_int32_val val1 WITH OFFSET pos1
       JOIN UNNEST([1, 2]) val2 WITH OFFSET pos2 ON pos1 = pos2
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.val1#4 AS val1 [INT32]
| +-$array_offset.pos1#5 AS pos1 [INT64]
| +-$array.val2#6 AS val2 [INT64]
| +-$array_offset.pos2#7 AS pos2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.val1#4, $array_offset.pos1#5, $array.val2#6, $array_offset.pos2#7]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.val1#4, $array_offset.pos1#5, $array.val2#6, $array_offset.pos2#7]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.val1#4, $array_offset.pos1#5]
        |   +-input_scan=
        |   | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2], alias="T")
        |   +-array_expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<INT32>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=repeated_int32_val
        |   |   +-default_value=[]
        |   +-element_column=$array.val1#4
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos1#5)
        +-array_expr=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        +-element_column=$array.val2#6
        +-array_offset_column=
        | +-ColumnHolder(column=$array_offset.pos2#7)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array_offset.pos1#5)
            +-ColumnRef(type=INT64, column=$array_offset.pos2#7)
==

# Right join unnest array literal to table array scan. Using WITH OFFSET as
# ON condition.
select *
  FROM TestTable T CROSS JOIN
       T.KitchenSink.repeated_int32_val val1 WITH OFFSET pos1
       RIGHT JOIN UNNEST([1, 2]) val2 WITH OFFSET pos2 ON pos1 = pos2
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.val1#4 AS val1 [INT32]
| +-$array_offset.pos1#5 AS pos1 [INT64]
| +-$array.val2#6 AS val2 [INT64]
| +-$array_offset.pos2#7 AS pos2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.val1#4, $array_offset.pos1#5, $array.val2#6, $array_offset.pos2#7]
    +-input_scan=
      +-JoinScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.val1#4, $array_offset.pos1#5, $array.val2#6, $array_offset.pos2#7]
        +-join_type=RIGHT
        +-left_scan=
        | +-ArrayScan
        |   +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.val1#4, $array_offset.pos1#5]
        |   +-input_scan=
        |   | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2], alias="T")
        |   +-array_expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<INT32>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=repeated_int32_val
        |   |   +-default_value=[]
        |   +-element_column=$array.val1#4
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos1#5)
        +-right_scan=
        | +-ArrayScan
        |   +-column_list=[$array.val2#6, $array_offset.pos2#7]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        |   +-element_column=$array.val2#6
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos2#7)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array_offset.pos1#5)
            +-ColumnRef(type=INT64, column=$array_offset.pos2#7)
==

# Joining two unnest(array_literal) with USING on array_offset.
select *
  FROM UNNEST([1, 2, 3]) WITH OFFSET pos
       JOIN UNNEST([4, 5]) WITH OFFSET pos USING(pos)
--
QueryStmt
+-output_column_list=
| +-$array_offset.pos#2 AS pos [INT64]
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#3 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array_offset.pos#2, $array.$unnest1#1, $array.$unnest2#3]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.$unnest1#1, $array_offset.pos#2, $array.$unnest2#3, $array_offset.pos#4]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.$unnest1#1, $array_offset.pos#2]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |   +-element_column=$array.$unnest1#1
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos#2)
        +-array_expr=
        | +-Literal(type=ARRAY<INT64>, value=[4, 5])
        +-element_column=$array.$unnest2#3
        +-array_offset_column=
        | +-ColumnHolder(column=$array_offset.pos#4)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array_offset.pos#2)
            +-ColumnRef(type=INT64, column=$array_offset.pos#4)
==

# Right join two unnest(array_literal) with USING on array_offset.
select *
  FROM UNNEST([1, 2, 3]) WITH OFFSET pos
       RIGHT JOIN UNNEST([4, 5]) WITH OFFSET pos USING(pos)
--
QueryStmt
+-output_column_list=
| +-$array_offset.pos#4 AS pos [INT64]
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#3 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array_offset.pos#4, $array.$unnest1#1, $array.$unnest2#3]
    +-input_scan=
      +-JoinScan
        +-column_list=[$array.$unnest1#1, $array_offset.pos#2, $array.$unnest2#3, $array_offset.pos#4]
        +-join_type=RIGHT
        +-left_scan=
        | +-ArrayScan
        |   +-column_list=[$array.$unnest1#1, $array_offset.pos#2]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |   +-element_column=$array.$unnest1#1
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos#2)
        +-right_scan=
        | +-ArrayScan
        |   +-column_list=[$array.$unnest2#3, $array_offset.pos#4]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[4, 5])
        |   +-element_column=$array.$unnest2#3
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos#4)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array_offset.pos#2)
            +-ColumnRef(type=INT64, column=$array_offset.pos#4)
==

# Joining two unnest expressions with USING where the visible columns is from
# lhs (both lhs and rhs requires cast).
select t1
from UNNEST([CAST (1 AS INT32)]) t1
     JOIN UNNEST([CAST (1 AS UINT32)]) t1 USING(t1)
--
QueryStmt
+-output_column_list=
| +-$array.t1#1 AS t1 [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$array.t1#1]
    +-input_scan=
      +-ArrayScan
        +-column_list=$array.[t1#1, t1#2]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.t1#1]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT32>, value=[1], has_explicit_type=TRUE)
        |   +-element_column=$array.t1#1
        +-array_expr=
        | +-Literal(type=ARRAY<UINT32>, value=[1], has_explicit_type=TRUE)
        +-element_column=$array.t1#2
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, UINT64) -> BOOL)
            +-Cast(INT32 -> INT64)
            | +-ColumnRef(type=INT32, column=$array.t1#1)
            +-Cast(UINT32 -> UINT64)
              +-ColumnRef(type=UINT32, column=$array.t1#2)
==

# Right join two unnest expressions with USING where the visible columns is from
# lhs (both lhs and rhs requires cast).
select t1
from UNNEST([CAST(1 AS INT32)]) t1
     RIGHT JOIN UNNEST([CAST(1 AS UINT32), CAST(2 AS UINT32)]) t1 USING(t1)
--
QueryStmt
+-output_column_list=
| +-$array.t1#2 AS t1 [UINT32]
+-query=
  +-ProjectScan
    +-column_list=[$array.t1#2]
    +-input_scan=
      +-JoinScan
        +-column_list=$array.[t1#1, t1#2]
        +-join_type=RIGHT
        +-left_scan=
        | +-ArrayScan
        |   +-column_list=[$array.t1#1]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT32>, value=[1], has_explicit_type=TRUE)
        |   +-element_column=$array.t1#1
        +-right_scan=
        | +-ArrayScan
        |   +-column_list=[$array.t1#2]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<UINT32>, value=[1, 2], has_explicit_type=TRUE)
        |   +-element_column=$array.t1#2
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, UINT64) -> BOOL)
            +-Cast(INT32 -> INT64)
            | +-ColumnRef(type=INT32, column=$array.t1#1)
            +-Cast(UINT32 -> UINT64)
              +-ColumnRef(type=UINT32, column=$array.t1#2)
==

# Joining two unnest expressions with USING where the visible column is from lhs
# (even though we require cast on lhs which rhs doesn't, lhs would always be
# preferred in ArrayScan).  t1 is not ambiguous because it resolves to the
# JOIN USING output column.
select t1, 1
from UNNEST([1]) t1
     JOIN UNNEST([(select AS STRUCT 'x' a, 2.0 t1)]) t2 USING(t1)
--
QueryStmt
+-output_column_list=
| +-$array.t1#1 AS t1 [INT64]
| +-$query.$col2#7 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.t1#1, $query.$col2#7]
    +-expr_list=
    | +-$col2#7 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ArrayScan
        +-column_list=$array.[t1#1, t2#5]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.t1#1]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1])
        |   +-element_column=$array.t1#1
        +-array_expr=
        | +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRUCT<a STRING, t1 DOUBLE>) -> ARRAY<STRUCT<a STRING, t1 DOUBLE>>)
        |   +-SubqueryExpr
        |     +-type=STRUCT<a STRING, t1 DOUBLE>
        |     +-subquery_type=SCALAR
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$make_struct.$struct#4]
        |         +-expr_list=
        |         | +-$struct#4 :=
        |         |   +-MakeStruct
        |         |     +-type=STRUCT<a STRING, t1 DOUBLE>
        |         |     +-field_list=
        |         |       +-ColumnRef(type=STRING, column=$expr_subquery.a#2)
        |         |       +-ColumnRef(type=DOUBLE, column=$expr_subquery.t1#3)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=$expr_subquery.[a#2, t1#3]
        |             +-expr_list=
        |             | +-a#2 := Literal(type=STRING, value="x")
        |             | +-t1#3 := Literal(type=DOUBLE, value=2)
        |             +-input_scan=
        |               +-SingleRowScan
        +-element_column=$array.t2#5
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(DOUBLE, DOUBLE) -> BOOL)
            +-Cast(INT64 -> DOUBLE)
            | +-ColumnRef(type=INT64, column=$array.t1#1)
            +-GetStructField
              +-type=DOUBLE
              +-expr=
              | +-ColumnRef(type=STRUCT<a STRING, t1 DOUBLE>, column=$array.t2#5)
              +-field_idx=1
==

# Joining two unnest expressions with USING where the visible column is from lhs
# (because of a cast on rhs).
select t1, 1
from UNNEST([1.0]) t1
     JOIN UNNEST([(select AS STRUCT 'x' a, 2 t1)]) t2 USING(t1)
--
QueryStmt
+-output_column_list=
| +-$array.t1#1 AS t1 [DOUBLE]
| +-$query.$col2#7 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.t1#1, $query.$col2#7]
    +-expr_list=
    | +-$col2#7 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ArrayScan
        +-column_list=$array.[t1#1, t2#5]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.t1#1]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<DOUBLE>, value=[1])
        |   +-element_column=$array.t1#1
        +-array_expr=
        | +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRUCT<a STRING, t1 INT64>) -> ARRAY<STRUCT<a STRING, t1 INT64>>)
        |   +-SubqueryExpr
        |     +-type=STRUCT<a STRING, t1 INT64>
        |     +-subquery_type=SCALAR
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$make_struct.$struct#4]
        |         +-expr_list=
        |         | +-$struct#4 :=
        |         |   +-MakeStruct
        |         |     +-type=STRUCT<a STRING, t1 INT64>
        |         |     +-field_list=
        |         |       +-ColumnRef(type=STRING, column=$expr_subquery.a#2)
        |         |       +-ColumnRef(type=INT64, column=$expr_subquery.t1#3)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=$expr_subquery.[a#2, t1#3]
        |             +-expr_list=
        |             | +-a#2 := Literal(type=STRING, value="x")
        |             | +-t1#3 := Literal(type=INT64, value=2)
        |             +-input_scan=
        |               +-SingleRowScan
        +-element_column=$array.t2#5
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(DOUBLE, DOUBLE) -> BOOL)
            +-ColumnRef(type=DOUBLE, column=$array.t1#1)
            +-Cast(INT64 -> DOUBLE)
              +-GetStructField
                +-type=INT64
                +-expr=
                | +-ColumnRef(type=STRUCT<a STRING, t1 INT64>, column=$array.t2#5)
                +-field_idx=1
==

select *
  FROM UNNEST([1, 2, 3]) WITH OFFSET pos1
       JOIN UNNEST([4, 5]) WITH OFFSET pos2 ON pos1 = pos2
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array_offset.pos1#2 AS pos1 [INT64]
| +-$array.$unnest2#3 AS `$unnest2` [INT64]
| +-$array_offset.pos2#4 AS pos2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.$unnest1#1, $array_offset.pos1#2, $array.$unnest2#3, $array_offset.pos2#4]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.$unnest1#1, $array_offset.pos1#2, $array.$unnest2#3, $array_offset.pos2#4]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.$unnest1#1, $array_offset.pos1#2]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |   +-element_column=$array.$unnest1#1
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos1#2)
        +-array_expr=
        | +-Literal(type=ARRAY<INT64>, value=[4, 5])
        +-element_column=$array.$unnest2#3
        +-array_offset_column=
        | +-ColumnHolder(column=$array_offset.pos2#4)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array_offset.pos1#2)
            +-ColumnRef(type=INT64, column=$array_offset.pos2#4)
==

# Right join two unnest(array_literal) using array_offset in ON condition.
select *
  FROM UNNEST([1, 2, 3]) WITH OFFSET pos1
       RIGHT JOIN UNNEST([4, 5]) WITH OFFSET pos2 ON pos1 = pos2
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array_offset.pos1#2 AS pos1 [INT64]
| +-$array.$unnest2#3 AS `$unnest2` [INT64]
| +-$array_offset.pos2#4 AS pos2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.$unnest1#1, $array_offset.pos1#2, $array.$unnest2#3, $array_offset.pos2#4]
    +-input_scan=
      +-JoinScan
        +-column_list=[$array.$unnest1#1, $array_offset.pos1#2, $array.$unnest2#3, $array_offset.pos2#4]
        +-join_type=RIGHT
        +-left_scan=
        | +-ArrayScan
        |   +-column_list=[$array.$unnest1#1, $array_offset.pos1#2]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |   +-element_column=$array.$unnest1#1
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos1#2)
        +-right_scan=
        | +-ArrayScan
        |   +-column_list=[$array.$unnest2#3, $array_offset.pos2#4]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[4, 5])
        |   +-element_column=$array.$unnest2#3
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos2#4)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array_offset.pos1#2)
            +-ColumnRef(type=INT64, column=$array_offset.pos2#4)
==

# Joining two unnest(array_literal) with USING on (array_element, array_offset).
select *
  FROM UNNEST([1, 2, 3]) val WITH OFFSET pos
       JOIN UNNEST([1, 2]) val WITH OFFSET pos USING(val, pos)
--
QueryStmt
+-output_column_list=
| +-$array.val#1 AS val [INT64]
| +-$array_offset.pos#2 AS pos [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.val#1, $array_offset.pos#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.val#1, $array_offset.pos#2, $array.val#3, $array_offset.pos#4]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.val#1, $array_offset.pos#2]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |   +-element_column=$array.val#1
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos#2)
        +-array_expr=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        +-element_column=$array.val#3
        +-array_offset_column=
        | +-ColumnHolder(column=$array_offset.pos#4)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=$array.val#1)
            | +-ColumnRef(type=INT64, column=$array.val#3)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
              +-ColumnRef(type=INT64, column=$array_offset.pos#2)
              +-ColumnRef(type=INT64, column=$array_offset.pos#4)
==

# Right join two unnest(array_literal) with USING on
# (array_element, array_offset).
select *
  FROM UNNEST([1, 2, 3]) val WITH OFFSET pos
       RIGHT JOIN UNNEST([1, 2]) val WITH OFFSET pos USING(val, pos)
--
QueryStmt
+-output_column_list=
| +-$array.val#3 AS val [INT64]
| +-$array_offset.pos#4 AS pos [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.val#3, $array_offset.pos#4]
    +-input_scan=
      +-JoinScan
        +-column_list=[$array.val#1, $array_offset.pos#2, $array.val#3, $array_offset.pos#4]
        +-join_type=RIGHT
        +-left_scan=
        | +-ArrayScan
        |   +-column_list=[$array.val#1, $array_offset.pos#2]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |   +-element_column=$array.val#1
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos#2)
        +-right_scan=
        | +-ArrayScan
        |   +-column_list=[$array.val#3, $array_offset.pos#4]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        |   +-element_column=$array.val#3
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos#4)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=$array.val#1)
            | +-ColumnRef(type=INT64, column=$array.val#3)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
              +-ColumnRef(type=INT64, column=$array_offset.pos#2)
              +-ColumnRef(type=INT64, column=$array_offset.pos#4)
==

select *
  FROM UNNEST([1, 2, 3]) val1 WITH OFFSET pos1
       JOIN UNNEST([1, 2]) val2 WITH OFFSET pos2 ON val1 = val2 AND pos1 = pos2
--
QueryStmt
+-output_column_list=
| +-$array.val1#1 AS val1 [INT64]
| +-$array_offset.pos1#2 AS pos1 [INT64]
| +-$array.val2#3 AS val2 [INT64]
| +-$array_offset.pos2#4 AS pos2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.val1#1, $array_offset.pos1#2, $array.val2#3, $array_offset.pos2#4]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.val1#1, $array_offset.pos1#2, $array.val2#3, $array_offset.pos2#4]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.val1#1, $array_offset.pos1#2]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |   +-element_column=$array.val1#1
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos1#2)
        +-array_expr=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        +-element_column=$array.val2#3
        +-array_offset_column=
        | +-ColumnHolder(column=$array_offset.pos2#4)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=$array.val1#1)
            | +-ColumnRef(type=INT64, column=$array.val2#3)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
              +-ColumnRef(type=INT64, column=$array_offset.pos1#2)
              +-ColumnRef(type=INT64, column=$array_offset.pos2#4)
==

# Right join two unnest(array_literal) using array_element and array_offset
# columns in ON condition.
select *
  FROM UNNEST([1, 2, 3]) val1 WITH OFFSET pos1
       RIGHT JOIN UNNEST([1, 2]) val2 WITH OFFSET pos2 ON val1 = val2 AND pos1 = pos2
--
QueryStmt
+-output_column_list=
| +-$array.val1#1 AS val1 [INT64]
| +-$array_offset.pos1#2 AS pos1 [INT64]
| +-$array.val2#3 AS val2 [INT64]
| +-$array_offset.pos2#4 AS pos2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.val1#1, $array_offset.pos1#2, $array.val2#3, $array_offset.pos2#4]
    +-input_scan=
      +-JoinScan
        +-column_list=[$array.val1#1, $array_offset.pos1#2, $array.val2#3, $array_offset.pos2#4]
        +-join_type=RIGHT
        +-left_scan=
        | +-ArrayScan
        |   +-column_list=[$array.val1#1, $array_offset.pos1#2]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |   +-element_column=$array.val1#1
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos1#2)
        +-right_scan=
        | +-ArrayScan
        |   +-column_list=[$array.val2#3, $array_offset.pos2#4]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        |   +-element_column=$array.val2#3
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos2#4)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=$array.val1#1)
            | +-ColumnRef(type=INT64, column=$array.val2#3)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
              +-ColumnRef(type=INT64, column=$array_offset.pos1#2)
              +-ColumnRef(type=INT64, column=$array_offset.pos2#4)
==

select offset_idx, *
  FROM UNNEST([1, 2, 3]) WITH OFFSET
       JOIN
       UNNEST([4, 5]) WITH OFFSET USING(offset_idx)
--
QueryStmt
+-output_column_list=
| +-$array_offset.offset_idx#2 AS offset_idx [INT64]
| +-$array_offset.offset_idx#2 AS offset_idx [INT64]
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#3 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array_offset.offset_idx#2, $array_offset.offset_idx#2, $array.$unnest1#1, $array.$unnest2#3]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.$unnest1#1, $array_offset.offset_idx#2, $array.$unnest2#3, $array_offset.offset_idx#4]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.$unnest1#1, $array_offset.offset_idx#2]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |   +-element_column=$array.$unnest1#1
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.offset_idx#2)
        +-array_expr=
        | +-Literal(type=ARRAY<INT64>, value=[4, 5])
        +-element_column=$array.$unnest2#3
        +-array_offset_column=
        | +-ColumnHolder(column=$array_offset.offset_idx#4)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array_offset.offset_idx#2)
            +-ColumnRef(type=INT64, column=$array_offset.offset_idx#4)
==

select X
  FROM TestTable T, T.KitchenSink.repeated_int32_val AS x WITH OFFSET x;
--
ERROR: Duplicate alias x found [at 2:71]
  FROM TestTable T, T.KitchenSink.repeated_int32_val AS x WITH OFFSET x;
                                                                      ^
==

select X
  FROM TestTable T,
       T.KitchenSink.repeated_int32_val WITH OFFSET repeated_int32_val;
--
ERROR: Duplicate alias repeated_int32_val found [at 3:53]
       T.KitchenSink.repeated_int32_val WITH OFFSET repeated_int32_val;
                                                    ^
==

select 1
from TestTable T,
     T.KitchenSink.repeated_date with offset pos,
     T.KitchenSink.repeated_int32_val with offset pos
--
ERROR: Duplicate alias pos found [at 4:51]
     T.KitchenSink.repeated_int32_val with offset pos
                                                  ^
==

select 1
from TestTable T,
     T.KitchenSink.repeated_date with offset,
     T.KitchenSink.repeated_int32_val with offset
--
ERROR: Duplicate alias offset_idx found [at 4:39]
     T.KitchenSink.repeated_int32_val with offset
                                      ^
==

# `key` is both an implicit column from TestTable and an explicit position.
# The explicit column currently resolves over top of the implicit column.
select key, T.key, '--', *
from TestTable T, T.KitchenSink.repeated_date d with offset key
--
QueryStmt
+-output_column_list=
| +-$array_offset.key#5 AS key [INT64]
| +-TestTable.key#1 AS key [INT32]
| +-$query.$col3#6 AS `$col3` [STRING]
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.d#4 AS d [DATE]
| +-$array_offset.key#5 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array_offset.key#5, TestTable.key#1, $query.$col3#6, TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.d#4, $array_offset.key#5]
    +-expr_list=
    | +-$col3#6 := Literal(type=STRING, value="--")
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.d#4, $array_offset.key#5]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2], alias="T")
        +-array_expr=
        | +-GetProtoField
        |   +-type=ARRAY<DATE>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_date
        |   +-default_value=[]
        |   +-format=DATE
        +-element_column=$array.d#4
        +-array_offset_column=
          +-ColumnHolder(column=$array_offset.key#5)
==

select pos
  FROM TestTable T
       JOIN T.KitchenSink.int32_val WITH OFFSET pos;
--
ERROR: Values referenced in FROM clause must be arrays. T.KitchenSink.int32_val has type INT32 [at 3:13]
       JOIN T.KitchenSink.int32_val WITH OFFSET pos;
            ^
==

select nrv, offset_idx, nrv.nested_int64, 3
  FROM TestTable T,
       T.KitchenSink.nested_repeated_value nrv WITH OFFSET;
--
QueryStmt
+-output_column_list=
| +-$array.nrv#4 AS nrv [PROTO<zetasql_test__.KitchenSinkPB.Nested>]
| +-$array_offset.offset_idx#5 AS offset_idx [INT64]
| +-$query.nested_int64#6 AS nested_int64 [INT64]
| +-$query.$col4#7 AS `$col4` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.nrv#4, $array_offset.offset_idx#5, $query.nested_int64#6, $query.$col4#7]
    +-expr_list=
    | +-nested_int64#6 :=
    | | +-GetProtoField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nrv#4)
    | |   +-field_descriptor=nested_int64
    | |   +-default_value=88
    | +-$col4#7 := Literal(type=INT64, value=3)
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.KitchenSink#3, $array.nrv#4, $array_offset.offset_idx#5]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="T")
        +-array_expr=
        | +-GetProtoField
        |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=nested_repeated_value
        |   +-default_value=[]
        +-element_column=$array.nrv#4
        +-array_offset_column=
          +-ColumnHolder(column=$array_offset.offset_idx#5)
==

# TODO: Update this message to use a more generic name instead of
# array scan when the feature is on.
# Unnest singleton array path expression with offset
[language_features={{|V_1_4_SINGLE_TABLE_NAME_ARRAY_PATH}}]
select pos from TestTable.KitchenSink.repeated_int32_val WITH OFFSET pos;
--
ERROR: WITH OFFSET can only be used with array scans [at 1:17]
select pos from TestTable.KitchenSink.repeated_int32_val WITH OFFSET pos;
                ^
==

select pos
  FROM TestTable T
       JOIN T.KitchenSink.repeated_int64_val WITH OFFSET pos USING (pos);
--
ERROR: Column pos in USING clause not found on left side of join [at 3:69]
       JOIN T.KitchenSink.repeated_int64_val WITH OFFSET pos USING (pos);
                                                                    ^
==

# Joining array and unnest(array_literal) with USING on array_offset.
select *
  FROM Testtable T
       JOIN T.KitchenSink.repeated_int64_val WITH OFFSET pos
       JOIN UNNEST([1, 2, 3]) WITH OFFSET pos USING(pos)
--
QueryStmt
+-output_column_list=
| +-$array_offset.pos#5 AS pos [INT64]
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.repeated_int64_val#4 AS repeated_int64_val [INT64]
| +-$array.$unnest1#6 AS `$unnest1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array_offset.pos#5, TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.repeated_int64_val#4, $array.$unnest1#6]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.repeated_int64_val#4, $array_offset.pos#5, $array.$unnest1#6, $array_offset.pos#7]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.repeated_int64_val#4, $array_offset.pos#5]
        |   +-input_scan=
        |   | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2], alias="T")
        |   +-array_expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<INT64>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=repeated_int64_val
        |   |   +-default_value=[]
        |   +-element_column=$array.repeated_int64_val#4
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos#5)
        +-array_expr=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        +-element_column=$array.$unnest1#6
        +-array_offset_column=
        | +-ColumnHolder(column=$array_offset.pos#7)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array_offset.pos#5)
            +-ColumnRef(type=INT64, column=$array_offset.pos#7)
==

# Joining two arrays with USING on array_offset.
select pos, arr1, arr2
  FROM TestTable T
       JOIN T.KitchenSink.repeated_int64_val arr1 WITH OFFSET pos
       JOIN T.KitchenSink.repeated_int64_val arr2 WITH OFFSET pos USING (pos);
--
QueryStmt
+-output_column_list=
| +-$array_offset.pos#5 AS pos [INT64]
| +-$array.arr1#4 AS arr1 [INT64]
| +-$array.arr2#6 AS arr2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array_offset.pos#5, $array.arr1#4, $array.arr2#6]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.KitchenSink#3, $array.arr1#4, $array_offset.pos#5, $array.arr2#6, $array_offset.pos#7]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[TestTable.KitchenSink#3, $array.arr1#4, $array_offset.pos#5]
        |   +-input_scan=
        |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="T")
        |   +-array_expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<INT64>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=repeated_int64_val
        |   |   +-default_value=[]
        |   +-element_column=$array.arr1#4
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos#5)
        +-array_expr=
        | +-GetProtoField
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_int64_val
        |   +-default_value=[]
        +-element_column=$array.arr2#6
        +-array_offset_column=
        | +-ColumnHolder(column=$array_offset.pos#7)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array_offset.pos#5)
            +-ColumnRef(type=INT64, column=$array_offset.pos#7)
==

select *
  FROM TestTable T
       JOIN T.KitchenSink.repeated_int64_val arr1 WITH OFFSET pos1
       JOIN T.KitchenSink.repeated_int64_val arr2 WITH OFFSET pos2
            ON pos1 = pos2;
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.arr1#4 AS arr1 [INT64]
| +-$array_offset.pos1#5 AS pos1 [INT64]
| +-$array.arr2#6 AS arr2 [INT64]
| +-$array_offset.pos2#7 AS pos2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.arr1#4, $array_offset.pos1#5, $array.arr2#6, $array_offset.pos2#7]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.arr1#4, $array_offset.pos1#5, $array.arr2#6, $array_offset.pos2#7]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.arr1#4, $array_offset.pos1#5]
        |   +-input_scan=
        |   | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2], alias="T")
        |   +-array_expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<INT64>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=repeated_int64_val
        |   |   +-default_value=[]
        |   +-element_column=$array.arr1#4
        |   +-array_offset_column=
        |     +-ColumnHolder(column=$array_offset.pos1#5)
        +-array_expr=
        | +-GetProtoField
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_int64_val
        |   +-default_value=[]
        +-element_column=$array.arr2#6
        +-array_offset_column=
        | +-ColumnHolder(column=$array_offset.pos2#7)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array_offset.pos1#5)
            +-ColumnRef(type=INT64, column=$array_offset.pos2#7)
==

# Join two arrays with USING on array_offset. Create an array from the subquery
# results and then unnest the resulting array.
select pos, K.arr1, K.arr2
  FROM TestTable T,
       UNNEST(
         ARRAY(select AS STRUCT *
                 FROM T.KitchenSink.repeated_int64_val arr1 WITH OFFSET pos
                      JOIN T.KitchenSink.repeated_int64_val arr2 WITH OFFSET pos
                           USING(pos))) K
--
QueryStmt
+-output_column_list=
| +-$query.pos#10 AS pos [INT64]
| +-$query.arr1#11 AS arr1 [INT64]
| +-$query.arr2#12 AS arr2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[pos#10, arr1#11, arr2#12]
    +-expr_list=
    | +-pos#10 :=
    | | +-GetStructField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<pos INT64, arr1 INT64, arr2 INT64>, column=$array.K#9)
    | |   +-field_idx=0
    | +-arr1#11 :=
    | | +-GetStructField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<pos INT64, arr1 INT64, arr2 INT64>, column=$array.K#9)
    | |   +-field_idx=1
    | +-arr2#12 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<pos INT64, arr1 INT64, arr2 INT64>, column=$array.K#9)
    |     +-field_idx=2
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.KitchenSink#3, $array.K#9]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="T")
        +-array_expr=
        | +-SubqueryExpr
        |   +-type=ARRAY<STRUCT<pos INT64, arr1 INT64, arr2 INT64>>
        |   +-subquery_type=ARRAY
        |   +-parameter_list=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-subquery=
        |     +-ProjectScan
        |       +-column_list=[$make_struct.$struct#8]
        |       +-expr_list=
        |       | +-$struct#8 :=
        |       |   +-MakeStruct
        |       |     +-type=STRUCT<pos INT64, arr1 INT64, arr2 INT64>
        |       |     +-field_list=
        |       |       +-ColumnRef(type=INT64, column=$array_offset.pos#5)
        |       |       +-ColumnRef(type=INT64, column=$array.arr1#4)
        |       |       +-ColumnRef(type=INT64, column=$array.arr2#6)
        |       +-input_scan=
        |         +-ProjectScan
        |           +-column_list=[$array_offset.pos#5, $array.arr1#4, $array.arr2#6]
        |           +-input_scan=
        |             +-ArrayScan
        |               +-column_list=[$array.arr1#4, $array_offset.pos#5, $array.arr2#6, $array_offset.pos#7]
        |               +-input_scan=
        |               | +-ArrayScan
        |               |   +-column_list=[$array.arr1#4, $array_offset.pos#5]
        |               |   +-array_expr=
        |               |   | +-GetProtoField
        |               |   |   +-type=ARRAY<INT64>
        |               |   |   +-expr=
        |               |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
        |               |   |   +-field_descriptor=repeated_int64_val
        |               |   |   +-default_value=[]
        |               |   +-element_column=$array.arr1#4
        |               |   +-array_offset_column=
        |               |     +-ColumnHolder(column=$array_offset.pos#5)
        |               +-array_expr=
        |               | +-GetProtoField
        |               |   +-type=ARRAY<INT64>
        |               |   +-expr=
        |               |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
        |               |   +-field_descriptor=repeated_int64_val
        |               |   +-default_value=[]
        |               +-element_column=$array.arr2#6
        |               +-array_offset_column=
        |               | +-ColumnHolder(column=$array_offset.pos#7)
        |               +-join_expr=
        |                 +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |                   +-ColumnRef(type=INT64, column=$array_offset.pos#5)
        |                   +-ColumnRef(type=INT64, column=$array_offset.pos#7)
        +-element_column=$array.K#9
==

select arr, pos
 from TestTable T
      JOIN T.KitchenSink.repeated_int64_val AS arr WITH OFFSET pos
           ON arr IS NULL;
--
QueryStmt
+-output_column_list=
| +-$array.arr#4 AS arr [INT64]
| +-$array_offset.pos#5 AS pos [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.arr#4, $array_offset.pos#5]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.KitchenSink#3, $array.arr#4, $array_offset.pos#5]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="T")
        +-array_expr=
        | +-GetProtoField
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_int64_val
        |   +-default_value=[]
        +-element_column=$array.arr#4
        +-array_offset_column=
        | +-ColumnHolder(column=$array_offset.pos#5)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array.arr#4)
==

select * FROM KeyValue WITH OFFSET pos;
--
ERROR: WITH OFFSET can only be used with array scans [at 1:15]
select * FROM KeyValue WITH OFFSET pos;
              ^
==

select * FROM (select * from KeyValue) kv WITH OFFSET pos;
--
ERROR: Syntax error: Expected end of input but got keyword WITH [at 1:43]
select * FROM (select * from KeyValue) kv WITH OFFSET pos;
                                          ^
==

WITH q as (select * from KeyValue) select * from q WITH OFFSET pos;
--
ERROR: WITH OFFSET can only be used with array scans [at 1:50]
WITH q as (select * from KeyValue) select * from q WITH OFFSET pos;
                                                 ^
==

select * FROM KeyValue K1 JOIN KeyValue K2 WITH OFFSET pos ON true;
--
ERROR: WITH OFFSET can only be used with array scans [at 1:32]
select * FROM KeyValue K1 JOIN KeyValue K2 WITH OFFSET pos ON true;
                               ^
==

WITH q as (select * from KeyValue)
  select * from KeyValue K JOIN q WITH OFFSET pos ON true;
--
ERROR: WITH OFFSET can only be used with array scans [at 2:33]
  select * from KeyValue K JOIN q WITH OFFSET pos ON true;
                                ^
