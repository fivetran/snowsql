select 0,1,1.5,'abc',"def",null,trUE,FALse;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.$col3#3 AS `$col3` [DOUBLE]
| +-$query.$col4#4 AS `$col4` [STRING]
| +-$query.$col5#5 AS `$col5` [STRING]
| +-$query.$col6#6 AS `$col6` [INT64]
| +-$query.$col7#7 AS `$col7` [BOOL]
| +-$query.$col8#8 AS `$col8` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=0)
    | +-$col2#2 := Literal(type=INT64, value=1)
    | +-$col3#3 := Literal(type=DOUBLE, value=1.5)
    | +-$col4#4 := Literal(type=STRING, value="abc")
    | +-$col5#5 := Literal(type=STRING, value="def")
    | +-$col6#6 := Literal(type=INT64, value=NULL)
    | +-$col7#7 := Literal(type=BOOL, value=true)
    | +-$col8#8 := Literal(type=BOOL, value=false)
    +-input_scan=
      +-SingleRowScan
==

select 1e10,.1e10,1.e10,1e-10,.1e-10;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DOUBLE]
| +-$query.$col2#2 AS `$col2` [DOUBLE]
| +-$query.$col3#3 AS `$col3` [DOUBLE]
| +-$query.$col4#4 AS `$col4` [DOUBLE]
| +-$query.$col5#5 AS `$col5` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5]
    +-expr_list=
    | +-$col1#1 := Literal(type=DOUBLE, value=10000000000)
    | +-$col2#2 := Literal(type=DOUBLE, value=1000000000)
    | +-$col3#3 := Literal(type=DOUBLE, value=10000000000)
    | +-$col4#4 := Literal(type=DOUBLE, value=1e-10)
    | +-$col5#5 := Literal(type=DOUBLE, value=1e-11)
    +-input_scan=
      +-SingleRowScan
==

# Some escaped strings.
# The escaped unicode character in the input is showing as UTF8 in the output.
select 'ab"`c', "ab'`d", "ab\`\"\'cd",
       "ab \x01 \n\r\t \U000022FD \u22FD", 'ab\x41g',
       'ab_\110\101\120\120\131_cd'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [STRING]
| +-$query.$col3#3 AS `$col3` [STRING]
| +-$query.$col4#4 AS `$col4` [STRING]
| +-$query.$col5#5 AS `$col5` [STRING]
| +-$query.$col6#6 AS `$col6` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value='ab"`c')
    | +-$col2#2 := Literal(type=STRING, value="ab'`d")
    | +-$col3#3 := Literal(type=STRING, value="ab`\"'cd")
    | +-$col4#4 := Literal(type=STRING, value="ab \x01 \n\r\t ⋽ ⋽")
    | +-$col5#5 := Literal(type=STRING, value="abAg")
    | +-$col6#6 := Literal(type=STRING, value="ab_HAPPY_cd")
    +-input_scan=
      +-SingleRowScan
==

# Basic tests for all the valid escapes.
select '\x53'        as OneHexByte
      ,'\X41'        as AnotherHexByte
      ,'\101'        as OneOctalByte
      ,'\a...'       as bell_ding_dong
      ,'\b...'       as backspace
      ,'\f...'       as new_page
      ,'\n...'       as new_line
      ,'\r...'       as carriage_return
      ,'\t...'       as tab
      ,'\v...'       as vertical_tab
      ,'\\...'      as backslash
      ,'\?...'       as question
      ,'\"...'       as single_double_quote
      ,'\'...'       as single_single_quote
      ,'\`...'       as single_back_tick
      ,"\"..."       as double_double_quote
      ,"\'..."       as double_single_quote
      ,"\`..."       as double_back_tick
      ,'\u0042'      as short_UTF8_char
      ,'\U00000041'  as long_UTF8_char
--
QueryStmt
+-output_column_list=
| +-$query.OneHexByte#1 AS OneHexByte [STRING]
| +-$query.AnotherHexByte#2 AS AnotherHexByte [STRING]
| +-$query.OneOctalByte#3 AS OneOctalByte [STRING]
| +-$query.bell_ding_dong#4 AS bell_ding_dong [STRING]
| +-$query.backspace#5 AS backspace [STRING]
| +-$query.new_page#6 AS new_page [STRING]
| +-$query.new_line#7 AS new_line [STRING]
| +-$query.carriage_return#8 AS carriage_return [STRING]
| +-$query.tab#9 AS tab [STRING]
| +-$query.vertical_tab#10 AS vertical_tab [STRING]
| +-$query.backslash#11 AS backslash [STRING]
| +-$query.question#12 AS question [STRING]
| +-$query.single_double_quote#13 AS single_double_quote [STRING]
| +-$query.single_single_quote#14 AS single_single_quote [STRING]
| +-$query.single_back_tick#15 AS single_back_tick [STRING]
| +-$query.double_double_quote#16 AS double_double_quote [STRING]
| +-$query.double_single_quote#17 AS double_single_quote [STRING]
| +-$query.double_back_tick#18 AS double_back_tick [STRING]
| +-$query.short_UTF8_char#19 AS short_UTF8_char [STRING]
| +-$query.long_UTF8_char#20 AS long_UTF8_char [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[OneHexByte#1, AnotherHexByte#2, OneOctalByte#3, bell_ding_dong#4, backspace#5, new_page#6, new_line#7, carriage_return#8, tab#9, vertical_tab#10, backslash#11, question#12, single_double_quote#13, single_single_quote#14, single_back_tick#15, double_double_quote#16, double_single_quote#17, double_back_tick#18, short_UTF8_char#19, long_UTF8_char#20]
    +-expr_list=
    | +-OneHexByte#1 := Literal(type=STRING, value="S")
    | +-AnotherHexByte#2 := Literal(type=STRING, value="A")
    | +-OneOctalByte#3 := Literal(type=STRING, value="A")
    | +-bell_ding_dong#4 := Literal(type=STRING, value="\x07...")
    | +-backspace#5 := Literal(type=STRING, value="\x08...")
    | +-new_page#6 := Literal(type=STRING, value="\x0c...")
    | +-new_line#7 := Literal(type=STRING, value="\n...")
    | +-carriage_return#8 := Literal(type=STRING, value="\r...")
    | +-tab#9 := Literal(type=STRING, value="\t...")
    | +-vertical_tab#10 := Literal(type=STRING, value="\x0b...")
    | +-backslash#11 := Literal(type=STRING, value="\\...")
    | +-question#12 := Literal(type=STRING, value="?...")
    | +-single_double_quote#13 := Literal(type=STRING, value='"...')
    | +-single_single_quote#14 := Literal(type=STRING, value="'...")
    | +-single_back_tick#15 := Literal(type=STRING, value="`...")
    | +-double_double_quote#16 := Literal(type=STRING, value='"...')
    | +-double_single_quote#17 := Literal(type=STRING, value="'...")
    | +-double_back_tick#18 := Literal(type=STRING, value="`...")
    | +-short_UTF8_char#19 := Literal(type=STRING, value="B")
    | +-long_UTF8_char#20 := Literal(type=STRING, value="A")
    +-input_scan=
      +-SingleRowScan
==

select 4875289346789234678923468923462;
--
ERROR: Invalid integer literal: 4875289346789234678923468923462 [at 1:8]
select 4875289346789234678923468923462;
       ^
==

SELECT 1, -1, 9223372036854775807, -9223372036854775808
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.$col3#3 AS `$col3` [INT64]
| +-$query.$col4#4 AS `$col4` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=1)
    | +-$col2#2 := Literal(type=INT64, value=-1)
    | +-$col3#3 := Literal(type=INT64, value=9223372036854775807)
    | +-$col4#4 := Literal(type=INT64, value=-9223372036854775808)
    +-input_scan=
      +-SingleRowScan
==

SELECT 9223372036854775808, -9223372036854775809
--
ERROR: Invalid integer literal: -9223372036854775809 [at 1:29]
SELECT 9223372036854775808, -9223372036854775809
                            ^
==

SELECT 1.1, 0.1, .1, 2., -.1, -1.1, 2.e3, 3.e-2, 2.e+3
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DOUBLE]
| +-$query.$col2#2 AS `$col2` [DOUBLE]
| +-$query.$col3#3 AS `$col3` [DOUBLE]
| +-$query.$col4#4 AS `$col4` [DOUBLE]
| +-$query.$col5#5 AS `$col5` [DOUBLE]
| +-$query.$col6#6 AS `$col6` [DOUBLE]
| +-$query.$col7#7 AS `$col7` [DOUBLE]
| +-$query.$col8#8 AS `$col8` [DOUBLE]
| +-$query.$col9#9 AS `$col9` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9]
    +-expr_list=
    | +-$col1#1 := Literal(type=DOUBLE, value=1.1)
    | +-$col2#2 := Literal(type=DOUBLE, value=0.1)
    | +-$col3#3 := Literal(type=DOUBLE, value=0.1)
    | +-$col4#4 := Literal(type=DOUBLE, value=2)
    | +-$col5#5 := Literal(type=DOUBLE, value=-0.1)
    | +-$col6#6 := Literal(type=DOUBLE, value=-1.1)
    | +-$col7#7 := Literal(type=DOUBLE, value=2000)
    | +-$col8#8 := Literal(type=DOUBLE, value=0.03)
    | +-$col9#9 := Literal(type=DOUBLE, value=2000)
    +-input_scan=
      +-SingleRowScan
==

SELECT 1.2, .2, 1., .
--
ERROR: Syntax error: Expected end of input but got "." [at 1:21]
SELECT 1.2, .2, 1., .
                    ^
==

# Max UINT64
SELECT 18446744073709551615
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=UINT64, value=18446744073709551615)
    +-input_scan=
      +-SingleRowScan
==

# Max UINT64+1
SELECT 18446744073709551616
--
ERROR: Invalid integer literal: 18446744073709551616 [at 1:8]
SELECT 18446744073709551616
       ^
==

SELECT - -9223372036854775808
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    |     +-Literal(type=INT64, value=-9223372036854775808)
    +-input_scan=
      +-SingleRowScan
==

SELECT 9223372036854775808, -9223372036854775809
--
ERROR: Invalid integer literal: -9223372036854775809 [at 1:29]
SELECT 9223372036854775808, -9223372036854775809
                            ^
==

select 1, -1, -(1), - -1, - -(1), -(-(1)), -(-1), - - -1, - - - -1,
       - 1, -/*xx*/1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.$col3#3 AS `$col3` [INT64]
| +-$query.$col4#4 AS `$col4` [INT64]
| +-$query.$col5#5 AS `$col5` [INT64]
| +-$query.$col6#6 AS `$col6` [INT64]
| +-$query.$col7#7 AS `$col7` [INT64]
| +-$query.$col8#8 AS `$col8` [INT64]
| +-$query.$col9#9 AS `$col9` [INT64]
| +-$query.$col10#10 AS `$col10` [INT64]
| +-$query.$col11#11 AS `$col11` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=1)
    | +-$col2#2 := Literal(type=INT64, value=-1)
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    | |   +-Literal(type=INT64, value=1)
    | +-$col4#4 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    | |   +-Literal(type=INT64, value=-1)
    | +-$col5#5 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    | |   +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    | |     +-Literal(type=INT64, value=1)
    | +-$col6#6 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    | |   +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    | |     +-Literal(type=INT64, value=1)
    | +-$col7#7 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    | |   +-Literal(type=INT64, value=-1)
    | +-$col8#8 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    | |   +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    | |     +-Literal(type=INT64, value=-1)
    | +-$col9#9 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    | |   +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    | |     +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    | |       +-Literal(type=INT64, value=-1)
    | +-$col10#10 := Literal(type=INT64, value=-1)
    | +-$col11#11 := Literal(type=INT64, value=-1)
    +-input_scan=
      +-SingleRowScan
==

select 1.0, -1.0, -(1.0), - -1.0, - -(1.0), -(-(1.0)), -(-1.0), - - -1.0,
        - - - -1.0, - 1.0, -/*xx*/1.0
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DOUBLE]
| +-$query.$col2#2 AS `$col2` [DOUBLE]
| +-$query.$col3#3 AS `$col3` [DOUBLE]
| +-$query.$col4#4 AS `$col4` [DOUBLE]
| +-$query.$col5#5 AS `$col5` [DOUBLE]
| +-$query.$col6#6 AS `$col6` [DOUBLE]
| +-$query.$col7#7 AS `$col7` [DOUBLE]
| +-$query.$col8#8 AS `$col8` [DOUBLE]
| +-$query.$col9#9 AS `$col9` [DOUBLE]
| +-$query.$col10#10 AS `$col10` [DOUBLE]
| +-$query.$col11#11 AS `$col11` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11]
    +-expr_list=
    | +-$col1#1 := Literal(type=DOUBLE, value=1)
    | +-$col2#2 := Literal(type=DOUBLE, value=-1)
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(DOUBLE) -> DOUBLE)
    | |   +-Literal(type=DOUBLE, value=1)
    | +-$col4#4 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(DOUBLE) -> DOUBLE)
    | |   +-Literal(type=DOUBLE, value=-1)
    | +-$col5#5 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(DOUBLE) -> DOUBLE)
    | |   +-FunctionCall(ZetaSQL:$unary_minus(DOUBLE) -> DOUBLE)
    | |     +-Literal(type=DOUBLE, value=1)
    | +-$col6#6 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(DOUBLE) -> DOUBLE)
    | |   +-FunctionCall(ZetaSQL:$unary_minus(DOUBLE) -> DOUBLE)
    | |     +-Literal(type=DOUBLE, value=1)
    | +-$col7#7 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(DOUBLE) -> DOUBLE)
    | |   +-Literal(type=DOUBLE, value=-1)
    | +-$col8#8 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(DOUBLE) -> DOUBLE)
    | |   +-FunctionCall(ZetaSQL:$unary_minus(DOUBLE) -> DOUBLE)
    | |     +-Literal(type=DOUBLE, value=-1)
    | +-$col9#9 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(DOUBLE) -> DOUBLE)
    | |   +-FunctionCall(ZetaSQL:$unary_minus(DOUBLE) -> DOUBLE)
    | |     +-FunctionCall(ZetaSQL:$unary_minus(DOUBLE) -> DOUBLE)
    | |       +-Literal(type=DOUBLE, value=-1)
    | +-$col10#10 := Literal(type=DOUBLE, value=-1)
    | +-$col11#11 := Literal(type=DOUBLE, value=-1)
    +-input_scan=
      +-SingleRowScan
==

select 0x8000000000000000, -0x8000000000000000
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [UINT64]
| +-$query.$col2#2 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=UINT64, value=9223372036854775808)
    | +-$col2#2 := Literal(type=INT64, value=-9223372036854775808)
    +-input_scan=
      +-SingleRowScan
==

select -(0x8000000000000000)
--
ERROR: No matching signature for operator - for argument types: UINT64. Supported signatures: -(INT32); -(INT64); -(FLOAT); -(DOUBLE) [at 1:8]
select -(0x8000000000000000)
       ^
==

select b'aaa'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=BYTES, value=b"aaa")
    +-input_scan=
      +-SingleRowScan
==

select 1, +1, ++1, +(1), '--', 1.0, +1.0, ++1.0, +(1.0), + 1, +/*xx*/1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.$col3#3 AS `$col3` [INT64]
| +-$query.$col4#4 AS `$col4` [INT64]
| +-$query.$col5#5 AS `$col5` [STRING]
| +-$query.$col6#6 AS `$col6` [DOUBLE]
| +-$query.$col7#7 AS `$col7` [DOUBLE]
| +-$query.$col8#8 AS `$col8` [DOUBLE]
| +-$query.$col9#9 AS `$col9` [DOUBLE]
| +-$query.$col10#10 AS `$col10` [INT64]
| +-$query.$col11#11 AS `$col11` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=1)
    | +-$col2#2 := Literal(type=INT64, value=1)
    | +-$col3#3 := Literal(type=INT64, value=1)
    | +-$col4#4 := Literal(type=INT64, value=1)
    | +-$col5#5 := Literal(type=STRING, value="--")
    | +-$col6#6 := Literal(type=DOUBLE, value=1)
    | +-$col7#7 := Literal(type=DOUBLE, value=1)
    | +-$col8#8 := Literal(type=DOUBLE, value=1)
    | +-$col9#9 := Literal(type=DOUBLE, value=1)
    | +-$col10#10 := Literal(type=INT64, value=1)
    | +-$col11#11 := Literal(type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan
==

select -+1, +-1, -+1.0, +-1.0
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.$col3#3 AS `$col3` [DOUBLE]
| +-$query.$col4#4 AS `$col4` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    | |   +-Literal(type=INT64, value=1)
    | +-$col2#2 := Literal(type=INT64, value=-1)
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:$unary_minus(DOUBLE) -> DOUBLE)
    | |   +-Literal(type=DOUBLE, value=1)
    | +-$col4#4 := Literal(type=DOUBLE, value=-1)
    +-input_scan=
      +-SingleRowScan
==

select +null
--
ERROR: Operands of + cannot be literal NULL [at 1:9]
select +null
        ^
==

select +(null)
--
ERROR: Operands of + cannot be literal NULL [at 1:10]
select +(null)
         ^
==

select + null
--
ERROR: Operands of + cannot be literal NULL [at 1:10]
select + null
         ^
==

select `bytes`
from SimpleTypes
where `bytes` = b'aaa';
--
QueryStmt
+-output_column_list=
| +-SimpleTypes.bytes#6 AS bytes [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[SimpleTypes.bytes#6]
    +-input_scan=
      +-FilterScan
        +-column_list=[SimpleTypes.bytes#6]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypes.bytes#6], table=SimpleTypes, column_index_list=[5])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(BYTES, BYTES) -> BOOL)
            +-ColumnRef(type=BYTES, column=SimpleTypes.bytes#6)
            +-Literal(type=BYTES, value=b"aaa")
==

# Basic tests for all the valid bytes escapes.
select b'\x53'        as OneHexByte
      ,b'\X41'        as AnotherHexByte
      ,b'\101'        as OneOctalByte
      ,b'\a...'       as bell_ding_dong
      ,b'\b...'       as backspace
      ,b'\f...'       as new_page
      ,b'\n...'       as new_line
      ,b'\r...'       as carriage_return
      ,b'\t...'       as tab
      ,b'\v...'       as vertical_tab
      ,b'\\...'      as backslash
      ,b'\?...'       as question
      ,b'\"...'       as single_double_quote
      ,b'\'...'       as single_single_quote
      ,b'\`...'       as single_back_tick
      ,b"\"..."       as double_double_quote
      ,b"\'..."       as double_single_quote
      ,b"\`..."       as double_back_tick
--
QueryStmt
+-output_column_list=
| +-$query.OneHexByte#1 AS OneHexByte [BYTES]
| +-$query.AnotherHexByte#2 AS AnotherHexByte [BYTES]
| +-$query.OneOctalByte#3 AS OneOctalByte [BYTES]
| +-$query.bell_ding_dong#4 AS bell_ding_dong [BYTES]
| +-$query.backspace#5 AS backspace [BYTES]
| +-$query.new_page#6 AS new_page [BYTES]
| +-$query.new_line#7 AS new_line [BYTES]
| +-$query.carriage_return#8 AS carriage_return [BYTES]
| +-$query.tab#9 AS tab [BYTES]
| +-$query.vertical_tab#10 AS vertical_tab [BYTES]
| +-$query.backslash#11 AS backslash [BYTES]
| +-$query.question#12 AS question [BYTES]
| +-$query.single_double_quote#13 AS single_double_quote [BYTES]
| +-$query.single_single_quote#14 AS single_single_quote [BYTES]
| +-$query.single_back_tick#15 AS single_back_tick [BYTES]
| +-$query.double_double_quote#16 AS double_double_quote [BYTES]
| +-$query.double_single_quote#17 AS double_single_quote [BYTES]
| +-$query.double_back_tick#18 AS double_back_tick [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$query.[OneHexByte#1, AnotherHexByte#2, OneOctalByte#3, bell_ding_dong#4, backspace#5, new_page#6, new_line#7, carriage_return#8, tab#9, vertical_tab#10, backslash#11, question#12, single_double_quote#13, single_single_quote#14, single_back_tick#15, double_double_quote#16, double_single_quote#17, double_back_tick#18]
    +-expr_list=
    | +-OneHexByte#1 := Literal(type=BYTES, value=b"S")
    | +-AnotherHexByte#2 := Literal(type=BYTES, value=b"A")
    | +-OneOctalByte#3 := Literal(type=BYTES, value=b"A")
    | +-bell_ding_dong#4 := Literal(type=BYTES, value=b"\x07...")
    | +-backspace#5 := Literal(type=BYTES, value=b"\x08...")
    | +-new_page#6 := Literal(type=BYTES, value=b"\x0c...")
    | +-new_line#7 := Literal(type=BYTES, value=b"\x0a...")
    | +-carriage_return#8 := Literal(type=BYTES, value=b"\x0d...")
    | +-tab#9 := Literal(type=BYTES, value=b"\x09...")
    | +-vertical_tab#10 := Literal(type=BYTES, value=b"\x0b...")
    | +-backslash#11 := Literal(type=BYTES, value=b"\\...")
    | +-question#12 := Literal(type=BYTES, value=b"?...")
    | +-single_double_quote#13 := Literal(type=BYTES, value=b'"...')
    | +-single_single_quote#14 := Literal(type=BYTES, value=b"'...")
    | +-single_back_tick#15 := Literal(type=BYTES, value=b"`...")
    | +-double_double_quote#16 := Literal(type=BYTES, value=b'"...')
    | +-double_single_quote#17 := Literal(type=BYTES, value=b"'...")
    | +-double_back_tick#18 := Literal(type=BYTES, value=b"`...")
    +-input_scan=
      +-SingleRowScan
==

select b'*\x00...\xFF*'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=BYTES, value=b"*\x00...\xff*")
    +-input_scan=
      +-SingleRowScan
==

select b'*\000...\377*'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=BYTES, value=b"*\x00...\xff*")
    +-input_scan=
      +-SingleRowScan

==

select """line1""", '''line1'''
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="line1")
    | +-$col2#2 := Literal(type=STRING, value="line1")
    +-input_scan=
      +-SingleRowScan
==

select """line1 'single_quote' "double_quote" \x41g \u22FD \U000022FD"""
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="line1 'single_quote' \"double_quote\" Ag ⋽ ⋽")
    +-input_scan=
      +-SingleRowScan
==

select '''line1 'single_quote' "double_quote" \x41g \u22FD \U000022FD'''
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="line1 'single_quote' \"double_quote\" Ag ⋽ ⋽")
    +-input_scan=
      +-SingleRowScan
==

select """line1
line2
line3"""
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="line1\nline2\nline3")
    +-input_scan=
      +-SingleRowScan
==

select """line1\\
line2"""
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="line1\\\nline2")
    +-input_scan=
      +-SingleRowScan
==

select """a'''a'''a"""
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="a'''a'''a")
    +-input_scan=
      +-SingleRowScan
==

select '''a"""a"""a'''
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value='a"""a"""a')
    +-input_scan=
      +-SingleRowScan
==

select """""", ''''''
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="")
    | +-$col2#2 := Literal(type=STRING, value="")
    +-input_scan=
      +-SingleRowScan
==

select """a /* comment */"""
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="a /* comment */")
    +-input_scan=
      +-SingleRowScan
==

select """"a" """
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value='"a" ')
    +-input_scan=
      +-SingleRowScan
==

select '''abc\'''', '''abc\\'''
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="abc'")
    | +-$col2#2 := Literal(type=STRING, value="abc\\")
    +-input_scan=
      +-SingleRowScan
==

select r"1",
       r"\x53", r"\x123", r'\001', r'a\444A',
       r'a\e', r'\ea',
       r"\U1234", R"\u",
       r'\xc2\\', r'|\xc2|\\',
       r'f\(abc,(.*),def\?'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [STRING]
| +-$query.$col3#3 AS `$col3` [STRING]
| +-$query.$col4#4 AS `$col4` [STRING]
| +-$query.$col5#5 AS `$col5` [STRING]
| +-$query.$col6#6 AS `$col6` [STRING]
| +-$query.$col7#7 AS `$col7` [STRING]
| +-$query.$col8#8 AS `$col8` [STRING]
| +-$query.$col9#9 AS `$col9` [STRING]
| +-$query.$col10#10 AS `$col10` [STRING]
| +-$query.$col11#11 AS `$col11` [STRING]
| +-$query.$col12#12 AS `$col12` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="1")
    | +-$col2#2 := Literal(type=STRING, value="\\x53")
    | +-$col3#3 := Literal(type=STRING, value="\\x123")
    | +-$col4#4 := Literal(type=STRING, value="\\001")
    | +-$col5#5 := Literal(type=STRING, value="a\\444A")
    | +-$col6#6 := Literal(type=STRING, value="a\\e")
    | +-$col7#7 := Literal(type=STRING, value="\\ea")
    | +-$col8#8 := Literal(type=STRING, value="\\U1234")
    | +-$col9#9 := Literal(type=STRING, value="\\u")
    | +-$col10#10 := Literal(type=STRING, value="\\xc2\\\\")
    | +-$col11#11 := Literal(type=STRING, value="|\\xc2|\\\\")
    | +-$col12#12 := Literal(type=STRING, value="f\\(abc,(.*),def\\?")
    +-input_scan=
      +-SingleRowScan
==

select rb"1",
       rb"\x53", rb"\x123", rb'\001', rb'a\444A',
       rb'a\e', rb'\ea',
       rb"\U1234", RB"\u",
       rb'\xc2\\', rb'|\xc2|\\',
       rb'f\(abc,(.*),def\?'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
| +-$query.$col2#2 AS `$col2` [BYTES]
| +-$query.$col3#3 AS `$col3` [BYTES]
| +-$query.$col4#4 AS `$col4` [BYTES]
| +-$query.$col5#5 AS `$col5` [BYTES]
| +-$query.$col6#6 AS `$col6` [BYTES]
| +-$query.$col7#7 AS `$col7` [BYTES]
| +-$query.$col8#8 AS `$col8` [BYTES]
| +-$query.$col9#9 AS `$col9` [BYTES]
| +-$query.$col10#10 AS `$col10` [BYTES]
| +-$query.$col11#11 AS `$col11` [BYTES]
| +-$query.$col12#12 AS `$col12` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12]
    +-expr_list=
    | +-$col1#1 := Literal(type=BYTES, value=b"1")
    | +-$col2#2 := Literal(type=BYTES, value=b"\\x53")
    | +-$col3#3 := Literal(type=BYTES, value=b"\\x123")
    | +-$col4#4 := Literal(type=BYTES, value=b"\\001")
    | +-$col5#5 := Literal(type=BYTES, value=b"a\\444A")
    | +-$col6#6 := Literal(type=BYTES, value=b"a\\e")
    | +-$col7#7 := Literal(type=BYTES, value=b"\\ea")
    | +-$col8#8 := Literal(type=BYTES, value=b"\\U1234")
    | +-$col9#9 := Literal(type=BYTES, value=b"\\u")
    | +-$col10#10 := Literal(type=BYTES, value=b"\\xc2\\\\")
    | +-$col11#11 := Literal(type=BYTES, value=b"|\\xc2|\\\\")
    | +-$col12#12 := Literal(type=BYTES, value=b"f\\(abc,(.*),def\\?")
    +-input_scan=
      +-SingleRowScan
==

select rb"""1""",
       rb"""\x53""", rb"""\x123""", rb'''\001''', rb'''a\444A''',
       rb'''a\e''', rb'''\ea''',
       rb"""\U1234""", RB"""\u""",
       rb'''\xc2\\''', rb'''|\xc2|\\''',
       rb'''f\(abc,(.*),def\?'''
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
| +-$query.$col2#2 AS `$col2` [BYTES]
| +-$query.$col3#3 AS `$col3` [BYTES]
| +-$query.$col4#4 AS `$col4` [BYTES]
| +-$query.$col5#5 AS `$col5` [BYTES]
| +-$query.$col6#6 AS `$col6` [BYTES]
| +-$query.$col7#7 AS `$col7` [BYTES]
| +-$query.$col8#8 AS `$col8` [BYTES]
| +-$query.$col9#9 AS `$col9` [BYTES]
| +-$query.$col10#10 AS `$col10` [BYTES]
| +-$query.$col11#11 AS `$col11` [BYTES]
| +-$query.$col12#12 AS `$col12` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12]
    +-expr_list=
    | +-$col1#1 := Literal(type=BYTES, value=b"1")
    | +-$col2#2 := Literal(type=BYTES, value=b"\\x53")
    | +-$col3#3 := Literal(type=BYTES, value=b"\\x123")
    | +-$col4#4 := Literal(type=BYTES, value=b"\\001")
    | +-$col5#5 := Literal(type=BYTES, value=b"a\\444A")
    | +-$col6#6 := Literal(type=BYTES, value=b"a\\e")
    | +-$col7#7 := Literal(type=BYTES, value=b"\\ea")
    | +-$col8#8 := Literal(type=BYTES, value=b"\\U1234")
    | +-$col9#9 := Literal(type=BYTES, value=b"\\u")
    | +-$col10#10 := Literal(type=BYTES, value=b"\\xc2\\\\")
    | +-$col11#11 := Literal(type=BYTES, value=b"|\\xc2|\\\\")
    | +-$col12#12 := Literal(type=BYTES, value=b"f\\(abc,(.*),def\\?")
    +-input_scan=
      +-SingleRowScan
==

select br"1",
       br"\x53", br"\x123", br'\001', br'a\444A',
       br'a\e', br'\ea',
       br"\U1234", BR"\u",
       br'\xc2\\', br'|\xc2|\\',
       br'f\(abc,(.*),def\?'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
| +-$query.$col2#2 AS `$col2` [BYTES]
| +-$query.$col3#3 AS `$col3` [BYTES]
| +-$query.$col4#4 AS `$col4` [BYTES]
| +-$query.$col5#5 AS `$col5` [BYTES]
| +-$query.$col6#6 AS `$col6` [BYTES]
| +-$query.$col7#7 AS `$col7` [BYTES]
| +-$query.$col8#8 AS `$col8` [BYTES]
| +-$query.$col9#9 AS `$col9` [BYTES]
| +-$query.$col10#10 AS `$col10` [BYTES]
| +-$query.$col11#11 AS `$col11` [BYTES]
| +-$query.$col12#12 AS `$col12` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12]
    +-expr_list=
    | +-$col1#1 := Literal(type=BYTES, value=b"1")
    | +-$col2#2 := Literal(type=BYTES, value=b"\\x53")
    | +-$col3#3 := Literal(type=BYTES, value=b"\\x123")
    | +-$col4#4 := Literal(type=BYTES, value=b"\\001")
    | +-$col5#5 := Literal(type=BYTES, value=b"a\\444A")
    | +-$col6#6 := Literal(type=BYTES, value=b"a\\e")
    | +-$col7#7 := Literal(type=BYTES, value=b"\\ea")
    | +-$col8#8 := Literal(type=BYTES, value=b"\\U1234")
    | +-$col9#9 := Literal(type=BYTES, value=b"\\u")
    | +-$col10#10 := Literal(type=BYTES, value=b"\\xc2\\\\")
    | +-$col11#11 := Literal(type=BYTES, value=b"|\\xc2|\\\\")
    | +-$col12#12 := Literal(type=BYTES, value=b"f\\(abc,(.*),def\\?")
    +-input_scan=
      +-SingleRowScan
==

select br"""1""",
       br"""\x53""", br"""\x123""", br'''\001''', br'''a\444A''',
       br'''a\e''', br'''\ea''',
       br"""\U1234""", BR"""\u""",
       br'''\xc2\\''', br'''|\xc2|\\''',
       br'''f\(abc,(.*),def\?'''
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
| +-$query.$col2#2 AS `$col2` [BYTES]
| +-$query.$col3#3 AS `$col3` [BYTES]
| +-$query.$col4#4 AS `$col4` [BYTES]
| +-$query.$col5#5 AS `$col5` [BYTES]
| +-$query.$col6#6 AS `$col6` [BYTES]
| +-$query.$col7#7 AS `$col7` [BYTES]
| +-$query.$col8#8 AS `$col8` [BYTES]
| +-$query.$col9#9 AS `$col9` [BYTES]
| +-$query.$col10#10 AS `$col10` [BYTES]
| +-$query.$col11#11 AS `$col11` [BYTES]
| +-$query.$col12#12 AS `$col12` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12]
    +-expr_list=
    | +-$col1#1 := Literal(type=BYTES, value=b"1")
    | +-$col2#2 := Literal(type=BYTES, value=b"\\x53")
    | +-$col3#3 := Literal(type=BYTES, value=b"\\x123")
    | +-$col4#4 := Literal(type=BYTES, value=b"\\001")
    | +-$col5#5 := Literal(type=BYTES, value=b"a\\444A")
    | +-$col6#6 := Literal(type=BYTES, value=b"a\\e")
    | +-$col7#7 := Literal(type=BYTES, value=b"\\ea")
    | +-$col8#8 := Literal(type=BYTES, value=b"\\U1234")
    | +-$col9#9 := Literal(type=BYTES, value=b"\\u")
    | +-$col10#10 := Literal(type=BYTES, value=b"\\xc2\\\\")
    | +-$col11#11 := Literal(type=BYTES, value=b"|\\xc2|\\\\")
    | +-$col12#12 := Literal(type=BYTES, value=b"f\\(abc,(.*),def\\?")
    +-input_scan=
      +-SingleRowScan
==

select r'\\', r'\\\\'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="\\\\")
    | +-$col2#2 := Literal(type=STRING, value="\\\\\\\\")
    +-input_scan=
      +-SingleRowScan
==

select r'a\'b', r"a\"b",
       r'''a\'''b''', r'''a'\''b''', r'''a''\'b''',
       r"""a\"""b""", r"""a"\""b""", r"""a""\"b"""
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [STRING]
| +-$query.$col3#3 AS `$col3` [STRING]
| +-$query.$col4#4 AS `$col4` [STRING]
| +-$query.$col5#5 AS `$col5` [STRING]
| +-$query.$col6#6 AS `$col6` [STRING]
| +-$query.$col7#7 AS `$col7` [STRING]
| +-$query.$col8#8 AS `$col8` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="a\\'b")
    | +-$col2#2 := Literal(type=STRING, value='a\\"b')
    | +-$col3#3 := Literal(type=STRING, value="a\\'''b")
    | +-$col4#4 := Literal(type=STRING, value="a'\\''b")
    | +-$col5#5 := Literal(type=STRING, value="a''\\'b")
    | +-$col6#6 := Literal(type=STRING, value='a\\"""b')
    | +-$col7#7 := Literal(type=STRING, value='a"\\""b')
    | +-$col8#8 := Literal(type=STRING, value='a""\\"b')
    +-input_scan=
      +-SingleRowScan
==

select r'''...
           ...''',
       r'''...\
           ...''',
       br'''...
            ...''',
       br'''...\
            ...''',
       rb'''...
            ...''',
       rb'''...\
            ...'''
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [STRING]
| +-$query.$col3#3 AS `$col3` [BYTES]
| +-$query.$col4#4 AS `$col4` [BYTES]
| +-$query.$col5#5 AS `$col5` [BYTES]
| +-$query.$col6#6 AS `$col6` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="...\n           ...")
    | +-$col2#2 := Literal(type=STRING, value="...\\\n           ...")
    | +-$col3#3 := Literal(type=BYTES, value=b"...\x0a            ...")
    | +-$col4#4 := Literal(type=BYTES, value=b"...\\\x0a            ...")
    | +-$col5#5 := Literal(type=BYTES, value=b"...\x0a            ...")
    | +-$col6#6 := Literal(type=BYTES, value=b"...\\\x0a            ...")
    +-input_scan=
      +-SingleRowScan
==

# Empty raw strings.
select r'', r"", r'''''', r""""""
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
| +-$query.$col2#2 AS `$col2` [STRING]
| +-$query.$col3#3 AS `$col3` [STRING]
| +-$query.$col4#4 AS `$col4` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4]
    +-expr_list=
    | +-$col1#1 := Literal(type=STRING, value="")
    | +-$col2#2 := Literal(type=STRING, value="")
    | +-$col3#3 := Literal(type=STRING, value="")
    | +-$col4#4 := Literal(type=STRING, value="")
    +-input_scan=
      +-SingleRowScan
==

# Empty raw bytes.
select rb'', br'', rb"", br"", rb'''''', br'''''', rb"""""", br""""""
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
| +-$query.$col2#2 AS `$col2` [BYTES]
| +-$query.$col3#3 AS `$col3` [BYTES]
| +-$query.$col4#4 AS `$col4` [BYTES]
| +-$query.$col5#5 AS `$col5` [BYTES]
| +-$query.$col6#6 AS `$col6` [BYTES]
| +-$query.$col7#7 AS `$col7` [BYTES]
| +-$query.$col8#8 AS `$col8` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8]
    +-expr_list=
    | +-$col1#1 := Literal(type=BYTES, value=b"")
    | +-$col2#2 := Literal(type=BYTES, value=b"")
    | +-$col3#3 := Literal(type=BYTES, value=b"")
    | +-$col4#4 := Literal(type=BYTES, value=b"")
    | +-$col5#5 := Literal(type=BYTES, value=b"")
    | +-$col6#6 := Literal(type=BYTES, value=b"")
    | +-$col7#7 := Literal(type=BYTES, value=b"")
    | +-$col8#8 := Literal(type=BYTES, value=b"")
    +-input_scan=
      +-SingleRowScan
==

# Hex integer (UINT64, INT64) literals.
SELECT 0x0, -0x1, 0xf, 0x1f, 0xabcdef, -0xAbCdEf, 0X1f, 0Xf1, 0x1234567890aBcDeF
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.$col3#3 AS `$col3` [INT64]
| +-$query.$col4#4 AS `$col4` [INT64]
| +-$query.$col5#5 AS `$col5` [INT64]
| +-$query.$col6#6 AS `$col6` [INT64]
| +-$query.$col7#7 AS `$col7` [INT64]
| +-$query.$col8#8 AS `$col8` [INT64]
| +-$query.$col9#9 AS `$col9` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=0)
    | +-$col2#2 := Literal(type=INT64, value=-1)
    | +-$col3#3 := Literal(type=INT64, value=15)
    | +-$col4#4 := Literal(type=INT64, value=31)
    | +-$col5#5 := Literal(type=INT64, value=11259375)
    | +-$col6#6 := Literal(type=INT64, value=-11259375)
    | +-$col7#7 := Literal(type=INT64, value=31)
    | +-$col8#8 := Literal(type=INT64, value=241)
    | +-$col9#9 := Literal(type=INT64, value=1311768467294899695)
    +-input_scan=
      +-SingleRowScan
==

select 0x0 + 0x1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=0)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan
==

# Hex literals are unsigned when parsed (just like regular integer literals),
# and the unary minus operator is applied to the original unsigned value to
# yield the final integer literal value.  Thus, -0x8000000000000000 resolves
# as -9223372036854775808.
SELECT 0x7fffffffffffffff as int64_9223372036854775807,
       0x8000000000000000 as uint64_9223372036854775808,
       0xffffffffffffffff as uint64_18446744073709551615,
       -0x8000000000000000 as int64_negative_9223372036854775808,
       -0x80000000 AS int64_col
--
QueryStmt
+-output_column_list=
| +-$query.int64_9223372036854775807#1 AS int64_9223372036854775807 [INT64]
| +-$query.uint64_9223372036854775808#2 AS uint64_9223372036854775808 [UINT64]
| +-$query.uint64_18446744073709551615#3 AS uint64_18446744073709551615 [UINT64]
| +-$query.int64_negative_9223372036854775808#4 AS int64_negative_9223372036854775808 [INT64]
| +-$query.int64_col#5 AS int64_col [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[int64_9223372036854775807#1, uint64_9223372036854775808#2, uint64_18446744073709551615#3, int64_negative_9223372036854775808#4, int64_col#5]
    +-expr_list=
    | +-int64_9223372036854775807#1 := Literal(type=INT64, value=9223372036854775807)
    | +-uint64_9223372036854775808#2 := Literal(type=UINT64, value=9223372036854775808)
    | +-uint64_18446744073709551615#3 := Literal(type=UINT64, value=18446744073709551615)
    | +-int64_negative_9223372036854775808#4 := Literal(type=INT64, value=-9223372036854775808)
    | +-int64_col#5 := Literal(type=INT64, value=-2147483648)
    +-input_scan=
      +-SingleRowScan
==

# More than 16 digits.  This works as leading 0s are ignored.
select 0x000000000000000000000000000000000000000000000000000001
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan
==

# Test hex literal integers in group by, order by
select int32, sum(int64), count(*) from SimpleTypes group by 0x1 order by 0x2
--
QueryStmt
+-output_column_list=
| +-$groupby.int32#21 AS int32 [INT32]
| +-$aggregate.$agg1#19 AS `$col2` [INT64]
| +-$aggregate.$agg2#20 AS `$col3` [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$groupby.int32#21, $aggregate.$agg1#19, $aggregate.$agg2#20]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AggregateScan
    |   +-column_list=[$groupby.int32#21, $aggregate.$agg1#19, $aggregate.$agg2#20]
    |   +-input_scan=
    |   | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
    |   +-group_by_list=
    |   | +-int32#21 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |   +-aggregate_list=
    |     +-$agg1#19 :=
    |     | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |     |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-$agg2#20 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=INT64, column=$aggregate.$agg1#19)
==

# Integers with leading zeros are NOT parsed as octal.
select 010, -010
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=10)
    | +-$col2#2 := Literal(type=INT64, value=-10)
    +-input_scan=
      +-SingleRowScan
==

# b/62633017: String with escaped literal followed by AND with no whitespace.
SELECT 1 FROM (SELECT 1) WHERE 'foo' = 'foo'AND'bar' = 'bar'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-column_list=[$subquery1.$col1#1]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.$col1#1]
        |   +-expr_list=
        |   | +-$col1#1 := Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            | +-Literal(type=STRING, value="foo")
            | +-Literal(type=STRING, value="foo")
            +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
              +-Literal(type=STRING, value="bar")
              +-Literal(type=STRING, value="bar")
==

[language_features={{NUMERIC_TYPE|}}]
SELECT
  NUMERIC '1.1',
  NUMERIC '0.123',
  NUMERIC '456.0',
  NUMERIC '123',
  NUMERIC "123",
  NUMERIC '0',
  NUMERIC '-1.1',
  NUMERIC '-0.123',
  NUMERIC '-456.0',
  NUMERIC '-123',
  NUMERIC "-123",
  NUMERIC '0.999999999',
  NUMERIC '99999999999999999999999999999.999999999',
  NUMERIC '-0.999999999',
  NUMERIC '-99999999999999999999999999999.999999999'
--
ALTERNATION GROUP: NUMERIC_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [NUMERIC]
| +-$query.$col2#2 AS `$col2` [NUMERIC]
| +-$query.$col3#3 AS `$col3` [NUMERIC]
| +-$query.$col4#4 AS `$col4` [NUMERIC]
| +-$query.$col5#5 AS `$col5` [NUMERIC]
| +-$query.$col6#6 AS `$col6` [NUMERIC]
| +-$query.$col7#7 AS `$col7` [NUMERIC]
| +-$query.$col8#8 AS `$col8` [NUMERIC]
| +-$query.$col9#9 AS `$col9` [NUMERIC]
| +-$query.$col10#10 AS `$col10` [NUMERIC]
| +-$query.$col11#11 AS `$col11` [NUMERIC]
| +-$query.$col12#12 AS `$col12` [NUMERIC]
| +-$query.$col13#13 AS `$col13` [NUMERIC]
| +-$query.$col14#14 AS `$col14` [NUMERIC]
| +-$query.$col15#15 AS `$col15` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12, $col13#13, $col14#14, $col15#15]
    +-expr_list=
    | +-$col1#1 := Literal(type=NUMERIC, value=1.1, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=NUMERIC, value=0.123, has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=NUMERIC, value=456, has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=NUMERIC, value=123, has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=NUMERIC, value=123, has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=NUMERIC, value=0, has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=NUMERIC, value=-1.1, has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=NUMERIC, value=-0.123, has_explicit_type=TRUE)
    | +-$col9#9 := Literal(type=NUMERIC, value=-456, has_explicit_type=TRUE)
    | +-$col10#10 := Literal(type=NUMERIC, value=-123, has_explicit_type=TRUE)
    | +-$col11#11 := Literal(type=NUMERIC, value=-123, has_explicit_type=TRUE)
    | +-$col12#12 := Literal(type=NUMERIC, value=0.999999999, has_explicit_type=TRUE)
    | +-$col13#13 := Literal(type=NUMERIC, value=99999999999999999999999999999.999999999, has_explicit_type=TRUE)
    | +-$col14#14 := Literal(type=NUMERIC, value=-0.999999999, has_explicit_type=TRUE)
    | +-$col15#15 := Literal(type=NUMERIC, value=-99999999999999999999999999999.999999999, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: NUMERIC literals are not supported [at 2:3]
  NUMERIC '1.1',
  ^
==

[language_features=NUMERIC_TYPE]
SELECT NUMERIC '.1', NUMERIC '1.', NUMERIC '1e12', NUMERIC '1.1e12'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [NUMERIC]
| +-$query.$col2#2 AS `$col2` [NUMERIC]
| +-$query.$col3#3 AS `$col3` [NUMERIC]
| +-$query.$col4#4 AS `$col4` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4]
    +-expr_list=
    | +-$col1#1 := Literal(type=NUMERIC, value=0.1, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=NUMERIC, value=1, has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=NUMERIC, value=1000000000000, has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=NUMERIC, value=1100000000000, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NUMERIC_TYPE]
SELECT NUMERIC ' -100',
       NUMERIC ' +101',
       NUMERIC '-102 ',
       NUMERIC '+103 ',
       NUMERIC '  123  ',
       NUMERIC '0000124',
       NUMERIC '+000125',
       NUMERIC '-000126',
       NUMERIC '127.0000'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [NUMERIC]
| +-$query.$col2#2 AS `$col2` [NUMERIC]
| +-$query.$col3#3 AS `$col3` [NUMERIC]
| +-$query.$col4#4 AS `$col4` [NUMERIC]
| +-$query.$col5#5 AS `$col5` [NUMERIC]
| +-$query.$col6#6 AS `$col6` [NUMERIC]
| +-$query.$col7#7 AS `$col7` [NUMERIC]
| +-$query.$col8#8 AS `$col8` [NUMERIC]
| +-$query.$col9#9 AS `$col9` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9]
    +-expr_list=
    | +-$col1#1 := Literal(type=NUMERIC, value=-100, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=NUMERIC, value=101, has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=NUMERIC, value=-102, has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=NUMERIC, value=103, has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=NUMERIC, value=123, has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=NUMERIC, value=124, has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=NUMERIC, value=125, has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=NUMERIC, value=-126, has_explicit_type=TRUE)
    | +-$col9#9 := Literal(type=NUMERIC, value=127, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NUMERIC_TYPE]
SELECT -NUMERIC '123'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$unary_minus(NUMERIC) -> NUMERIC)
    |     +-Literal(type=NUMERIC, value=123, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features={{NUMERIC_TYPE|}}]
SELECT NUMERIC 'abc'
--
ALTERNATION GROUP: NUMERIC_TYPE
--
ERROR: Invalid NUMERIC literal: "abc" [at 1:8]
SELECT NUMERIC 'abc'
       ^
--
ALTERNATION GROUP: <empty>
--
ERROR: NUMERIC literals are not supported [at 1:8]
SELECT NUMERIC 'abc'
       ^
==

# This literal is invalid because the number of digits after the decimal point
# exceeds 9.
[language_features=NUMERIC_TYPE]
SELECT NUMERIC '1.5555555555'
--
ERROR: Invalid NUMERIC literal: "1.5555555555" [at 1:8]
SELECT NUMERIC '1.5555555555'
       ^
==

# This literal is invalid because the number of digits before the decimal point
# exceeds 29.
[language_features=NUMERIC_TYPE]
SELECT NUMERIC '100000000000000000000000000000'
--
ERROR: Invalid NUMERIC literal: "100000000000000000000000000000" [at 1:8]
SELECT NUMERIC '100000000000000000000000000000'
       ^
==

[language_features=NUMERIC_TYPE]
SELECT NUMERIC '- 100'
--
ERROR: Invalid NUMERIC literal: "- 100" [at 1:8]
SELECT NUMERIC '- 100'
       ^
==

[language_features=NUMERIC_TYPE]
SELECT NUMERIC ''
--
ERROR: Invalid NUMERIC literal: "" [at 1:8]
SELECT NUMERIC ''
       ^
==

[language_features=NUMERIC_TYPE]
SELECT NUMERIC '123abc'
--
ERROR: Invalid NUMERIC literal: "123abc" [at 1:8]
SELECT NUMERIC '123abc'
       ^
==

[language_features=NUMERIC_TYPE]
SELECT NUMERIC '0x123abc'
--
ERROR: Invalid NUMERIC literal: "0x123abc" [at 1:8]
SELECT NUMERIC '0x123abc'
       ^
==

[language_features=NUMERIC_TYPE]
SELECT NUMERIC '.'
--
ERROR: Invalid NUMERIC literal: "." [at 1:8]
SELECT NUMERIC '.'
       ^
==

# Make sure that an invisible character in the literal gets printed
# in the error message.
[language_features=NUMERIC_TYPE]
SELECT NUMERIC ''
--
ERROR: Invalid NUMERIC literal: "\x07" [at 1:8]
SELECT NUMERIC ''
       ^
==

# b/120112552: exercise cache correctness for float literals converted
# to NUMERIC
[language_features=NUMERIC_TYPE]
SELECT ARRAY<STRUCT<base NUMERIC, mul NUMERIC>>[
  (0.00, 1.0),
  (1.00, 0.5),
  (2.00, 0.25),
  (3.00, 0.1),
  (4.60, 0.05)
]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<STRUCT<base NUMERIC, mul NUMERIC>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=ARRAY<STRUCT<base NUMERIC, mul NUMERIC>>, value=[{base:0, mul:1}, {base:1, mul:0.5}, {base:2, mul:0.25}, {base:3, mul:0.1}, {base:4.6, mul:0.05}], has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features={{BIGNUMERIC_TYPE|}}]
SELECT
  BIGNUMERIC '1.1',
  BIGNUMERIC '0.123',
  BIGNUMERIC '456.0',
  BIGNUMERIC '123',
  BIGNUMERIC "123",
  BIGNUMERIC '0',
  BIGNUMERIC '-1.1',
  BIGNUMERIC '-0.123',
  BIGNUMERIC '-456.0',
  BIGNUMERIC '-123',
  BIGNUMERIC "-123",
  BIGNUMERIC '0.99999999999999999999999999999999999999',
  BIGNUMERIC '578960446186580977117854925043439539266.34992332820282019728792003956564819967',
  BIGNUMERIC '-0.99999999999999999999999999999999999999',
  BIGNUMERIC '-578960446186580977117854925043439539266.34992332820282019728792003956564819968'
--
ALTERNATION GROUP: BIGNUMERIC_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BIGNUMERIC]
| +-$query.$col2#2 AS `$col2` [BIGNUMERIC]
| +-$query.$col3#3 AS `$col3` [BIGNUMERIC]
| +-$query.$col4#4 AS `$col4` [BIGNUMERIC]
| +-$query.$col5#5 AS `$col5` [BIGNUMERIC]
| +-$query.$col6#6 AS `$col6` [BIGNUMERIC]
| +-$query.$col7#7 AS `$col7` [BIGNUMERIC]
| +-$query.$col8#8 AS `$col8` [BIGNUMERIC]
| +-$query.$col9#9 AS `$col9` [BIGNUMERIC]
| +-$query.$col10#10 AS `$col10` [BIGNUMERIC]
| +-$query.$col11#11 AS `$col11` [BIGNUMERIC]
| +-$query.$col12#12 AS `$col12` [BIGNUMERIC]
| +-$query.$col13#13 AS `$col13` [BIGNUMERIC]
| +-$query.$col14#14 AS `$col14` [BIGNUMERIC]
| +-$query.$col15#15 AS `$col15` [BIGNUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12, $col13#13, $col14#14, $col15#15]
    +-expr_list=
    | +-$col1#1 := Literal(type=BIGNUMERIC, value=1.1, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=BIGNUMERIC, value=0.123, has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=BIGNUMERIC, value=456, has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=BIGNUMERIC, value=123, has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=BIGNUMERIC, value=123, has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=BIGNUMERIC, value=0, has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=BIGNUMERIC, value=-1.1, has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=BIGNUMERIC, value=-0.123, has_explicit_type=TRUE)
    | +-$col9#9 := Literal(type=BIGNUMERIC, value=-456, has_explicit_type=TRUE)
    | +-$col10#10 := Literal(type=BIGNUMERIC, value=-123, has_explicit_type=TRUE)
    | +-$col11#11 := Literal(type=BIGNUMERIC, value=-123, has_explicit_type=TRUE)
    | +-$col12#12 := Literal(type=BIGNUMERIC, value=0.99999999999999999999999999999999999999, has_explicit_type=TRUE)
    | +-$col13#13 := Literal(type=BIGNUMERIC, value=578960446186580977117854925043439539266.34992332820282019728792003956564819967, has_explicit_type=TRUE)
    | +-$col14#14 := Literal(type=BIGNUMERIC, value=-0.99999999999999999999999999999999999999, has_explicit_type=TRUE)
    | +-$col15#15 := Literal(type=BIGNUMERIC, value=-578960446186580977117854925043439539266.34992332820282019728792003956564819968, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: BIGNUMERIC literals are not supported [at 2:3]
  BIGNUMERIC '1.1',
  ^
==

[language_features=BIGNUMERIC_TYPE]
SELECT BIGNUMERIC '.1', BIGNUMERIC '1.', BIGNUMERIC '1e12', BIGNUMERIC '1.1e12'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BIGNUMERIC]
| +-$query.$col2#2 AS `$col2` [BIGNUMERIC]
| +-$query.$col3#3 AS `$col3` [BIGNUMERIC]
| +-$query.$col4#4 AS `$col4` [BIGNUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4]
    +-expr_list=
    | +-$col1#1 := Literal(type=BIGNUMERIC, value=0.1, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=BIGNUMERIC, value=1, has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=BIGNUMERIC, value=1000000000000, has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=BIGNUMERIC, value=1100000000000, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features=BIGNUMERIC_TYPE]
SELECT BIGNUMERIC ' -100',
       BIGNUMERIC ' +101',
       BIGNUMERIC '-102 ',
       BIGNUMERIC '+103 ',
       BIGNUMERIC '  123  ',
       BIGNUMERIC '0000124',
       BIGNUMERIC '+000125',
       BIGNUMERIC '-000126',
       BIGNUMERIC '127.0000'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BIGNUMERIC]
| +-$query.$col2#2 AS `$col2` [BIGNUMERIC]
| +-$query.$col3#3 AS `$col3` [BIGNUMERIC]
| +-$query.$col4#4 AS `$col4` [BIGNUMERIC]
| +-$query.$col5#5 AS `$col5` [BIGNUMERIC]
| +-$query.$col6#6 AS `$col6` [BIGNUMERIC]
| +-$query.$col7#7 AS `$col7` [BIGNUMERIC]
| +-$query.$col8#8 AS `$col8` [BIGNUMERIC]
| +-$query.$col9#9 AS `$col9` [BIGNUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9]
    +-expr_list=
    | +-$col1#1 := Literal(type=BIGNUMERIC, value=-100, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=BIGNUMERIC, value=101, has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=BIGNUMERIC, value=-102, has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=BIGNUMERIC, value=103, has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=BIGNUMERIC, value=123, has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=BIGNUMERIC, value=124, has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=BIGNUMERIC, value=125, has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=BIGNUMERIC, value=-126, has_explicit_type=TRUE)
    | +-$col9#9 := Literal(type=BIGNUMERIC, value=127, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features={{BIGNUMERIC_TYPE|}}]
SELECT BIGNUMERIC 'abc'
--
ALTERNATION GROUP: BIGNUMERIC_TYPE
--
ERROR: Invalid BIGNUMERIC literal: "abc" [at 1:8]
SELECT BIGNUMERIC 'abc'
       ^
--
ALTERNATION GROUP: <empty>
--
ERROR: BIGNUMERIC literals are not supported [at 1:8]
SELECT BIGNUMERIC 'abc'
       ^
==

# This literal is invalid because the number of digits after the decimal point
# exceeds 38.
[language_features=BIGNUMERIC_TYPE]
SELECT BIGNUMERIC '1.012345678901234567890123456789012345678'
--
ERROR: Invalid BIGNUMERIC literal: "1.012345678901234567890123456789012345678" [at 1:8]
SELECT BIGNUMERIC '1.012345678901234567890123456789012345678'
       ^
==

# This literal is invalid because it is out of the supported range.
[language_features=BIGNUMERIC_TYPE]
SELECT BIGNUMERIC '578960446186580977117854925043439539266.34992332820282019728792003956564819968'
--
ERROR: Invalid BIGNUMERIC literal: "578960446186580977117854925043439539266.34992332820282019728792003956564819968" [at 1:8]
SELECT BIGNUMERIC '578960446186580977117854925043439539266.349923328202820197...
       ^
==

# This literal is invalid because it is out of the supported range.
[language_features=BIGNUMERIC_TYPE]
SELECT BIGNUMERIC '-578960446186580977117854925043439539266.34992332820282019728792003956564819969'
--
ERROR: Invalid BIGNUMERIC literal: "-578960446186580977117854925043439539266.34992332820282019728792003956564819969" [at 1:8]
SELECT BIGNUMERIC '-578960446186580977117854925043439539266.34992332820282019...
       ^
==

[language_features=BIGNUMERIC_TYPE]
SELECT BIGNUMERIC '- 100'
--
ERROR: Invalid BIGNUMERIC literal: "- 100" [at 1:8]
SELECT BIGNUMERIC '- 100'
       ^
==

[language_features=BIGNUMERIC_TYPE]
SELECT BIGNUMERIC ''
--
ERROR: Invalid BIGNUMERIC literal: "" [at 1:8]
SELECT BIGNUMERIC ''
       ^
==

[language_features=BIGNUMERIC_TYPE]
SELECT BIGNUMERIC '123abc'
--
ERROR: Invalid BIGNUMERIC literal: "123abc" [at 1:8]
SELECT BIGNUMERIC '123abc'
       ^
==

[language_features=BIGNUMERIC_TYPE]
SELECT BIGNUMERIC '0x123abc'
--
ERROR: Invalid BIGNUMERIC literal: "0x123abc" [at 1:8]
SELECT BIGNUMERIC '0x123abc'
       ^
==

[language_features=BIGNUMERIC_TYPE]
SELECT BIGNUMERIC '.'
--
ERROR: Invalid BIGNUMERIC literal: "." [at 1:8]
SELECT BIGNUMERIC '.'
       ^
==

# Make sure that an invisible character in the literal gets printed
# in the error message.
[language_features=BIGNUMERIC_TYPE]
SELECT BIGNUMERIC ''
--
ERROR: Invalid BIGNUMERIC literal: "\x07" [at 1:8]
SELECT BIGNUMERIC ''
       ^
==

SELECT
  JSON "true"
--
ERROR: JSON literals are not supported [at 2:3]
  JSON "true"
  ^
==

[language_features=JSON_TYPE,JSON_NO_VALIDATION]
SELECT
  JSON "true",
  JSON '\'value\'',
  JSON "t",
  JSON 'true',
  JSON '"v"',
  JSON 'null',
  JSON '[1, 2, 3]',
  JSON '{ "k1": "v1", "k2": [true, false]}',
  JSON '{\n"k" : "v"\n}',
  JSON r'{"k\n1" : "v"}',
  JSON '',
  JSON '0.123',
  JSON '456.0',
  JSON '123',
  JSON "123",
  JSON '-1.1',
  JSON '-123',
  JSON ""
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [JSON]
| +-$query.$col2#2 AS `$col2` [JSON]
| +-$query.$col3#3 AS `$col3` [JSON]
| +-$query.$col4#4 AS `$col4` [JSON]
| +-$query.$col5#5 AS `$col5` [JSON]
| +-$query.$col6#6 AS `$col6` [JSON]
| +-$query.$col7#7 AS `$col7` [JSON]
| +-$query.$col8#8 AS `$col8` [JSON]
| +-$query.$col9#9 AS `$col9` [JSON]
| +-$query.$col10#10 AS `$col10` [JSON]
| +-$query.$col11#11 AS `$col11` [JSON]
| +-$query.$col12#12 AS `$col12` [JSON]
| +-$query.$col13#13 AS `$col13` [JSON]
| +-$query.$col14#14 AS `$col14` [JSON]
| +-$query.$col15#15 AS `$col15` [JSON]
| +-$query.$col16#16 AS `$col16` [JSON]
| +-$query.$col17#17 AS `$col17` [JSON]
| +-$query.$col18#18 AS `$col18` [JSON]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12, $col13#13, $col14#14, $col15#15, $col16#16, $col17#17, $col18#18]
    +-expr_list=
    | +-$col1#1 := Literal(type=JSON, value=true, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=JSON, value='value', has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=JSON, value=t, has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=JSON, value=true, has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=JSON, value="v", has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=JSON, value=null, has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=JSON, value=[1, 2, 3], has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=JSON, value={ "k1": "v1", "k2": [true, false]}, has_explicit_type=TRUE)
    | +-$col9#9 := Literal(type=JSON, value={
"k" : "v"
}, has_explicit_type=TRUE)
    | +-$col10#10 := Literal(type=JSON, value={"k\n1" : "v"}, has_explicit_type=TRUE)
    | +-$col11#11 := Literal(type=JSON, value=, has_explicit_type=TRUE)
    | +-$col12#12 := Literal(type=JSON, value=0.123, has_explicit_type=TRUE)
    | +-$col13#13 := Literal(type=JSON, value=456.0, has_explicit_type=TRUE)
    | +-$col14#14 := Literal(type=JSON, value=123, has_explicit_type=TRUE)
    | +-$col15#15 := Literal(type=JSON, value=123, has_explicit_type=TRUE)
    | +-$col16#16 := Literal(type=JSON, value=-1.1, has_explicit_type=TRUE)
    | +-$col17#17 := Literal(type=JSON, value=-123, has_explicit_type=TRUE)
    | +-$col18#18 := Literal(type=JSON, value=, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features=JSON_TYPE]
SELECT
  JSON "t"
--
ERROR: Invalid JSON literal: syntax error while parsing value - invalid literal; last read: 't' [at 2:3]
  JSON "t"
  ^
==

[language_features=JSON_TYPE]
SELECT
  JSON "+"
--
ERROR: Invalid JSON literal: syntax error while parsing value - invalid literal; last read: '+' [at 2:3]
  JSON "+"
  ^
==

[language_features=JSON_TYPE]
SELECT
  JSON "{"
--
ERROR: Invalid JSON literal: syntax error while parsing object key - unexpected end of input; expected string literal [at 2:3]
  JSON "{"
  ^
==

[language_features=JSON_TYPE]
SELECT
  JSON ''
--
ERROR: Invalid JSON literal: syntax error while parsing value - unexpected end of input; expected '[', '{', or a literal [at 2:3]
  JSON ''
  ^
==

[language_features=JSON_TYPE]
SELECT
  JSON '\'string\''
--
ERROR: Invalid JSON literal: syntax error while parsing value - invalid literal; last read: ''' [at 2:3]
  JSON '\'string\''
  ^
==

[language_features=JSON_TYPE]
SELECT
  JSON "true",
  JSON 'true',
  JSON '"v"',
  JSON 'null',
  JSON '[1, 2, 3]',
  JSON '{ "k1": "v1", "k2": [true, false]}',
  JSON '{\n"k" : "v"\n}',
  JSON r'{"k\n1" : "v"}',
  JSON '0.123',
  JSON '456.0',
  JSON '123',
  JSON "123",
  JSON '-1.1',
  JSON '-123'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [JSON]
| +-$query.$col2#2 AS `$col2` [JSON]
| +-$query.$col3#3 AS `$col3` [JSON]
| +-$query.$col4#4 AS `$col4` [JSON]
| +-$query.$col5#5 AS `$col5` [JSON]
| +-$query.$col6#6 AS `$col6` [JSON]
| +-$query.$col7#7 AS `$col7` [JSON]
| +-$query.$col8#8 AS `$col8` [JSON]
| +-$query.$col9#9 AS `$col9` [JSON]
| +-$query.$col10#10 AS `$col10` [JSON]
| +-$query.$col11#11 AS `$col11` [JSON]
| +-$query.$col12#12 AS `$col12` [JSON]
| +-$query.$col13#13 AS `$col13` [JSON]
| +-$query.$col14#14 AS `$col14` [JSON]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12, $col13#13, $col14#14]
    +-expr_list=
    | +-$col1#1 := Literal(type=JSON, value=true, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=JSON, value=true, has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=JSON, value="v", has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=JSON, value=null, has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=JSON, value=[1,2,3], has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=JSON, value={"k1":"v1","k2":[true,false]}, has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=JSON, value={"k":"v"}, has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=JSON, value={"k\n1":"v"}, has_explicit_type=TRUE)
    | +-$col9#9 := Literal(type=JSON, value=0.123, has_explicit_type=TRUE)
    | +-$col10#10 := Literal(type=JSON, value=456.0, has_explicit_type=TRUE)
    | +-$col11#11 := Literal(type=JSON, value=123, has_explicit_type=TRUE)
    | +-$col12#12 := Literal(type=JSON, value=123, has_explicit_type=TRUE)
    | +-$col13#13 := Literal(type=JSON, value=-1.1, has_explicit_type=TRUE)
    | +-$col14#14 := Literal(type=JSON, value=-123, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan

==

[language_features=JSON_TYPE,JSON_LEGACY_PARSE]
SELECT
  JSON "true",
  JSON '\'value\'',
  JSON 'true',
  JSON '"v"',
  JSON 'null',
  JSON '[1, 2, 3]',
  JSON '{ "k1": "v1", "k2": [true, false]}',
  JSON '{\n"k" : "v"\n}',
  JSON r'{"k\n1" : "v"}',
  JSON '0.123',
  JSON '456.0',
  JSON '123',
  JSON "123",
  JSON '-1.1',
  JSON '-123'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [JSON]
| +-$query.$col2#2 AS `$col2` [JSON]
| +-$query.$col3#3 AS `$col3` [JSON]
| +-$query.$col4#4 AS `$col4` [JSON]
| +-$query.$col5#5 AS `$col5` [JSON]
| +-$query.$col6#6 AS `$col6` [JSON]
| +-$query.$col7#7 AS `$col7` [JSON]
| +-$query.$col8#8 AS `$col8` [JSON]
| +-$query.$col9#9 AS `$col9` [JSON]
| +-$query.$col10#10 AS `$col10` [JSON]
| +-$query.$col11#11 AS `$col11` [JSON]
| +-$query.$col12#12 AS `$col12` [JSON]
| +-$query.$col13#13 AS `$col13` [JSON]
| +-$query.$col14#14 AS `$col14` [JSON]
| +-$query.$col15#15 AS `$col15` [JSON]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12, $col13#13, $col14#14, $col15#15]
    +-expr_list=
    | +-$col1#1 := Literal(type=JSON, value=true, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=JSON, value="value", has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=JSON, value=true, has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=JSON, value="v", has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=JSON, value=null, has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=JSON, value=[1,2,3], has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=JSON, value={"k1":"v1","k2":[true,false]}, has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=JSON, value={"k":"v"}, has_explicit_type=TRUE)
    | +-$col9#9 := Literal(type=JSON, value={"k\n1":"v"}, has_explicit_type=TRUE)
    | +-$col10#10 := Literal(type=JSON, value=0.123, has_explicit_type=TRUE)
    | +-$col11#11 := Literal(type=JSON, value=456.0, has_explicit_type=TRUE)
    | +-$col12#12 := Literal(type=JSON, value=123, has_explicit_type=TRUE)
    | +-$col13#13 := Literal(type=JSON, value=123, has_explicit_type=TRUE)
    | +-$col14#14 := Literal(type=JSON, value=-1.1, has_explicit_type=TRUE)
    | +-$col15#15 := Literal(type=JSON, value=-123, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

==

# Ensure JSON_STRICT_NUMBER_PARSING doesn't break parsing of values that are
# already round-trippable.
[language_features=JSON_TYPE,JSON_STRICT_NUMBER_PARSING]
SELECT
  JSON '0.123',
  JSON '456.0',
  JSON '123',
  JSON "123",
  JSON "1e0",
  JSON "1e1",
  JSON "1e-3",
  JSON '-1.1',
  JSON '-123',
  JSON '18446744073709551615',
  JSON '-9223372036854775808',
  JSON '1.797e+308',
  JSON '-1.797e+308',
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [JSON]
| +-$query.$col2#2 AS `$col2` [JSON]
| +-$query.$col3#3 AS `$col3` [JSON]
| +-$query.$col4#4 AS `$col4` [JSON]
| +-$query.$col5#5 AS `$col5` [JSON]
| +-$query.$col6#6 AS `$col6` [JSON]
| +-$query.$col7#7 AS `$col7` [JSON]
| +-$query.$col8#8 AS `$col8` [JSON]
| +-$query.$col9#9 AS `$col9` [JSON]
| +-$query.$col10#10 AS `$col10` [JSON]
| +-$query.$col11#11 AS `$col11` [JSON]
| +-$query.$col12#12 AS `$col12` [JSON]
| +-$query.$col13#13 AS `$col13` [JSON]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9, $col10#10, $col11#11, $col12#12, $col13#13]
    +-expr_list=
    | +-$col1#1 := Literal(type=JSON, value=0.123, has_explicit_type=TRUE)
    | +-$col2#2 := Literal(type=JSON, value=456.0, has_explicit_type=TRUE)
    | +-$col3#3 := Literal(type=JSON, value=123, has_explicit_type=TRUE)
    | +-$col4#4 := Literal(type=JSON, value=123, has_explicit_type=TRUE)
    | +-$col5#5 := Literal(type=JSON, value=1.0, has_explicit_type=TRUE)
    | +-$col6#6 := Literal(type=JSON, value=10.0, has_explicit_type=TRUE)
    | +-$col7#7 := Literal(type=JSON, value=0.001, has_explicit_type=TRUE)
    | +-$col8#8 := Literal(type=JSON, value=-1.1, has_explicit_type=TRUE)
    | +-$col9#9 := Literal(type=JSON, value=-123, has_explicit_type=TRUE)
    | +-$col10#10 := Literal(type=JSON, value=18446744073709551615, has_explicit_type=TRUE)
    | +-$col11#11 := Literal(type=JSON, value=-9223372036854775808, has_explicit_type=TRUE)
    | +-$col12#12 := Literal(type=JSON, value=1.797e+308, has_explicit_type=TRUE)
    | +-$col13#13 := Literal(type=JSON, value=-1.797e+308, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

==

[language_features=JSON_TYPE,JSON_STRICT_NUMBER_PARSING]
SELECT JSON '0.142857142857142857142857142857142857'
--
ERROR: Invalid JSON literal: Input number: 0.142857142857142857142857142857142857 cannot round-trip through string representation [at 1:8]
SELECT JSON '0.142857142857142857142857142857142857'
       ^
==

[language_features={{BIGNUMERIC_TYPE,V_1_3_DECIMAL_ALIAS|BIGNUMERIC_TYPE|V_1_3_DECIMAL_ALIAS|}}]
SELECT BIGDECIMAL '1'
--
ALTERNATION GROUPS:
    BIGNUMERIC_TYPE,V_1_3_DECIMAL_ALIAS
    BIGNUMERIC_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BIGNUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=BIGNUMERIC, value=1, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    V_1_3_DECIMAL_ALIAS
    <empty>
--
ERROR: BIGDECIMAL literals are not supported [at 1:8]
SELECT BIGDECIMAL '1'
       ^
==

[language_features={{NUMERIC_TYPE,V_1_3_DECIMAL_ALIAS|NUMERIC_TYPE|V_1_3_DECIMAL_ALIAS|}}]
SELECT DECIMAL '1'
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,V_1_3_DECIMAL_ALIAS
    NUMERIC_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=NUMERIC, value=1, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    V_1_3_DECIMAL_ALIAS
    <empty>
--
ERROR: DECIMAL literals are not supported [at 1:8]
SELECT DECIMAL '1'
       ^
==

[language_features={{NUMERIC_TYPE,V_1_3_DECIMAL_ALIAS|NUMERIC_TYPE|V_1_3_DECIMAL_ALIAS|}}]
SELECT DECIMAL ''
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,V_1_3_DECIMAL_ALIAS
    NUMERIC_TYPE
--
ERROR: Invalid DECIMAL literal: "" [at 1:8]
SELECT DECIMAL ''
       ^
--
ALTERNATION GROUPS:
    V_1_3_DECIMAL_ALIAS
    <empty>
--
ERROR: DECIMAL literals are not supported [at 1:8]
SELECT DECIMAL ''
       ^
==

[language_features={{BIGNUMERIC_TYPE,V_1_3_DECIMAL_ALIAS|BIGNUMERIC_TYPE|V_1_3_DECIMAL_ALIAS|}}]
SELECT BIGDECIMAL ''
--
ALTERNATION GROUPS:
    BIGNUMERIC_TYPE,V_1_3_DECIMAL_ALIAS
    BIGNUMERIC_TYPE
--
ERROR: Invalid BIGDECIMAL literal: "" [at 1:8]
SELECT BIGDECIMAL ''
       ^
--
ALTERNATION GROUPS:
    V_1_3_DECIMAL_ALIAS
    <empty>
--
ERROR: BIGDECIMAL literals are not supported [at 1:8]
SELECT BIGDECIMAL ''
       ^
==

[no_java]
[language_features={{|INTERVAL_TYPE}}]
select interval '1' year
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
select interval '1' year
       ^
--
ALTERNATION GROUP: INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=1-0 0 0:0:0)
    +-input_scan=
      +-SingleRowScan
==

[no_java]
[language_features={{|INTERVAL_TYPE}}]
select interval '1-2 3 4:5:6.789' year to second
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
select interval '1-2 3 4:5:6.789' year to second
       ^
--
ALTERNATION GROUP: INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=1-2 3 4:5:6.789)
    +-input_scan=
      +-SingleRowScan
