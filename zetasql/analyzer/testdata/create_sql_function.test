create function myfunc ( ) ;
--
ERROR: Function must specify LANGUAGE or have a SQL body in parentheses [at 1:1]
create function myfunc ( ) ;
^
==

create function myfunc (  ) as ( 42 );
--
CreateFunctionStmt
+-name_path=myfunc
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="42"
+-function_expression=
  +-Literal(type=INT64, value=42)
==

# Explicit return type.
create function myfunc (  ) returns int64 as ( 42 );
--
CreateFunctionStmt
+-name_path=myfunc
+-has_explicit_return_type=TRUE
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="42"
+-function_expression=
  +-Literal(type=INT64, value=42)
==

# Return type is not compatible with the type of the constant function body.
create function myfunc () returns string as ( 42 );
--
ERROR: Function declared to return STRING but the function body produces incompatible type INT64 [at 1:47]
create function myfunc () returns string as ( 42 );
                                              ^
==

# Return type is compatible with the type of the constant function body.
create function myfunc () returns int32 as ( 42 );
--
CreateFunctionStmt
+-name_path=myfunc
+-has_explicit_return_type=TRUE
+-return_type=INT32
+-signature=() -> INT32
+-language="SQL"
+-code="42"
+-function_expression=
  +-Literal(type=INT32, value=42)
==

# Return type is not compatible with the type of the variable function body.
create function myfunc (x int64) returns int32 as (x);
--
ERROR: Function declared to return INT32 but the function body produces incompatible type INT64 [at 1:52]
create function myfunc (x int64) returns int32 as (x);
                                                   ^
==

# Return type is compatible with the type of the variable function body.
create function myfunc (x int32) returns int64 as (x);
--
CreateFunctionStmt
+-name_path=myfunc
+-has_explicit_return_type=TRUE
+-return_type=INT64
+-argument_name_list=[x]
+-signature=(INT32 x) -> INT64
+-language="SQL"
+-code="x"
+-function_expression=
  +-Cast(INT32 -> INT64)
    +-ArgumentRef(type=INT32, name="x")
==

# Struct return type.
create function myfunc ( ) returns struct<a string, b int32>
  as ( STRUCT<a string, b int32>('balloons', 99) );
--
CreateFunctionStmt
+-name_path=myfunc
+-has_explicit_return_type=TRUE
+-return_type=STRUCT<a STRING, b INT32>
+-signature=() -> STRUCT<a STRING, b INT32>
+-language="SQL"
+-code="STRUCT<a string, b int32>('balloons', 99)"
+-function_expression=
  +-Literal(type=STRUCT<a STRING, b INT32>, value={a:"balloons", b:99}, has_explicit_type=TRUE)
==

# Temporary function.
create temporary function myfunc ( ) as ( 42 );
--
CreateFunctionStmt
+-name_path=myfunc
+-create_scope=CREATE_TEMP
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="42"
+-function_expression=
  +-Literal(type=INT64, value=42)
==

[statement_context={{|module}}]
create {{public|private}} function myfunc ( ) as ( 42 );
--
ALTERNATION GROUP: public
--
ERROR: CREATE FUNCTION with PUBLIC or PRIVATE modifiers is not supported [at 1:1]
create public function myfunc ( ) as ( 42 );
^
--
ALTERNATION GROUP: private
--
ERROR: CREATE FUNCTION with PUBLIC or PRIVATE modifiers is not supported [at 1:1]
create private function myfunc ( ) as ( 42 );
^
--
ALTERNATION GROUP: module,public
--
CreateFunctionStmt
+-name_path=myfunc
+-create_scope=CREATE_PUBLIC
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="42"
+-function_expression=
  +-Literal(type=INT64, value=42)
--
ALTERNATION GROUP: module,private
--
CreateFunctionStmt
+-name_path=myfunc
+-create_scope=CREATE_PRIVATE
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="42"
+-function_expression=
  +-Literal(type=INT64, value=42)
==

# If not exists.
[statement_context={{|module}}]
create {{|public|private}} function if not exists myfunc ( ) as ( 42 );
--
ALTERNATION GROUP: <empty>
--
CreateFunctionStmt
+-name_path=myfunc
+-create_mode=CREATE_IF_NOT_EXISTS
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="42"
+-function_expression=
  +-Literal(type=INT64, value=42)
--
ALTERNATION GROUP: public
--
ERROR: CREATE FUNCTION with PUBLIC or PRIVATE modifiers is not supported [at 1:1]
create public function if not exists myfunc ( ) as ( 42 );
^
--
ALTERNATION GROUP: private
--
ERROR: CREATE FUNCTION with PUBLIC or PRIVATE modifiers is not supported [at 1:1]
create private function if not exists myfunc ( ) as ( 42 );
^
--
ALTERNATION GROUP: module,
--
ERROR: Modules do not support IF NOT EXISTS for CREATE FUNCTION [at 1:1]
create  function if not exists myfunc ( ) as ( 42 );
^
--
ALTERNATION GROUP: module,public
--
ERROR: Modules do not support IF NOT EXISTS for CREATE FUNCTION [at 1:1]
create public function if not exists myfunc ( ) as ( 42 );
^
--
ALTERNATION GROUP: module,private
--
ERROR: Modules do not support IF NOT EXISTS for CREATE FUNCTION [at 1:1]
create private function if not exists myfunc ( ) as ( 42 );
^
==

# Create or replace.
[statement_context={{|module}}]
create or replace {{|public|private}} function myfunc ( ) as ( 42 );
--
ALTERNATION GROUP: <empty>
--
CreateFunctionStmt
+-name_path=myfunc
+-create_mode=CREATE_OR_REPLACE
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="42"
+-function_expression=
  +-Literal(type=INT64, value=42)
--
ALTERNATION GROUP: public
--
ERROR: CREATE FUNCTION with PUBLIC or PRIVATE modifiers is not supported [at 1:1]
create or replace public function myfunc ( ) as ( 42 );
^
--
ALTERNATION GROUP: private
--
ERROR: CREATE FUNCTION with PUBLIC or PRIVATE modifiers is not supported [at 1:1]
create or replace private function myfunc ( ) as ( 42 );
^
--
ALTERNATION GROUP: module,
--
ERROR: Modules do not support CREATE OR REPLACE for CREATE FUNCTION [at 1:1]
create or replace  function myfunc ( ) as ( 42 );
^
--
ALTERNATION GROUP: module,public
--
ERROR: Modules do not support CREATE OR REPLACE for CREATE FUNCTION [at 1:1]
create or replace public function myfunc ( ) as ( 42 );
^
--
ALTERNATION GROUP: module,private
--
ERROR: Modules do not support CREATE OR REPLACE for CREATE FUNCTION [at 1:1]
create or replace private function myfunc ( ) as ( 42 );
^
==

# Temporary + If not exists.
create temporary function if not exists myfunc ( ) as ( 42 );
--
CreateFunctionStmt
+-name_path=myfunc
+-create_scope=CREATE_TEMP
+-create_mode=CREATE_IF_NOT_EXISTS
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="42"
+-function_expression=
  +-Literal(type=INT64, value=42)
==

# Temporary + Create or replace.
create or replace temporary function myfunc ( ) as ( 42 );
--
CreateFunctionStmt
+-name_path=myfunc
+-create_scope=CREATE_TEMP
+-create_mode=CREATE_OR_REPLACE
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="42"
+-function_expression=
  +-Literal(type=INT64, value=42)
==

# Trying to create a recursive function.
create function myfunc ( ) as ( 42 + myfunc() );
--
ERROR: Function not found: myfunc; Did you mean trunc? [at 1:38]
create function myfunc ( ) as ( 42 + myfunc() );
                                     ^
==

# Qualified function name.
create function mypackage.myfunc ( ) as ( 42 );
--
CreateFunctionStmt
+-name_path=mypackage.myfunc
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="42"
+-function_expression=
  +-Literal(type=INT64, value=42)
==

# Function with options.
create function mypackage.myfunc ( ) as ( 42 ) options ( a=b, bruce=lee ) ;
--
CreateFunctionStmt
+-name_path=mypackage.myfunc
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="42"
+-function_expression=
| +-Literal(type=INT64, value=42)
+-option_list=
  +-a := Literal(type=STRING, value="b")
  +-bruce := Literal(type=STRING, value="lee")
==

# Function with options that tries to reference a function parameter.
create function mypackage.myfunc ( a INT64 ) as ( 42 ) options ( a= a+a ) ;
--
ERROR: Unrecognized name: a [at 1:69]
create function mypackage.myfunc ( a INT64 ) as ( 42 ) options ( a= a+a ) ;
                                                                    ^
==

# Function with options where option value is a string that looks like a
# function parameter name.
create function mypackage.myfunc ( a INT64 ) as ( 42 ) options ( a=a ) ;
--
CreateFunctionStmt
+-name_path=mypackage.myfunc
+-return_type=INT64
+-argument_name_list=[a]
+-signature=(INT64 a) -> INT64
+-language="SQL"
+-code="42"
+-function_expression=
| +-Literal(type=INT64, value=42)
+-option_list=
  +-a := Literal(type=STRING, value="a")
==

# SQL expression without enclosing parentheses.
create function myfunc ( ) AS 'wot' ;
--
ERROR: Function must specify LANGUAGE or have a SQL body in parentheses [at 1:1]
create function myfunc ( ) AS 'wot' ;
^
==

# Non-constant function body with arguments.
create function AddFunc(x int64, y int64) as (x + y);
--
CreateFunctionStmt
+-name_path=AddFunc
+-return_type=INT64
+-argument_name_list=[x, y]
+-signature=(INT64 x, INT64 y) -> INT64
+-language="SQL"
+-code="x + y"
+-function_expression=
  +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    +-ArgumentRef(type=INT64, name="x")
    +-ArgumentRef(type=INT64, name="y")
==

# Argument definition and references use different case mixes.
create function Square(nUmbEr int64) as (NumBEr * nuMBeR);
--
CreateFunctionStmt
+-name_path=Square
+-return_type=INT64
+-argument_name_list=[nUmbEr]
+-signature=(INT64 nUmbEr) -> INT64
+-language="SQL"
+-code="NumBEr * nuMBeR"
+-function_expression=
  +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
    +-ArgumentRef(type=INT64, name="nUmbEr")
    +-ArgumentRef(type=INT64, name="nUmbEr")
==

# SELECT statement in function body.
create function AddFunc(x int64, y int64) as (SELECT x + y);
--
ERROR: The body of each CREATE FUNCTION statement is an expression, not a query; to use a query as an expression, the query must be wrapped with additional parentheses to make it a scalar subquery expression [at 1:47]
create function AddFunc(x int64, y int64) as (SELECT x + y);
                                              ^
==

# A function body with a scalar subquery.
create function AddFunc() as ((SELECT 1));
--
CreateFunctionStmt
+-name_path=AddFunc
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="(SELECT 1)"
+-function_expression=
  +-SubqueryExpr
    +-type=INT64
    +-subquery_type=SCALAR
    +-subquery=
      +-ProjectScan
        +-column_list=[$expr_subquery.$col1#1]
        +-expr_list=
        | +-$col1#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
==

# A function body with a scalar ARRAY subquery.
create function AddFunc() as (ARRAY(SELECT 1));
--
CreateFunctionStmt
+-name_path=AddFunc
+-return_type=ARRAY<INT64>
+-signature=() -> ARRAY<INT64>
+-language="SQL"
+-code="ARRAY(SELECT 1)"
+-function_expression=
  +-SubqueryExpr
    +-type=ARRAY<INT64>
    +-subquery_type=ARRAY
    +-subquery=
      +-ProjectScan
        +-column_list=[$expr_subquery.$col1#1]
        +-expr_list=
        | +-$col1#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
==

# A function body with a scalar EXISTS subquery.
create function AddFunc() as (EXISTS (SELECT 1));
--
CreateFunctionStmt
+-name_path=AddFunc
+-return_type=BOOL
+-signature=() -> BOOL
+-language="SQL"
+-code="EXISTS (SELECT 1)"
+-function_expression=
  +-SubqueryExpr
    +-type=BOOL
    +-subquery_type=EXISTS
    +-subquery=
      +-ProjectScan
        +-column_list=[$expr_subquery.$col1#1]
        +-expr_list=
        | +-$col1#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
==

# A function body with a scalar subquery the references the arguments.
create function AddFunc(x int64, y int64) as ((SELECT x + y));
--
CreateFunctionStmt
+-name_path=AddFunc
+-return_type=INT64
+-argument_name_list=[x, y]
+-signature=(INT64 x, INT64 y) -> INT64
+-language="SQL"
+-code="(SELECT x + y)"
+-function_expression=
  +-SubqueryExpr
    +-type=INT64
    +-subquery_type=SCALAR
    +-subquery=
      +-ProjectScan
        +-column_list=[$expr_subquery.$col1#1]
        +-expr_list=
        | +-$col1#1 :=
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-ArgumentRef(type=INT64, name="x")
        |     +-ArgumentRef(type=INT64, name="y")
        +-input_scan=
          +-SingleRowScan
==

# A function body with a scalar subquery that has a local alias that conflicts
# with an argument name.
create function AddFunc(x int64, y int64) as ((SELECT x + y from (SELECT 1 x)));
--
CreateFunctionStmt
+-name_path=AddFunc
+-return_type=INT64
+-argument_name_list=[x, y]
+-signature=(INT64 x, INT64 y) -> INT64
+-language="SQL"
+-code="(SELECT x + y from (SELECT 1 x))"
+-function_expression=
  +-SubqueryExpr
    +-type=INT64
    +-subquery_type=SCALAR
    +-subquery=
      +-ProjectScan
        +-column_list=[$expr_subquery.$col1#2]
        +-expr_list=
        | +-$col1#2 :=
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-ColumnRef(type=INT64, column=$subquery1.x#1)
        |     +-ArgumentRef(type=INT64, name="y")
        +-input_scan=
          +-ProjectScan
            +-column_list=[$subquery1.x#1]
            +-expr_list=
            | +-x#1 := Literal(type=INT64, value=1)
            +-input_scan=
              +-SingleRowScan
==

# A function where the SELECT list path expression could resolve to a qualifed
# struct field (for an argument struct) or a qualified column name (for a table
# scanned in the FROM clause).
create function AddFunc(x STRUCT<y INT64>)
as ((SELECT x.y from (SELECT 1 AS y) AS x))
--
CreateFunctionStmt
+-name_path=AddFunc
+-return_type=INT64
+-argument_name_list=[x]
+-signature=(STRUCT<y INT64> x) -> INT64
+-language="SQL"
+-code="(SELECT x.y from (SELECT 1 AS y) AS x)"
+-function_expression=
  +-SubqueryExpr
    +-type=INT64
    +-subquery_type=SCALAR
    +-subquery=
      +-ProjectScan
        +-column_list=[x.y#1]
        +-input_scan=
          +-ProjectScan
            +-column_list=[x.y#1]
            +-expr_list=
            | +-y#1 := Literal(type=INT64, value=1)
            +-input_scan=
              +-SingleRowScan
==

# Query parameter in function body.
create function AddFunc(x int64, y int64) as (@x + y);
--
ERROR: Query parameter is not allowed in the body of SQL function 'AddFunc': @x [at 1:47]
create function AddFunc(x int64, y int64) as (@x + y);
                                              ^
==

# Same for positional parameters.
[parameter_mode=positional]
create function AddFunc(x int64, y int64) as (? + y);
--
ERROR: Query parameter is not allowed in the body of SQL function 'AddFunc': ? [at 1:47]
create function AddFunc(x int64, y int64) as (? + y);
                                              ^
==

# Query parameter in options.
create function AddFunc(x int64, y int64) as (x + y)
options(param1=CONCAT(@test_param_string,'_param'));
--
CreateFunctionStmt
+-name_path=AddFunc
+-return_type=INT64
+-argument_name_list=[x, y]
+-signature=(INT64 x, INT64 y) -> INT64
+-language="SQL"
+-code="x + y"
+-function_expression=
| +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|   +-ArgumentRef(type=INT64, name="x")
|   +-ArgumentRef(type=INT64, name="y")
+-option_list=
  +-param1 :=
    +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
      +-Parameter(type=STRING, name="test_param_string")
      +-Literal(type=STRING, value='_param')
==

# Using a parameter not in the argument list.
create function AddFunc(x int64, y int64) as (x + z);
--
ERROR: Unrecognized name: z [at 1:51]
create function AddFunc(x int64, y int64) as (x + z);
                                                  ^
==

# Function body includes an aggregation
create function foo (x int64, y int64) as (x / sum(y));
--
ERROR: Aggregate function SUM not allowed in SQL function body [at 1:48]
create function foo (x int64, y int64) as (x / sum(y));
                                               ^
==

# Function missing parameter names.
create function fn ( a int32, string ) as ( "s" );
--
ERROR: Parameters in function declarations must include both name and type [at 1:31]
create function fn ( a int32, string ) as ( "s" );
                              ^
==

# Function with quoted argument names.
create function fn("a b" int32, "c d" int32)
as ("a b" + "c d")
--
CreateFunctionStmt
+-name_path=fn
+-return_type=INT64
+-argument_name_list=["a b", "c d"]
+-signature=(INT32 a b, INT32 c d) -> INT64
+-language="SQL"
+-code=""a b" + "c d""
+-function_expression=
  +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    +-Cast(INT32 -> INT64)
    | +-ArgumentRef(type=INT32, name="a b")
    +-Cast(INT32 -> INT64)
      +-ArgumentRef(type=INT32, name="c d")
==

# An initial test with AS alias, showing that the statement fails resolution
# if present.  AS alias is not supported for non-templated functions.
create function fn(s string as T) as (s);
--
ERROR: Non-templated arguments in function declarations do not support type aliases [at 1:29]
create function fn(s string as T) as (s);
                            ^
==

# Similar test to the previous, but without the parameter name.
create function fn(string as T) as (s);
--
ERROR: Parameters in function declarations must include both name and type [at 1:20]
create function fn(string as T) as (s);
                   ^
==

create function fn(s ANY TYPE as T) as (s);
--
ERROR: Functions with templated arguments are not supported [at 1:22]
create function fn(s ANY TYPE as T) as (s);
                     ^
==

# Same as the previous, but without the parameter name.
create function fn(ANY TYPE as T) as (s);
--
ERROR: Parameters in function declarations must include both name and type [at 1:20]
create function fn(ANY TYPE as T) as (s);
                   ^
==

# A function body with a table reference.
create function fn() as ((select 1 as foo from KeyValue));
--
CreateFunctionStmt
+-name_path=fn
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="(select 1 as foo from KeyValue)"
+-function_expression=
  +-SubqueryExpr
    +-type=INT64
    +-subquery_type=SCALAR
    +-subquery=
      +-ProjectScan
        +-column_list=[$expr_subquery.foo#3]
        +-expr_list=
        | +-foo#3 := Literal(type=INT64, value=1)
        +-input_scan=
          +-TableScan(table=KeyValue)
==

# STRUCT constructor in options.
create function AddFunc(x int64, y int64) as (x + y)
options(
  ui_hints=STRUCT("ui_hints.LegacySemanticType.CURRENCY" as semantic_type,
                  ("impressions.clicks",
                   "impressions.clicks.conversions") as paths));
--
CreateFunctionStmt
+-name_path=AddFunc
+-return_type=INT64
+-argument_name_list=[x, y]
+-signature=(INT64 x, INT64 y) -> INT64
+-language="SQL"
+-code="x + y"
+-function_expression=
| +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|   +-ArgumentRef(type=INT64, name="x")
|   +-ArgumentRef(type=INT64, name="y")
+-option_list=
  +-ui_hints := Literal(type=STRUCT<semantic_type STRING, paths STRUCT<STRING, STRING>>, value={semantic_type:"ui_hints.LegacySemanticType.CURRENCY", paths:{"impressions.clicks", "impressions.clicks.conversions"}})
==

# STRUCT constructor with ARRAY constructor in options.
create function AddFunc(x int64, y int64) as (x + y)
options(ui_hints=STRUCT("CURRENCY" as semantic_type,
                        [("impressions.clicks",
                          "impressions.clicks.conversions"),
                         ("clicks2", "clicks2.conversions")] as paths));
--
CreateFunctionStmt
+-name_path=AddFunc
+-return_type=INT64
+-argument_name_list=[x, y]
+-signature=(INT64 x, INT64 y) -> INT64
+-language="SQL"
+-code="x + y"
+-function_expression=
| +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|   +-ArgumentRef(type=INT64, name="x")
|   +-ArgumentRef(type=INT64, name="y")
+-option_list=
  +-ui_hints := Literal(type=STRUCT<semantic_type STRING, paths ARRAY<STRUCT<STRING, STRING>>>, value={semantic_type:"CURRENCY", paths:[{"impressions.clicks", "impressions.clicks.conversions"}, {"clicks2", "clicks2.conversions"}]})
