# SAFE_DIVIDE supports the same types as / does. These alternations should show
# that SAFE_DIVIDE resolves the same regardless of whether the NUMERIC_TYPE
# feature is enabled.
[language_features={{NUMERIC_TYPE|}}]
select safe_divide(
  {{int32|uint32|int64|uint64|1}},
  {{int32|uint32|int64|uint64|1}})
from SimpleTypes;
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,int32
    int32,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(INT32 -> DOUBLE)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Cast(INT32 -> DOUBLE)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,uint32
    int32,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(INT32 -> DOUBLE)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Cast(UINT32 -> DOUBLE)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, uint32#3], table=SimpleTypes, column_index_list=[0, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,int64
    int32,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(INT32 -> DOUBLE)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Cast(INT64 -> DOUBLE)
    |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,uint64
    int32,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(INT32 -> DOUBLE)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Cast(UINT64 -> DOUBLE)
    |       +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, uint64#4], table=SimpleTypes, column_index_list=[0, 3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,1
    int32,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(INT32 -> DOUBLE)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Literal(type=DOUBLE, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,int32
    uint32,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(UINT32 -> DOUBLE)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Cast(INT32 -> DOUBLE)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, uint32#3], table=SimpleTypes, column_index_list=[0, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,uint32
    uint32,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(UINT32 -> DOUBLE)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Cast(UINT32 -> DOUBLE)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,int64
    uint32,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(UINT32 -> DOUBLE)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Cast(INT64 -> DOUBLE)
    |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, uint32#3], table=SimpleTypes, column_index_list=[1, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,uint64
    uint32,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(UINT32 -> DOUBLE)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Cast(UINT64 -> DOUBLE)
    |       +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, uint64#4], table=SimpleTypes, column_index_list=[2, 3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,1
    uint32,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(UINT32 -> DOUBLE)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Literal(type=DOUBLE, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,int32
    int64,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(INT64 -> DOUBLE)
    |     | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Cast(INT32 -> DOUBLE)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,uint32
    int64,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(INT64 -> DOUBLE)
    |     | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Cast(UINT32 -> DOUBLE)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, uint32#3], table=SimpleTypes, column_index_list=[1, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,int64
    int64,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(INT64 -> DOUBLE)
    |     | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Cast(INT64 -> DOUBLE)
    |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,uint64
    int64,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(INT64 -> DOUBLE)
    |     | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Cast(UINT64 -> DOUBLE)
    |       +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, uint64#4], table=SimpleTypes, column_index_list=[1, 3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,1
    int64,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(INT64 -> DOUBLE)
    |     | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Literal(type=DOUBLE, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,int32
    uint64,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(UINT64 -> DOUBLE)
    |     | +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-Cast(INT32 -> DOUBLE)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, uint64#4], table=SimpleTypes, column_index_list=[0, 3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,uint32
    uint64,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(UINT64 -> DOUBLE)
    |     | +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-Cast(UINT32 -> DOUBLE)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, uint64#4], table=SimpleTypes, column_index_list=[2, 3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,int64
    uint64,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(UINT64 -> DOUBLE)
    |     | +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-Cast(INT64 -> DOUBLE)
    |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, uint64#4], table=SimpleTypes, column_index_list=[1, 3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,uint64
    uint64,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(UINT64 -> DOUBLE)
    |     | +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-Cast(UINT64 -> DOUBLE)
    |       +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,1
    uint64,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(UINT64 -> DOUBLE)
    |     | +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-Literal(type=DOUBLE, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,int32
    1,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Literal(type=DOUBLE, value=1)
    |     +-Cast(INT32 -> DOUBLE)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,uint32
    1,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Literal(type=DOUBLE, value=1)
    |     +-Cast(UINT32 -> DOUBLE)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,int64
    1,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Literal(type=DOUBLE, value=1)
    |     +-Cast(INT64 -> DOUBLE)
    |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,uint64
    1,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Literal(type=DOUBLE, value=1)
    |     +-Cast(UINT64 -> DOUBLE)
    |       +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,1
    1,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Literal(type=DOUBLE, value=1)
    |     +-Literal(type=DOUBLE, value=1)
    +-input_scan=
      +-TableScan(table=SimpleTypes)
==

# These alternations test the NUMERIC type's interaction with other numeric
# types.
[language_features=NUMERIC_TYPE]
select safe_divide(numeric, {{int32|uint32|int64|uint64|numeric|1}})
from SimpleTypes;
--
ALTERNATION GROUP: int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(INT32 -> NUMERIC)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, numeric#16], table=SimpleTypes, column_index_list=[0, 15])
--
ALTERNATION GROUP: uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(UINT32 -> NUMERIC)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, numeric#16], table=SimpleTypes, column_index_list=[2, 15])
--
ALTERNATION GROUP: int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(INT64 -> NUMERIC)
    |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, numeric#16], table=SimpleTypes, column_index_list=[1, 15])
--
ALTERNATION GROUP: uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(UINT64 -> NUMERIC)
    |       +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint64#4, numeric#16], table=SimpleTypes, column_index_list=[3, 15])
--
ALTERNATION GROUP: numeric
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.numeric#16], table=SimpleTypes, column_index_list=[15])
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_divide(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Literal(type=NUMERIC, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.numeric#16], table=SimpleTypes, column_index_list=[15])
==

[language_features={{NUMERIC_TYPE|}}]
select safe_add(
  {{int32|uint32|int64|uint64|1}},
  {{int32|uint32|int64|uint64|1}})
from SimpleTypes;
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,int32
    int32,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,uint32
    int32,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Cast(UINT32 -> INT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, uint32#3], table=SimpleTypes, column_index_list=[0, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,int64
    int32,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
--
ALTERNATION GROUP: NUMERIC_TYPE,int32,uint64
--
ERROR: No matching signature for function SAFE_ADD for argument types: INT32, UINT64. Supported signatures: SAFE_ADD(INT64, INT64); SAFE_ADD(UINT64, UINT64); SAFE_ADD(DOUBLE, DOUBLE); SAFE_ADD(NUMERIC, NUMERIC) [at 1:8]
select safe_add(
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,1
    int32,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,int32
    uint32,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(INT64, INT64) -> INT64)
    |     +-Cast(UINT32 -> INT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, uint32#3], table=SimpleTypes, column_index_list=[0, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,uint32
    uint32,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(UINT64, UINT64) -> UINT64)
    |     +-Cast(UINT32 -> UINT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Cast(UINT32 -> UINT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,int64
    uint32,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(INT64, INT64) -> INT64)
    |     +-Cast(UINT32 -> INT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, uint32#3], table=SimpleTypes, column_index_list=[1, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,uint64
    uint32,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(UINT64, UINT64) -> UINT64)
    |     +-Cast(UINT32 -> UINT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, uint64#4], table=SimpleTypes, column_index_list=[2, 3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,1
    uint32,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(UINT64, UINT64) -> UINT64)
    |     +-Cast(UINT32 -> UINT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Literal(type=UINT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,int32
    int64,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,uint32
    int64,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Cast(UINT32 -> INT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, uint32#3], table=SimpleTypes, column_index_list=[1, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,int64
    int64,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUP: NUMERIC_TYPE,int64,uint64
--
ERROR: No matching signature for function SAFE_ADD for argument types: INT64, UINT64. Supported signatures: SAFE_ADD(INT64, INT64); SAFE_ADD(UINT64, UINT64); SAFE_ADD(DOUBLE, DOUBLE); SAFE_ADD(NUMERIC, NUMERIC) [at 1:8]
select safe_add(
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,1
    int64,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUP: NUMERIC_TYPE,uint64,int32
--
ERROR: No matching signature for function SAFE_ADD for argument types: UINT64, INT32. Supported signatures: SAFE_ADD(INT64, INT64); SAFE_ADD(UINT64, UINT64); SAFE_ADD(DOUBLE, DOUBLE); SAFE_ADD(NUMERIC, NUMERIC) [at 1:8]
select safe_add(
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,uint32
    uint64,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(UINT64, UINT64) -> UINT64)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-Cast(UINT32 -> UINT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, uint64#4], table=SimpleTypes, column_index_list=[2, 3])
--
ALTERNATION GROUP: NUMERIC_TYPE,uint64,int64
--
ERROR: No matching signature for function SAFE_ADD for argument types: UINT64, INT64. Supported signatures: SAFE_ADD(INT64, INT64); SAFE_ADD(UINT64, UINT64); SAFE_ADD(DOUBLE, DOUBLE); SAFE_ADD(NUMERIC, NUMERIC) [at 1:8]
select safe_add(
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,uint64
    uint64,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(UINT64, UINT64) -> UINT64)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,1
    uint64,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(UINT64, UINT64) -> UINT64)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-Literal(type=UINT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,int32
    1,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,uint32
    1,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(UINT64, UINT64) -> UINT64)
    |     +-Literal(type=UINT64, value=1)
    |     +-Cast(UINT32 -> UINT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,int64
    1,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,uint64
    1,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(UINT64, UINT64) -> UINT64)
    |     +-Literal(type=UINT64, value=1)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,1
    1,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=SimpleTypes)
--
ALTERNATION GROUP: int32,uint64
--
ERROR: No matching signature for function SAFE_ADD for argument types: INT32, UINT64. Supported signatures: SAFE_ADD(INT64, INT64); SAFE_ADD(UINT64, UINT64); SAFE_ADD(DOUBLE, DOUBLE) [at 1:8]
select safe_add(
       ^
--
ALTERNATION GROUP: int64,uint64
--
ERROR: No matching signature for function SAFE_ADD for argument types: INT64, UINT64. Supported signatures: SAFE_ADD(INT64, INT64); SAFE_ADD(UINT64, UINT64); SAFE_ADD(DOUBLE, DOUBLE) [at 1:8]
select safe_add(
       ^
--
ALTERNATION GROUP: uint64,int32
--
ERROR: No matching signature for function SAFE_ADD for argument types: UINT64, INT32. Supported signatures: SAFE_ADD(INT64, INT64); SAFE_ADD(UINT64, UINT64); SAFE_ADD(DOUBLE, DOUBLE) [at 1:8]
select safe_add(
       ^
--
ALTERNATION GROUP: uint64,int64
--
ERROR: No matching signature for function SAFE_ADD for argument types: UINT64, INT64. Supported signatures: SAFE_ADD(INT64, INT64); SAFE_ADD(UINT64, UINT64); SAFE_ADD(DOUBLE, DOUBLE) [at 1:8]
select safe_add(
       ^
==

# Tests for SAFE_ADD with NUMERIC type.
[language_features=NUMERIC_TYPE]
select safe_add(numeric, {{int32|uint32|int64|uint64|numeric|1}})
from SimpleTypes;
--
ALTERNATION GROUP: int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(INT32 -> NUMERIC)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, numeric#16], table=SimpleTypes, column_index_list=[0, 15])
--
ALTERNATION GROUP: uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(UINT32 -> NUMERIC)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, numeric#16], table=SimpleTypes, column_index_list=[2, 15])
--
ALTERNATION GROUP: int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(INT64 -> NUMERIC)
    |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, numeric#16], table=SimpleTypes, column_index_list=[1, 15])
--
ALTERNATION GROUP: uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(UINT64 -> NUMERIC)
    |       +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint64#4, numeric#16], table=SimpleTypes, column_index_list=[3, 15])
--
ALTERNATION GROUP: numeric
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.numeric#16], table=SimpleTypes, column_index_list=[15])
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_add(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Literal(type=NUMERIC, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.numeric#16], table=SimpleTypes, column_index_list=[15])
==

[language_features={{NUMERIC_TYPE|}}]
select safe_subtract(
  {{int32|uint32|int64|uint64|1}},
  {{int32|uint32|int64|uint64|1}})
from SimpleTypes;
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,int32
    int32,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,uint32
    int32,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Cast(UINT32 -> INT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, uint32#3], table=SimpleTypes, column_index_list=[0, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,int64
    int32,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
--
ALTERNATION GROUP: NUMERIC_TYPE,int32,uint64
--
ERROR: No matching signature for function SAFE_SUBTRACT for argument types: INT32, UINT64. Supported signatures: SAFE_SUBTRACT(INT64, INT64); SAFE_SUBTRACT(UINT64, UINT64); SAFE_SUBTRACT(NUMERIC, NUMERIC); SAFE_SUBTRACT(DOUBLE, DOUBLE) [at 1:8]
select safe_subtract(
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,1
    int32,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,int32
    uint32,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(INT64, INT64) -> INT64)
    |     +-Cast(UINT32 -> INT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, uint32#3], table=SimpleTypes, column_index_list=[0, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,uint32
    uint32,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(UINT64, UINT64) -> INT64)
    |     +-Cast(UINT32 -> UINT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Cast(UINT32 -> UINT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,int64
    uint32,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(INT64, INT64) -> INT64)
    |     +-Cast(UINT32 -> INT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, uint32#3], table=SimpleTypes, column_index_list=[1, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,uint64
    uint32,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(UINT64, UINT64) -> INT64)
    |     +-Cast(UINT32 -> UINT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, uint64#4], table=SimpleTypes, column_index_list=[2, 3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,1
    uint32,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(UINT64, UINT64) -> INT64)
    |     +-Cast(UINT32 -> UINT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Literal(type=UINT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,int32
    int64,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,uint32
    int64,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Cast(UINT32 -> INT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, uint32#3], table=SimpleTypes, column_index_list=[1, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,int64
    int64,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUP: NUMERIC_TYPE,int64,uint64
--
ERROR: No matching signature for function SAFE_SUBTRACT for argument types: INT64, UINT64. Supported signatures: SAFE_SUBTRACT(INT64, INT64); SAFE_SUBTRACT(UINT64, UINT64); SAFE_SUBTRACT(NUMERIC, NUMERIC); SAFE_SUBTRACT(DOUBLE, DOUBLE) [at 1:8]
select safe_subtract(
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,1
    int64,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUP: NUMERIC_TYPE,uint64,int32
--
ERROR: No matching signature for function SAFE_SUBTRACT for argument types: UINT64, INT32. Supported signatures: SAFE_SUBTRACT(INT64, INT64); SAFE_SUBTRACT(UINT64, UINT64); SAFE_SUBTRACT(NUMERIC, NUMERIC); SAFE_SUBTRACT(DOUBLE, DOUBLE) [at 1:8]
select safe_subtract(
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,uint32
    uint64,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(UINT64, UINT64) -> INT64)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-Cast(UINT32 -> UINT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, uint64#4], table=SimpleTypes, column_index_list=[2, 3])
--
ALTERNATION GROUP: NUMERIC_TYPE,uint64,int64
--
ERROR: No matching signature for function SAFE_SUBTRACT for argument types: UINT64, INT64. Supported signatures: SAFE_SUBTRACT(INT64, INT64); SAFE_SUBTRACT(UINT64, UINT64); SAFE_SUBTRACT(NUMERIC, NUMERIC); SAFE_SUBTRACT(DOUBLE, DOUBLE) [at 1:8]
select safe_subtract(
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,uint64
    uint64,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(UINT64, UINT64) -> INT64)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,1
    uint64,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(UINT64, UINT64) -> INT64)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-Literal(type=UINT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,int32
    1,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,uint32
    1,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(UINT64, UINT64) -> INT64)
    |     +-Literal(type=UINT64, value=1)
    |     +-Cast(UINT32 -> UINT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,int64
    1,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,uint64
    1,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(UINT64, UINT64) -> INT64)
    |     +-Literal(type=UINT64, value=1)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,1
    1,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=SimpleTypes)
--
ALTERNATION GROUP: int32,uint64
--
ERROR: No matching signature for function SAFE_SUBTRACT for argument types: INT32, UINT64. Supported signatures: SAFE_SUBTRACT(INT64, INT64); SAFE_SUBTRACT(UINT64, UINT64); SAFE_SUBTRACT(DOUBLE, DOUBLE) [at 1:8]
select safe_subtract(
       ^
--
ALTERNATION GROUP: int64,uint64
--
ERROR: No matching signature for function SAFE_SUBTRACT for argument types: INT64, UINT64. Supported signatures: SAFE_SUBTRACT(INT64, INT64); SAFE_SUBTRACT(UINT64, UINT64); SAFE_SUBTRACT(DOUBLE, DOUBLE) [at 1:8]
select safe_subtract(
       ^
--
ALTERNATION GROUP: uint64,int32
--
ERROR: No matching signature for function SAFE_SUBTRACT for argument types: UINT64, INT32. Supported signatures: SAFE_SUBTRACT(INT64, INT64); SAFE_SUBTRACT(UINT64, UINT64); SAFE_SUBTRACT(DOUBLE, DOUBLE) [at 1:8]
select safe_subtract(
       ^
--
ALTERNATION GROUP: uint64,int64
--
ERROR: No matching signature for function SAFE_SUBTRACT for argument types: UINT64, INT64. Supported signatures: SAFE_SUBTRACT(INT64, INT64); SAFE_SUBTRACT(UINT64, UINT64); SAFE_SUBTRACT(DOUBLE, DOUBLE) [at 1:8]
select safe_subtract(
       ^
==

# Tests for SAFE_SUBTRACT with NUMERIC type.
[language_features=NUMERIC_TYPE]
select safe_subtract(numeric, {{int32|uint32|int64|uint64|numeric|1}})
from SimpleTypes;
--
ALTERNATION GROUP: int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(INT32 -> NUMERIC)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, numeric#16], table=SimpleTypes, column_index_list=[0, 15])
--
ALTERNATION GROUP: uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(UINT32 -> NUMERIC)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, numeric#16], table=SimpleTypes, column_index_list=[2, 15])
--
ALTERNATION GROUP: int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(INT64 -> NUMERIC)
    |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, numeric#16], table=SimpleTypes, column_index_list=[1, 15])
--
ALTERNATION GROUP: uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(UINT64 -> NUMERIC)
    |       +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint64#4, numeric#16], table=SimpleTypes, column_index_list=[3, 15])
--
ALTERNATION GROUP: numeric
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.numeric#16], table=SimpleTypes, column_index_list=[15])
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_subtract(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Literal(type=NUMERIC, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.numeric#16], table=SimpleTypes, column_index_list=[15])
==

[language_features={{NUMERIC_TYPE|}}]
select safe_multiply(
  {{int32|uint32|int64|uint64|1}},
  {{int32|uint32|int64|uint64|1}})
from SimpleTypes;
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,int32
    int32,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,uint32
    int32,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Cast(UINT32 -> INT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, uint32#3], table=SimpleTypes, column_index_list=[0, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,int64
    int32,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
--
ALTERNATION GROUP: NUMERIC_TYPE,int32,uint64
--
ERROR: No matching signature for function SAFE_MULTIPLY for argument types: INT32, UINT64. Supported signatures: SAFE_MULTIPLY(INT64, INT64); SAFE_MULTIPLY(UINT64, UINT64); SAFE_MULTIPLY(DOUBLE, DOUBLE); SAFE_MULTIPLY(NUMERIC, NUMERIC) [at 1:8]
select safe_multiply(
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32,1
    int32,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,int32
    uint32,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(INT64, INT64) -> INT64)
    |     +-Cast(UINT32 -> INT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, uint32#3], table=SimpleTypes, column_index_list=[0, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,uint32
    uint32,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(UINT64, UINT64) -> UINT64)
    |     +-Cast(UINT32 -> UINT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Cast(UINT32 -> UINT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,int64
    uint32,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(INT64, INT64) -> INT64)
    |     +-Cast(UINT32 -> INT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, uint32#3], table=SimpleTypes, column_index_list=[1, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,uint64
    uint32,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(UINT64, UINT64) -> UINT64)
    |     +-Cast(UINT32 -> UINT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, uint64#4], table=SimpleTypes, column_index_list=[2, 3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint32,1
    uint32,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(UINT64, UINT64) -> UINT64)
    |     +-Cast(UINT32 -> UINT64)
    |     | +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |     +-Literal(type=UINT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,int32
    int64,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,uint32
    int64,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Cast(UINT32 -> INT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, uint32#3], table=SimpleTypes, column_index_list=[1, 2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,int64
    int64,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUP: NUMERIC_TYPE,int64,uint64
--
ERROR: No matching signature for function SAFE_MULTIPLY for argument types: INT64, UINT64. Supported signatures: SAFE_MULTIPLY(INT64, INT64); SAFE_MULTIPLY(UINT64, UINT64); SAFE_MULTIPLY(DOUBLE, DOUBLE); SAFE_MULTIPLY(NUMERIC, NUMERIC) [at 1:8]
select safe_multiply(
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64,1
    int64,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUP: NUMERIC_TYPE,uint64,int32
--
ERROR: No matching signature for function SAFE_MULTIPLY for argument types: UINT64, INT32. Supported signatures: SAFE_MULTIPLY(INT64, INT64); SAFE_MULTIPLY(UINT64, UINT64); SAFE_MULTIPLY(DOUBLE, DOUBLE); SAFE_MULTIPLY(NUMERIC, NUMERIC) [at 1:8]
select safe_multiply(
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,uint32
    uint64,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(UINT64, UINT64) -> UINT64)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-Cast(UINT32 -> UINT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, uint64#4], table=SimpleTypes, column_index_list=[2, 3])
--
ALTERNATION GROUP: NUMERIC_TYPE,uint64,int64
--
ERROR: No matching signature for function SAFE_MULTIPLY for argument types: UINT64, INT64. Supported signatures: SAFE_MULTIPLY(INT64, INT64); SAFE_MULTIPLY(UINT64, UINT64); SAFE_MULTIPLY(DOUBLE, DOUBLE); SAFE_MULTIPLY(NUMERIC, NUMERIC) [at 1:8]
select safe_multiply(
       ^
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,uint64
    uint64,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(UINT64, UINT64) -> UINT64)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,uint64,1
    uint64,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(UINT64, UINT64) -> UINT64)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |     +-Literal(type=UINT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,int32
    1,int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-Cast(INT32 -> INT64)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,uint32
    1,uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(UINT64, UINT64) -> UINT64)
    |     +-Literal(type=UINT64, value=1)
    |     +-Cast(UINT32 -> UINT64)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint32#3], table=SimpleTypes, column_index_list=[2])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,int64
    1,int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,uint64
    1,uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(UINT64, UINT64) -> UINT64)
    |     +-Literal(type=UINT64, value=1)
    |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.uint64#4], table=SimpleTypes, column_index_list=[3])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1,1
    1,1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=SimpleTypes)
--
ALTERNATION GROUP: int32,uint64
--
ERROR: No matching signature for function SAFE_MULTIPLY for argument types: INT32, UINT64. Supported signatures: SAFE_MULTIPLY(INT64, INT64); SAFE_MULTIPLY(UINT64, UINT64); SAFE_MULTIPLY(DOUBLE, DOUBLE) [at 1:8]
select safe_multiply(
       ^
--
ALTERNATION GROUP: int64,uint64
--
ERROR: No matching signature for function SAFE_MULTIPLY for argument types: INT64, UINT64. Supported signatures: SAFE_MULTIPLY(INT64, INT64); SAFE_MULTIPLY(UINT64, UINT64); SAFE_MULTIPLY(DOUBLE, DOUBLE) [at 1:8]
select safe_multiply(
       ^
--
ALTERNATION GROUP: uint64,int32
--
ERROR: No matching signature for function SAFE_MULTIPLY for argument types: UINT64, INT32. Supported signatures: SAFE_MULTIPLY(INT64, INT64); SAFE_MULTIPLY(UINT64, UINT64); SAFE_MULTIPLY(DOUBLE, DOUBLE) [at 1:8]
select safe_multiply(
       ^
--
ALTERNATION GROUP: uint64,int64
--
ERROR: No matching signature for function SAFE_MULTIPLY for argument types: UINT64, INT64. Supported signatures: SAFE_MULTIPLY(INT64, INT64); SAFE_MULTIPLY(UINT64, UINT64); SAFE_MULTIPLY(DOUBLE, DOUBLE) [at 1:8]
select safe_multiply(
       ^
==

# Tests for SAFE_MULTIPLY with NUMERIC type.
[language_features=NUMERIC_TYPE]
select safe_multiply(numeric, {{int32|uint32|int64|uint64|numeric|1}})
from SimpleTypes;
--
ALTERNATION GROUP: int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(INT32 -> NUMERIC)
    |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int32#1, numeric#16], table=SimpleTypes, column_index_list=[0, 15])
--
ALTERNATION GROUP: uint32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(UINT32 -> NUMERIC)
    |       +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint32#3, numeric#16], table=SimpleTypes, column_index_list=[2, 15])
--
ALTERNATION GROUP: int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(INT64 -> NUMERIC)
    |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, numeric#16], table=SimpleTypes, column_index_list=[1, 15])
--
ALTERNATION GROUP: uint64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Cast(UINT64 -> NUMERIC)
    |       +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[uint64#4, numeric#16], table=SimpleTypes, column_index_list=[3, 15])
--
ALTERNATION GROUP: numeric
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.numeric#16], table=SimpleTypes, column_index_list=[15])
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_multiply(NUMERIC, NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    |     +-Literal(type=NUMERIC, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.numeric#16], table=SimpleTypes, column_index_list=[15])
==

[language_features={{NUMERIC_TYPE|}}]
select safe_negate({{int32|int64|float|double|numeric|1}})
from SimpleTypes;
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int32
    int32
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_negate(INT32) -> INT32)
    |     +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,int64
    int64
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_negate(INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,float
    float
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [FLOAT]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_negate(FLOAT) -> FLOAT)
    |     +-ColumnRef(type=FLOAT, column=SimpleTypes.float#8)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.float#8], table=SimpleTypes, column_index_list=[7])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,double
    double
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_negate(DOUBLE) -> DOUBLE)
    |     +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.double#9], table=SimpleTypes, column_index_list=[8])
--
ALTERNATION GROUP: NUMERIC_TYPE,numeric
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_negate(NUMERIC) -> NUMERIC)
    |     +-ColumnRef(type=NUMERIC, column=SimpleTypes.numeric#16)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.numeric#16], table=SimpleTypes, column_index_list=[15])
--
ALTERNATION GROUPS:
    NUMERIC_TYPE,1
    1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#19 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#19]
    +-expr_list=
    | +-$col1#19 :=
    |   +-FunctionCall(ZetaSQL:safe_negate(INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(table=SimpleTypes)
--
ALTERNATION GROUP: numeric
--
ERROR: No matching signature for function SAFE_NEGATE for argument types: NUMERIC. Supported signatures: SAFE_NEGATE(INT32); SAFE_NEGATE(INT64); SAFE_NEGATE(FLOAT); SAFE_NEGATE(DOUBLE) [at 1:8]
select safe_negate(numeric)
       ^
==

# SAFE_NEGATE is not supported for unsigned types.
select safe_negate({{uint32|uint64}})
from SimpleTypes;
--
ALTERNATION GROUP: uint32
--
ERROR: No matching signature for function SAFE_NEGATE for argument types: UINT32. Supported signatures: SAFE_NEGATE(INT32); SAFE_NEGATE(INT64); SAFE_NEGATE(FLOAT); SAFE_NEGATE(DOUBLE) [at 1:8]
select safe_negate(uint32)
       ^
--
ALTERNATION GROUP: uint64
--
ERROR: No matching signature for function SAFE_NEGATE for argument types: UINT64. Supported signatures: SAFE_NEGATE(INT32); SAFE_NEGATE(INT64); SAFE_NEGATE(FLOAT); SAFE_NEGATE(DOUBLE) [at 1:8]
select safe_negate(uint64)
       ^
