# This file tests strict mode queries, where we have more restrictive rules
# and get some additional errors, but never get different results.
#
# In this file, we don't show the resolved AST because it's not normally
# interesting.
# Queries showing no output passed in both modes and gave identical output.
# Queries showing only ERROR: gave the same error in both modes.
# Queries showing STRICT MODE ERROR: gave that error in strict mode.  If they
# also have ERROR:, they failed in default mode with a different error message.
#
# In other files, we always run the query in both default and strict mode, and
# verify that we never get success in strict with failure in non-strict, and
# that if both succeed, they give identical resolved ASTs, but we don't show
# the strict mode error messages.

[default show_strict_mode]
[default no_show_resolved_ast]

select key from KeyValue
--
STRICT MODE ERROR: Alias key cannot be used without a qualifier in strict name resolution mode [at 1:8]
select key from KeyValue
       ^
==

# The two modes fail at different points.
select kv, kv.key, key, x from KeyValue kv
--
STRICT MODE ERROR: Alias key cannot be used without a qualifier in strict name resolution mode [at 1:20]
select kv, kv.key, key, x from KeyValue kv
                   ^
--
ERROR: Unrecognized name: x [at 1:25]
select kv, kv.key, key, x from KeyValue kv
                        ^
==

select KeyValue.x from KeyValue
--
ERROR: Name x not found inside KeyValue [at 1:17]
select KeyValue.x from KeyValue
                ^
==

select * from KeyValue
--
STRICT MODE ERROR: SELECT * is not allowed in strict name resolution mode [at 1:8]
select * from KeyValue
       ^
==

select kv.* from KeyValue
--
STRICT MODE ERROR: Dot-star is not allowed in strict name resolution mode [at 1:8]
select kv.* from KeyValue
       ^
--
ERROR: Unrecognized name: kv [at 1:8]
select kv.* from KeyValue
       ^
==

# Explicitness propagates out of the subquery.
select col from (select 1 col)
--
==

select KeyValue
from KeyValue
where KeyValue.key = 5 and value = 7
--
STRICT MODE ERROR: Alias value cannot be used without a qualifier in strict name resolution mode [at 3:28]
where KeyValue.key = 5 and value = 7
                           ^
==

# key is an implicit name on both sides of the JOIN USING.
select count(*)
from KeyValue kv1 join KeyValue kv2 using (key)
--
STRICT MODE ERROR: Column name key cannot be used without a qualifier in strict name resolution mode. Use JOIN ON with a qualified name instead [at 2:44]
from KeyValue kv1 join KeyValue kv2 using (key)
                                           ^
==

select count(*)
from (select 1 key) join KeyValue kv2 using (key)
--
STRICT MODE ERROR: Column name key cannot be used without a qualifier in strict name resolution mode. Use JOIN ON with a qualified name instead [at 2:46]
from (select 1 key) join KeyValue kv2 using (key)
                                             ^
==

# key would be implicit because it comes from select * in a subquery.
select count(*)
from KeyValue join (select * from KeyValue) using (key)
--
STRICT MODE ERROR: SELECT * is not allowed in strict name resolution mode [at 2:28]
from KeyValue join (select * from KeyValue) using (key)
                           ^
==

# key is explicit on both sides of the join, so this the join is okay,
# and join using makes key explicit in the join output.
select key
from (select 1 key) join (select k.key from KeyValue k) using (key)
--
==

# x is explicit coming from the lhs.
# key is implicit coming from the rhs.
select x, key
from (select 1 x) join KeyValue kv on x=kv.key
--
STRICT MODE ERROR: Alias key cannot be used without a qualifier in strict name resolution mode [at 1:11]
select x, key
          ^
==

select s.key, s, key, s.value, value
from (select kv.key, * from KeyValue kv) s
--
STRICT MODE ERROR: SELECT * is not allowed in strict name resolution mode [at 2:22]
from (select kv.key, * from KeyValue kv) s
                     ^
--
ERROR: Name key is ambiguous inside s [at 1:10]
select s.key, s, key, s.value, value
         ^
==

# Value is a column in both input tables so is ambiguous.
select subq.value, kv.value, value
from (select 1 value) subq, KeyValue kv
--
ERROR: Column name value is ambiguous [at 1:30]
select subq.value, kv.value, value
                             ^
==

# Now value is a range variable, which can be accessed unqualified, even in
# strict mode.
select value, value.value, kv.value, key
from (select 1 value) value, KeyValue kv
--
STRICT MODE ERROR: Alias key cannot be used without a qualifier in strict name resolution mode [at 1:38]
select value, value.value, kv.value, key
                                     ^
==

# Accessing fields in a value table.
select kvt.bool_val, kvt, date from KitchenSinkValueTable kvt
--
STRICT MODE ERROR: Alias date cannot be used without a qualifier in strict name resolution mode [at 1:27]
select kvt.bool_val, kvt, date from KitchenSinkValueTable kvt
                          ^
==

select i from Int32ValueTable i
--
==

select 1
from KitchenSinkValueTable t1 join KitchenSinkValueTable t2 using (date)
--
STRICT MODE ERROR: Column name date cannot be used without a qualifier in strict name resolution mode. Use JOIN ON with a qualified name instead [at 2:68]
from KitchenSinkValueTable t1 join KitchenSinkValueTable t2 using (date)
                                                                   ^
==

# The columns that are explicit in the WITH subquery are also explicit when
# it is referenced, so this is okay.
with q1 as (select k.key, k.value from KeyValue k)
select q1.key, value from q1
--
==

with q1 as (select k.key, k.value from KeyValue k),
     q2 as (select k.key, k.value from KeyValue k)
select key from q1 join q2 using (key)
--
==

# i resolves to the explicit copy from the rhs subquery.
# (length wouldn't work on the int from the lhs).
# The * in the lhs produces an implicit column 'i'.
select q1.i, q2.i, length(i)
from (select * from Int32ValueTable i) q1, (select 'abc' i) q2
--
STRICT MODE ERROR: SELECT * is not allowed in strict name resolution mode [at 2:14]
from (select * from Int32ValueTable i) q1, (select 'abc' i) q2
             ^
--
ERROR: Column name i is ambiguous [at 1:27]
select q1.i, q2.i, length(i)
                          ^
==

# a resolves to the implicit column on the lhs.
# b is ambiguous because it's a column on both sides.
select q1.a, q1.b, q2.b, a, if(b,b,b)
from (select * from TestStructValueTable) q1, (select true b) q2
--
STRICT MODE ERROR: SELECT * is not allowed in strict name resolution mode [at 2:14]
from (select * from TestStructValueTable) q1, (select true b) q2
             ^
--
ERROR: Column name b is ambiguous [at 1:32]
select q1.a, q1.b, q2.b, a, if(b,b,b)
                               ^
==

select q1.a, q1.b, q2.b, a, if(b,b,b)
from (select a,b from TestStructValueTable) q1, (select true b) q2
--
STRICT MODE ERROR: Alias a cannot be used without a qualifier in strict name resolution mode [at 2:14]
from (select a,b from TestStructValueTable) q1, (select true b) q2
             ^
--
ERROR: Column name b is ambiguous [at 1:32]
select q1.a, q1.b, q2.b, a, if(b,b,b)
                               ^
==

select q1.a, q1.b, q2.b, a, if(b,b,b)
from (select t.a, t.b from TestStructValueTable t) q1, (select true b) q2
--
ERROR: Column name b is ambiguous [at 1:32]
select q1.a, q1.b, q2.b, a, if(b,b,b)
                               ^
==

# b is both an implicit column and a value table field.
select q1.a, q1.b, q2.b, a, b
from TestStructValueTable q1, (select true b) q2
--
STRICT MODE ERROR: Alias a cannot be used without a qualifier in strict name resolution mode [at 1:26]
select q1.a, q1.b, q2.b, a, b
                         ^
--
ERROR: Column name b is ambiguous [at 1:29]
select q1.a, q1.b, q2.b, a, b
                            ^
==

# Accessing unqualified struct field names always counts as an implicit lookup.
# Without AS STRUCT, 'x' is available as an explicit name.
select s.x, x from (select {{as struct|}} 1 x) s
--
ALTERNATION GROUP: as struct
--
STRICT MODE ERROR: Alias x cannot be used without a qualifier in strict name resolution mode [at 1:13]
select s.x, x from (select as struct 1 x) s
            ^
--
ALTERNATION GROUP: <empty>
--
==

# 'key' is a field of a proto, which is always implicit, even though it was an
# explicit column inside the subquery.
# This propagates through select distinct too.
select s.key, key
from (select {{distinct|}} as "zetasql_test__.KeyValueStruct" 'abc' key
      from TestTable) s
--
STRICT MODE ERROR: Alias key cannot be used without a qualifier in strict name resolution mode [at 1:15]
select s.key, key
              ^
==

select arr.key, off, key
from UNNEST(ARRAY<"zetasql_test__.KeyValueStruct">['''key: "abc"''']) arr
     WITH OFFSET off
--
STRICT MODE ERROR: Alias key cannot be used without a qualifier in strict name resolution mode [at 1:22]
select arr.key, off, key
                     ^
==

select arr, offset_idx
from UNNEST([1,2,3]) arr WITH OFFSET
--
==

# key is okay because it's resolving to an explicit SELECT-list alias, and it
# resolves to the same column 'key' in the FROM clause.
# value is bad because it's resolving to an implicit from-clause column.
select k.key from KeyValue k
group by key, value
--
STRICT MODE ERROR: Alias value cannot be used without a qualifier in strict name resolution mode [at 2:15]
group by key, value
              ^
==

# key is okay because it's resolving to an explicit select-list alias.
# value is bad because it's resolving to an implicit from-clause column.
select k.key from KeyValue k
order by {{key|value}}
--
ALTERNATION GROUP: key
--
--
ALTERNATION GROUP: value
--
STRICT MODE ERROR: Alias value cannot be used without a qualifier in strict name resolution mode [at 2:10]
order by value
         ^
==

# Explicitness propagates past SELECT DISTINCT.
select sq.key, key
from (select {{|distinct}} k.key from KeyValue k) sq
--
==

select sq.key, sq.value, sq2.value, k1, value
from (select {{|distinct}}
             k.key k1, * from KeyValue k) sq,
     (select {{|distinct}} 5 value from TestTable) sq2
--
STRICT MODE ERROR: SELECT * is not allowed in strict name resolution mode [at 3:24]
             k.key k1, * from KeyValue k) sq,
                       ^
--
ERROR: Column name value is ambiguous [at 1:41]
select sq.key, sq.value, sq2.value, k1, value
                                        ^
==

# Explicitness propagates out of set operations, based on explicitness of
# the name in the first input query, so this is okay.
select key from (
  select 1 key
  union all
  select 2 x
)
--
==

select sq.key, value from (
  select * from KeyValue
  union all
  select k.key, k.value from KeyValue k
) sq
--
STRICT MODE ERROR: SELECT * is not allowed in strict name resolution mode [at 2:10]
  select * from KeyValue
         ^
==

select sq, sq.abc, abc from (
  select as struct 'abc' abc
  union all
  select as struct 'def' abc
) sq
--
STRICT MODE ERROR: Alias abc cannot be used without a qualifier in strict name resolution mode [at 1:20]
select sq, sq.abc, abc from (
                   ^
==

# The column name extracted from a struct type is implicit, even if that struct's
# field names were constructed from explicit names.
select t.col, col
from UNNEST(ARRAY(SELECT AS STRUCT 123 col)) t
--
STRICT MODE ERROR: Alias col cannot be used without a qualifier in strict name resolution mode [at 1:15]
select t.col, col
              ^
==

# This case doesn't need a speical error for strict mode because it already
# forbids implicit names in regular mode.
select 1 from TestTable, KitchenSink.repeated_int32_val
--
ERROR: Aliases referenced in the from clause must refer to preceding scans, and cannot refer to columns on those scans. KitchenSink refers to a column and must be qualified with a table name. [at 1:26]
select 1 from TestTable, KitchenSink.repeated_int32_val
                         ^
==

select ARRAY(select 1 from KitchenSink.repeated_int32_val)
from TestTable
--
ERROR: Aliases referenced in the from clause must refer to preceding scans, and cannot refer to columns on those scans. KitchenSink refers to a column and must be qualified with a table name. [at 1:28]
select ARRAY(select 1 from KitchenSink.repeated_int32_val)
                           ^
==

DELETE FROM TestTable where EXISTS(select 1 from KitchenSink.repeated_int32_val)
--
ERROR: Aliases referenced in the from clause must refer to preceding scans, and cannot refer to columns on those scans. KitchenSink refers to a column and must be qualified with a table name. [at 1:50]
DELETE FROM TestTable where EXISTS(select 1 from KitchenSink.repeated_int32_val)
                                                 ^
==

# Alias ambiguity tests.  These initially mirror the basic test cases in
# alias_ambiguity.test.

# ORDER BY alias ambiguity tests.

select {{keyvalue.key | keyvalue.key as key}}
from keyvalue
order by {{key | keyvalue.key}}
--
==

select keyvalue.key as key1
from keyvalue
order by key1
--
==

select keyvalue.key+1 as key
from keyvalue
order by key;
--
==

select keyvalue.key as value
from keyvalue
order by value;
--
==

select keyvalue.key, keyvalue.key as key
from keyvalue
order by key;
--
ERROR: Column name key is ambiguous [at 3:10]
order by key;
         ^
==

# GROUP BY alias tests

select {{keyvalue.key | keyvalue.key as key}}
from keyvalue
group by {{key | keyvalue.key}}
--
==

select keyvalue.key as key1
from keyvalue
group by key1
--
==

select keyvalue.key+1 as key
from keyvalue
group by key;
--
==

[no_enable_literal_replacement]
select keyvalue.key+1 as key
from keyvalue
group by key + 1;
--
STRICT MODE ERROR: Alias key cannot be used without a qualifier in strict name resolution mode [at 3:10]
group by key + 1;
         ^
==

select keyvalue.key as value
from keyvalue
group by value;
--
==

# HAVING alias tests

select sum(keyvalue.key) as key
from keyvalue
having key > 5;
--
==

select sum(keyvalue.key) as key
from keyvalue
having sum(key) > 5;
--
ERROR: Aggregations of aggregations are not allowed [at 3:12]
having sum(key) > 5;
           ^
==

select sum(keyvalue.key) as key
from keyvalue
having key + sum(keyvalue.key) > 5;
--
==

# GROUP BY and HAVING alias tests

select {{keyvalue.key | keyvalue.key as key}}
from keyvalue
group by 1
having key > 1
--
==

select keyvalue.key as key1
from keyvalue
group by 1
having key1 > 1
--
==

# Alias 'value' should not override keyvalue.value, nor should it
# unambiguously resolve to the alias since non-qualified column
# references are not allowed in strict mode.
select keyvalue.key as value
from keyvalue
group by 1
having value > 5
--
==

select keyvalue.key as key1
from keyvalue
group by 1
having key > 5
--
STRICT MODE ERROR: Alias key cannot be used without a qualifier in strict name resolution mode [at 4:8]
having key > 5
       ^
==

select keyvalue.key as key
from keyvalue
group by 1
having sum(key) > 10
--
==

select keyvalue.key+1 as key
from keyvalue
group by 1
having sum(key) > 10
--
==

select keyvalue.key as key
from keyvalue
group by 1
having key > 5 and sum(key) < 10
--
==

# Queries with GROUP BY and ORDER BY

select keyvalue.key
from keyvalue
group by key
order by key
--
==

select {{keyvalue.key | keyvalue.key as key}}
from keyvalue
group by 1
order by key
--
==

select keyvalue.key as key1
from keyvalue
group by 1
order by key1
--
==

select keyvalue.key as value
from keyvalue
group by 1
order by value
--
==

# Success in non-strict mode.
select keyvalue.key as key1
from keyvalue
group by 1
order by key
--
STRICT MODE ERROR: Alias key cannot be used without a qualifier in strict name resolution mode [at 4:10]
order by key
         ^
==

select keyvalue.key as key
from keyvalue
group by 1
order by sum(key)
--
==

select keyvalue.key as key
from keyvalue
group by 1
order by key, sum(key)
--
==

# Direct table input to PIVOT disallowed in strict mode
# TODO: Enable the unparser when SQLBuilder support is implemented
[language_features=V_1_3_PIVOT]
[no_run_unparser]
SELECT 1 FROM KeyValue PIVOT(COUNT(Value) FOR Key IN (0 AS zero, 1 AS one));
--
STRICT MODE ERROR: Input to PIVOT must be a subquery in strict name resolution mode [at 1:24]
SELECT 1 FROM KeyValue PIVOT(COUNT(Value) FOR Key IN (0 AS zero, 1 AS one));
                       ^
==

# TVF input to PIVOT disallowed in strict mode
# TODO: Enable the unparser when SQLBuilder support is implemented
[language_features=V_1_3_PIVOT,TABLE_VALUED_FUNCTIONS]
[no_run_unparser]
SELECT 1 FROM tvf_no_args() PIVOT(COUNT(1) FOR 1 IN (0 AS zero, 1 AS one));
--
STRICT MODE ERROR: Input to PIVOT must be a subquery in strict name resolution mode [at 1:29]
SELECT 1 FROM tvf_no_args() PIVOT(COUNT(1) FOR 1 IN (0 AS zero, 1 AS one));
                            ^
==

# Subquery input to PIVOT allowed in strict mode
[language_features=V_1_3_PIVOT]
[no_run_unparser]
SELECT 1 FROM (SELECT KeyValue.Key, KeyValue.Value FROM KeyValue) kv
PIVOT(COUNT(kv.Value) FOR kv.Key IN (0 AS zero, 1 AS one));
--
==

# Similar to the above, but the pivot expressions and FOR expression refer
# to unqualified column names from the input table. This is also ok, since the
# input table is a subquery.
[language_features=V_1_3_PIVOT]
[no_run_unparser]
SELECT 1 FROM (SELECT KeyValue.Key, KeyValue.Value FROM KeyValue) kv
PIVOT(COUNT(Value) FOR Key IN (0 AS zero, 1 AS one));
--
