[default enabled_ast_rewrites=DEFAULTS]

[default language_features=V_1_3_INLINE_LAMBDA_ARGUMENT]
SELECT ARRAY_TRANSFORM([1,2,3], e -> e>0);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->BOOL> transformation) -> ARRAY<BOOL>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.e#1]
    |           +-body=
    |             +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |               +-ColumnRef(type=INT64, column=$lambda_arg.e#1)
    |               +-Literal(type=INT64, value=0)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<BOOL>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#7]
    |         +-expr_list=
    |         | +-$col1#7 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<BOOL>, ARRAY<BOOL>) -> ARRAY<BOOL>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#3)
    |         |     +-Literal(type=ARRAY<BOOL>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<BOOL>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#3)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$expr_subquery.$col1#6]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$array.element#4, $array_offset.off#5, $expr_subquery.$col1#6]
    |         |           |   +-expr_list=
    |         |           |   | +-$col1#6 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |         |           |   |     +-ColumnRef(type=INT64, column=$array.element#4)
    |         |           |   |     +-Literal(type=INT64, value=0)
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$array.element#4, $array_offset.off#5]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#3, is_correlated=TRUE)
    |         |           |       +-element_column=$array.element#4
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$array_offset.off#5)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#5)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.array_to_transform#3]
    |             +-expr_list=
    |             | +-array_to_transform#3 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

# ARRAY_TRANSFORM with offset
SELECT ARRAY_TRANSFORM([1,2,3], (e, i) -> e>i);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<(INT64, INT64)->BOOL> transformation) -> ARRAY<BOOL>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=$lambda_arg.[e#1, i#2]
    |           +-body=
    |             +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |               +-ColumnRef(type=INT64, column=$lambda_arg.e#1)
    |               +-ColumnRef(type=INT64, column=$lambda_arg.i#2)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<BOOL>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#8]
    |         +-expr_list=
    |         | +-$col1#8 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<BOOL>, ARRAY<BOOL>) -> ARRAY<BOOL>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#4)
    |         |     +-Literal(type=ARRAY<BOOL>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<BOOL>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#4)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$expr_subquery.$col1#7]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$array.element#5, $array_offset.off#6, $expr_subquery.$col1#7]
    |         |           |   +-expr_list=
    |         |           |   | +-$col1#7 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |         |           |   |     +-ColumnRef(type=INT64, column=$array.element#5)
    |         |           |   |     +-ColumnRef(type=INT64, column=$array_offset.off#6)
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$array.element#5, $array_offset.off#6]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#4, is_correlated=TRUE)
    |         |           |       +-element_column=$array.element#5
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$array_offset.off#6)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#6)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.array_to_transform#4]
    |             +-expr_list=
    |             | +-array_to_transform#4 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

# Lambda body with column reference
SELECT ARRAY_TRANSFORM([1,2,3], e -> e > Key) FROM KeyValue;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->BOOL> transformation) -> ARRAY<BOOL>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.e#3]
    |           +-parameter_list=
    |           | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |           +-body=
    |             +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |               +-ColumnRef(type=INT64, column=$lambda_arg.e#3)
    |               +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<BOOL>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#9]
    |         +-expr_list=
    |         | +-$col1#9 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<BOOL>, ARRAY<BOOL>) -> ARRAY<BOOL>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#5)
    |         |     +-Literal(type=ARRAY<BOOL>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<BOOL>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#5)
    |         |       | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$expr_subquery.$col1#8]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$array.element#6, $array_offset.off#7, $expr_subquery.$col1#8]
    |         |           |   +-expr_list=
    |         |           |   | +-$col1#8 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |         |           |   |     +-ColumnRef(type=INT64, column=$array.element#6)
    |         |           |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$array.element#6, $array_offset.off#7]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#5, is_correlated=TRUE)
    |         |           |       +-element_column=$array.element#6
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$array_offset.off#7)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#7)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.array_to_transform#5]
    |             +-expr_list=
    |             | +-array_to_transform#5 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
==

# Lambda body with column reference and offset.
SELECT ARRAY_TRANSFORM([1,2,3], (e,i) -> (e+i) > Key) FROM KeyValue;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<(INT64, INT64)->BOOL> transformation) -> ARRAY<BOOL>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=$lambda_arg.[e#3, i#4]
    |           +-parameter_list=
    |           | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |           +-body=
    |             +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |               +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |               | +-ColumnRef(type=INT64, column=$lambda_arg.e#3)
    |               | +-ColumnRef(type=INT64, column=$lambda_arg.i#4)
    |               +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<BOOL>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#10]
    |         +-expr_list=
    |         | +-$col1#10 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<BOOL>, ARRAY<BOOL>) -> ARRAY<BOOL>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#6)
    |         |     +-Literal(type=ARRAY<BOOL>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<BOOL>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#6)
    |         |       | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$expr_subquery.$col1#9]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$array.element#7, $array_offset.off#8, $expr_subquery.$col1#9]
    |         |           |   +-expr_list=
    |         |           |   | +-$col1#9 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |         |           |   |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |           |   |     | +-ColumnRef(type=INT64, column=$array.element#7)
    |         |           |   |     | +-ColumnRef(type=INT64, column=$array_offset.off#8)
    |         |           |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$array.element#7, $array_offset.off#8]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#6, is_correlated=TRUE)
    |         |           |       +-element_column=$array.element#7
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$array_offset.off#8)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#8)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.array_to_transform#6]
    |             +-expr_list=
    |             | +-array_to_transform#6 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
==

# Column reference in array input expression.
SELECT ARRAY_TRANSFORM([1,Key], e-> e>0) FROM KeyValue;
--

QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->BOOL> transformation) -> ARRAY<BOOL>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) INT64) -> ARRAY<INT64>)
    |     |     +-Literal(type=INT64, value=1)
    |     |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.e#3]
    |           +-body=
    |             +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |               +-ColumnRef(type=INT64, column=$lambda_arg.e#3)
    |               +-Literal(type=INT64, value=0)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<BOOL>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#9]
    |         +-expr_list=
    |         | +-$col1#9 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<BOOL>, ARRAY<BOOL>) -> ARRAY<BOOL>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#5)
    |         |     +-Literal(type=ARRAY<BOOL>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<BOOL>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#5)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$expr_subquery.$col1#8]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$array.element#6, $array_offset.off#7, $expr_subquery.$col1#8]
    |         |           |   +-expr_list=
    |         |           |   | +-$col1#8 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |         |           |   |     +-ColumnRef(type=INT64, column=$array.element#6)
    |         |           |   |     +-Literal(type=INT64, value=0)
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$array.element#6, $array_offset.off#7]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#5, is_correlated=TRUE)
    |         |           |       +-element_column=$array.element#6
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$array_offset.off#7)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#7)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.array_to_transform#5]
    |             +-expr_list=
    |             | +-array_to_transform#5 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) INT64) -> ARRAY<INT64>)
    |             |     +-Literal(type=INT64, value=1)
    |             |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
==

# Lambda argument "Key" shadowing KeyValue.Key.
SELECT ARRAY_TRANSFORM([1,2, Key], Key-> Key>kv.Key) FROM KeyValue as kv;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->BOOL> transformation) -> ARRAY<BOOL>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |     |     +-Literal(type=INT64, value=1)
    |     |     +-Literal(type=INT64, value=2)
    |     |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.Key#3]
    |           +-parameter_list=
    |           | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |           +-body=
    |             +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |               +-ColumnRef(type=INT64, column=$lambda_arg.Key#3)
    |               +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<BOOL>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#9]
    |         +-expr_list=
    |         | +-$col1#9 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<BOOL>, ARRAY<BOOL>) -> ARRAY<BOOL>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#5)
    |         |     +-Literal(type=ARRAY<BOOL>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<BOOL>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#5)
    |         |       | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$expr_subquery.$col1#8]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$array.element#6, $array_offset.off#7, $expr_subquery.$col1#8]
    |         |           |   +-expr_list=
    |         |           |   | +-$col1#8 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |         |           |   |     +-ColumnRef(type=INT64, column=$array.element#6)
    |         |           |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$array.element#6, $array_offset.off#7]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#5, is_correlated=TRUE)
    |         |           |       +-element_column=$array.element#6
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$array_offset.off#7)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#7)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.array_to_transform#5]
    |             +-expr_list=
    |             | +-array_to_transform#5 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |             |     +-Literal(type=INT64, value=1)
    |             |     +-Literal(type=INT64, value=2)
    |             |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
==

# Array input has ARRAY_TRANSFORM and column ref.
SELECT ARRAY_TRANSFORM(ARRAY_TRANSFORM([1,2,Key], e->e+1), e->e>1) FROM KeyValue as kv;
--

QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->BOOL> transformation) -> ARRAY<BOOL>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->INT64> transformation) -> ARRAY<INT64>)
    |     |     +-FunctionArgument
    |     |     | +-expr=
    |     |     |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |     |     |     +-Literal(type=INT64, value=1)
    |     |     |     +-Literal(type=INT64, value=2)
    |     |     |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     |     +-FunctionArgument
    |     |       +-inline_lambda=
    |     |         +-InlineLambda
    |     |           +-argument_list=[$lambda_arg.e#3]
    |     |           +-body=
    |     |             +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     |               +-ColumnRef(type=INT64, column=$lambda_arg.e#3)
    |     |               +-Literal(type=INT64, value=1)
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.e#4]
    |           +-body=
    |             +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |               +-ColumnRef(type=INT64, column=$lambda_arg.e#4)
    |               +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<BOOL>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#15]
    |         +-expr_list=
    |         | +-$col1#15 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<BOOL>, ARRAY<BOOL>) -> ARRAY<BOOL>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#11)
    |         |     +-Literal(type=ARRAY<BOOL>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<BOOL>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#11)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$expr_subquery.$col1#14]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$array.element#12, $array_offset.off#13, $expr_subquery.$col1#14]
    |         |           |   +-expr_list=
    |         |           |   | +-$col1#14 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |         |           |   |     +-ColumnRef(type=INT64, column=$array.element#12)
    |         |           |   |     +-Literal(type=INT64, value=1)
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$array.element#12, $array_offset.off#13]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#11, is_correlated=TRUE)
    |         |           |       +-element_column=$array.element#12
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$array_offset.off#13)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#13)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.array_to_transform#11]
    |             +-expr_list=
    |             | +-array_to_transform#11 :=
    |             |   +-SubqueryExpr
    |             |     +-type=ARRAY<INT64>
    |             |     +-subquery_type=SCALAR
    |             |     +-parameter_list=
    |             |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |             |     +-subquery=
    |             |       +-ProjectScan
    |             |         +-column_list=[$expr_subquery.$col1#10]
    |             |         +-expr_list=
    |             |         | +-$col1#10 :=
    |             |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |             |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |             |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#6)
    |             |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |             |         |     +-SubqueryExpr
    |             |         |       +-type=ARRAY<INT64>
    |             |         |       +-subquery_type=ARRAY
    |             |         |       +-parameter_list=
    |             |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#6)
    |             |         |       +-subquery=
    |             |         |         +-OrderByScan
    |             |         |           +-column_list=[$expr_subquery.$col1#9]
    |             |         |           +-is_ordered=TRUE
    |             |         |           +-input_scan=
    |             |         |           | +-ProjectScan
    |             |         |           |   +-column_list=[$array.element#7, $array_offset.off#8, $expr_subquery.$col1#9]
    |             |         |           |   +-expr_list=
    |             |         |           |   | +-$col1#9 :=
    |             |         |           |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |             |         |           |   |     +-ColumnRef(type=INT64, column=$array.element#7)
    |             |         |           |   |     +-Literal(type=INT64, value=1)
    |             |         |           |   +-input_scan=
    |             |         |           |     +-ArrayScan
    |             |         |           |       +-column_list=[$array.element#7, $array_offset.off#8]
    |             |         |           |       +-array_expr=
    |             |         |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#6, is_correlated=TRUE)
    |             |         |           |       +-element_column=$array.element#7
    |             |         |           |       +-array_offset_column=
    |             |         |           |         +-ColumnHolder(column=$array_offset.off#8)
    |             |         |           +-order_by_item_list=
    |             |         |             +-OrderByItem
    |             |         |               +-column_ref=
    |             |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#8)
    |             |         +-input_scan=
    |             |           +-ProjectScan
    |             |             +-column_list=[$subquery1.array_to_transform#6]
    |             |             +-expr_list=
    |             |             | +-array_to_transform#6 :=
    |             |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |             |             |     +-Literal(type=INT64, value=1)
    |             |             |     +-Literal(type=INT64, value=2)
    |             |             |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |             |             +-input_scan=
    |             |               +-SingleRowScan
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
==

# Array input has ARRAY_TRANSFORM and correlated column ref.
SELECT (SELECT(ARRAY_TRANSFORM(ARRAY_TRANSFORM([1,2,Key], e->e+10), e->e>1))) FROM KeyValue as kv;
--

QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<BOOL>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#5]
    |         +-expr_list=
    |         | +-$col1#5 :=
    |         |   +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->BOOL> transformation) -> ARRAY<BOOL>)
    |         |     +-FunctionArgument
    |         |     | +-expr=
    |         |     |   +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->INT64> transformation) -> ARRAY<INT64>)
    |         |     |     +-FunctionArgument
    |         |     |     | +-expr=
    |         |     |     |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |         |     |     |     +-Literal(type=INT64, value=1)
    |         |     |     |     +-Literal(type=INT64, value=2)
    |         |     |     |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |     |     +-FunctionArgument
    |         |     |       +-inline_lambda=
    |         |     |         +-InlineLambda
    |         |     |           +-argument_list=[$lambda_arg.e#3]
    |         |     |           +-body=
    |         |     |             +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |     |               +-ColumnRef(type=INT64, column=$lambda_arg.e#3)
    |         |     |               +-Literal(type=INT64, value=10)
    |         |     +-FunctionArgument
    |         |       +-inline_lambda=
    |         |         +-InlineLambda
    |         |           +-argument_list=[$lambda_arg.e#4]
    |         |           +-body=
    |         |             +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |         |               +-ColumnRef(type=INT64, column=$lambda_arg.e#4)
    |         |               +-Literal(type=INT64, value=1)
    |         +-input_scan=
    |           +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<BOOL>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#5]
    |         +-expr_list=
    |         | +-$col1#5 :=
    |         |   +-SubqueryExpr
    |         |     +-type=ARRAY<BOOL>
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#16]
    |         |         +-expr_list=
    |         |         | +-$col1#16 :=
    |         |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<BOOL>, ARRAY<BOOL>) -> ARRAY<BOOL>)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#12)
    |         |         |     +-Literal(type=ARRAY<BOOL>, value=NULL)
    |         |         |     +-SubqueryExpr
    |         |         |       +-type=ARRAY<BOOL>
    |         |         |       +-subquery_type=ARRAY
    |         |         |       +-parameter_list=
    |         |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#12)
    |         |         |       +-subquery=
    |         |         |         +-OrderByScan
    |         |         |           +-column_list=[$expr_subquery.$col1#15]
    |         |         |           +-is_ordered=TRUE
    |         |         |           +-input_scan=
    |         |         |           | +-ProjectScan
    |         |         |           |   +-column_list=[$array.element#13, $array_offset.off#14, $expr_subquery.$col1#15]
    |         |         |           |   +-expr_list=
    |         |         |           |   | +-$col1#15 :=
    |         |         |           |   |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |         |         |           |   |     +-ColumnRef(type=INT64, column=$array.element#13)
    |         |         |           |   |     +-Literal(type=INT64, value=1)
    |         |         |           |   +-input_scan=
    |         |         |           |     +-ArrayScan
    |         |         |           |       +-column_list=[$array.element#13, $array_offset.off#14]
    |         |         |           |       +-array_expr=
    |         |         |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#12, is_correlated=TRUE)
    |         |         |           |       +-element_column=$array.element#13
    |         |         |           |       +-array_offset_column=
    |         |         |           |         +-ColumnHolder(column=$array_offset.off#14)
    |         |         |           +-order_by_item_list=
    |         |         |             +-OrderByItem
    |         |         |               +-column_ref=
    |         |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#14)
    |         |         +-input_scan=
    |         |           +-ProjectScan
    |         |             +-column_list=[$subquery1.array_to_transform#12]
    |         |             +-expr_list=
    |         |             | +-array_to_transform#12 :=
    |         |             |   +-SubqueryExpr
    |         |             |     +-type=ARRAY<INT64>
    |         |             |     +-subquery_type=SCALAR
    |         |             |     +-parameter_list=
    |         |             |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |             |     +-subquery=
    |         |             |       +-ProjectScan
    |         |             |         +-column_list=[$expr_subquery.$col1#11]
    |         |             |         +-expr_list=
    |         |             |         | +-$col1#11 :=
    |         |             |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |             |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |             |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#7)
    |         |             |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |             |         |     +-SubqueryExpr
    |         |             |         |       +-type=ARRAY<INT64>
    |         |             |         |       +-subquery_type=ARRAY
    |         |             |         |       +-parameter_list=
    |         |             |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#7)
    |         |             |         |       +-subquery=
    |         |             |         |         +-OrderByScan
    |         |             |         |           +-column_list=[$expr_subquery.$col1#10]
    |         |             |         |           +-is_ordered=TRUE
    |         |             |         |           +-input_scan=
    |         |             |         |           | +-ProjectScan
    |         |             |         |           |   +-column_list=[$array.element#8, $array_offset.off#9, $expr_subquery.$col1#10]
    |         |             |         |           |   +-expr_list=
    |         |             |         |           |   | +-$col1#10 :=
    |         |             |         |           |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |             |         |           |   |     +-ColumnRef(type=INT64, column=$array.element#8)
    |         |             |         |           |   |     +-Literal(type=INT64, value=10)
    |         |             |         |           |   +-input_scan=
    |         |             |         |           |     +-ArrayScan
    |         |             |         |           |       +-column_list=[$array.element#8, $array_offset.off#9]
    |         |             |         |           |       +-array_expr=
    |         |             |         |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#7, is_correlated=TRUE)
    |         |             |         |           |       +-element_column=$array.element#8
    |         |             |         |           |       +-array_offset_column=
    |         |             |         |           |         +-ColumnHolder(column=$array_offset.off#9)
    |         |             |         |           +-order_by_item_list=
    |         |             |         |             +-OrderByItem
    |         |             |         |               +-column_ref=
    |         |             |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#9)
    |         |             |         +-input_scan=
    |         |             |           +-ProjectScan
    |         |             |             +-column_list=[$subquery1.array_to_transform#7]
    |         |             |             +-expr_list=
    |         |             |             | +-array_to_transform#7 :=
    |         |             |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |         |             |             |     +-Literal(type=INT64, value=1)
    |         |             |             |     +-Literal(type=INT64, value=2)
    |         |             |             |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |             |             +-input_scan=
    |         |             |               +-SingleRowScan
    |         |             +-input_scan=
    |         |               +-SingleRowScan
    |         +-input_scan=
    |           +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
==

# Lambda body has ARRAY_TRANSFORM and column ref.
SELECT ARRAY_TRANSFORM([1,2,3], e-> e + ARRAY_LENGTH(ARRAY_TRANSFORM([1,2,Key], e->e<0))) FROM KeyValue as kv;
--

QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->INT64> transformation) -> ARRAY<INT64>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.e#3]
    |           +-parameter_list=
    |           | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |           +-body=
    |             +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |               +-ColumnRef(type=INT64, column=$lambda_arg.e#3)
    |               +-FunctionCall(ZetaSQL:array_length(ARRAY<BOOL>) -> INT64)
    |                 +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->BOOL> transformation) -> ARRAY<BOOL>)
    |                   +-FunctionArgument
    |                   | +-expr=
    |                   |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |                   |     +-Literal(type=INT64, value=1)
    |                   |     +-Literal(type=INT64, value=2)
    |                   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |                   +-FunctionArgument
    |                     +-inline_lambda=
    |                       +-InlineLambda
    |                         +-argument_list=[$lambda_arg.e#4]
    |                         +-body=
    |                           +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |                             +-ColumnRef(type=INT64, column=$lambda_arg.e#4)
    |                             +-Literal(type=INT64, value=0)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#15]
    |         +-expr_list=
    |         | +-$col1#15 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#11)
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<INT64>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#11)
    |         |       | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$expr_subquery.$col1#14]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$array.element#12, $array_offset.off#13, $expr_subquery.$col1#14]
    |         |           |   +-expr_list=
    |         |           |   | +-$col1#14 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |           |   |     +-ColumnRef(type=INT64, column=$array.element#12)
    |         |           |   |     +-FunctionCall(ZetaSQL:array_length(ARRAY<BOOL>) -> INT64)
    |         |           |   |       +-SubqueryExpr
    |         |           |   |         +-type=ARRAY<BOOL>
    |         |           |   |         +-subquery_type=SCALAR
    |         |           |   |         +-parameter_list=
    |         |           |   |         | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |           |   |         +-subquery=
    |         |           |   |           +-ProjectScan
    |         |           |   |             +-column_list=[$expr_subquery.$col1#16]
    |         |           |   |             +-expr_list=
    |         |           |   |             | +-$col1#16 :=
    |         |           |   |             |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<BOOL>, ARRAY<BOOL>) -> ARRAY<BOOL>)
    |         |           |   |             |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |           |   |             |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#17)
    |         |           |   |             |     +-Literal(type=ARRAY<BOOL>, value=NULL)
    |         |           |   |             |     +-SubqueryExpr
    |         |           |   |             |       +-type=ARRAY<BOOL>
    |         |           |   |             |       +-subquery_type=ARRAY
    |         |           |   |             |       +-parameter_list=
    |         |           |   |             |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#17)
    |         |           |   |             |       +-subquery=
    |         |           |   |             |         +-OrderByScan
    |         |           |   |             |           +-column_list=[$expr_subquery.$col1#18]
    |         |           |   |             |           +-is_ordered=TRUE
    |         |           |   |             |           +-input_scan=
    |         |           |   |             |           | +-ProjectScan
    |         |           |   |             |           |   +-column_list=[$array.element#19, $array_offset.off#20, $expr_subquery.$col1#18]
    |         |           |   |             |           |   +-expr_list=
    |         |           |   |             |           |   | +-$col1#18 :=
    |         |           |   |             |           |   |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |         |           |   |             |           |   |     +-ColumnRef(type=INT64, column=$array.element#19)
    |         |           |   |             |           |   |     +-Literal(type=INT64, value=0)
    |         |           |   |             |           |   +-input_scan=
    |         |           |   |             |           |     +-ArrayScan
    |         |           |   |             |           |       +-column_list=[$array.element#19, $array_offset.off#20]
    |         |           |   |             |           |       +-array_expr=
    |         |           |   |             |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#17, is_correlated=TRUE)
    |         |           |   |             |           |       +-element_column=$array.element#19
    |         |           |   |             |           |       +-array_offset_column=
    |         |           |   |             |           |         +-ColumnHolder(column=$array_offset.off#20)
    |         |           |   |             |           +-order_by_item_list=
    |         |           |   |             |             +-OrderByItem
    |         |           |   |             |               +-column_ref=
    |         |           |   |             |                 +-ColumnRef(type=INT64, column=$array_offset.off#20)
    |         |           |   |             +-input_scan=
    |         |           |   |               +-ProjectScan
    |         |           |   |                 +-column_list=[$subquery1.array_to_transform#17]
    |         |           |   |                 +-expr_list=
    |         |           |   |                 | +-array_to_transform#17 :=
    |         |           |   |                 |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |         |           |   |                 |     +-Literal(type=INT64, value=1)
    |         |           |   |                 |     +-Literal(type=INT64, value=2)
    |         |           |   |                 |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |           |   |                 +-input_scan=
    |         |           |   |                   +-SingleRowScan
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$array.element#12, $array_offset.off#13]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#11, is_correlated=TRUE)
    |         |           |       +-element_column=$array.element#12
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$array_offset.off#13)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#13)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.array_to_transform#11]
    |             +-expr_list=
    |             | +-array_to_transform#11 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
==

# Lambda body has ARRAY_TRANSFORM and correlated column ref.
SELECT (SELECT ARRAY_TRANSFORM([1,2,3], e-> e > ARRAY_LENGTH(ARRAY_TRANSFORM([1,2,Key], e->e<0)))) FROM KeyValue as kv;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<BOOL>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#5]
    |         +-expr_list=
    |         | +-$col1#5 :=
    |         |   +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->BOOL> transformation) -> ARRAY<BOOL>)
    |         |     +-FunctionArgument
    |         |     | +-expr=
    |         |     |   +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |         |     +-FunctionArgument
    |         |       +-inline_lambda=
    |         |         +-InlineLambda
    |         |           +-argument_list=[$lambda_arg.e#3]
    |         |           +-parameter_list=
    |         |           | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |           +-body=
    |         |             +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |         |               +-ColumnRef(type=INT64, column=$lambda_arg.e#3)
    |         |               +-FunctionCall(ZetaSQL:array_length(ARRAY<BOOL>) -> INT64)
    |         |                 +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->BOOL> transformation) -> ARRAY<BOOL>)
    |         |                   +-FunctionArgument
    |         |                   | +-expr=
    |         |                   |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |         |                   |     +-Literal(type=INT64, value=1)
    |         |                   |     +-Literal(type=INT64, value=2)
    |         |                   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |                   +-FunctionArgument
    |         |                     +-inline_lambda=
    |         |                       +-InlineLambda
    |         |                         +-argument_list=[$lambda_arg.e#4]
    |         |                         +-body=
    |         |                           +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |         |                             +-ColumnRef(type=INT64, column=$lambda_arg.e#4)
    |         |                             +-Literal(type=INT64, value=0)
    |         +-input_scan=
    |           +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<BOOL>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#5]
    |         +-expr_list=
    |         | +-$col1#5 :=
    |         |   +-SubqueryExpr
    |         |     +-type=ARRAY<BOOL>
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#16]
    |         |         +-expr_list=
    |         |         | +-$col1#16 :=
    |         |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<BOOL>, ARRAY<BOOL>) -> ARRAY<BOOL>)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#12)
    |         |         |     +-Literal(type=ARRAY<BOOL>, value=NULL)
    |         |         |     +-SubqueryExpr
    |         |         |       +-type=ARRAY<BOOL>
    |         |         |       +-subquery_type=ARRAY
    |         |         |       +-parameter_list=
    |         |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#12)
    |         |         |       | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |         |       +-subquery=
    |         |         |         +-OrderByScan
    |         |         |           +-column_list=[$expr_subquery.$col1#15]
    |         |         |           +-is_ordered=TRUE
    |         |         |           +-input_scan=
    |         |         |           | +-ProjectScan
    |         |         |           |   +-column_list=[$array.element#13, $array_offset.off#14, $expr_subquery.$col1#15]
    |         |         |           |   +-expr_list=
    |         |         |           |   | +-$col1#15 :=
    |         |         |           |   |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |         |         |           |   |     +-ColumnRef(type=INT64, column=$array.element#13)
    |         |         |           |   |     +-FunctionCall(ZetaSQL:array_length(ARRAY<BOOL>) -> INT64)
    |         |         |           |   |       +-SubqueryExpr
    |         |         |           |   |         +-type=ARRAY<BOOL>
    |         |         |           |   |         +-subquery_type=SCALAR
    |         |         |           |   |         +-parameter_list=
    |         |         |           |   |         | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |         |           |   |         +-subquery=
    |         |         |           |   |           +-ProjectScan
    |         |         |           |   |             +-column_list=[$expr_subquery.$col1#17]
    |         |         |           |   |             +-expr_list=
    |         |         |           |   |             | +-$col1#17 :=
    |         |         |           |   |             |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<BOOL>, ARRAY<BOOL>) -> ARRAY<BOOL>)
    |         |         |           |   |             |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |         |           |   |             |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#18)
    |         |         |           |   |             |     +-Literal(type=ARRAY<BOOL>, value=NULL)
    |         |         |           |   |             |     +-SubqueryExpr
    |         |         |           |   |             |       +-type=ARRAY<BOOL>
    |         |         |           |   |             |       +-subquery_type=ARRAY
    |         |         |           |   |             |       +-parameter_list=
    |         |         |           |   |             |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#18)
    |         |         |           |   |             |       +-subquery=
    |         |         |           |   |             |         +-OrderByScan
    |         |         |           |   |             |           +-column_list=[$expr_subquery.$col1#19]
    |         |         |           |   |             |           +-is_ordered=TRUE
    |         |         |           |   |             |           +-input_scan=
    |         |         |           |   |             |           | +-ProjectScan
    |         |         |           |   |             |           |   +-column_list=[$array.element#20, $array_offset.off#21, $expr_subquery.$col1#19]
    |         |         |           |   |             |           |   +-expr_list=
    |         |         |           |   |             |           |   | +-$col1#19 :=
    |         |         |           |   |             |           |   |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |         |         |           |   |             |           |   |     +-ColumnRef(type=INT64, column=$array.element#20)
    |         |         |           |   |             |           |   |     +-Literal(type=INT64, value=0)
    |         |         |           |   |             |           |   +-input_scan=
    |         |         |           |   |             |           |     +-ArrayScan
    |         |         |           |   |             |           |       +-column_list=[$array.element#20, $array_offset.off#21]
    |         |         |           |   |             |           |       +-array_expr=
    |         |         |           |   |             |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#18, is_correlated=TRUE)
    |         |         |           |   |             |           |       +-element_column=$array.element#20
    |         |         |           |   |             |           |       +-array_offset_column=
    |         |         |           |   |             |           |         +-ColumnHolder(column=$array_offset.off#21)
    |         |         |           |   |             |           +-order_by_item_list=
    |         |         |           |   |             |             +-OrderByItem
    |         |         |           |   |             |               +-column_ref=
    |         |         |           |   |             |                 +-ColumnRef(type=INT64, column=$array_offset.off#21)
    |         |         |           |   |             +-input_scan=
    |         |         |           |   |               +-ProjectScan
    |         |         |           |   |                 +-column_list=[$subquery1.array_to_transform#18]
    |         |         |           |   |                 +-expr_list=
    |         |         |           |   |                 | +-array_to_transform#18 :=
    |         |         |           |   |                 |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |         |         |           |   |                 |     +-Literal(type=INT64, value=1)
    |         |         |           |   |                 |     +-Literal(type=INT64, value=2)
    |         |         |           |   |                 |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |         |           |   |                 +-input_scan=
    |         |         |           |   |                   +-SingleRowScan
    |         |         |           |   +-input_scan=
    |         |         |           |     +-ArrayScan
    |         |         |           |       +-column_list=[$array.element#13, $array_offset.off#14]
    |         |         |           |       +-array_expr=
    |         |         |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#12, is_correlated=TRUE)
    |         |         |           |       +-element_column=$array.element#13
    |         |         |           |       +-array_offset_column=
    |         |         |           |         +-ColumnHolder(column=$array_offset.off#14)
    |         |         |           +-order_by_item_list=
    |         |         |             +-OrderByItem
    |         |         |               +-column_ref=
    |         |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#14)
    |         |         +-input_scan=
    |         |           +-ProjectScan
    |         |             +-column_list=[$subquery1.array_to_transform#12]
    |         |             +-expr_list=
    |         |             | +-array_to_transform#12 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |         |             +-input_scan=
    |         |               +-SingleRowScan
    |         +-input_scan=
    |           +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
==

# Lambda arg has with same name as a potential correlated column.
# The lambda arg shadows the correlated column.
SELECT (SELECT(ARRAY_TRANSFORM([1,2,Key], Key->Key+1))) FROM KeyValue as kv;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#4]
    |         +-expr_list=
    |         | +-$col1#4 :=
    |         |   +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->INT64> transformation) -> ARRAY<INT64>)
    |         |     +-FunctionArgument
    |         |     | +-expr=
    |         |     |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |         |     |     +-Literal(type=INT64, value=1)
    |         |     |     +-Literal(type=INT64, value=2)
    |         |     |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |     +-FunctionArgument
    |         |       +-inline_lambda=
    |         |         +-InlineLambda
    |         |           +-argument_list=[$lambda_arg.Key#3]
    |         |           +-body=
    |         |             +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |               +-ColumnRef(type=INT64, column=$lambda_arg.Key#3)
    |         |               +-Literal(type=INT64, value=1)
    |         +-input_scan=
    |           +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#4]
    |         +-expr_list=
    |         | +-$col1#4 :=
    |         |   +-SubqueryExpr
    |         |     +-type=ARRAY<INT64>
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#10]
    |         |         +-expr_list=
    |         |         | +-$col1#10 :=
    |         |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#6)
    |         |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |         |     +-SubqueryExpr
    |         |         |       +-type=ARRAY<INT64>
    |         |         |       +-subquery_type=ARRAY
    |         |         |       +-parameter_list=
    |         |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#6)
    |         |         |       +-subquery=
    |         |         |         +-OrderByScan
    |         |         |           +-column_list=[$expr_subquery.$col1#9]
    |         |         |           +-is_ordered=TRUE
    |         |         |           +-input_scan=
    |         |         |           | +-ProjectScan
    |         |         |           |   +-column_list=[$array.element#7, $array_offset.off#8, $expr_subquery.$col1#9]
    |         |         |           |   +-expr_list=
    |         |         |           |   | +-$col1#9 :=
    |         |         |           |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |         |           |   |     +-ColumnRef(type=INT64, column=$array.element#7)
    |         |         |           |   |     +-Literal(type=INT64, value=1)
    |         |         |           |   +-input_scan=
    |         |         |           |     +-ArrayScan
    |         |         |           |       +-column_list=[$array.element#7, $array_offset.off#8]
    |         |         |           |       +-array_expr=
    |         |         |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#6, is_correlated=TRUE)
    |         |         |           |       +-element_column=$array.element#7
    |         |         |           |       +-array_offset_column=
    |         |         |           |         +-ColumnHolder(column=$array_offset.off#8)
    |         |         |           +-order_by_item_list=
    |         |         |             +-OrderByItem
    |         |         |               +-column_ref=
    |         |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#8)
    |         |         +-input_scan=
    |         |           +-ProjectScan
    |         |             +-column_list=[$subquery1.array_to_transform#6]
    |         |             +-expr_list=
    |         |             | +-array_to_transform#6 :=
    |         |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |         |             |     +-Literal(type=INT64, value=1)
    |         |             |     +-Literal(type=INT64, value=2)
    |         |             |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |             +-input_scan=
    |         |               +-SingleRowScan
    |         +-input_scan=
    |           +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
==

# Lambda arg has with same name as a potential correlated column. Lambda body
# has a mix of lambda arg and correlated column.
SELECT (SELECT(ARRAY_TRANSFORM([1,2,Key], Key->kv.Key>Key))) FROM KeyValue as kv;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<BOOL>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#4]
    |         +-expr_list=
    |         | +-$col1#4 :=
    |         |   +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->BOOL> transformation) -> ARRAY<BOOL>)
    |         |     +-FunctionArgument
    |         |     | +-expr=
    |         |     |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |         |     |     +-Literal(type=INT64, value=1)
    |         |     |     +-Literal(type=INT64, value=2)
    |         |     |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |     +-FunctionArgument
    |         |       +-inline_lambda=
    |         |         +-InlineLambda
    |         |           +-argument_list=[$lambda_arg.Key#3]
    |         |           +-parameter_list=
    |         |           | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |           +-body=
    |         |             +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |         |               +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |               +-ColumnRef(type=INT64, column=$lambda_arg.Key#3)
    |         +-input_scan=
    |           +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS "$col1" [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<BOOL>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#4]
    |         +-expr_list=
    |         | +-$col1#4 :=
    |         |   +-SubqueryExpr
    |         |     +-type=ARRAY<BOOL>
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#10]
    |         |         +-expr_list=
    |         |         | +-$col1#10 :=
    |         |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<BOOL>, ARRAY<BOOL>) -> ARRAY<BOOL>)
    |         |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#6)
    |         |         |     +-Literal(type=ARRAY<BOOL>, value=NULL)
    |         |         |     +-SubqueryExpr
    |         |         |       +-type=ARRAY<BOOL>
    |         |         |       +-subquery_type=ARRAY
    |         |         |       +-parameter_list=
    |         |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#6)
    |         |         |       | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |         |       +-subquery=
    |         |         |         +-OrderByScan
    |         |         |           +-column_list=[$expr_subquery.$col1#9]
    |         |         |           +-is_ordered=TRUE
    |         |         |           +-input_scan=
    |         |         |           | +-ProjectScan
    |         |         |           |   +-column_list=[$array.element#7, $array_offset.off#8, $expr_subquery.$col1#9]
    |         |         |           |   +-expr_list=
    |         |         |           |   | +-$col1#9 :=
    |         |         |           |   |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |         |         |           |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |         |           |   |     +-ColumnRef(type=INT64, column=$array.element#7)
    |         |         |           |   +-input_scan=
    |         |         |           |     +-ArrayScan
    |         |         |           |       +-column_list=[$array.element#7, $array_offset.off#8]
    |         |         |           |       +-array_expr=
    |         |         |           |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_transform#6, is_correlated=TRUE)
    |         |         |           |       +-element_column=$array.element#7
    |         |         |           |       +-array_offset_column=
    |         |         |           |         +-ColumnHolder(column=$array_offset.off#8)
    |         |         |           +-order_by_item_list=
    |         |         |             +-OrderByItem
    |         |         |               +-column_ref=
    |         |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#8)
    |         |         +-input_scan=
    |         |           +-ProjectScan
    |         |             +-column_list=[$subquery1.array_to_transform#6]
    |         |             +-expr_list=
    |         |             | +-array_to_transform#6 :=
    |         |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(3) INT64) -> ARRAY<INT64>)
    |         |             |     +-Literal(type=INT64, value=1)
    |         |             |     +-Literal(type=INT64, value=2)
    |         |             |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |         |             +-input_scan=
    |         |               +-SingleRowScan
    |         +-input_scan=
    |           +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
==

SELECT SAFE.ARRAY_TRANSFORM([1,2,3], e -> e>0);
\--SELECT SAFE.ARRAY_FILTER([1,2,3], e -> e>0);
--
ERROR: Function calls with SAFE are not supported [at 1:8]
SELECT SAFE.ARRAY_TRANSFORM([1,2,3], e -> e>0);
       ^
