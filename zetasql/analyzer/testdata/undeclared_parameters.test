[default allow_undeclared_parameters]
SELECT @p;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Parameter(parse_location=7-9, type=INT64, name="p", is_untyped=TRUE)
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: INT64
==

SELECT @p < "bar";
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$less(STRING, STRING) -> BOOL)
    |     +-Parameter(parse_location=7-9, type=STRING, name="p")
    |     +-Literal(type=STRING, value="bar")
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: STRING
==

SELECT @p < 1;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |     +-Parameter(parse_location=7-9, type=INT64, name="p", is_untyped=TRUE)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: INT64
==

SELECT @p < 1 AND @p > 2;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
    |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |     | +-Parameter(parse_location=7-9, type=INT64, name="p", is_untyped=TRUE)
    |     | +-Literal(type=INT64, value=1)
    |     +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |       +-Parameter(parse_location=18-20, type=INT64, name="p", is_untyped=TRUE)
    |       +-Literal(type=INT64, value=2)
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: INT64
==

SELECT "foo" IN UNNEST(@p);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in_array(STRING, ARRAY<STRING>) -> BOOL)
    |     +-Literal(type=STRING, value="foo")
    |     +-Parameter(parse_location=23-25, type=ARRAY<STRING>, name="p")
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: ARRAY<STRING>
==

SELECT "foo" IN UNNEST([@p, "bar"]);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in_array(STRING, ARRAY<STRING>) -> BOOL)
    |     +-Literal(type=STRING, value="foo")
    |     +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |       +-Parameter(parse_location=24-26, type=STRING, name="p")
    |       +-Literal(type=STRING, value="bar")
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: STRING
==

SELECT "foo" IN UNNEST([@p, @q]);
--
ERROR: Could not cast literal "foo" to type INT64 [at 1:8]
SELECT "foo" IN UNNEST([@p, @q]);
       ^
==

SELECT "foo" IN UNNEST([CAST(@p AS STRING), @q]);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in_array(STRING, ARRAY<STRING>) -> BOOL)
    |     +-Literal(type=STRING, value="foo")
    |     +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |       +-Parameter(parse_location=29-31, type=STRING, name="p")
    |       +-Parameter(parse_location=44-46, type=STRING, name="q")
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: STRING
q: STRING
==

SELECT "foo" IN UNNEST(ARRAY<STRING>[@p, @q]);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in_array(STRING, ARRAY<STRING>) -> BOOL)
    |     +-Literal(type=STRING, value="foo")
    |     +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |       +-Parameter(parse_location=37-39, type=STRING, name="p")
    |       +-Parameter(parse_location=41-43, type=STRING, name="q")
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: STRING
q: STRING
==

SELECT ARRAY<STRING>[@p, @q];
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRING) -> ARRAY<STRING>)
    |     +-Parameter(parse_location=21-23, type=STRING, name="p")
    |     +-Parameter(parse_location=25-27, type=STRING, name="q")
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: STRING
q: STRING
==

SELECT @p IN UNNEST(["a"]);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in_array(STRING, ARRAY<STRING>) -> BOOL)
    |     +-Parameter(parse_location=7-9, type=STRING, name="p")
    |     +-Literal(type=ARRAY<STRING>, value=["a"])
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: STRING
==

SELECT b'bytes' IN (@p, @q);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in(BYTES, repeated(2) BYTES) -> BOOL)
    |     +-Literal(type=BYTES, value=b"bytes")
    |     +-Parameter(parse_location=20-22, type=BYTES, name="p")
    |     +-Parameter(parse_location=24-26, type=BYTES, name="q")
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: BYTES
q: BYTES
==

SELECT @p IN (3.0, 5);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in(DOUBLE, repeated(2) DOUBLE) -> BOOL)
    |     +-Parameter(parse_location=7-9, type=DOUBLE, name="p")
    |     +-Literal(type=DOUBLE, value=3)
    |     +-Literal(type=DOUBLE, value=5)
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: DOUBLE
==

SELECT @p IN (NULL);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in(INT64, repeated(1) INT64) -> BOOL)
    |     +-Parameter(parse_location=7-9, type=INT64, name="p", is_untyped=TRUE)
    |     +-Literal(type=INT64, value=NULL)
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: INT64
==

SELECT NULL IN (@p);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in(INT64, repeated(1) INT64) -> BOOL)
    |     +-Literal(type=INT64, value=NULL)
    |     +-Parameter(parse_location=16-18, type=INT64, name="p", is_untyped=TRUE)
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: INT64
==

SELECT "a" IN (SELECT @p);
--
ERROR: Cannot execute IN subquery with uncomparable types STRING and INT64 [at 1:8]
SELECT "a" IN (SELECT @p);
       ^
==

SELECT @p IN (SELECT "a");
--
ERROR: Cannot execute IN subquery with uncomparable types INT64 and STRING [at 1:8]
SELECT @p IN (SELECT "a");
       ^
==

SELECT (@p, @q) IN (SELECT ("a", 5.0));
--
ERROR: Cannot execute IN subquery with uncomparable types STRUCT<INT64, INT64> and STRUCT<STRING, DOUBLE> [at 1:8]
SELECT (@p, @q) IN (SELECT ("a", 5.0));
       ^
==

SELECT (CAST(@p AS STRING), CAST(@q AS DOUBLE)) IN (SELECT ("a", 5.0));
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=IN
    |     +-in_expr=
    |     | +-MakeStruct
    |     |   +-type=STRUCT<STRING, DOUBLE>
    |     |   +-field_list=
    |     |     +-Parameter(parse_location=13-15, type=STRING, name="p")
    |     |     +-Parameter(parse_location=33-35, type=DOUBLE, name="q")
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#1]
    |         +-expr_list=
    |         | +-$col1#1 := Literal(type=STRUCT<STRING, DOUBLE>, value={"a", 5})
    |         +-input_scan=
    |           +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: STRING
q: DOUBLE
==

SELECT @p IN ( (select "a") UNION ALL (select @q) );
--
ERROR: Cannot execute IN subquery with uncomparable types INT64 and STRING [at 1:8]
SELECT @p IN ( (select "a") UNION ALL (select @q) );
       ^
==

SELECT CAST(@p AS STRING) IN ( (select "a") UNION ALL (select @q) );
--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=IN
    |     +-in_expr=
    |     | +-Parameter(parse_location=12-14, type=STRING, name="p")
    |     +-subquery=
    |       +-SetOperationScan
    |         +-column_list=[$union_all.$col1#3]
    |         +-op_type=UNION_ALL
    |         +-input_item_list=
    |           +-SetOperationItem
    |           | +-scan=
    |           | | +-ProjectScan
    |           | |   +-column_list=[$union_all1.$col1#1]
    |           | |   +-expr_list=
    |           | |   | +-$col1#1 := Literal(type=STRING, value="a")
    |           | |   +-input_scan=
    |           | |     +-SingleRowScan
    |           | +-output_column_list=[$union_all1.$col1#1]
    |           +-SetOperationItem
    |             +-scan=
    |             | +-ProjectScan
    |             |   +-column_list=[$union_all2_cast.$col1#4]
    |             |   +-expr_list=
    |             |   | +-$col1#4 :=
    |             |   |   +-Cast(INT64 -> STRING)
    |             |   |     +-ColumnRef(type=INT64, column=$union_all2.$col1#2)
    |             |   +-input_scan=
    |             |     +-ProjectScan
    |             |       +-column_list=[$union_all2.$col1#2]
    |             |       +-expr_list=
    |             |       | +-$col1#2 := Parameter(parse_location=62-64, type=INT64, name="q", is_untyped=TRUE)
    |             |       +-input_scan=
    |             |         +-SingleRowScan
    |             +-output_column_list=[$union_all2_cast.$col1#4]
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: STRING
q: INT64
==

SELECT @p IN ( (select "a") UNION ALL (select CAST(@q AS STRING)) );
--
ERROR: Cannot execute IN subquery with uncomparable types INT64 and STRING [at 1:8]
SELECT @p IN ( (select "a") UNION ALL (select CAST(@q AS STRING)) );
       ^
==

SELECT @p IS TRUE;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$is_true(BOOL) -> BOOL)
    |     +-Parameter(parse_location=7-9, type=BOOL, name="p")
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: BOOL
==

SELECT @p IN UNNEST(@q);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in_array(INT64, ARRAY<INT64>) -> BOOL)
    |     +-Parameter(parse_location=7-9, type=INT64, name="p", is_untyped=TRUE)
    |     +-Parameter(parse_location=20-22, type=ARRAY<INT64>, name="q")
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: INT64
q: ARRAY<INT64>
==

SELECT CAST(@p AS DOUBLE) = 1;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$equal(DOUBLE, DOUBLE) -> BOOL)
    |     +-Parameter(parse_location=12-14, type=DOUBLE, name="p")
    |     +-Literal(type=DOUBLE, value=1)
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: DOUBLE
==

SELECT CAST(@p AS DOUBLE) = @q;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$equal(DOUBLE, DOUBLE) -> BOOL)
    |     +-Parameter(parse_location=12-14, type=DOUBLE, name="p")
    |     +-Parameter(parse_location=28-30, type=DOUBLE, name="q")
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: DOUBLE
q: DOUBLE
==

SELECT CAST(CAST(@p AS DOUBLE) AS INT64) = 1;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |     +-Cast(DOUBLE -> INT64)
    |     | +-Parameter(parse_location=17-19, type=DOUBLE, name="p")
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: DOUBLE
==

SELECT IF(true, NULL, @p_int64),
       COALESCE(@p_double, NULL, 1.0);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    | |   +-Literal(type=BOOL, value=true)
    | |   +-Literal(type=INT64, value=NULL)
    | |   +-Parameter(parse_location=22-30, type=INT64, name="p_int64", is_untyped=TRUE)
    | +-$col2#2 :=
    |   +-FunctionCall(ZetaSQL:coalesce(repeated(3) DOUBLE) -> DOUBLE)
    |     +-Parameter(parse_location=49-58, type=DOUBLE, name="p_double")
    |     +-Literal(type=DOUBLE, value=NULL)
    |     +-Literal(type=DOUBLE, value=1)
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p_double: DOUBLE
p_int64: INT64
==

select @int32 in UNNEST(KitchenSink.repeated_int32_val),
       if(true, @int32_array, KitchenSink.repeated_int32_val),
       @enum1 = KitchenSink.test_enum,
       if(true, KitchenSink.test_enum, @enum2),
       if(true, @p_proto, KitchenSink.key_value).key,
       if(true, @struct_array, KitchenSink.key_value_array)
from TestTable;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [BOOL]
| +-$query.$col2#5 AS `$col2` [ARRAY<INT32>]
| +-$query.$col3#6 AS `$col3` [BOOL]
| +-$query.$col4#7 AS `$col4` [ENUM<zetasql_test__.TestEnum>]
| +-$query.key#8 AS key [STRING]
| +-$query.$col6#9 AS `$col6` [ARRAY<PROTO<zetasql_test__.KeyValueStruct>>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#4, $col2#5, $col3#6, $col4#7, key#8, $col6#9]
    +-expr_list=
    | +-$col1#4 :=
    | | +-FunctionCall(ZetaSQL:$in_array(INT32, ARRAY<INT32>) -> BOOL)
    | |   +-Parameter(parse_location=7-13, type=INT32, name="int32")
    | |   +-GetProtoField
    | |     +-type=ARRAY<INT32>
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=repeated_int32_val
    | |     +-default_value=[]
    | +-$col2#5 :=
    | | +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT32>, ARRAY<INT32>) -> ARRAY<INT32>)
    | |   +-Literal(type=BOOL, value=true)
    | |   +-Parameter(parse_location=73-85, type=ARRAY<INT32>, name="int32_array")
    | |   +-GetProtoField
    | |     +-type=ARRAY<INT32>
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=repeated_int32_val
    | |     +-default_value=[]
    | +-$col3#6 :=
    | | +-FunctionCall(ZetaSQL:$equal(ENUM<zetasql_test__.TestEnum>, ENUM<zetasql_test__.TestEnum>) -> BOOL)
    | |   +-Parameter(parse_location=127-133, type=ENUM<zetasql_test__.TestEnum>, name="enum1")
    | |   +-GetProtoField
    | |     +-type=ENUM<zetasql_test__.TestEnum>
    | |     +-expr=
    | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |     +-field_descriptor=test_enum
    | |     +-default_value=TESTENUM0
    | +-$col4#7 :=
    | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<zetasql_test__.TestEnum>, ENUM<zetasql_test__.TestEnum>) -> ENUM<zetasql_test__.TestEnum>)
    | |   +-Literal(type=BOOL, value=true)
    | |   +-GetProtoField
    | |   | +-type=ENUM<zetasql_test__.TestEnum>
    | |   | +-expr=
    | |   | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |   | +-field_descriptor=test_enum
    | |   | +-default_value=TESTENUM0
    | |   +-Parameter(parse_location=198-204, type=ENUM<zetasql_test__.TestEnum>, name="enum2")
    | +-key#8 :=
    | | +-GetProtoField
    | |   +-type=STRING
    | |   +-expr=
    | |   | +-FunctionCall(ZetaSQL:if(BOOL, PROTO<zetasql_test__.KeyValueStruct>, PROTO<zetasql_test__.KeyValueStruct>) -> PROTO<zetasql_test__.KeyValueStruct>)
    | |   |   +-Literal(type=BOOL, value=true)
    | |   |   +-Parameter(parse_location=223-231, type=PROTO<zetasql_test__.KeyValueStruct>, name="p_proto")
    | |   |   +-GetProtoField
    | |   |     +-type=PROTO<zetasql_test__.KeyValueStruct>
    | |   |     +-expr=
    | |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | |   |     +-field_descriptor=key_value
    | |   |     +-default_value=NULL
    | |   +-field_descriptor=key
    | |   +-default_value=NULL
    | +-$col6#9 :=
    |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<PROTO<zetasql_test__.KeyValueStruct>>, ARRAY<PROTO<zetasql_test__.KeyValueStruct>>) -> ARRAY<PROTO<zetasql_test__.KeyValueStruct>>)
    |     +-Literal(type=BOOL, value=true)
    |     +-Parameter(parse_location=277-290, type=ARRAY<PROTO<zetasql_test__.KeyValueStruct>>, name="struct_array")
    |     +-GetProtoField
    |       +-type=ARRAY<PROTO<zetasql_test__.KeyValueStruct>>
    |       +-expr=
    |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |       +-field_descriptor=key_value_array
    |       +-default_value=[]
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
[UNDECLARED_PARAMETERS]
enum1: ENUM<zetasql_test__.TestEnum>
enum2: ENUM<zetasql_test__.TestEnum>
int32: INT32
int32_array: ARRAY<INT32>
p_proto: PROTO<zetasql_test__.KeyValueStruct>
struct_array: ARRAY<PROTO<zetasql_test__.KeyValueStruct>>
==

## Parameter type cannot be reconciled. Parameter names are case insensitive.
SELECT @pArAm < 1 AND @PaRaM > "foo";
--
ERROR: Undeclared parameter 'param' is used assuming different types (STRING vs INT64) [at 1:8]
SELECT @pArAm < 1 AND @PaRaM > "foo";
       ^
==

# Same as above but the last occurrence is of default type INT64.
SELECT @pArAm < "foo" AND @PaRaM > 1;
--
ERROR: Undeclared parameter 'param' is used assuming different types (STRING vs INT64) [at 1:27]
SELECT @pArAm < "foo" AND @PaRaM > 1;
                          ^
==

# DML
DELETE TestTable WHERE KitchenSink.int32_val = @p;
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ
+-where_expr=
  +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
    +-GetProtoField
    | +-type=INT32
    | +-expr=
    | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    | +-field_descriptor=int32_val
    | +-default_value=77
    +-Parameter(parse_location=47-49, type=INT32, name="p")
[UNDECLARED_PARAMETERS]
p: INT32
==

INSERT INTO KeyValue (key, value)
VALUES (1, @one), (@two, "two");
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
+-insert_column_list=KeyValue.[Key#1, Value#2]
+-row_list=
| +-InsertRow
| | +-value_list=
| |   +-DMLValue
| |   | +-value=
| |   |   +-Literal(type=INT64, value=1)
| |   +-DMLValue
| |     +-value=
| |       +-Parameter(parse_location=45-49, type=STRING, name="one")
| +-InsertRow
|   +-value_list=
|     +-DMLValue
|     | +-value=
|     |   +-Parameter(parse_location=53-57, type=INT64, name="two", is_untyped=TRUE)
|     +-DMLValue
|       +-value=
|         +-Literal(type=STRING, value="two")
+-column_access_list=WRITE,WRITE
[UNDECLARED_PARAMETERS]
one: STRING
two: INT64
==

UPDATE KeyValue SET
  key=@SomeInt,
  value=@StringValue
WHERE key > @AnotherInt
ASSERT_ROWS_MODIFIED @Int64Param;
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
+-column_access_list=READ_WRITE,WRITE
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Parameter(parse_location=102-113, type=INT64, name="int64param", is_untyped=TRUE)
+-where_expr=
| +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
|   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
|   +-Parameter(parse_location=69-80, type=INT64, name="anotherint", is_untyped=TRUE)
+-update_item_list=
  +-UpdateItem
  | +-target=
  | | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
  | +-set_value=
  |   +-DMLValue
  |     +-value=
  |       +-Parameter(parse_location=26-34, type=INT64, name="someint", is_untyped=TRUE)
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-set_value=
      +-DMLValue
        +-value=
          +-Parameter(parse_location=44-56, type=STRING, name="stringvalue")
[UNDECLARED_PARAMETERS]
anotherint: INT64
int64param: INT64
someint: INT64
stringvalue: STRING
==

#Hints
select @{ p=length(@p), q=5.0+@q, r=@r, s=-@s } key from KeyValue;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-hint_list=
    | +-p :=
    | | +-FunctionCall(ZetaSQL:length(STRING) -> INT64)
    | |   +-Parameter(parse_location=19-21, type=STRING, name="p")
    | +-q :=
    | | +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
    | |   +-Literal(type=DOUBLE, value=5)
    | |   +-Parameter(parse_location=30-32, type=DOUBLE, name="q")
    | +-r := Parameter(parse_location=36-38, type=INT64, name="r", is_untyped=TRUE)
    | +-s :=
    |   +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
    |     +-Parameter(parse_location=43-45, type=INT64, name="s", is_untyped=TRUE)
    +-input_scan=
      +-ProjectScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
          +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
[UNDECLARED_PARAMETERS]
p: STRING
q: DOUBLE
r: INT64
s: INT64
==

SELECT @p = STRUCT();
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$equal(STRUCT<>, STRUCT<>) -> BOOL)
    |     +-Parameter(parse_location=7-9, type=STRUCT<>, name="p")
    |     +-Literal(type=STRUCT<>, value={})
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: STRUCT<>
==

SELECT @p = @q;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |     +-Parameter(parse_location=7-9, type=INT64, name="p", is_untyped=TRUE)
    |     +-Parameter(parse_location=12-14, type=INT64, name="q", is_untyped=TRUE)
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
p: INT64
q: INT64
==

SELECT @p AS x FROM (SELECT 0) GROUP BY x;
--
QueryStmt
+-output_column_list=
| +-$groupby.x#2 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.x#2]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.x#2]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.$col1#1]
        |   +-expr_list=
        |   | +-$col1#1 := Literal(type=INT64, value=0)
        |   +-input_scan=
        |     +-SingleRowScan
        +-group_by_list=
          +-x#2 := Parameter(parse_location=7-9, type=INT64, name="p", is_untyped=TRUE)
[UNDECLARED_PARAMETERS]
p: INT64
==

SELECT x FROM (SELECT 0 AS x) WHERE @p0;
--
QueryStmt
+-output_column_list=
| +-$subquery1.x#1 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$subquery1.x#1]
    +-input_scan=
      +-FilterScan
        +-column_list=[$subquery1.x#1]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.x#1]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=0)
        |   +-input_scan=
        |     +-SingleRowScan
        +-filter_expr=
          +-Parameter(parse_location=36-39, type=BOOL, name="p0")
[UNDECLARED_PARAMETERS]
p0: BOOL
==

SELECT x FROM (SELECT 0 AS x) WHERE @p0 GROUP BY x HAVING @p0 = 'foo';
--
ERROR: Undeclared parameter 'p0' is used assuming different types (BOOL vs INT64) [at 1:59]
SELECT x FROM (SELECT 0 AS x) WHERE @p0 GROUP BY x HAVING @p0 = 'foo';
                                                          ^
==

SELECT x FROM (SELECT 0 AS x) WHERE @p0 GROUP BY x HAVING @p0;
--
QueryStmt
+-output_column_list=
| +-$groupby.x#2 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.x#2]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.x#2]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.x#2]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[$subquery1.x#1]
        |   |   +-input_scan=
        |   |   | +-ProjectScan
        |   |   |   +-column_list=[$subquery1.x#1]
        |   |   |   +-expr_list=
        |   |   |   | +-x#1 := Literal(type=INT64, value=0)
        |   |   |   +-input_scan=
        |   |   |     +-SingleRowScan
        |   |   +-filter_expr=
        |   |     +-Parameter(parse_location=36-39, type=BOOL, name="p0")
        |   +-group_by_list=
        |     +-x#2 := ColumnRef(type=INT64, column=$subquery1.x#1)
        +-filter_expr=
          +-Parameter(parse_location=58-61, type=BOOL, name="p0")
[UNDECLARED_PARAMETERS]
p0: BOOL
==

SELECT x FROM (SELECT 0 AS x) WHERE @p0 = 'foo' GROUP BY x HAVING @p0;
--
ERROR: Undeclared parameter 'p0' is used assuming different types (BOOL vs INT64) [at 1:37]
SELECT x FROM (SELECT 0 AS x) WHERE @p0 = 'foo' GROUP BY x HAVING @p0;
                                    ^
==

SELECT x FROM (SELECT 0 AS x) WHERE @p0 = 'foo' AND @p0;
--
ERROR: Undeclared parameter 'p0' is used assuming different types (BOOL vs INT64) [at 1:37]
SELECT x FROM (SELECT 0 AS x) WHERE @p0 = 'foo' AND @p0;
                                    ^
==

SELECT x FROM (SELECT 0 AS x) GROUP BY x HAVING @p0;
--
QueryStmt
+-output_column_list=
| +-$groupby.x#2 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.x#2]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.x#2]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.x#2]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$subquery1.x#1]
        |   |   +-expr_list=
        |   |   | +-x#1 := Literal(type=INT64, value=0)
        |   |   +-input_scan=
        |   |     +-SingleRowScan
        |   +-group_by_list=
        |     +-x#2 := ColumnRef(type=INT64, column=$subquery1.x#1)
        +-filter_expr=
          +-Parameter(parse_location=48-51, type=BOOL, name="p0")
[UNDECLARED_PARAMETERS]
p0: BOOL
==

SELECT t1.x
FROM (SELECT 1 AS x) AS t1
JOIN (SELECT 2 AS x) AS t2
ON @p0;
--
QueryStmt
+-output_column_list=
| +-t1.x#1 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[t1.x#1]
    +-input_scan=
      +-JoinScan
        +-column_list=[t1.x#1, t2.x#2]
        +-left_scan=
        | +-ProjectScan
        |   +-column_list=[t1.x#1]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-right_scan=
        | +-ProjectScan
        |   +-column_list=[t2.x#2]
        |   +-expr_list=
        |   | +-x#2 := Literal(type=INT64, value=2)
        |   +-input_scan=
        |     +-SingleRowScan
        +-join_expr=
          +-Parameter(parse_location=69-72, type=BOOL, name="p0")
[UNDECLARED_PARAMETERS]
p0: BOOL
==

DELETE TestTable
WHERE @p0 AND @p1 > 5;
--
DeleteStmt
+-table_scan=
| +-TableScan(table=TestTable)
+-where_expr=
  +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
    +-Parameter(parse_location=23-26, type=BOOL, name="p0")
    +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
      +-Parameter(parse_location=31-34, type=INT64, name="p1", is_untyped=TRUE)
      +-Literal(type=INT64, value=5)
[UNDECLARED_PARAMETERS]
p0: BOOL
p1: INT64
==

UPDATE KeyValue SET
  key=1,
  value="a"
WHERE @p0
ASSERT_ROWS_MODIFIED @p1;
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
+-column_access_list=WRITE,WRITE
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Parameter(parse_location=72-75, type=INT64, name="p1", is_untyped=TRUE)
+-where_expr=
| +-Parameter(parse_location=47-50, type=BOOL, name="p0")
+-update_item_list=
  +-UpdateItem
  | +-target=
  | | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
  | +-set_value=
  |   +-DMLValue
  |     +-value=
  |       +-Literal(type=INT64, value=1)
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-set_value=
      +-DMLValue
        +-value=
          +-Literal(type=STRING, value="a")
[UNDECLARED_PARAMETERS]
p0: BOOL
p1: INT64
==

SELECT key, @p AS x
FROM (SELECT 1 AS key)
GROUP BY key;
--
QueryStmt
+-output_column_list=
| +-$groupby.key#2 AS key [INT64]
| +-$query.x#3 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#2, $query.x#3]
    +-expr_list=
    | +-x#3 := Parameter(parse_location=12-14, type=INT64, name="p", is_untyped=TRUE)
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.key#2]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.key#1]
        |   +-expr_list=
        |   | +-key#1 := Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-group_by_list=
          +-key#2 := ColumnRef(type=INT64, column=$subquery1.key#1)
[UNDECLARED_PARAMETERS]
p: INT64
==

SELECT @p as foo
FROM (SELECT 0)
GROUP BY 1
HAVING sum(foo) > 5.3;
--
QueryStmt
+-output_column_list=
| +-$groupby.foo#3 AS foo [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.foo#3]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.foo#3, $aggregate.$agg1#4]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.foo#3, $aggregate.$agg1#4]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$subquery1.$col1#1, $pre_groupby.foo#2]
        |   |   +-expr_list=
        |   |   | +-foo#2 := Parameter(parse_location=7-9, type=INT64, name="p", is_untyped=TRUE)
        |   |   +-input_scan=
        |   |     +-ProjectScan
        |   |       +-column_list=[$subquery1.$col1#1]
        |   |       +-expr_list=
        |   |       | +-$col1#1 := Literal(type=INT64, value=0)
        |   |       +-input_scan=
        |   |         +-SingleRowScan
        |   +-group_by_list=
        |   | +-foo#3 := ColumnRef(type=INT64, column=$pre_groupby.foo#2)
        |   +-aggregate_list=
        |     +-$agg1#4 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=$pre_groupby.foo#2)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
            +-Cast(INT64 -> DOUBLE)
            | +-ColumnRef(type=INT64, column=$aggregate.$agg1#4)
            +-Literal(type=DOUBLE, value=5.3)
[UNDECLARED_PARAMETERS]
p: INT64
==

# No undeclared parameters.
SELECT 1;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan
[UNDECLARED_PARAMETERS]
==

# Parameter types using two copies of the same proto from different
# DescriptorPools.
select CAST(@p as zetasql_test__.TestExtraPB)
union all
select CAST(@p as alt_descriptor_pool.zetasql_test__.TestExtraPB)
--
ERROR: Undeclared parameter 'p' is used assuming different versions of the same type (zetasql_test__.TestExtraPB) [at 3:13]
select CAST(@p as alt_descriptor_pool.zetasql_test__.TestExtraPB)
            ^
==

# Expression.
[mode=expression]
@p > if(@b, 1.0, @q)
--
FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
+-Parameter(parse_location=0-2, type=DOUBLE, name="p")
+-FunctionCall(ZetaSQL:if(BOOL, DOUBLE, DOUBLE) -> DOUBLE)
  +-Parameter(parse_location=8-10, type=BOOL, name="b")
  +-Literal(type=DOUBLE, value=1)
  +-Parameter(parse_location=17-19, type=DOUBLE, name="q")
[UNDECLARED_PARAMETERS]
b: BOOL
p: DOUBLE
q: DOUBLE

==

# Field access on parameter.
SELECT @p.param_field
--
ERROR: Cannot access field param_field on parameter p whose type is unknown [at 1:11]
SELECT @p.param_field
          ^
==

# Nested field access on parameter.
SELECT @p.param_message.param_field

--
ERROR: Cannot access field param_message on parameter p whose type is unknown [at 1:11]
SELECT @p.param_message.param_field
          ^
