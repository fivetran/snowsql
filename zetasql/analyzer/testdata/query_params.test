# All the test_param_* typed parameters used in the queries could be found
# defined in zetasql/analyzer/run_analyzer_test.cc

select 1 from TestTable where KitchenSink.bool_val = @test_param_bool;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-column_list=[TestTable.KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(BOOL, BOOL) -> BOOL)
            +-GetProtoField
            | +-type=BOOL
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            | +-field_descriptor=bool_val
            | +-default_value=false
            +-Parameter(type=BOOL, name="test_param_bool")
==

# This test is here to document current behavior and notice regressions in case
# some customer has started doing this. We suspect the authors never intended
# the "@" token to be separated from the variable name by whitespace.
SELECT @ test_param_bool;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Parameter(type=BOOL, name="test_param_bool")
    +-input_scan=
      +-SingleRowScan

==

# This test is here to document current behavior and notice regressions in case
# some customer has started doing this. We suspect the authors never intended
# the "@" token to be separated from the variable name by whitespace.
SELECT @
  SELECT
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Parameter(type=BOOL, name="select")
    +-input_scan=
      +-SingleRowScan

==

select 1 + @test_param_int32;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-Cast(INT32 -> INT64)
    |       +-Parameter(type=INT32, name="test_param_int32")
    +-input_scan=
      +-SingleRowScan
==

select * from TestTable where @test_param_string = @test_param_bytes;
--
ERROR: No matching signature for operator = for argument types: STRING, BYTES. Supported signatures: ANY = ANY; INT64 = UINT64; UINT64 = INT64; BOOL = STRING; STRING = BOOL; INT64 = STRING; STRING = INT64; FLOAT = STRING; STRING = FLOAT; DOUBLE = STRING; STRING = DOUBLE [at 1:31]
select * from TestTable where @test_param_string = @test_param_bytes;
                              ^
==

select 1 from TestTable where @test_param_array[DEFAULT_OFFSET(@test_param_int32)] = 1;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(table=TestTable)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
            +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT32>, INT64) -> INT32)
            | +-Parameter(type=ARRAY<INT32>, name="test_param_array")
            | +-Cast(INT32 -> INT64)
            |   +-Parameter(type=INT32, name="test_param_int32")
            +-Literal(type=INT32, value=1)
==

select * from TestTable where @invalid_param = true;
--
ERROR: Query parameter 'invalid_param' not found [at 1:31]
select * from TestTable where @invalid_param = true;
                              ^
==

select * from TestTable where 1 + cast(@test_param_int32 as INT64) = 5;
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            | +-Literal(type=INT64, value=1)
            | +-Cast(INT32 -> INT64)
            |   +-Parameter(type=INT32, name="test_param_int32")
            +-Literal(type=INT64, value=5)
==

# NOTE: '@' in table_expressions not supported (while parsing).
select * from @test_param_array WITH POSITION pos;
--
ERROR: Query parameters cannot be used in place of table names [at 1:15]
select * from @test_param_array WITH POSITION pos;
              ^
==

select t from
  (select as struct
     @test_param_bool bool_,
     @test_param_int32 int32_,
     @test_param_bytes bytes_,
     @test_param_string string_,
     @test_param_array array_) t;
--
QueryStmt
+-output_column_list=
| +-$make_struct.$struct#6 AS t [STRUCT<bool_ BOOL, int32_ INT32, bytes_ BYTES, string_ STRING, array_ ARRAY<INT32>>]
+-query=
  +-ProjectScan
    +-column_list=[$make_struct.$struct#6]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$make_struct.$struct#6]
        +-expr_list=
        | +-$struct#6 :=
        |   +-MakeStruct
        |     +-type=STRUCT<bool_ BOOL, int32_ INT32, bytes_ BYTES, string_ STRING, array_ ARRAY<INT32>>
        |     +-field_list=
        |       +-ColumnRef(type=BOOL, column=t.bool_#1)
        |       +-ColumnRef(type=INT32, column=t.int32_#2)
        |       +-ColumnRef(type=BYTES, column=t.bytes_#3)
        |       +-ColumnRef(type=STRING, column=t.string_#4)
        |       +-ColumnRef(type=ARRAY<INT32>, column=t.array_#5)
        +-input_scan=
          +-ProjectScan
            +-column_list=t.[bool_#1, int32_#2, bytes_#3, string_#4, array_#5]
            +-expr_list=
            | +-bool_#1 := Parameter(type=BOOL, name="test_param_bool")
            | +-int32_#2 := Parameter(type=INT32, name="test_param_int32")
            | +-bytes_#3 := Parameter(type=BYTES, name="test_param_bytes")
            | +-string_#4 := Parameter(type=STRING, name="test_param_string")
            | +-array_#5 := Parameter(type=ARRAY<INT32>, name="test_param_array")
            +-input_scan=
              +-SingleRowScan
==

select 5 from KeyValue group by @test_param_int32;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 := Literal(type=INT64, value=5)
    +-input_scan=
      +-AggregateScan
        +-input_scan=
        | +-TableScan(table=KeyValue)
        +-group_by_list=
          +-$groupbycol1#3 := Parameter(type=INT32, name="test_param_int32")
==

select key, value from KeyValue group by 1, 2 order by 1
limit @test_param_int64
offset @test_param_int64
--
QueryStmt
+-output_column_list=
| +-$groupby.key#3 AS key [INT64]
| +-$groupby.value#4 AS value [STRING]
+-query=
  +-LimitOffsetScan
    +-column_list=$groupby.[key#3, value#4]
    +-is_ordered=TRUE
    +-input_scan=
    | +-OrderByScan
    |   +-column_list=$groupby.[key#3, value#4]
    |   +-is_ordered=TRUE
    |   +-input_scan=
    |   | +-AggregateScan
    |   |   +-column_list=$groupby.[key#3, value#4]
    |   |   +-input_scan=
    |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   |   +-group_by_list=
    |   |     +-key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |     +-value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
    |   +-order_by_item_list=
    |     +-OrderByItem
    |       +-column_ref=
    |         +-ColumnRef(type=INT64, column=$groupby.key#3)
    +-limit=
    | +-Parameter(type=INT64, name="test_param_int64")
    +-offset=
      +-Parameter(type=INT64, name="test_param_int64")
==

select key, value from KeyValue group by 1, 2 order by 1
limit @test_param_int32
--
QueryStmt
+-output_column_list=
| +-$groupby.key#3 AS key [INT64]
| +-$groupby.value#4 AS value [STRING]
+-query=
  +-LimitOffsetScan
    +-column_list=$groupby.[key#3, value#4]
    +-is_ordered=TRUE
    +-input_scan=
    | +-OrderByScan
    |   +-column_list=$groupby.[key#3, value#4]
    |   +-is_ordered=TRUE
    |   +-input_scan=
    |   | +-AggregateScan
    |   |   +-column_list=$groupby.[key#3, value#4]
    |   |   +-input_scan=
    |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   |   +-group_by_list=
    |   |     +-key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |     +-value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
    |   +-order_by_item_list=
    |     +-OrderByItem
    |       +-column_ref=
    |         +-ColumnRef(type=INT64, column=$groupby.key#3)
    +-limit=
      +-Cast(INT32 -> INT64)
        +-Parameter(type=INT32, name="test_param_int32")
==

# Only integer parameters are allowed in limit.
select key, value from KeyValue group by 1, 2 order by 1
limit @test_param_double
--
ERROR: LIMIT expects an integer literal or parameter [at 2:7]
limit @test_param_double
      ^
==

select @test_param_proto.int64_val,
       (@test_param_proto.int64_val),
       @ "test_param_proto".int64_val;
--
QueryStmt
+-output_column_list=
| +-$query.int64_val#1 AS int64_val [INT64]
| +-$query.int64_val#2 AS int64_val [INT64]
| +-$query.int64_val#3 AS int64_val [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[int64_val#1, int64_val#2, int64_val#3]
    +-expr_list=
    | +-int64_val#1 :=
    | | +-GetProtoField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-Parameter(type=PROTO<zetasql_test__.KitchenSinkPB>, name="test_param_proto")
    | |   +-field_descriptor=int64_val
    | |   +-default_value=0
    | +-int64_val#2 :=
    | | +-GetProtoField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-Parameter(type=PROTO<zetasql_test__.KitchenSinkPB>, name="test_param_proto")
    | |   +-field_descriptor=int64_val
    | |   +-default_value=0
    | +-int64_val#3 :=
    |   +-GetProtoField
    |     +-type=INT64
    |     +-expr=
    |     | +-Parameter(type=PROTO<zetasql_test__.KitchenSinkPB>, name="test_param_proto")
    |     +-field_descriptor=int64_val
    |     +-default_value=0
    +-input_scan=
      +-SingleRowScan
==

# Tests case insensitivity of query parameters.
select @test_param_mixedcase,
       @test_param_MIXEDcase,
       @test_param_MIXEDCASE,
       @test_param_MiXedCaSe
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRING]
| +-$query.$col2#2 AS "$col2" [STRING]
| +-$query.$col3#3 AS "$col3" [STRING]
| +-$query.$col4#4 AS "$col4" [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4]
    +-expr_list=
    | +-$col1#1 := Parameter(type=STRING, name="test_param_mixedcase")
    | +-$col2#2 := Parameter(type=STRING, name="test_param_mixedcase")
    | +-$col3#3 := Parameter(type=STRING, name="test_param_mixedcase")
    | +-$col4#4 := Parameter(type=STRING, name="test_param_mixedcase")
    +-input_scan=
      +-SingleRowScan
==

# Test parameter implicit type coercion.  As currently specified, ZetaSQL
# allows:
#   INT32 parameter -> { ENUM }
#   INT64 parameter -> { ENUM }
#   STRING parameter -> { DATE, TIMESTAMP*, ENUM, PROTO }
#   BYTES parameter -> { PROTO }

select fn_on_TestEnum(@test_param_int32),
       fn_on_TestEnum(@test_param_int64),
       fn_on_TestEnum(@test_param_string),
       fn_on_TestEnum(@test_param_enum)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
| +-$query.$col2#2 AS "$col2" [BOOL]
| +-$query.$col3#3 AS "$col3" [BOOL]
| +-$query.$col4#4 AS "$col4" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(sample_functions:fn_on_TestEnum(ENUM<zetasql_test__.TestEnum>) -> BOOL)
    | |   +-Cast(INT32 -> ENUM<zetasql_test__.TestEnum>)
    | |     +-Parameter(type=INT32, name="test_param_int32")
    | +-$col2#2 :=
    | | +-FunctionCall(sample_functions:fn_on_TestEnum(ENUM<zetasql_test__.TestEnum>) -> BOOL)
    | |   +-Cast(INT64 -> ENUM<zetasql_test__.TestEnum>)
    | |     +-Parameter(type=INT64, name="test_param_int64")
    | +-$col3#3 :=
    | | +-FunctionCall(sample_functions:fn_on_TestEnum(ENUM<zetasql_test__.TestEnum>) -> BOOL)
    | |   +-Cast(STRING -> ENUM<zetasql_test__.TestEnum>)
    | |     +-Parameter(type=STRING, name="test_param_string")
    | +-$col4#4 :=
    |   +-FunctionCall(sample_functions:fn_on_TestEnum(ENUM<zetasql_test__.TestEnum>) -> BOOL)
    |     +-Parameter(type=ENUM<zetasql_test__.TestEnum>, name="test_param_enum")
    +-input_scan=
      +-SingleRowScan
==

select fn_on_KitchenSinkPB(@test_param_string),
       fn_on_KitchenSinkPB(@test_param_bytes),
       fn_on_KitchenSinkPB(@test_param_proto)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
| +-$query.$col2#2 AS "$col2" [BOOL]
| +-$query.$col3#3 AS "$col3" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(sample_functions:fn_on_KitchenSinkPB(PROTO<zetasql_test__.KitchenSinkPB>) -> BOOL)
    | |   +-Cast(STRING -> PROTO<zetasql_test__.KitchenSinkPB>)
    | |     +-Parameter(type=STRING, name="test_param_string")
    | +-$col2#2 :=
    | | +-FunctionCall(sample_functions:fn_on_KitchenSinkPB(PROTO<zetasql_test__.KitchenSinkPB>) -> BOOL)
    | |   +-Cast(BYTES -> PROTO<zetasql_test__.KitchenSinkPB>)
    | |     +-Parameter(type=BYTES, name="test_param_bytes")
    | +-$col3#3 :=
    |   +-FunctionCall(sample_functions:fn_on_KitchenSinkPB(PROTO<zetasql_test__.KitchenSinkPB>) -> BOOL)
    |     +-Parameter(type=PROTO<zetasql_test__.KitchenSinkPB>, name="test_param_proto")
    +-input_scan=
      +-SingleRowScan
==

select fn_on_DATE(@test_param_string),
       fn_on_TIMESTAMP(@test_param_string)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
| +-$query.$col2#2 AS "$col2" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(sample_functions:fn_on_date(DATE) -> BOOL)
    | |   +-Cast(STRING -> DATE)
    | |     +-Parameter(type=STRING, name="test_param_string")
    | +-$col2#2 :=
    |   +-FunctionCall(sample_functions:fn_on_timestamp(TIMESTAMP) -> BOOL)
    |     +-Cast(STRING -> TIMESTAMP)
    |       +-Parameter(type=STRING, name="test_param_string")
    +-input_scan=
      +-SingleRowScan
==

# The following literal coercions work, but are not supported as parameter
# coercions.
select fn_on_{{int32|uint32|uint64}}(@test_param_int64)
--
ALTERNATION GROUP: int32
--
ERROR: No matching signature for function SAMPLE_FUNCTIONS:FN_ON_INT32 for argument types: INT64. Supported signature: FN_ON_INT32(INT32) [at 1:8]
select fn_on_int32(@test_param_int64)
       ^
--
ALTERNATION GROUP: uint32
--
ERROR: No matching signature for function SAMPLE_FUNCTIONS:FN_ON_UINT32 for argument types: INT64. Supported signature: FN_ON_UINT32(UINT32) [at 1:8]
select fn_on_uint32(@test_param_int64)
       ^
--
ALTERNATION GROUP: uint64
--
ERROR: No matching signature for function SAMPLE_FUNCTIONS:FN_ON_UINT64 for argument types: INT64. Supported signature: FN_ON_UINT64(UINT64) [at 1:8]
select fn_on_uint64(@test_param_int64)
       ^
==

select fn_on_float(@test_param_double)
--
ERROR: No matching signature for function SAMPLE_FUNCTIONS:FN_ON_FLOAT for argument types: DOUBLE. Supported signature: FN_ON_FLOAT(FLOAT) [at 1:8]
select fn_on_float(@test_param_double)
       ^
==

select fn_on_bool(@test_param_{{int32|int64|uint32|uint64}})
--
ALTERNATION GROUP: int32
--
ERROR: No matching signature for function SAMPLE_FUNCTIONS:FN_ON_BOOL for argument types: INT32. Supported signature: FN_ON_BOOL(BOOL) [at 1:8]
select fn_on_bool(@test_param_int32)
       ^
--
ALTERNATION GROUP: int64
--
ERROR: No matching signature for function SAMPLE_FUNCTIONS:FN_ON_BOOL for argument types: INT64. Supported signature: FN_ON_BOOL(BOOL) [at 1:8]
select fn_on_bool(@test_param_int64)
       ^
--
ALTERNATION GROUP: uint32
--
ERROR: No matching signature for function SAMPLE_FUNCTIONS:FN_ON_BOOL for argument types: UINT32. Supported signature: FN_ON_BOOL(BOOL) [at 1:8]
select fn_on_bool(@test_param_uint32)
       ^
--
ALTERNATION GROUP: uint64
--
ERROR: No matching signature for function SAMPLE_FUNCTIONS:FN_ON_BOOL for argument types: UINT64. Supported signature: FN_ON_BOOL(BOOL) [at 1:8]
select fn_on_bool(@test_param_uint64)
       ^
==

# TODO: Whether or not we support these is still TBD.
select fn_on_TestEnum(@test_param_{{uint32|uint64}})
--
ALTERNATION GROUP: uint32
--
ERROR: No matching signature for function SAMPLE_FUNCTIONS:FN_ON_TESTENUM for argument types: UINT32. Supported signature: FN_ON_TESTENUM(zetasql_test__.TestEnum) [at 1:8]
select fn_on_TestEnum(@test_param_uint32)
       ^
--
ALTERNATION GROUP: uint64
--
ERROR: No matching signature for function SAMPLE_FUNCTIONS:FN_ON_TESTENUM for argument types: UINT64. Supported signature: FN_ON_TESTENUM(zetasql_test__.TestEnum) [at 1:8]
select fn_on_TestEnum(@test_param_uint64)
       ^
==

select cast(@test_param_proto as zetasql_test__.{{TestExtraPB|KitchenSinkPB}})
--
ALTERNATION GROUP: TestExtraPB
--
ERROR: Invalid cast from zetasql_test__.KitchenSinkPB to zetasql_test__.TestExtraPB [at 1:13]
select cast(@test_param_proto as zetasql_test__.TestExtraPB)
            ^
--
ALTERNATION GROUP: KitchenSinkPB
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Parameter(type=PROTO<zetasql_test__.KitchenSinkPB>, name="test_param_proto")
    +-input_scan=
      +-SingleRowScan
==

# Implicit coercion of non-empty array parameters (and literals) is now
# supported.
[language_features={{|V_1_1_CAST_DIFFERENT_ARRAY_TYPES}}]
select fn_on_int64_array_returns_int64(@test_param_array)
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for function SAMPLE_FUNCTIONS:FN_ON_INT64_ARRAY_RETURNS_INT64 for argument types: ARRAY<INT32>. Supported signature: FN_ON_INT64_ARRAY_RETURNS_INT64(ARRAY<INT64>) [at 1:8]
select fn_on_int64_array_returns_int64(@test_param_array)
       ^
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_on_int64_array_returns_int64(ARRAY<INT64>) -> INT64)
    |     +-Cast(ARRAY<INT32> -> ARRAY<INT64>)
    |       +-Parameter(type=ARRAY<INT32>, name="test_param_array")
    +-input_scan=
      +-SingleRowScan
==

# INT64 parameters don't implicitly coerce to INT32, even inside arrays.
[language_features={{|V_1_1_CAST_DIFFERENT_ARRAY_TYPES}}]
select fn_on_int32_array_returns_int32(@test_param_array_int64)
--
ERROR: No matching signature for function SAMPLE_FUNCTIONS:FN_ON_INT32_ARRAY_RETURNS_INT32 for argument types: ARRAY<INT64>. Supported signature: FN_ON_INT32_ARRAY_RETURNS_INT32(ARRAY<INT32>) [at 1:8]
select fn_on_int32_array_returns_int32(@test_param_array_int64)
       ^
==

# Supertyping of non-empty array parameters (and literals) is now supported.
[language_features={{|V_1_1_CAST_DIFFERENT_ARRAY_TYPES}}]
select array_concat([TestEnum], @test_param_array_int64) From EnumTable
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for function ARRAY_CONCAT for argument types: ARRAY<zetasql_test__.TestEnum>, ARRAY<INT64>. Supported signature: ARRAY_CONCAT(ARRAY, [ARRAY, ...]) [at 1:8]
select array_concat([TestEnum], @test_param_array_int64) From EnumTable
       ^
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS "$col1" [ARRAY<ENUM<zetasql_test__.TestEnum>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-FunctionCall(ZetaSQL:array_concat(ARRAY<ENUM<zetasql_test__.TestEnum>>, repeated(1) ARRAY<ENUM<zetasql_test__.TestEnum>>) -> ARRAY<ENUM<zetasql_test__.TestEnum>>)
    |     +-FunctionCall(ZetaSQL:$make_array(repeated(1) ENUM<zetasql_test__.TestEnum>) -> ARRAY<ENUM<zetasql_test__.TestEnum>>)
    |     | +-ColumnRef(type=ENUM<zetasql_test__.TestEnum>, column=EnumTable.TestEnum#2)
    |     +-Cast(ARRAY<INT64> -> ARRAY<ENUM<zetasql_test__.TestEnum>>)
    |       +-Parameter(type=ARRAY<INT64>, name="test_param_array_int64")
    +-input_scan=
      +-TableScan(column_list=[EnumTable.TestEnum#2], table=EnumTable, column_index_list=[1])
==

# A test involving IN UNNEST inspired by b/24130693 (fixed).
[language_features={{|V_1_1_CAST_DIFFERENT_ARRAY_TYPES}}]
select struct(cast(1 as int32)) IN UNNEST(@test_param_array_struct_int64)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in_array(STRUCT<INT64>, ARRAY<STRUCT<INT64>>) -> BOOL)
    |     +-Literal(type=STRUCT<INT64>, value={1}, has_explicit_type=TRUE)
    |     +-Parameter(type=ARRAY<STRUCT<INT64>>, name="test_param_array_struct_int64")
    +-input_scan=
      +-SingleRowScan
==

# Another test involving IN UNNEST inspired by b/24130693 (fixed). The query
# fails because there is no common supertype of a parameter INT64 and a UINT64.
[language_features={{|V_1_1_CAST_DIFFERENT_ARRAY_TYPES}}]
select cast(1 as uint64) IN UNNEST(@test_param_array_int64)
--
ERROR: No matching signature for operator IN UNNEST for argument types: UINT64, ARRAY<INT64> [at 1:26]
select cast(1 as uint64) IN UNNEST(@test_param_array_int64)
                         ^
==

# Another test involving IN UNNEST inspired by b/24130693 (fixed).
[language_features={{|V_1_1_CAST_DIFFERENT_ARRAY_TYPES}}]
select cast(1 as int32) IN UNNEST(@test_param_array_int64)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in_array(INT64, ARRAY<INT64>) -> BOOL)
    |     +-Literal(type=INT64, value=1, has_explicit_type=TRUE)
    |     +-Parameter(type=ARRAY<INT64>, name="test_param_array_int64")
    +-input_scan=
      +-SingleRowScan
==

# Another test involving IN UNNEST inspired by b/24130693 (fixed).
[language_features={{|V_1_1_CAST_DIFFERENT_ARRAY_TYPES}}]
select "TESTENUM0" IN UNNEST(@test_param_array_enum)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in_array(ENUM<zetasql_test__.TestEnum>, ARRAY<ENUM<zetasql_test__.TestEnum>>) -> BOOL)
    |     +-Literal(type=ENUM<zetasql_test__.TestEnum>, value=TESTENUM0)
    |     +-Parameter(type=ARRAY<ENUM<zetasql_test__.TestEnum>>, name="test_param_array_enum")
    +-input_scan=
      +-SingleRowScan
==

# Another test involving IN UNNEST inspired by b/24130693 (fixed).
# This doesn't work because supertype rules are strict when everything is a parameter.
[language_features={{|V_1_1_CAST_DIFFERENT_ARRAY_TYPES}}]
select
  {{@test_param_int64|@test_param_string}} in unnest(@test_param_array_enum)
--
ALTERNATION GROUPS:
    @test_param_int64
    V_1_1_CAST_DIFFERENT_ARRAY_TYPES,@test_param_int64
--
ERROR: No matching signature for operator IN UNNEST for argument types: INT64, ARRAY<zetasql_test__.TestEnum> [at 2:21]
  @test_param_int64 in unnest(@test_param_array_enum)
                    ^
--
ALTERNATION GROUPS:
    @test_param_string
    V_1_1_CAST_DIFFERENT_ARRAY_TYPES,@test_param_string
--
ERROR: No matching signature for operator IN UNNEST for argument types: STRING, ARRAY<zetasql_test__.TestEnum> [at 2:22]
  @test_param_string in unnest(@test_param_array_enum)
                     ^
==

# Another test involving IN UNNEST inspired by b/24130693 (fixed).
[language_features={{|V_1_1_CAST_DIFFERENT_ARRAY_TYPES}}]
select TestEnum in unnest(@test_param_array_enum) from TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FunctionCall(ZetaSQL:$in_array(ENUM<zetasql_test__.TestEnum>, ARRAY<ENUM<zetasql_test__.TestEnum>>) -> BOOL)
    |     +-ColumnRef(type=ENUM<zetasql_test__.TestEnum>, column=TestTable.TestEnum#2)
    |     +-Parameter(type=ARRAY<ENUM<zetasql_test__.TestEnum>>, name="test_param_array_enum")
    +-input_scan=
      +-TableScan(column_list=[TestTable.TestEnum#2], table=TestTable, column_index_list=[1])
==

[language_features={{|V_1_1_CAST_DIFFERENT_ARRAY_TYPES}}]
select @test_param_int64 in unnest(array_concat([TestEnum], [])) from TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FunctionCall(ZetaSQL:$in_array(ENUM<zetasql_test__.TestEnum>, ARRAY<ENUM<zetasql_test__.TestEnum>>) -> BOOL)
    |     +-Cast(INT64 -> ENUM<zetasql_test__.TestEnum>)
    |     | +-Parameter(type=INT64, name="test_param_int64")
    |     +-FunctionCall(ZetaSQL:array_concat(ARRAY<ENUM<zetasql_test__.TestEnum>>, repeated(1) ARRAY<ENUM<zetasql_test__.TestEnum>>) -> ARRAY<ENUM<zetasql_test__.TestEnum>>)
    |       +-FunctionCall(ZetaSQL:$make_array(repeated(1) ENUM<zetasql_test__.TestEnum>) -> ARRAY<ENUM<zetasql_test__.TestEnum>>)
    |       | +-ColumnRef(type=ENUM<zetasql_test__.TestEnum>, column=TestTable.TestEnum#2)
    |       +-Literal(type=ARRAY<ENUM<zetasql_test__.TestEnum>>, value=[])
    +-input_scan=
      +-TableScan(column_list=[TestTable.TestEnum#2], table=TestTable, column_index_list=[1])
==

# Another test involving IN UNNEST inspired by b/24130693 (fixed).
[language_features={{|V_1_1_CAST_DIFFERENT_ARRAY_TYPES}}]
select null in unnest(@test_param_array_int64)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in_array(INT64, ARRAY<INT64>) -> BOOL)
    |     +-Literal(type=INT64, value=NULL)
    |     +-Parameter(type=ARRAY<INT64>, name="test_param_array_int64")
    +-input_scan=
      +-SingleRowScan
==

# Another test involving IN UNNEST inspired by b/24130693 (fixed).
[language_features={{|V_1_1_CAST_DIFFERENT_ARRAY_TYPES}}]
select null in unnest(@test_param_array_string)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$in_array(STRING, ARRAY<STRING>) -> BOOL)
    |     +-Literal(type=STRING, value=NULL)
    |     +-Parameter(type=ARRAY<STRING>, name="test_param_array_string")
    +-input_scan=
      +-SingleRowScan
==

select cast(@test_param_enum as zetasql_test__.{{AnotherTestEnum|TestEnum}})
--
ALTERNATION GROUP: AnotherTestEnum
--
ERROR: Invalid cast from zetasql_test__.TestEnum to zetasql_test__.AnotherTestEnum [at 1:13]
select cast(@test_param_enum as zetasql_test__.AnotherTestEnum)
            ^
--
ALTERNATION GROUP: TestEnum
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ENUM<zetasql_test__.TestEnum>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Parameter(type=ENUM<zetasql_test__.TestEnum>, name="test_param_enum")
    +-input_scan=
      +-SingleRowScan
==

select cast(@test_param_struct as {{struct<int32>|struct<int32,string>}})
--
ALTERNATION GROUP: struct<int32>
--
ERROR: Invalid cast from STRUCT<a INT32, b STRING> to STRUCT<INT32> [at 1:13]
select cast(@test_param_struct as struct<int32>)
            ^
--
ALTERNATION GROUP: struct<int32,string>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<INT32, STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRUCT<a INT32, b STRING> -> STRUCT<INT32, STRING>)
    |     +-Parameter(type=STRUCT<a INT32, b STRING>, name="test_param_struct")
    +-input_scan=
      +-SingleRowScan
==

select cast(@test_param_struct as struct<int64,date>)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRUCT<INT64, DATE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(STRUCT<a INT32, b STRING> -> STRUCT<INT64, DATE>)
    |     +-Parameter(type=STRUCT<a INT32, b STRING>, name="test_param_struct")
    +-input_scan=
      +-SingleRowScan
==

# This test illustrates that we coerce a struct parameter like any other
# expression, and do not coerce the struct parameter fields as parameters
# themselves. The third case fails even though string parameters are allowed to
# coerce to date, since struct parameter fields do not coerce like parameters
# themselves.
select {{fn_on_struct_int32_string|fn_on_struct_int64_string|fn_on_struct_int32_date}}(@test_param_struct)
--
ALTERNATION GROUP: fn_on_struct_int32_string
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_on_struct_int32_string(STRUCT<a INT32, b STRING>) -> BOOL)
    |     +-Parameter(type=STRUCT<a INT32, b STRING>, name="test_param_struct")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: fn_on_struct_int64_string
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_on_struct_int64_string(STRUCT<a INT64, b STRING>) -> BOOL)
    |     +-Cast(STRUCT<a INT32, b STRING> -> STRUCT<a INT64, b STRING>)
    |       +-Parameter(type=STRUCT<a INT32, b STRING>, name="test_param_struct")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: fn_on_struct_int32_date
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_on_struct_int32_date(STRUCT<a INT32, b DATE>) -> BOOL)
    |     +-Cast(STRUCT<a INT32, b STRING> -> STRUCT<a INT32, b DATE>)
    |       +-Parameter(type=STRUCT<a INT32, b STRING>, name="test_param_struct")
    +-input_scan=
      +-SingleRowScan
==

[language_features={{V_1_1_CAST_DIFFERENT_ARRAY_TYPES|}}]
select cast(@test_param_array as {{array<string>|array<int32>}})
--
ALTERNATION GROUP: V_1_1_CAST_DIFFERENT_ARRAY_TYPES,array<string>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Cast(ARRAY<INT32> -> ARRAY<STRING>)
    |     +-Parameter(type=ARRAY<INT32>, name="test_param_array")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUPS:
    V_1_1_CAST_DIFFERENT_ARRAY_TYPES,array<int32>
    array<int32>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Parameter(type=ARRAY<INT32>, name="test_param_array")
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: array<string>
--
ERROR: Casting between arrays with incompatible element types is not supported: Invalid cast from ARRAY<INT32> to ARRAY<STRING> [at 1:13]
select cast(@test_param_array as array<string>)
            ^
==

select cast(@test_param_proto as string),
       cast(@test_param_proto as bytes),
       cast(@test_param_enum as int64)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [STRING]
| +-$query.$col2#2 AS "$col2" [BYTES]
| +-$query.$col3#3 AS "$col3" [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    +-expr_list=
    | +-$col1#1 :=
    | | +-Cast(PROTO<zetasql_test__.KitchenSinkPB> -> STRING)
    | |   +-Parameter(type=PROTO<zetasql_test__.KitchenSinkPB>, name="test_param_proto")
    | +-$col2#2 :=
    | | +-Cast(PROTO<zetasql_test__.KitchenSinkPB> -> BYTES)
    | |   +-Parameter(type=PROTO<zetasql_test__.KitchenSinkPB>, name="test_param_proto")
    | +-$col3#3 :=
    |   +-Cast(ENUM<zetasql_test__.TestEnum> -> INT64)
    |     +-Parameter(type=ENUM<zetasql_test__.TestEnum>, name="test_param_enum")
    +-input_scan=
      +-SingleRowScan
==

select cast(@test_param_proto as date)
--
ERROR: Invalid cast from zetasql_test__.KitchenSinkPB to DATE [at 1:13]
select cast(@test_param_proto as date)
            ^
==

# @select is a BOOL parameter.  It behaves the same way back-ticked or not
# back-ticked.
select @{{select|"select"}};
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Parameter(type=BOOL, name="select")
    +-input_scan=
      +-SingleRowScan
==

# @proto is a proto parameter.
select @proto, @test_param_proto;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$query.$col2#2 AS "$col2" [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 := Parameter(type=PROTO<zetasql_test__.KitchenSinkPB>, name="proto")
    | +-$col2#2 := Parameter(type=PROTO<zetasql_test__.KitchenSinkPB>, name="test_param_proto")
    +-input_scan=
      +-SingleRowScan
==

# This is a regression test against resolving query parameter @lambda that
# comes from user input. It detects breakage after removing resolving query
# parameter in AnalyzeSubstitute as part of fixing b/233941129.
[enabled_ast_rewrites=DEFAULTS]
[language_features=V_1_3_INLINE_LAMBDA_ARGUMENT]
SELECT ARRAY_FILTER(@lambda, e->e=2)
--
ERROR: Query parameter 'lambda' not found [at 1:21]
SELECT ARRAY_FILTER(@lambda, e->e=2)
                    ^
