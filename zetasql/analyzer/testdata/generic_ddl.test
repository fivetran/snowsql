[default supported_generic_entity_types=RESERVATION,EXPLORE]
[default supported_generic_sub_entity_types=REPLICA,CHILD_OF_REPLICA,GRANDCHILD_OF_REPLICA]

CREATE RESERVATION myProject.myReservation
--
CreateEntityStmt(name_path=myProject.myReservation, entity_type="RESERVATION")
==

CREATE OR REPLACE RESERVATION myProject.myReservation
OPTIONS(a=b, c=d)
AS JSON '{"key": "value"}'
--
CreateEntityStmt
+-name_path=myProject.myReservation
+-create_mode=CREATE_OR_REPLACE
+-entity_type="RESERVATION"
+-entity_body_json='{"key":"value"}'
+-option_list=
  +-a := Literal(type=STRING, value='b')
  +-c := Literal(type=STRING, value='d')
==

CREATE OR REPLACE EXPLORE myProject.myExplore
OPTIONS(a=b, c=d)
AS """ explore: test_explore { } """
--
CreateEntityStmt
+-name_path=myProject.myExplore
+-create_mode=CREATE_OR_REPLACE
+-entity_type="EXPLORE"
+-entity_body_text=" explore: test_explore { } "
+-option_list=
  +-a := Literal(type=STRING, value='b')
  +-c := Literal(type=STRING, value='d')
==

CREATE RESERVATION IF NOT EXISTS myProject.myReservation
OPTIONS(a=b, c=d)
AS JSON
"""
{
  "key": "value"
}
"""
--
CreateEntityStmt
+-name_path=myProject.myReservation
+-create_mode=CREATE_IF_NOT_EXISTS
+-entity_type="RESERVATION"
+-entity_body_json='{"key":"value"}'
+-option_list=
  +-a := Literal(type=STRING, value='b')
  +-c := Literal(type=STRING, value='d')
==

ALTER RESERVATION myProject.myReservation SET OPTIONS (a="b")
--
AlterEntityStmt
+-name_path=myProject.myReservation
+-alter_action_list=
| +-SetOptionsAction
|   +-option_list=
|     +-a := Literal(type=STRING, value='b')
+-entity_type="RESERVATION"
==

ALTER RESERVATION myProject.myReservation
  SET AS JSON '{key: "value"}';
--
ERROR: Invalid JSON literal: syntax error while parsing object key - invalid literal; last read: '{k'; expected string literal [at 2:10]
  SET AS JSON '{key: "value"}';
         ^
==

ALTER RESERVATION myProject.myReservation SET AS JSON '{"key": "value"}';
--
AlterEntityStmt
+-name_path=myProject.myReservation
+-alter_action_list=
| +-SetAsAction(entity_body_json='{"key":"value"}')
+-entity_type="RESERVATION"
==

[language_features=]
CREATE RESERVATION IF NOT EXISTS myProject.myReservation
AS JSON
"""
{
  key: "value"
}
"""
--
ERROR: Invalid JSON literal: syntax error while parsing object key - invalid literal; last read: '<U+000A>{<U+000A>  k'; expected string literal [at 2:4]
AS JSON
   ^
==

CREATE RESERVATION IF NOT EXISTS myProject.myReservation
OPTIONS(a=b, c=d)
AS JSON
"""
{
  "key": "value"
}
"""
--
CreateEntityStmt
+-name_path=myProject.myReservation
+-create_mode=CREATE_IF_NOT_EXISTS
+-entity_type="RESERVATION"
+-entity_body_json='{"key":"value"}'
+-option_list=
  +-a := Literal(type=STRING, value='b')
  +-c := Literal(type=STRING, value='d')
==

# Only JSON literal is supported
ALTER RESERVATION myProject.myReservation
  SET OPTIONS (a="b"),
  SET AS JSON_QUERY(JSON '{"config": {"key": "value"}}', '$.config');
--
ERROR: Syntax error: Expected keyword JSON or string literal but got identifier "JSON_QUERY" [at 3:10]
  SET AS JSON_QUERY(JSON '{"config": {"key": "value"}}', '$.config');
         ^
==

# Json keys must be quoted
CREATE OR REPLACE RESERVATION myProject.myReservation
OPTIONS(a=b, c=d)
AS JSON '{key: "value"}'
--
ERROR: Invalid JSON literal: syntax error while parsing object key - invalid literal; last read: '{k'; expected string literal [at 3:4]
AS JSON '{key: "value"}'
   ^
==

ALTER EXPLORE myProject.myExplore SET AS " explore: test_explore { } "
--
AlterEntityStmt
+-name_path=myProject.myExplore
+-alter_action_list=
| +-SetAsAction(entity_body_text=" explore: test_explore { } ")
+-entity_type="EXPLORE"
==

ALTER EXPLORE myProject.myExplore SET AS ""
--
ERROR: ALTER SET AS requires JSON or TEXT body literal [at 1:35]
ALTER EXPLORE myProject.myExplore SET AS ""
                                  ^
==

# SET AS is not supported by other ALTER statement
ALTER {{TABLE|VIEW}} myProject.myReservation
  SET AS JSON '{"key": "value"}';
--
ALTERNATION GROUP: TABLE
--
ERROR: ALTER TABLE does not support SET AS [at 2:3]
  SET AS JSON '{"key": "value"}';
  ^
--
ALTERNATION GROUP: VIEW
--
ERROR: ALTER VIEW does not support SET AS [at 2:3]
  SET AS JSON '{"key": "value"}';
  ^
==

DROP RESERVATION myProject.myReservation
--
DropStmt(object_type="RESERVATION", is_if_exists=FALSE, name_path=myProject.myReservation)
==

DROP RESERVATION IF EXISTS myProject.myReservation
--
DropStmt(object_type="RESERVATION", is_if_exists=TRUE, name_path=myProject.myReservation)

==

[supported_generic_entity_types=PROJECT]
[language_features=ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL]

ALTER PROJECT SET OPTIONS (foo='bar')
--
AlterEntityStmt
+-alter_action_list=
| +-SetOptionsAction
|   +-option_list=
|     +-foo := Literal(type=STRING, value='bar')
+-entity_type="PROJECT"

==

[supported_generic_entity_types=PROJECT]
[language_features=ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL]

ALTER PROJECT SET OPTIONS (foo='bar'), SET OPTIONS (baz='bat')
--
AlterEntityStmt
+-alter_action_list=
| +-SetOptionsAction
| | +-option_list=
| |   +-foo := Literal(type=STRING, value='bar')
| +-SetOptionsAction
|   +-option_list=
|     +-baz := Literal(type=STRING, value='bat')
+-entity_type="PROJECT"

==

[supported_generic_entity_types=PROJECT]
[language_features=ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL]

ALTER PROJECT SET AS JSON '{}'
--
AlterEntityStmt
+-alter_action_list=
| +-SetAsAction(entity_body_json="{}")
+-entity_type="PROJECT"

==

# ALTER ENTITY grammar paths that can parse but not analyze successfully without
# a path expression.
#
# Not exhaustive since language options influence parsability and analyzability.
[supported_generic_entity_types=PROJECT]
[language_features=ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL]

ALTER PROJECT {{ADD CHECK (true)|ADD PRIMARY KEY ()|ADD CONSTRAINT foo CHECK (true)|DROP CONSTRAINT foo|DROP PRIMARY KEY|ALTER CONSTRAINT foo ENFORCED|ALTER CONSTRAINT foo SET OPTIONS (foo='bar')|ADD COLUMN foo INTERVAL|DROP COLUMN foo|RENAME COLUMN foo TO bar|ALTER COLUMN foo SET DATA TYPE INTERVAL|ALTER COLUMN foo SET OPTIONS (foo='bar')|ALTER COLUMN foo SET DEFAULT true|ALTER COLUMN foo DROP DEFAULT|ALTER COLUMN foo DROP NOT NULL|RENAME TO foo|SET DEFAULT COLLATE "foo"}}
--
ALTERNATION GROUP: ADD CHECK (true)
--
ERROR: ALTER PROJECT statements must have a path expression between PROJECT and the first alter action. [at 1:1]
ALTER PROJECT ADD CHECK (true)
^
--
ALTERNATION GROUP: ADD PRIMARY KEY ()
--
ERROR: ALTER PROJECT statements must have a path expression between PROJECT and the first alter action. [at 1:1]
ALTER PROJECT ADD PRIMARY KEY ()
^
--
ALTERNATION GROUP: ADD CONSTRAINT foo CHECK (true)
--
ERROR: ALTER PROJECT statements must have a path expression between PROJECT and the first alter action. [at 1:1]
ALTER PROJECT ADD CONSTRAINT foo CHECK (true)
^
--
ALTERNATION GROUP: DROP CONSTRAINT foo
--
ERROR: ALTER PROJECT statements must have a path expression between PROJECT and the first alter action. [at 1:1]
ALTER PROJECT DROP CONSTRAINT foo
^
--
ALTERNATION GROUP: DROP PRIMARY KEY
--
ERROR: ALTER PROJECT statements must have a path expression between PROJECT and the first alter action. [at 1:1]
ALTER PROJECT DROP PRIMARY KEY
^
--
ALTERNATION GROUP: ALTER CONSTRAINT foo ENFORCED
--
ERROR: ALTER CONSTRAINT ENFORCED/NOT ENFORCED is not supported [at 1:15]
ALTER PROJECT ALTER CONSTRAINT foo ENFORCED
              ^
--
ALTERNATION GROUP: ALTER CONSTRAINT foo SET OPTIONS (foo='bar')
--
ERROR: ALTER CONSTRAINT SET OPTIONS is not supported [at 1:15]
ALTER PROJECT ALTER CONSTRAINT foo SET OPTIONS (foo='bar')
              ^
--
ALTERNATION GROUP: ADD COLUMN foo INTERVAL
--
ERROR: ALTER PROJECT does not support ADD COLUMN [at 1:15]
ALTER PROJECT ADD COLUMN foo INTERVAL
              ^
--
ALTERNATION GROUP: DROP COLUMN foo
--
ERROR: ALTER PROJECT does not support DROP COLUMN [at 1:15]
ALTER PROJECT DROP COLUMN foo
              ^
--
ALTERNATION GROUP: RENAME COLUMN foo TO bar
--
ERROR: ALTER PROJECT does not support RENAME COLUMN [at 1:15]
ALTER PROJECT RENAME COLUMN foo TO bar
              ^
--
ALTERNATION GROUP: ALTER COLUMN foo SET DATA TYPE INTERVAL
--
ERROR: ALTER PROJECT does not support ALTER COLUMN SET DATA TYPE [at 1:15]
ALTER PROJECT ALTER COLUMN foo SET DATA TYPE INTERVAL
              ^
--
ALTERNATION GROUP: ALTER COLUMN foo SET OPTIONS (foo='bar')
--
ERROR: ALTER PROJECT does not support ALTER COLUMN SET OPTIONS [at 1:15]
ALTER PROJECT ALTER COLUMN foo SET OPTIONS (foo='bar')
              ^
--
ALTERNATION GROUP: ALTER COLUMN foo SET DEFAULT true
--
ERROR: Column default value is not supported [at 1:15]
ALTER PROJECT ALTER COLUMN foo SET DEFAULT true
              ^
--
ALTERNATION GROUP: ALTER COLUMN foo DROP DEFAULT
--
ERROR: Column default value is not supported [at 1:15]
ALTER PROJECT ALTER COLUMN foo DROP DEFAULT
              ^
--
ALTERNATION GROUP: ALTER COLUMN foo DROP NOT NULL
--
ERROR: ALTER PROJECT does not support ALTER COLUMN DROP NOT NULL [at 1:15]
ALTER PROJECT ALTER COLUMN foo DROP NOT NULL
              ^
--
ALTERNATION GROUP: RENAME TO foo
--
ERROR: ALTER PROJECT does not support RENAME TO [at 1:15]
ALTER PROJECT RENAME TO foo
              ^
--
ALTERNATION GROUP: SET DEFAULT COLLATE "foo"
--
ERROR: ALTER PROJECT does not support SET DEFAULT COLLATE [at 1:15]
ALTER PROJECT SET DEFAULT COLLATE "foo"
              ^
==

ALTER SCHEMA schema_name
ADD REPLICA {{IF NOT EXISTS|}} replica_name
{{OPTIONS (a=b)|}}
--
ALTERNATION GROUP: IF NOT EXISTS,OPTIONS (a=b)
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AddSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_name'
    +-options_list=
    | +-a := Literal(type=STRING, value='b')
    +-is_if_not_exists=TRUE
--
ALTERNATION GROUP: IF NOT EXISTS,
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AddSubEntityAction(entity_type="REPLICA", name="replica_name", is_if_not_exists=TRUE)
--
ALTERNATION GROUP: OPTIONS (a=b)
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AddSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_name'
    +-options_list=
      +-a := Literal(type=STRING, value='b')
--
ALTERNATION GROUP: <empty>
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AddSubEntityAction(entity_type="REPLICA", name="replica_name")
==

# Multiple nested ADD actions.
ALTER SCHEMA schema_name
ADD REPLICA replica_name1 OPTIONS (a=b),
ADD REPLICA replica_name2 OPTIONS (c=d)
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AddSubEntityAction
  | +-entity_type="REPLICA"
  | +-name='replica_name1'
  | +-options_list=
  |   +-a := Literal(type=STRING, value='b')
  +-AddSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_name2'
    +-options_list=
      +-c := Literal(type=STRING, value='d')
==

ALTER SCHEMA schema_name
DROP REPLICA {{IF EXISTS|}} replica_name
--
ALTERNATION GROUP: IF EXISTS
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-DropSubEntityAction(entity_type="REPLICA", name="replica_name", is_if_exists=TRUE)
--
ALTERNATION GROUP: <empty>
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-DropSubEntityAction(entity_type="REPLICA", name="replica_name")
==

# Multiple nested DROP actions.
ALTER SCHEMA schema_name
DROP REPLICA replica_name1,
DROP REPLICA replica_name2
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-DropSubEntityAction(entity_type="REPLICA", name="replica_name1")
  +-DropSubEntityAction(entity_type="REPLICA", name="replica_name2")
==

ALTER SCHEMA schema_name
ALTER REPLICA {{IF EXISTS|}} replica_name
SET OPTIONS (a=b)
--
ALTERNATION GROUP: IF EXISTS
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AlterSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_name'
    +-alter_action=
    | +-SetOptionsAction
    |   +-option_list=
    |     +-a := Literal(type=STRING, value='b')
    +-is_if_exists=TRUE
--
ALTERNATION GROUP: <empty>
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AlterSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_name'
    +-alter_action=
      +-SetOptionsAction
        +-option_list=
          +-a := Literal(type=STRING, value='b')
==

# Multiple nested ALTER actions.
ALTER SCHEMA schema_name
ALTER REPLICA replica_name1 SET OPTIONS (a=b),
ALTER REPLICA replica_name2 SET OPTIONS (c=d)
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AlterSubEntityAction
  | +-entity_type="REPLICA"
  | +-name='replica_name1'
  | +-alter_action=
  |   +-SetOptionsAction
  |     +-option_list=
  |       +-a := Literal(type=STRING, value='b')
  +-AlterSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_name2'
    +-alter_action=
      +-SetOptionsAction
        +-option_list=
          +-c := Literal(type=STRING, value='d')
==

# Multiple doubly nested ADD actions. Since sub_entity alter statements
# only support one action (either SET OPTIONS or ADD/ALTER/DROP of a child),
# doubly nested actions need to be qualified from the root.
ALTER SCHEMA schema_name
ALTER REPLICA replica_name1 ADD CHILD_OF_REPLICA child_1 OPTIONS (a=b),
ALTER REPLICA replica_name1 ADD CHILD_OF_REPLICA child_2 OPTIONS (c=d)
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AlterSubEntityAction
  | +-entity_type="REPLICA"
  | +-name='replica_name1'
  | +-alter_action=
  |   +-AddSubEntityAction
  |     +-entity_type="CHILD_OF_REPLICA"
  |     +-name='child_1'
  |     +-options_list=
  |       +-a := Literal(type=STRING, value='b')
  +-AlterSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_name1'
    +-alter_action=
      +-AddSubEntityAction
        +-entity_type="CHILD_OF_REPLICA"
        +-name='child_2'
        +-options_list=
          +-c := Literal(type=STRING, value='d')
==

ALTER SCHEMA schema_name
ALTER REPLICA replica_name
ALTER CHILD_OF_REPLICA replica_child_name
SET OPTIONS (a=b)
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AlterSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_name'
    +-alter_action=
      +-AlterSubEntityAction
        +-entity_type="CHILD_OF_REPLICA"
        +-name='replica_child_name'
        +-alter_action=
          +-SetOptionsAction
            +-option_list=
              +-a := Literal(type=STRING, value='b')
==

ALTER SCHEMA schema_name
ALTER REPLICA replica_name ALTER CHILD_OF_REPLICA replica_child_name SET OPTIONS (a=b),
ALTER REPLICA replica_name2 ALTER CHILD_OF_REPLICA replica_child_name2 SET OPTIONS (c=d)
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AlterSubEntityAction
  | +-entity_type="REPLICA"
  | +-name='replica_name'
  | +-alter_action=
  |   +-AlterSubEntityAction
  |     +-entity_type="CHILD_OF_REPLICA"
  |     +-name='replica_child_name'
  |     +-alter_action=
  |       +-SetOptionsAction
  |         +-option_list=
  |           +-a := Literal(type=STRING, value='b')
  +-AlterSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_name2'
    +-alter_action=
      +-AlterSubEntityAction
        +-entity_type="CHILD_OF_REPLICA"
        +-name='replica_child_name2'
        +-alter_action=
          +-SetOptionsAction
            +-option_list=
              +-c := Literal(type=STRING, value='d')
==

# ADD inside doubly nested ALTER sub-entity.
ALTER SCHEMA schema_name
ALTER REPLICA replica_name
ALTER CHILD_OF_REPLICA child_name
ADD GRANDCHILD_OF_REPLICA grandchild_name
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AlterSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_name'
    +-alter_action=
      +-AlterSubEntityAction
        +-entity_type="CHILD_OF_REPLICA"
        +-name='child_name'
        +-alter_action=
          +-AddSubEntityAction(entity_type="GRANDCHILD_OF_REPLICA", name="grandchild_name")
==

# DROP inside doubly nested ALTER sub-entity.
ALTER SCHEMA schema_name
ALTER REPLICA replica_name
ALTER CHILD_OF_REPLICA child_name
DROP GRANDCHILD_OF_REPLICA grandchild_name
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AlterSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_name'
    +-alter_action=
      +-AlterSubEntityAction
        +-entity_type="CHILD_OF_REPLICA"
        +-name='child_name'
        +-alter_action=
          +-DropSubEntityAction(entity_type="GRANDCHILD_OF_REPLICA", name="grandchild_name")
==

# Repeated ADD Grandchild actions.
ALTER SCHEMA schema_name
ALTER REPLICA replica_1 ALTER CHILD_OF_REPLICA replica_child_1 ADD GRANDCHILD_OF_REPLICA grandchild_name_1,
ALTER REPLICA replica_2 ALTER CHILD_OF_REPLICA replica_child_2 ADD GRANDCHILD_OF_REPLICA grandchild_name_2 OPTIONS (a=b)
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AlterSubEntityAction
  | +-entity_type="REPLICA"
  | +-name='replica_1'
  | +-alter_action=
  |   +-AlterSubEntityAction
  |     +-entity_type="CHILD_OF_REPLICA"
  |     +-name='replica_child_1'
  |     +-alter_action=
  |       +-AddSubEntityAction(entity_type="GRANDCHILD_OF_REPLICA", name="grandchild_name_1")
  +-AlterSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_2'
    +-alter_action=
      +-AlterSubEntityAction
        +-entity_type="CHILD_OF_REPLICA"
        +-name='replica_child_2'
        +-alter_action=
          +-AddSubEntityAction
            +-entity_type="GRANDCHILD_OF_REPLICA"
            +-name='grandchild_name_2'
            +-options_list=
              +-a := Literal(type=STRING, value='b')
==

# Repeated DROP Grandchild actions.
ALTER SCHEMA schema_name
ALTER REPLICA replica_1 ALTER CHILD_OF_REPLICA replica_child_1 DROP GRANDCHILD_OF_REPLICA grandchild_name_1,
ALTER REPLICA replica_2 ALTER CHILD_OF_REPLICA replica_child_2 DROP GRANDCHILD_OF_REPLICA grandchild_name_2
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AlterSubEntityAction
  | +-entity_type="REPLICA"
  | +-name='replica_1'
  | +-alter_action=
  |   +-AlterSubEntityAction
  |     +-entity_type="CHILD_OF_REPLICA"
  |     +-name='replica_child_1'
  |     +-alter_action=
  |       +-DropSubEntityAction(entity_type="GRANDCHILD_OF_REPLICA", name="grandchild_name_1")
  +-AlterSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_2'
    +-alter_action=
      +-AlterSubEntityAction
        +-entity_type="CHILD_OF_REPLICA"
        +-name='replica_child_2'
        +-alter_action=
          +-DropSubEntityAction(entity_type="GRANDCHILD_OF_REPLICA", name="grandchild_name_2")
==

# Multiple actions at multiple levels of nesting
ALTER SCHEMA schema_name
ALTER REPLICA replica_1 SET OPTIONS (a=b),
ALTER REPLICA replica_2 ADD CHILD_OF_REPLICA replica_child_2,
ALTER REPLICA replica_3 ALTER CHILD_OF_REPLICA replica_child_3 DROP GRANDCHILD_OF_REPLICA grandchild_name_3
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AlterSubEntityAction
  | +-entity_type="REPLICA"
  | +-name='replica_1'
  | +-alter_action=
  |   +-SetOptionsAction
  |     +-option_list=
  |       +-a := Literal(type=STRING, value='b')
  +-AlterSubEntityAction
  | +-entity_type="REPLICA"
  | +-name='replica_2'
  | +-alter_action=
  |   +-AddSubEntityAction(entity_type="CHILD_OF_REPLICA", name="replica_child_2")
  +-AlterSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_3'
    +-alter_action=
      +-AlterSubEntityAction
        +-entity_type="CHILD_OF_REPLICA"
        +-name='replica_child_3'
        +-alter_action=
          +-DropSubEntityAction(entity_type="GRANDCHILD_OF_REPLICA", name="grandchild_name_3")
==

ALTER SCHEMA schema_name
ADD REPLICA replica_name OPTIONS (a=b)
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-AddSubEntityAction
    +-entity_type="REPLICA"
    +-name='replica_name'
    +-options_list=
      +-a := Literal(type=STRING, value='b')
==

ALTER SCHEMA schema_name
DROP REPLICA replica_name
--
AlterSchemaStmt
+-name_path=schema_name
+-alter_action_list=
  +-DropSubEntityAction(entity_type="REPLICA", name="replica_name")
==

# When only SET OPTIONS alter actions are present, options are combined to a
# single SetOptionsAction (from alter_table_set_options.test).
ALTER TABLE KeyValue
SET OPTIONS (a = 1),
SET OPTIONS (b = 2)
--
AlterTableSetOptionsStmt
+-name_path=KeyValue
+-option_list=
  +-a := Literal(type=INT64, value=1)
  +-b := Literal(type=INT64, value=2)
==

# When actions other than SET OPTIONS alter actions are present, options are
# not combined (from alter_table_set_options.test).
ALTER TABLE KeyValue
ADD COLUMN bar STRING,
SET OPTIONS (a = 1),
SET OPTIONS (b = 2)
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-AddColumnAction
  | +-is_if_not_exists=FALSE
  | +-column_definition=
  |   +-ColumnDefinition(name='bar', type=STRING, column=KeyValue.bar#1)
  +-SetOptionsAction
  | +-option_list=
  |   +-a := Literal(type=INT64, value=1)
  +-SetOptionsAction
    +-option_list=
      +-b := Literal(type=INT64, value=2)
==

# When a nested alter action is present, the options are not combined.
ALTER TABLE a.T
ALTER REPLICA r SET OPTIONS(c='a'),
SET OPTIONS (a = 1),
SET OPTIONS (b = 2)
--
AlterTableStmt
+-name_path=a.T
+-alter_action_list=
  +-AlterSubEntityAction
  | +-entity_type="REPLICA"
  | +-name='r'
  | +-alter_action=
  |   +-SetOptionsAction
  |     +-option_list=
  |       +-c := Literal(type=STRING, value='a')
  +-SetOptionsAction
  | +-option_list=
  |   +-a := Literal(type=INT64, value=1)
  +-SetOptionsAction
    +-option_list=
      +-b := Literal(type=INT64, value=2)
