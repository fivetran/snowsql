# Nested DELETE.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable SET
  KitchenSink.int32_val = 1,
  (DELETE KitchenSink.repeated_int64_val
   WHERE repeated_int64_val = 1
   ASSERT_ROWS_MODIFIED 1)
WHERE true
ASSERT_ROWS_MODIFIED 1
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Literal(type=INT64, value=1)
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
  | +-target=
  | | +-GetProtoField
  | |   +-type=INT32
  | |   +-expr=
  | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
  | |   +-field_descriptor=int32_val
  | |   +-default_value=77
  | +-set_value=
  |   +-DMLValue
  |     +-value=
  |       +-Literal(type=INT32, value=1)
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int64_val#4)
    +-delete_list=
      +-DeleteStmt
        +-assert_rows_modified=
        | +-AssertRowsModified
        |   +-rows=
        |     +-Literal(type=INT64, value=1)
        +-where_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
            +-Literal(type=INT64, value=1)
==

# Nested DELETE with an alias.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable SET
  KitchenSink.int32_val = 1,
  (DELETE KitchenSink.repeated_int64_val elt
   WHERE elt = 1)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
  | +-target=
  | | +-GetProtoField
  | |   +-type=INT32
  | |   +-expr=
  | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
  | |   +-field_descriptor=int32_val
  | |   +-default_value=77
  | +-set_value=
  |   +-DMLValue
  |     +-value=
  |       +-Literal(type=INT32, value=1)
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.elt#4)
    +-delete_list=
      +-DeleteStmt
        +-where_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array.elt#4)
            +-Literal(type=INT64, value=1)
==

# Nested DELETE on an extension field.
[language_features={{|V_1_2_PROTO_EXTENSIONS_WITH_SET}}]
UPDATE TestTable SET
  (DELETE KitchenSink.(zetasql_test__.KitchenSinkExtension.repeated_extension)
   WHERE true)
WHERE true
--
ALTERNATION GROUP: <empty>
--
ERROR: UPDATE ... SET does not support proto extensions [at 2:24]
  (DELETE KitchenSink.(zetasql_test__.KitchenSinkExtension.repeated_extension)
                       ^
--
ALTERNATION GROUP: V_1_2_PROTO_EXTENSIONS_WITH_SET
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkExtension>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=[zetasql_test__.KitchenSinkExtension.repeated_extension]
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.$element#4)
    +-delete_list=
      +-DeleteStmt
        +-where_expr=
          +-Literal(type=BOOL, value=true)
==

# Nested DELETE on a subfield of an extension field.
[language_features=V_1_2_PROTO_EXTENSIONS_WITH_SET]
UPDATE TestTable SET
  (DELETE KitchenSink
          .(zetasql_test__.KitchenSinkExtension.optional_extension)
          .repeated_value
   WHERE true)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<STRING>
    |   +-expr=
    |   | +-GetProtoField
    |   |   +-type=PROTO<zetasql_test__.KitchenSinkExtension>
    |   |   +-expr=
    |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   |   +-field_descriptor=[zetasql_test__.KitchenSinkExtension.optional_extension]
    |   |   +-default_value=NULL
    |   +-field_descriptor=repeated_value
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_value#4)
    +-delete_list=
      +-DeleteStmt
        +-where_expr=
          +-Literal(type=BOOL, value=true)
==

# Nested DELETE on an extension field with an alias.
[language_features=V_1_2_PROTO_EXTENSIONS_WITH_SET]
UPDATE TestTable SET
  (DELETE
   KitchenSink.(zetasql_test__.KitchenSinkExtension.repeated_extension) elt
   WHERE elt.value = "foo")
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkExtension>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=[zetasql_test__.KitchenSinkExtension.repeated_extension]
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.elt#4)
    +-delete_list=
      +-DeleteStmt
        +-where_expr=
          +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            +-GetProtoField
            | +-type=STRING
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkExtension>, column=$array.elt#4)
            | +-field_descriptor=value
            | +-default_value=""
            +-Literal(type=STRING, value="foo")
==

# Nested DELETE inside an array element.
[language_features={{|V_1_2_ARRAY_ELEMENTS_WITH_SET}}]
UPDATE TestTable SET
  (DELETE
   KitchenSink.nested_repeated_value[DEFAULT_OFFSET(0)].nested_repeated_int64
   WHERE nested_repeated_int64 < 10)
WHERE true
--
ERROR: The target of a nested DML statement cannot reference an array element [at 3:38]
   KitchenSink.nested_repeated_value[DEFAULT_OFFSET(0)].nested_repeated_int64
                                     ^
==

# Nested DELETE with an offset_idx.
[language_features={{|V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET}}]
UPDATE TestTable SET
  (DELETE KitchenSink.repeated_int64_val WITH OFFSET{{| offset_idx}}
   WHERE offset_idx = 5)
WHERE true
--
ALTERNATION GROUP: <empty>
--
ERROR: DELETE does not support WITH OFFSET [at 2:42]
  (DELETE KitchenSink.repeated_int64_val WITH OFFSET
                                         ^
--
ALTERNATION GROUP:  offset_idx
--
ERROR: DELETE does not support WITH OFFSET [at 2:42]
  (DELETE KitchenSink.repeated_int64_val WITH OFFSET offset_idx
                                         ^
--
ALTERNATION GROUPS:
    V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET,
    V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET, offset_idx
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int64_val#4)
    +-delete_list=
      +-DeleteStmt
        +-array_offset_column=
        | +-ColumnHolder(column=$array.offset_idx#5)
        +-where_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array.offset_idx#5)
            +-Literal(type=INT64, value=5)
==

# Nested DELETE with an offset other than "offset".
[language_features=V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET]
UPDATE TestTable SET
  (DELETE KitchenSink.repeated_int64_val WITH OFFSET foo
   WHERE foo = 5)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int64_val#4)
    +-delete_list=
      +-DeleteStmt
        +-array_offset_column=
        | +-ColumnHolder(column=$array.foo#5)
        +-where_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$array.foo#5)
            +-Literal(type=INT64, value=5)
==

# Nested DELETE with default offset conflicting with the target alias.
[language_features=V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET]
UPDATE TestTable SET
  (DELETE KitchenSink.repeated_int64_val offset_idx WITH OFFSET
   WHERE offset_idx = 5)
WHERE true
--
ERROR: Duplicate OFFSET alias offset_idx in nested DELETE [at 2:53]
  (DELETE KitchenSink.repeated_int64_val offset_idx WITH OFFSET
                                                    ^
==

# Nested DELETE with non-default offset conflicting with the target alias.
[language_features=V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET]
UPDATE TestTable SET
  (DELETE KitchenSink.repeated_int64_val foo WITH OFFSET foo
   WHERE foo = 5)
WHERE true
--
ERROR: Duplicate OFFSET alias foo in nested DELETE [at 2:58]
  (DELETE KitchenSink.repeated_int64_val foo WITH OFFSET foo
                                                         ^
==

# Nested DELETE that reuses the target/offset aliases of an enclosing nested
# UPDATE.
[language_features=V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET]
UPDATE TestTable target SET
  (UPDATE KitchenSink.nested_repeated_value target WITH OFFSET SET
     (DELETE target.nested_repeated_int64 target WITH OFFSET
      WHERE offset_idx = target + offset_idx)
   WHERE offset_idx = target.nested_int64 + offset_idx)
WHERE target.KitchenSink.bool_val
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="target")
+-column_access_list=READ_WRITE
+-where_expr=
| +-GetProtoField
|   +-type=BOOL
|   +-expr=
|   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
|   +-field_descriptor=bool_val
|   +-default_value=false
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=nested_repeated_value
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.target#4)
    +-update_list=
      +-UpdateStmt
        +-array_offset_column=
        | +-ColumnHolder(column=$array.offset_idx#5)
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=$array.offset_idx#5)
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-GetProtoField
        |     | +-type=INT64
        |     | +-expr=
        |     | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.target#4)
        |     | +-field_descriptor=nested_int64
        |     | +-default_value=88
        |     +-ColumnRef(type=INT64, column=$array.offset_idx#5)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=ARRAY<INT64>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.target#4)
            |   +-field_descriptor=nested_repeated_int64
            |   +-default_value=[]
            +-element_column=
            | +-ColumnHolder(column=$array.target#6)
            +-delete_list=
              +-DeleteStmt
                +-array_offset_column=
                | +-ColumnHolder(column=$array.offset_idx#7)
                +-where_expr=
                  +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                    +-ColumnRef(type=INT64, column=$array.offset_idx#7)
                    +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$array.target#6)
                      +-ColumnRef(type=INT64, column=$array.offset_idx#7)
==

# Nested DELETE that reuses the target/offset aliases of an enclosing nested
# UPDATE, this time with the offsets having different names.
[language_features={{|V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET,V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable SET
  (UPDATE KitchenSink.nested_repeated_value target1 WITH OFFSET offset1 SET
     (DELETE target1.nested_repeated_int64 target2 WITH OFFSET offset2
      WHERE offset2 = target1.nested_int64 + target2 + offset1 + offset2)
   WHERE offset1 = target1.nested_int64 + offset1)
WHERE KitchenSink.bool_val
--
ALTERNATION GROUP: <empty>
--
ERROR: UPDATE ... SET does not support WITH OFFSET [at 2:53]
  (UPDATE KitchenSink.nested_repeated_value target1 WITH OFFSET offset1 SET
                                                    ^
--
ALTERNATION GROUP: V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET,V_1_2_CORRELATED_REFS_IN_NESTED_DML
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-GetProtoField
|   +-type=BOOL
|   +-expr=
|   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
|   +-field_descriptor=bool_val
|   +-default_value=false
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=nested_repeated_value
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.target1#4)
    +-update_list=
      +-UpdateStmt
        +-array_offset_column=
        | +-ColumnHolder(column=$array.offset1#5)
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=$array.offset1#5)
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-GetProtoField
        |     | +-type=INT64
        |     | +-expr=
        |     | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.target1#4)
        |     | +-field_descriptor=nested_int64
        |     | +-default_value=88
        |     +-ColumnRef(type=INT64, column=$array.offset1#5)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=ARRAY<INT64>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.target1#4)
            |   +-field_descriptor=nested_repeated_int64
            |   +-default_value=[]
            +-element_column=
            | +-ColumnHolder(column=$array.target2#6)
            +-delete_list=
              +-DeleteStmt
                +-array_offset_column=
                | +-ColumnHolder(column=$array.offset2#7)
                +-where_expr=
                  +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                    +-ColumnRef(type=INT64, column=$array.offset2#7)
                    +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                      +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                      | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                      | | +-GetProtoField
                      | | | +-type=INT64
                      | | | +-expr=
                      | | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.target1#4)
                      | | | +-field_descriptor=nested_int64
                      | | | +-default_value=88
                      | | +-ColumnRef(type=INT64, column=$array.target2#6)
                      | +-ColumnRef(type=INT64, column=$array.offset1#5)
                      +-ColumnRef(type=INT64, column=$array.offset2#7)
==

UPDATE TestTable SET
  (DELETE KitchenSink.repeated_int64_val)
WHERE true
--
ERROR: DELETE must have a WHERE clause [at 2:4]
  (DELETE KitchenSink.repeated_int64_val)
   ^
==

# Nested UPDATE.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable SET
  KitchenSink.int32_val = 1,
  (UPDATE KitchenSink.repeated_int64_val SET
   repeated_int64_val = 1
   WHERE repeated_int64_val > 5
   ASSERT_ROWS_MODIFIED 1)
WHERE true
ASSERT_ROWS_MODIFIED 1
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Literal(type=INT64, value=1)
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
  | +-target=
  | | +-GetProtoField
  | |   +-type=INT32
  | |   +-expr=
  | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
  | |   +-field_descriptor=int32_val
  | |   +-default_value=77
  | +-set_value=
  |   +-DMLValue
  |     +-value=
  |       +-Literal(type=INT32, value=1)
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int64_val#4)
    +-update_list=
      +-UpdateStmt
        +-assert_rows_modified=
        | +-AssertRowsModified
        |   +-rows=
        |     +-Literal(type=INT64, value=1)
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
        |   +-Literal(type=INT64, value=5)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=INT64, value=1)
==

# Nested UPDATE with an alias.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val elt SET
   elt = 1 WHERE elt > 5)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.elt#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=$array.elt#4)
        |   +-Literal(type=INT64, value=5)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT64, column=$array.elt#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=INT64, value=1)
==

# Nested UPDATE on an extension field.
[language_features={{|V_1_2_PROTO_EXTENSIONS_WITH_SET}}]
UPDATE TestTable SET
  (UPDATE
   KitchenSink.(zetasql_test__.KitchenSinkExtension.repeated_extension)
   SET value = "foo"
   WHERE true)
WHERE true
--
ALTERNATION GROUP: <empty>
--
ERROR: UPDATE ... SET does not support proto extensions [at 3:17]
   KitchenSink.(zetasql_test__.KitchenSinkExtension.repeated_extension)
                ^
--
ALTERNATION GROUP: V_1_2_PROTO_EXTENSIONS_WITH_SET
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkExtension>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=[zetasql_test__.KitchenSinkExtension.repeated_extension]
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.$element#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=STRING
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkExtension>, column=$array.$element#4)
            |   +-field_descriptor=value
            |   +-default_value=""
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=STRING, value="foo")
==

# Nested UPDATE on a subfield of an extension field.
[language_features=V_1_2_PROTO_EXTENSIONS_WITH_SET]
UPDATE TestTable SET
  (UPDATE KitchenSink
          .(zetasql_test__.KitchenSinkExtension.optional_extension)
          .repeated_value
   SET repeated_value = "foo"
   WHERE true)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<STRING>
    |   +-expr=
    |   | +-GetProtoField
    |   |   +-type=PROTO<zetasql_test__.KitchenSinkExtension>
    |   |   +-expr=
    |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   |   +-field_descriptor=[zetasql_test__.KitchenSinkExtension.optional_extension]
    |   |   +-default_value=NULL
    |   +-field_descriptor=repeated_value
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_value#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=STRING, column=$array.repeated_value#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=STRING, value="foo")
==

# Nested UPDATE on an extension field with an alias.
[language_features=V_1_2_PROTO_EXTENSIONS_WITH_SET]
UPDATE TestTable SET
  (UPDATE
   KitchenSink.(zetasql_test__.KitchenSinkExtension.repeated_extension) elt
   SET elt = ""
   WHERE true)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkExtension>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=[zetasql_test__.KitchenSinkExtension.repeated_extension]
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.elt#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkExtension>, column=$array.elt#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=PROTO<zetasql_test__.KitchenSinkExtension>, value={})
==

# Nested UPDATE inside an array element.
[language_features={{|V_1_2_ARRAY_ELEMENTS_WITH_SET}}]
UPDATE TestTable SET
  (UPDATE
   KitchenSink.nested_repeated_value[DEFAULT_OFFSET(0)].nested_repeated_int64
   SET nested_repeated_int64 = 5
   WHERE nested_repeated_int64 > 10)
WHERE true
--
ERROR: The target of a nested DML statement cannot reference an array element [at 3:38]
   KitchenSink.nested_repeated_value[DEFAULT_OFFSET(0)].nested_repeated_int64
                                     ^
==

# Nested UPDATE with an offset.
[language_features={{|V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET|V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET,V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val WITH OFFSET{{| offset_idx}}
   SET repeated_int64_val = 0
   WHERE offset_idx = 5)
  WHERE true
--
ALTERNATION GROUP: <empty>
--
ERROR: UPDATE ... SET does not support WITH OFFSET [at 2:42]
  (UPDATE KitchenSink.repeated_int64_val WITH OFFSET
                                         ^
--
ALTERNATION GROUP:  offset_idx
--
ERROR: UPDATE ... SET does not support WITH OFFSET [at 2:42]
  (UPDATE KitchenSink.repeated_int64_val WITH OFFSET offset_idx
                                         ^
--
ALTERNATION GROUPS:
    V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET,
    V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET, offset_idx
    V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET,V_1_2_CORRELATED_REFS_IN_NESTED_DML,
    V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET,V_1_2_CORRELATED_REFS_IN_NESTED_DML, offset_idx
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int64_val#4)
    +-update_list=
      +-UpdateStmt
        +-array_offset_column=
        | +-ColumnHolder(column=$array.offset_idx#5)
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=$array.offset_idx#5)
        |   +-Literal(type=INT64, value=5)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=INT64, value=0)
==

# Nested UPDATE with an offset other than "offset".
[language_features={{V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET|V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET,V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val WITH OFFSET foo
   SET repeated_int64_val = 0
   WHERE foo = 5)
  WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int64_val#4)
    +-update_list=
      +-UpdateStmt
        +-array_offset_column=
        | +-ColumnHolder(column=$array.foo#5)
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=$array.foo#5)
        |   +-Literal(type=INT64, value=5)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=INT64, value=0)
==

# Nested UPDATE with an offset with a complex right hand side in the SET.
[language_features={{V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET|V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET,V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val WITH OFFSET
   SET repeated_int64_val = repeated_int64_val + offset_idx + 1
   WHERE offset_idx = 5)
  WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int64_val#4)
    +-update_list=
      +-UpdateStmt
        +-array_offset_column=
        | +-ColumnHolder(column=$array.offset_idx#5)
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=$array.offset_idx#5)
        |   +-Literal(type=INT64, value=5)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                    +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                    | +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
                    | +-ColumnRef(type=INT64, column=$array.offset_idx#5)
                    +-Literal(type=INT64, value=1)
==

# Nested UPDATE that attempts to write to the offset.
[language_features={{V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET|V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET,V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val WITH OFFSET{{| offset_idx}}
   SET offset_idx = 0
   WHERE true)
WHERE true
--
ERROR: Unrecognized name: offset_idx [at 3:8]
   SET offset_idx = 0
       ^
==

# Nested UPDATE with default offset conflicting with the target alias.
[language_features={{V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET|V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET,V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val offset_idx WITH OFFSET
   SET offset_idx = offset_idx + 1
   WHERE offset_idx = 0)
WHERE true
--
ERROR: Duplicate OFFSET alias offset_idx in nested UPDATE [at 2:53]
  (UPDATE KitchenSink.repeated_int64_val offset_idx WITH OFFSET
                                                    ^
==

# Nested UPDATE with non-default offset conflicting with the target alias.
[language_features={{V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET|V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET,V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val foo WITH OFFSET foo
   SET foo = foo + 1
   WHERE foo = 0)
WHERE true
--
ERROR: Duplicate OFFSET alias foo in nested UPDATE [at 2:58]
  (UPDATE KitchenSink.repeated_int64_val foo WITH OFFSET foo
                                                         ^
==

# Nested UPDATE that reuses the target/offset aliases of an enclosing nested
# UPDATE.
[language_features={{V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET|V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET,V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable target SET
  (UPDATE KitchenSink.nested_repeated_value target WITH OFFSET SET
     (UPDATE target.nested_repeated_int64 target WITH OFFSET
      SET target = target + offset_idx
      WHERE offset_idx = target + offset_idx)
   WHERE offset_idx = target.nested_int64 + offset_idx)
WHERE target.KitchenSink.bool_val
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="target")
+-column_access_list=READ_WRITE
+-where_expr=
| +-GetProtoField
|   +-type=BOOL
|   +-expr=
|   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
|   +-field_descriptor=bool_val
|   +-default_value=false
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=nested_repeated_value
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.target#4)
    +-update_list=
      +-UpdateStmt
        +-array_offset_column=
        | +-ColumnHolder(column=$array.offset_idx#5)
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=$array.offset_idx#5)
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-GetProtoField
        |     | +-type=INT64
        |     | +-expr=
        |     | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.target#4)
        |     | +-field_descriptor=nested_int64
        |     | +-default_value=88
        |     +-ColumnRef(type=INT64, column=$array.offset_idx#5)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=ARRAY<INT64>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.target#4)
            |   +-field_descriptor=nested_repeated_int64
            |   +-default_value=[]
            +-element_column=
            | +-ColumnHolder(column=$array.target#6)
            +-update_list=
              +-UpdateStmt
                +-array_offset_column=
                | +-ColumnHolder(column=$array.offset_idx#7)
                +-where_expr=
                | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                |   +-ColumnRef(type=INT64, column=$array.offset_idx#7)
                |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                |     +-ColumnRef(type=INT64, column=$array.target#6)
                |     +-ColumnRef(type=INT64, column=$array.offset_idx#7)
                +-update_item_list=
                  +-UpdateItem
                    +-target=
                    | +-ColumnRef(type=INT64, column=$array.target#6)
                    +-set_value=
                      +-DMLValue
                        +-value=
                          +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                            +-ColumnRef(type=INT64, column=$array.target#6)
                            +-ColumnRef(type=INT64, column=$array.offset_idx#7)
==

UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val SET repeated_int64_val = 1)
WHERE true
--
ERROR: UPDATE must have a WHERE clause [at 2:4]
  (UPDATE KitchenSink.repeated_int64_val SET repeated_int64_val = 1)
   ^
==

# Nested INSERT.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable SET
  KitchenSink.int32_val = 1,
  (INSERT {{|OR REPLACE|OR IGNORE|OR UPDATE}} KitchenSink.repeated_int64_val
   VALUES (1), (1 + 2), ((select 1))
   ASSERT_ROWS_MODIFIED 1)
WHERE true
ASSERT_ROWS_MODIFIED 1
--
ALTERNATION GROUPS:
    <empty>
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Literal(type=INT64, value=1)
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
  | +-target=
  | | +-GetProtoField
  | |   +-type=INT32
  | |   +-expr=
  | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
  | |   +-field_descriptor=int32_val
  | |   +-default_value=77
  | +-set_value=
  |   +-DMLValue
  |     +-value=
  |       +-Literal(type=INT32, value=1)
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int64_val#4)
    +-insert_list=
      +-InsertStmt
        +-assert_rows_modified=
        | +-AssertRowsModified
        |   +-rows=
        |     +-Literal(type=INT64, value=1)
        +-row_list=
          +-InsertRow
          | +-value_list=
          |   +-DMLValue
          |     +-value=
          |       +-Literal(type=INT64, value=1)
          +-InsertRow
          | +-value_list=
          |   +-DMLValue
          |     +-value=
          |       +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
          |         +-Literal(type=INT64, value=1)
          |         +-Literal(type=INT64, value=2)
          +-InsertRow
            +-value_list=
              +-DMLValue
                +-value=
                  +-SubqueryExpr
                    +-type=INT64
                    +-subquery_type=SCALAR
                    +-subquery=
                      +-ProjectScan
                        +-column_list=[$expr_subquery.$col1#5]
                        +-expr_list=
                        | +-$col1#5 := Literal(type=INT64, value=1)
                        +-input_scan=
                          +-SingleRowScan
--
ALTERNATION GROUPS:
    OR REPLACE
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,OR REPLACE
--
ERROR: Nested INSERTs cannot have insert mode REPLACE [at 3:4]
  (INSERT OR REPLACE KitchenSink.repeated_int64_val
   ^
--
ALTERNATION GROUPS:
    OR IGNORE
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,OR IGNORE
--
ERROR: Nested INSERTs cannot have insert mode IGNORE [at 3:4]
  (INSERT OR IGNORE KitchenSink.repeated_int64_val
   ^
--
ALTERNATION GROUPS:
    OR UPDATE
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,OR UPDATE
--
ERROR: Nested INSERTs cannot have insert mode UPDATE [at 3:4]
  (INSERT OR UPDATE KitchenSink.repeated_int64_val
   ^
==

# Nested INSERT with query
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable SET
  KitchenSink.int32_val = 1,
  (INSERT {{|OR REPLACE|OR IGNORE|OR UPDATE}} KitchenSink.repeated_int64_val
   (SELECT KitchenSink.int64_val FROM TestTable)
   ASSERT_ROWS_MODIFIED 2)
WHERE true
ASSERT_ROWS_MODIFIED 1
--
ALTERNATION GROUPS:
    <empty>
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-assert_rows_modified=
| +-AssertRowsModified
|   +-rows=
|     +-Literal(type=INT64, value=1)
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
  | +-target=
  | | +-GetProtoField
  | |   +-type=INT32
  | |   +-expr=
  | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
  | |   +-field_descriptor=int32_val
  | |   +-default_value=77
  | +-set_value=
  |   +-DMLValue
  |     +-value=
  |       +-Literal(type=INT32, value=1)
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int64_val#4)
    +-insert_list=
      +-InsertStmt
        +-assert_rows_modified=
        | +-AssertRowsModified
        |   +-rows=
        |     +-Literal(type=INT64, value=2)
        +-query=
        | +-ProjectScan
        |   +-column_list=[$insert.int64_val#8]
        |   +-expr_list=
        |   | +-int64_val#8 :=
        |   |   +-GetProtoField
        |   |     +-type=INT64
        |   |     +-expr=
        |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#7)
        |   |     +-field_descriptor=int64_val
        |   |     +-default_value=0
        |   +-input_scan=
        |     +-TableScan(column_list=[TestTable.KitchenSink#7], table=TestTable, column_index_list=[2])
        +-query_output_column_list=[$insert.int64_val#8]
--
ALTERNATION GROUPS:
    OR REPLACE
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,OR REPLACE
--
ERROR: Nested INSERTs cannot have insert mode REPLACE [at 3:4]
  (INSERT OR REPLACE KitchenSink.repeated_int64_val
   ^
--
ALTERNATION GROUPS:
    OR IGNORE
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,OR IGNORE
--
ERROR: Nested INSERTs cannot have insert mode IGNORE [at 3:4]
  (INSERT OR IGNORE KitchenSink.repeated_int64_val
   ^
--
ALTERNATION GROUPS:
    OR UPDATE
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,OR UPDATE
--
ERROR: Nested INSERTs cannot have insert mode UPDATE [at 3:4]
  (INSERT OR UPDATE KitchenSink.repeated_int64_val
   ^
==

# Nested INSERT cannot have an alias.
UPDATE TestTable SET
  (INSERT KitchenSink.repeated_int64_val elt
   VALUES (1), (1 + 2), ((select 1)))
WHERE true
--
ERROR: Syntax error: INSERT target cannot have an alias [at 2:42]
  (INSERT KitchenSink.repeated_int64_val elt
                                         ^
==

# There is no alias for a nested INSERT.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable SET
  (INSERT KitchenSink.repeated_int64_val{{| repeated_int64_val}}
   VALUES (repeated_int64_val))
WHERE true
--
ALTERNATION GROUPS:
    <empty>
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,
--
ERROR: Unrecognized name: repeated_int64_val [at 3:12]
   VALUES (repeated_int64_val))
           ^
--
ALTERNATION GROUPS:
     repeated_int64_val
    V_1_2_CORRELATED_REFS_IN_NESTED_DML, repeated_int64_val
--
ERROR: Syntax error: INSERT target cannot have an alias [at 2:42]
  (INSERT KitchenSink.repeated_int64_val repeated_int64_val
                                         ^
==

# Nested INSERT on an extension field.
[language_features={{|V_1_2_PROTO_EXTENSIONS_WITH_SET}}]
UPDATE TestTable SET
  (INSERT KitchenSink.(zetasql_test__.KitchenSinkExtension.repeated_extension)
   VALUES (""))
WHERE true
--
ALTERNATION GROUP: <empty>
--
ERROR: UPDATE ... SET does not support proto extensions [at 2:24]
  (INSERT KitchenSink.(zetasql_test__.KitchenSinkExtension.repeated_extension)
                       ^
--
ALTERNATION GROUP: V_1_2_PROTO_EXTENSIONS_WITH_SET
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkExtension>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=[zetasql_test__.KitchenSinkExtension.repeated_extension]
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.$element#4)
    +-insert_list=
      +-InsertStmt
        +-row_list=
          +-InsertRow
            +-value_list=
              +-DMLValue
                +-value=
                  +-Literal(type=PROTO<zetasql_test__.KitchenSinkExtension>, value={})
==

# Nested INSERT on a subfield of an extension field.
[language_features=V_1_2_PROTO_EXTENSIONS_WITH_SET]
UPDATE TestTable SET
  (INSERT KitchenSink
          .(zetasql_test__.KitchenSinkExtension.optional_extension)
          .repeated_value
   VALUES ("foo"))
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<STRING>
    |   +-expr=
    |   | +-GetProtoField
    |   |   +-type=PROTO<zetasql_test__.KitchenSinkExtension>
    |   |   +-expr=
    |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   |   +-field_descriptor=[zetasql_test__.KitchenSinkExtension.optional_extension]
    |   |   +-default_value=NULL
    |   +-field_descriptor=repeated_value
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_value#4)
    +-insert_list=
      +-InsertStmt
        +-row_list=
          +-InsertRow
            +-value_list=
              +-DMLValue
                +-value=
                  +-Literal(type=STRING, value="foo")
==

# Nested INSERT inside an array element.
[language_features={{|V_1_2_ARRAY_ELEMENTS_WITH_SET}}]
UPDATE TestTable SET
  (INSERT
   KitchenSink.nested_repeated_value[DEFAULT_OFFSET(0)].nested_repeated_int64
   VALUES (5))
WHERE true
--
ERROR: The target of a nested DML statement cannot reference an array element [at 3:38]
   KitchenSink.nested_repeated_value[DEFAULT_OFFSET(0)].nested_repeated_int64
                                     ^
==

# Multiple nested statements.
UPDATE TestTable SET
  (DELETE KitchenSink.repeated_int64_val
   WHERE repeated_int64_val = 1),
  (INSERT KitchenSink.repeated_uint32_val VALUES (1)),
  (DELETE KitchenSink.repeated_int32_val WHERE true),
  (DELETE KitchenSink.repeated_int64_val
   WHERE repeated_int64_val = 2),
  (UPDATE KitchenSink.repeated_int64_val SET
     repeated_int64_val = 1
   WHERE repeated_int64_val > 5),
  (INSERT KitchenSink.repeated_int64_val
   VALUES (1)),
  (UPDATE KitchenSink.repeated_int32_val SET
     repeated_int32_val = DEFAULT
   WHERE true),
  (INSERT KitchenSink.repeated_int64_val
   select key from KeyValue),
  (INSERT KitchenSink.repeated_uint32_val VALUES
     (1), (2)),
  (DELETE KitchenSink.repeated_uint64_val WHERE true)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
  | +-target=
  | | +-GetProtoField
  | |   +-type=ARRAY<INT64>
  | |   +-expr=
  | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
  | |   +-field_descriptor=repeated_int64_val
  | |   +-default_value=[]
  | +-element_column=
  | | +-ColumnHolder(column=$array.repeated_int64_val#4)
  | +-delete_list=
  | | +-DeleteStmt
  | | | +-where_expr=
  | | |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
  | | |     +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
  | | |     +-Literal(type=INT64, value=1)
  | | +-DeleteStmt
  | |   +-where_expr=
  | |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
  | |       +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
  | |       +-Literal(type=INT64, value=2)
  | +-update_list=
  | | +-UpdateStmt
  | |   +-where_expr=
  | |   | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
  | |   |   +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
  | |   |   +-Literal(type=INT64, value=5)
  | |   +-update_item_list=
  | |     +-UpdateItem
  | |       +-target=
  | |       | +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
  | |       +-set_value=
  | |         +-DMLValue
  | |           +-value=
  | |             +-Literal(type=INT64, value=1)
  | +-insert_list=
  |   +-InsertStmt
  |   | +-row_list=
  |   |   +-InsertRow
  |   |     +-value_list=
  |   |       +-DMLValue
  |   |         +-value=
  |   |           +-Literal(type=INT64, value=1)
  |   +-InsertStmt
  |     +-query=
  |     | +-ProjectScan
  |     |   +-column_list=[KeyValue.Key#7]
  |     |   +-input_scan=
  |     |     +-TableScan(column_list=[KeyValue.Key#7], table=KeyValue, column_index_list=[0])
  |     +-query_output_column_list=[KeyValue.Key#7]
  +-UpdateItem
  | +-target=
  | | +-GetProtoField
  | |   +-type=ARRAY<UINT32>
  | |   +-expr=
  | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
  | |   +-field_descriptor=repeated_uint32_val
  | |   +-default_value=[]
  | +-element_column=
  | | +-ColumnHolder(column=$array.repeated_uint32_val#5)
  | +-insert_list=
  |   +-InsertStmt
  |   | +-row_list=
  |   |   +-InsertRow
  |   |     +-value_list=
  |   |       +-DMLValue
  |   |         +-value=
  |   |           +-Literal(type=UINT32, value=1)
  |   +-InsertStmt
  |     +-row_list=
  |       +-InsertRow
  |       | +-value_list=
  |       |   +-DMLValue
  |       |     +-value=
  |       |       +-Literal(type=UINT32, value=1)
  |       +-InsertRow
  |         +-value_list=
  |           +-DMLValue
  |             +-value=
  |               +-Literal(type=UINT32, value=2)
  +-UpdateItem
  | +-target=
  | | +-GetProtoField
  | |   +-type=ARRAY<INT32>
  | |   +-expr=
  | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
  | |   +-field_descriptor=repeated_int32_val
  | |   +-default_value=[]
  | +-element_column=
  | | +-ColumnHolder(column=$array.repeated_int32_val#6)
  | +-delete_list=
  | | +-DeleteStmt
  | |   +-where_expr=
  | |     +-Literal(type=BOOL, value=true)
  | +-update_list=
  |   +-UpdateStmt
  |     +-where_expr=
  |     | +-Literal(type=BOOL, value=true)
  |     +-update_item_list=
  |       +-UpdateItem
  |         +-target=
  |         | +-ColumnRef(type=INT32, column=$array.repeated_int32_val#6)
  |         +-set_value=
  |           +-DMLValue
  |             +-value=
  |               +-DMLDefault(type=INT32)
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<UINT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_uint64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_uint64_val#9)
    +-delete_list=
      +-DeleteStmt
        +-where_expr=
          +-Literal(type=BOOL, value=true)
==

# Multiple nested UPDATE statements with the same target.
UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val SET
     repeated_int64_val = NULL
   WHERE repeated_int64_val < 2),
  (UPDATE KitchenSink.repeated_int64_val SET
     repeated_int64_val = NULL
   WHERE repeated_int64_val >= 2)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int64_val#4)
    +-update_list=
      +-UpdateStmt
      | +-where_expr=
      | | +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
      | |   +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
      | |   +-Literal(type=INT64, value=2)
      | +-update_item_list=
      |   +-UpdateItem
      |     +-target=
      |     | +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
      |     +-set_value=
      |       +-DMLValue
      |         +-value=
      |           +-Literal(type=INT64, value=NULL)
      +-UpdateStmt
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
        |   +-Literal(type=INT64, value=2)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=INT64, value=NULL)
==

# ZetaSQL resolves this query successfully as we do not carry out any
# expression-level match to figure out that the nested update statements are
# indeed the same. This query should fail at run-time if the array is non-empty.
UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val SET
     repeated_int64_val = NULL
   WHERE true),
  (UPDATE KitchenSink.repeated_int64_val SET
     repeated_int64_val = NULL
   WHERE true)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_int64_val#4)
    +-update_list=
      +-UpdateStmt
      | +-where_expr=
      | | +-Literal(type=BOOL, value=true)
      | +-update_item_list=
      |   +-UpdateItem
      |     +-target=
      |     | +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
      |     +-set_value=
      |       +-DMLValue
      |         +-value=
      |           +-Literal(type=INT64, value=NULL)
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT64, column=$array.repeated_int64_val#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=INT64, value=NULL)
==

UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val SET
     repeated_int64_val = 1
   WHERE true),
  (DELETE KitchenSink.repeated_int64_val WHERE true)
WHERE true
--
ERROR: DELETE occurs after UPDATE for KitchenSink.repeated_int64_val; nested statements referencing the same field must be written in the order DELETE, UPDATE, INSERT [at 5:3]
  (DELETE KitchenSink.repeated_int64_val WHERE true)
  ^
==

UPDATE TestTable SET
  (INSERT KitchenSink.repeated_int64_val VALUES (1)),
  (DELETE KitchenSink.repeated_int64_val WHERE true)
WHERE true
--
ERROR: DELETE occurs after INSERT for KitchenSink.repeated_int64_val; nested statements referencing the same field must be written in the order DELETE, UPDATE, INSERT [at 3:3]
  (DELETE KitchenSink.repeated_int64_val WHERE true)
  ^
==

UPDATE TestTable SET
  (INSERT KitchenSink.repeated_int64_val VALUES (1)),
  (UPDATE KitchenSink.repeated_int64_val SET
     repeated_int64_val = 1
   WHERE true)
WHERE true
--
ERROR: UPDATE occurs after INSERT for KitchenSink.repeated_int64_val; nested statements referencing the same field must be written in the order DELETE, UPDATE, INSERT [at 3:3]
  (UPDATE KitchenSink.repeated_int64_val SET
  ^
==

# Only element column is in-scope for nested statements.
UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val SET
     key = 1
   WHERE true)
WHERE true
--
ERROR: Unrecognized name: key [at 3:6]
     key = 1
     ^
==

UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val SET
     TestTable.key = 1
   WHERE true)
WHERE true
--
ERROR: Unrecognized name: TestTable [at 3:6]
     TestTable.key = 1
     ^
==

UPDATE TestTable SET
  (DELETE KitchenSink.repeated_int64_val
   WHERE key = repeated_int64_val)
WHERE true
--
ERROR: Unrecognized name: key [at 3:10]
   WHERE key = repeated_int64_val)
         ^
==

UPDATE KeyValue SET
  (DELETE key WHERE true)
WHERE true
--
ERROR: Update target key for nested DELETE must be of type ARRAY, but was INT64 [at 2:11]
  (DELETE key WHERE true)
          ^
==

UPDATE KeyValue SET
  (UPDATE key SET key = 1 WHERE true)
WHERE true
--
ERROR: Update target key for nested UPDATE must be of type ARRAY, but was INT64 [at 2:11]
  (UPDATE key SET key = 1 WHERE true)
          ^
==

UPDATE KeyValue SET
  (INSERT key VALUES (1))
WHERE true
--
ERROR: Update target key for nested INSERT must be of type ARRAY, but was INT64 [at 2:11]
  (INSERT key VALUES (1))
          ^
==

UPDATE TestTable SET
  (INSERT KitchenSink.repeated_int64_val VALUES (1, 2))
WHERE true
--
ERROR: Inserted row has wrong column count; Has 2, expected 1 [at 2:49]
  (INSERT KitchenSink.repeated_int64_val VALUES (1, 2))
                                                ^
==

UPDATE TestTable SET
  (INSERT KitchenSink.repeated_int64_val VALUES ("one"))
WHERE true
--
ERROR: Could not cast literal "one" to type INT64 [at 2:50]
  (INSERT KitchenSink.repeated_int64_val VALUES ("one"))
                                                 ^
==

UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val SET repeated_int64_val = 1)
WHERE true
--
ERROR: UPDATE must have a WHERE clause [at 2:4]
  (UPDATE KitchenSink.repeated_int64_val SET repeated_int64_val = 1)
   ^
==

# Values get coerced even in nested INSERTs.
UPDATE TestTable SET
  (INSERT KitchenSink.repeated_double_val VALUES
     (1), (cast(1 as int32)), ((select key from KeyValue)))
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<DOUBLE>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_double_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.repeated_double_val#4)
    +-insert_list=
      +-InsertStmt
        +-row_list=
          +-InsertRow
          | +-value_list=
          |   +-DMLValue
          |     +-value=
          |       +-Literal(type=DOUBLE, value=1)
          +-InsertRow
          | +-value_list=
          |   +-DMLValue
          |     +-value=
          |       +-Literal(type=DOUBLE, value=1, has_explicit_type=TRUE)
          +-InsertRow
            +-value_list=
              +-DMLValue
                +-value=
                  +-Cast(INT64 -> DOUBLE)
                    +-SubqueryExpr
                      +-type=INT64
                      +-subquery_type=SCALAR
                      +-subquery=
                        +-ProjectScan
                          +-column_list=[KeyValue.Key#5]
                          +-input_scan=
                            +-TableScan(column_list=[KeyValue.Key#5], table=KeyValue, column_index_list=[0])
==

UPDATE TestTable SET
  (UPDATE KitchenSink.nested_repeated_group.nestedrepeatedgroupnested SET
     id = 1
   WHERE true)
WHERE true
--
ERROR: Cannot access field nestedrepeatedgroupnested on a value with type ARRAY<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup> [at 2:45]
  (UPDATE KitchenSink.nested_repeated_group.nestedrepeatedgroupnested SET
                                            ^
==

UPDATE TestTable SET
  (UPDATE KitchenSink.nested_repeated_group SET
     id = 1,
     nestedrepeatedgroupnested.id = 2
   WHERE true)
WHERE true
--
ERROR: Cannot access field id on a value with type ARRAY<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup.NestedRepeatedGroupNested> [at 4:32]
     nestedrepeatedgroupnested.id = 2
                               ^
==

# Mutiple level of nested UPDATEs.
UPDATE TestTable SET
  (UPDATE KitchenSink.nested_repeated_group SET
     (UPDATE nested_repeated_group.nestedrepeatedgroupnested SET
        id = 1
      WHERE true)
   WHERE true)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=nested_repeated_group
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.nested_repeated_group#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-GetProtoField
            |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup.NestedRepeatedGroupNested>>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup>, column=$array.nested_repeated_group#4)
            |   +-field_descriptor=nestedrepeatedgroupnested
            |   +-default_value=[]
            +-element_column=
            | +-ColumnHolder(column=$array.nestedrepeatedgroupnested#5)
            +-update_list=
              +-UpdateStmt
                +-where_expr=
                | +-Literal(type=BOOL, value=true)
                +-update_item_list=
                  +-UpdateItem
                    +-target=
                    | +-GetProtoField
                    |   +-type=INT64
                    |   +-expr=
                    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.NestedRepeatedGroup.NestedRepeatedGroupNested>, column=$array.nestedrepeatedgroupnested#5)
                    |   +-field_descriptor=id
                    +-set_value=
                      +-DMLValue
                        +-value=
                          +-Literal(type=INT64, value=1)
==

# Only array element column is visible inside nested updates.
UPDATE TestTable SET
  (UPDATE KitchenSink.nested_repeated_group SET
     (UPDATE nested_repeated_group.nestedrepeatedgroupnested SET
        idstr = "a"
      WHERE true)
   WHERE true)
WHERE true
--
ERROR: Unrecognized name: idstr [at 4:9]
        idstr = "a"
        ^
==

UPDATE TestTable SET
  (INSERT KitchenSink.repeated_int32_val VALUES
     (1), (cast (1 as INT64)), (cast (1 as UINT32)))
WHERE true
--
ERROR: Value has type UINT32 which cannot be inserted into column repeated_int32_val, which has type INT32 [at 3:33]
     (1), (cast (1 as INT64)), (cast (1 as UINT32)))
                                ^
==

UPDATE TestTable SET
  (INSERT KitchenSink.repeated_int32_val
     select cast(1 as UINT32))
WHERE true
--
ERROR: Query column 1 has type UINT32 which cannot be inserted into column repeated_int32_val, which has type INT32 [at 3:6]
     select cast(1 as UINT32))
     ^
==

######################
# Test overlapping updates.
UPDATE TestTable SET
  KitchenSink.repeated_int64_val = [1, 2, 3],
  (INSERT KitchenSink.repeated_int64_val VALUES
     (4), (5))
WHERE true
--
ERROR: Update item KitchenSink.repeated_int64_val cannot be updated with a nested INSERT and also assigned a value [at 3:11]
  (INSERT KitchenSink.repeated_int64_val VALUES
          ^
==

UPDATE TestTable SET
  (DELETE KitchenSink.repeated_int32_val WHERE true),
  KitchenSink.repeated_int64_val = [1],
  (DELETE KitchenSink.repeated_int64_val WHERE true)
WHERE true
--
ERROR: Update item KitchenSink.repeated_int64_val cannot be updated with a nested DELETE and also assigned a value [at 4:11]
  (DELETE KitchenSink.repeated_int64_val WHERE true)
          ^
==

UPDATE TestTable SET
  (DELETE KitchenSink.repeated_int64_val WHERE true),
  KitchenSink.repeated_int64_val = [1, 2, 3]
WHERE true
--
ERROR: Update item KitchenSink.repeated_int64_val cannot be assigned and also updated with a nested statement [at 3:3]
  KitchenSink.repeated_int64_val = [1, 2, 3]
  ^
==

UPDATE TestTable SET
  (DELETE KitchenSink.repeated_int64_val WHERE true),
  (UPDATE KitchenSink.repeated_int64_val SET repeated_int64_val = 1 WHERE true),
  KitchenSink.repeated_int64_val = [1]
WHERE true
--
ERROR: Update item KitchenSink.repeated_int64_val cannot be assigned and also updated with a nested statement [at 4:3]
  KitchenSink.repeated_int64_val = [1]
  ^
==

UPDATE TestTable SET
  (INSERT KitchenSink.repeated_int64_val VALUES (1)),
  KitchenSink.repeated_int64_val = [1, 2, 3],
  (DELETE KitchenSink.repeated_int64_val WHERE true)
WHERE true
--
ERROR: Update item KitchenSink.repeated_int64_val cannot be assigned and also updated with a nested statement [at 3:3]
  KitchenSink.repeated_int64_val = [1, 2, 3],
  ^
==

# An overlap involving an extension field.
[language_features=V_1_2_PROTO_EXTENSIONS_WITH_SET]
UPDATE TestTable SET
  KitchenSink.(zetasql_test__.KitchenSinkExtension.repeated_extension) =
  ARRAY<zetasql_test__.KitchenSinkExtension>[],
  (DELETE KitchenSink.(zetasql_test__.KitchenSinkExtension.repeated_extension)
   WHERE true)
WHERE true
--
ERROR: Update item KitchenSink.(zetasql_test__.KitchenSinkExtension.repeated_extension) cannot be updated with a nested DELETE and also assigned a value [at 4:11]
  (DELETE KitchenSink.(zetasql_test__.KitchenSinkExtension.repeated_extension)
          ^
==

UPDATE TestTable SET
  KitchenSink = "int64_key_1: 1 int64_key_2: 2",
  (DELETE KitchenSink.repeated_int64_val WHERE true)
WHERE true
--
ERROR: Update item KitchenSink.repeated_int64_val overlaps with KitchenSink [at 3:11]
  (DELETE KitchenSink.repeated_int64_val WHERE true)
          ^
==

# Cannot run a nested statement on an array that has already been modified.
[language_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE TestTable SET
  KitchenSink.nested_repeated_value[DEFAULT_OFFSET(0)].nested_int64 = 1,
  (DELETE KitchenSink.nested_repeated_value WHERE true)
WHERE true
--
ERROR: Cannot modify KitchenSink.nested_repeated_value with a nested statement and also modify one of its elements [at 3:11]
  (DELETE KitchenSink.nested_repeated_value WHERE true)
          ^
==

# Cannot modify an array element if the array has already been used by a nested
# statement.
[language_features=V_1_2_ARRAY_ELEMENTS_WITH_SET]
UPDATE TestTable SET
  (DELETE KitchenSink.nested_repeated_value WHERE true),
  KitchenSink.nested_repeated_value[DEFAULT_OFFSET(0)].nested_int64 = 1
WHERE true
--
ERROR: Cannot modify an element of KitchenSink.nested_repeated_value and also modify it with a nested statement [at 3:3]
  KitchenSink.nested_repeated_value[DEFAULT_OFFSET(0)].nested_int64 = 1
  ^
==

# Cannot run a nested statement on an array that has already been modified, even
# if it uses WITH OFFSET.
[language_features=V_1_2_ARRAY_ELEMENTS_WITH_SET,V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET]
UPDATE TestTable SET
  KitchenSink.repeated_int64_val[DEFAULT_OFFSET(0)] = 5,
  (UPDATE KitchenSink.repeated_int64_val WITH OFFSET offset_idx
   SET repeated_int64_val = 10
   WHERE offset_idx = 1)
WHERE true
--
ERROR: Cannot modify KitchenSink.repeated_int64_val with a nested statement and also modify one of its elements [at 3:11]
  (UPDATE KitchenSink.repeated_int64_val WITH OFFSET offset_idx
          ^
==

# Cannot modify an array element if the array has already been used by a nested
# statement, even if the nested statement used WITH OFFSET.
[language_features=V_1_2_ARRAY_ELEMENTS_WITH_SET,V_1_2_NESTED_UPDATE_DELETE_WITH_OFFSET]
UPDATE TestTable SET
  (UPDATE KitchenSink.repeated_int64_val WITH OFFSET offset_idx
   SET repeated_int64_val = 10
   WHERE offset_idx = 1),
  KitchenSink.repeated_int64_val[DEFAULT_OFFSET(0)] = 5
WHERE true
--
ERROR: Cannot modify an element of KitchenSink.repeated_int64_val and also modify it with a nested statement [at 5:3]
  KitchenSink.repeated_int64_val[DEFAULT_OFFSET(0)] = 5
  ^
==

###############
# Test table alias.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable {{AS|}} T SET
  {{T.|}}KitchenSink.int64_val = 1,
  (DELETE {{T.|}}KitchenSink.repeated_int64_val {{AS|}} val WHERE val = 1),
  (UPDATE {{T.|}}KitchenSink.repeated_int64_val {{AS|}} val SET val = 1 WHERE val > 5),
  (INSERT {{T.|}}KitchenSink.repeated_int64_val VALUES (1))
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="T")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
  | +-target=
  | | +-GetProtoField
  | |   +-type=INT64
  | |   +-expr=
  | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
  | |   +-field_descriptor=int64_val
  | |   +-default_value=0
  | +-set_value=
  |   +-DMLValue
  |     +-value=
  |       +-Literal(type=INT64, value=1)
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.val#4)
    +-delete_list=
    | +-DeleteStmt
    |   +-where_expr=
    |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |       +-ColumnRef(type=INT64, column=$array.val#4)
    |       +-Literal(type=INT64, value=1)
    +-update_list=
    | +-UpdateStmt
    |   +-where_expr=
    |   | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |   |   +-ColumnRef(type=INT64, column=$array.val#4)
    |   |   +-Literal(type=INT64, value=5)
    |   +-update_item_list=
    |     +-UpdateItem
    |       +-target=
    |       | +-ColumnRef(type=INT64, column=$array.val#4)
    |       +-set_value=
    |         +-DMLValue
    |           +-value=
    |             +-Literal(type=INT64, value=1)
    +-insert_list=
      +-InsertStmt
        +-row_list=
          +-InsertRow
            +-value_list=
              +-DMLValue
                +-value=
                  +-Literal(type=INT64, value=1)
==

# Table name is no longer available as an alias when we explicitly mention a
# table alias.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable T SET
  (DELETE TestTable.KitchenSink.repeated_int64_val WHERE true)
WHERE true
--
ERROR: Unrecognized name: TestTable [at 2:11]
  (DELETE TestTable.KitchenSink.repeated_int64_val WHERE true)
          ^
==

# Alias from topmost update statement is not visible on the left hand side
# of a nested statement update item.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable T SET
  (UPDATE T.KitchenSink.repeated_int64_val SET
     T.KitchenSink.repeated_int64_val = 1
   WHERE true)
WHERE true
--
ERROR: Unrecognized name: T [at 3:6]
     T.KitchenSink.repeated_int64_val = 1
     ^
==

# We can re-use the alias for nested DELETEs and UPDATEs. Nested INSERT does
# not support a table alias.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable T SET
  (DELETE T.KitchenSink.repeated_int64_val T WHERE T > 10),
  (UPDATE T.KitchenSink.repeated_int64_val T SET T = 1 WHERE T > 20)
WHERE true
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="T")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT64>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int64_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.T#4)
    +-delete_list=
    | +-DeleteStmt
    |   +-where_expr=
    |     +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |       +-ColumnRef(type=INT64, column=$array.T#4)
    |       +-Literal(type=INT64, value=10)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=$array.T#4)
        |   +-Literal(type=INT64, value=20)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT64, column=$array.T#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Literal(type=INT64, value=1)
==

# Nested UPDATE that needs to access another column in the table.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE TestTable t
SET (
  UPDATE t.KitchenSink.repeated_int32_val v
  SET v = {{|TestTable.|t.}}KitchenSink.int64_val
  WHERE true)
WHERE true
--
ALTERNATION GROUP: <empty>
--
ERROR: Unrecognized name: KitchenSink [at 4:11]
  SET v = KitchenSink.int64_val
          ^
--
ALTERNATION GROUPS:
    TestTable.
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,TestTable.
--
ERROR: Unrecognized name: TestTable [at 4:11]
  SET v = TestTable.KitchenSink.int64_val
          ^
--
ALTERNATION GROUP: t.
--
ERROR: Unrecognized name: t [at 4:11]
  SET v = t.KitchenSink.int64_val
          ^
--
ALTERNATION GROUPS:
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,t.
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="t")
+-column_access_list=READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column=
    | +-ColumnHolder(column=$array.v#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=INT32, column=$array.v#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-Cast(INT64 -> INT32)
                    +-GetProtoField
                      +-type=INT64
                      +-expr=
                      | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                      +-field_descriptor=int64_val
                      +-default_value=0
==

# Nested DELETE that needs to access a pseudocolumn.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE AllPseudoColumnsWithRepeated t SET
  (DELETE t.RepeatedValue v
   WHERE {{|AllPseudoColumnsWithRepeated.|t.}}Key > 0)
WHERE true
--
ALTERNATION GROUP: <empty>
--
ERROR: Unrecognized name: Key [at 3:10]
   WHERE Key > 0)
         ^
--
ALTERNATION GROUPS:
    AllPseudoColumnsWithRepeated.
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,AllPseudoColumnsWithRepeated.
--
ERROR: Unrecognized name: AllPseudoColumnsWithRepeated [at 3:10]
   WHERE AllPseudoColumnsWithRepeated.Key > 0)
         ^
--
ALTERNATION GROUP: t.
--
ERROR: Unrecognized name: t [at 3:10]
   WHERE t.Key > 0)
         ^
--
ALTERNATION GROUPS:
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,t.
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=AllPseudoColumnsWithRepeated.[Key#1, RepeatedValue#3], table=AllPseudoColumnsWithRepeated, column_index_list=[0, 2], alias="t")
+-column_access_list=READ,READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=ARRAY<STRING>, column=AllPseudoColumnsWithRepeated.RepeatedValue#3)
    +-element_column=
    | +-ColumnHolder(column=$array.v#4)
    +-delete_list=
      +-DeleteStmt
        +-where_expr=
          +-FunctionCall(ZetaSQL:$greater(INT32, INT32) -> BOOL)
            +-ColumnRef(type=INT32, column=AllPseudoColumnsWithRepeated.Key#1)
            +-Literal(type=INT32, value=0)
==

# Nested UPDATE that needs to access a pseudocolumn.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE AllPseudoColumnsWithRepeated t
SET (
  UPDATE t.RepeatedValue v
  SET v = {{|AllPseudoColumnsWithRepeated.|t.}}Value
  WHERE true)
WHERE true
--
ALTERNATION GROUP: <empty>
--
ERROR: Unrecognized name: Value [at 4:11]
  SET v = Value
          ^
--
ALTERNATION GROUPS:
    AllPseudoColumnsWithRepeated.
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,AllPseudoColumnsWithRepeated.
--
ERROR: Unrecognized name: AllPseudoColumnsWithRepeated [at 4:11]
  SET v = AllPseudoColumnsWithRepeated.Value
          ^
--
ALTERNATION GROUP: t.
--
ERROR: Unrecognized name: t [at 4:11]
  SET v = t.Value
          ^
--
ALTERNATION GROUPS:
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,t.
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=AllPseudoColumnsWithRepeated.[Value#2, RepeatedValue#3], table=AllPseudoColumnsWithRepeated, column_index_list=[1, 2], alias="t")
+-column_access_list=READ,READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=ARRAY<STRING>, column=AllPseudoColumnsWithRepeated.RepeatedValue#3)
    +-element_column=
    | +-ColumnHolder(column=$array.v#4)
    +-update_list=
      +-UpdateStmt
        +-where_expr=
        | +-Literal(type=BOOL, value=true)
        +-update_item_list=
          +-UpdateItem
            +-target=
            | +-ColumnRef(type=STRING, column=$array.v#4)
            +-set_value=
              +-DMLValue
                +-value=
                  +-ColumnRef(type=STRING, column=AllPseudoColumnsWithRepeated.Value#2)
==

# Nested INSERT that needs to access a pseudocolumn.
[language_features={{|V_1_2_CORRELATED_REFS_IN_NESTED_DML}}]
UPDATE AllPseudoColumnsWithRepeated t SET
  (INSERT t.RepeatedValue
   VALUES ({{|AllPseudoColumnsWithRepeated.|t.}}Value))
WHERE true
--
ALTERNATION GROUP: <empty>
--
ERROR: Unrecognized name: Value [at 3:12]
   VALUES (Value))
           ^
--
ALTERNATION GROUPS:
    AllPseudoColumnsWithRepeated.
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,AllPseudoColumnsWithRepeated.
--
ERROR: Unrecognized name: AllPseudoColumnsWithRepeated [at 3:12]
   VALUES (AllPseudoColumnsWithRepeated.Value))
           ^
--
ALTERNATION GROUP: t.
--
ERROR: Unrecognized name: t [at 3:12]
   VALUES (t.Value))
           ^
--
ALTERNATION GROUPS:
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,
    V_1_2_CORRELATED_REFS_IN_NESTED_DML,t.
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=AllPseudoColumnsWithRepeated.[Value#2, RepeatedValue#3], table=AllPseudoColumnsWithRepeated, column_index_list=[1, 2], alias="t")
+-column_access_list=READ,READ_WRITE
+-where_expr=
| +-Literal(type=BOOL, value=true)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=ARRAY<STRING>, column=AllPseudoColumnsWithRepeated.RepeatedValue#3)
    +-element_column=
    | +-ColumnHolder(column=$array.RepeatedValue#4)
    +-insert_list=
      +-InsertStmt
        +-row_list=
          +-InsertRow
            +-value_list=
              +-DMLValue
                +-value=
                  +-ColumnRef(type=STRING, column=AllPseudoColumnsWithRepeated.Value#2)
