[default enabled_ast_rewrites=DEFAULTS]
[default language_features=V_1_3_UNNEST_AND_FLATTEN_ARRAYS,JSON_TYPE,V_1_3_PROTO_DEFAULT_IF_NULL,V_1_3_INLINE_LAMBDA_ARGUMENT]

select value
from ArrayTypes t, unnest(t.ProtoArray.int32_val1) value
--
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#18]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18]
        +-input_scan=
        | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<INT32>
        |   +-expr=
        |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   +-get_field_list=
        |     +-GetProtoField
        |       +-type=INT32
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |       +-field_descriptor=int32_val1
        |       +-default_value=0
        +-element_column=$array.value#18

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#18]
    +-input_scan=
      +-ProjectScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18]
        +-expr_list=
        | +-value#18 := ColumnRef(type=INT32, column=$flatten.injected#20)
        +-input_scan=
          +-ProjectScan
            +-column_list=[ArrayTypes.ProtoArray#15, $flatten.injected#19, $flatten.injected#20]
            +-expr_list=
            | +-injected#20 :=
            |   +-GetProtoField
            |     +-type=INT32
            |     +-expr=
            |     | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#19)
            |     +-field_descriptor=int32_val1
            |     +-default_value=0
            +-input_scan=
              +-ArrayScan
                +-column_list=[ArrayTypes.ProtoArray#15, $flatten.injected#19]
                +-input_scan=
                | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
                +-array_expr=
                | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
                +-element_column=$flatten.injected#19
==

select value
from ArrayTypes t, unnest(t.ProtoArray.has_int32_val1) value
--
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#18]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18]
        +-input_scan=
        | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<BOOL>
        |   +-expr=
        |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   +-get_field_list=
        |     +-GetProtoField
        |       +-type=BOOL
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |       +-field_descriptor=int32_val1
        |       +-get_has_bit=TRUE
        +-element_column=$array.value#18

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#18]
    +-input_scan=
      +-ProjectScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18]
        +-expr_list=
        | +-value#18 := ColumnRef(type=BOOL, column=$flatten.injected#20)
        +-input_scan=
          +-ProjectScan
            +-column_list=[ArrayTypes.ProtoArray#15, $flatten.injected#19, $flatten.injected#20]
            +-expr_list=
            | +-injected#20 :=
            |   +-GetProtoField
            |     +-type=BOOL
            |     +-expr=
            |     | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#19)
            |     +-field_descriptor=int32_val1
            |     +-get_has_bit=TRUE
            +-input_scan=
              +-ArrayScan
                +-column_list=[ArrayTypes.ProtoArray#15, $flatten.injected#19]
                +-input_scan=
                | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
                +-array_expr=
                | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
                +-element_column=$flatten.injected#19
==

select value
from ArrayTypes t, t.ProtoArray.int32_val1 value
--
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#18]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18]
        +-input_scan=
        | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<INT32>
        |   +-expr=
        |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   +-get_field_list=
        |     +-GetProtoField
        |       +-type=INT32
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |       +-field_descriptor=int32_val1
        |       +-default_value=0
        +-element_column=$array.value#18

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#18]
    +-input_scan=
      +-ProjectScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18]
        +-expr_list=
        | +-value#18 := ColumnRef(type=INT32, column=$flatten.injected#20)
        +-input_scan=
          +-ProjectScan
            +-column_list=[ArrayTypes.ProtoArray#15, $flatten.injected#19, $flatten.injected#20]
            +-expr_list=
            | +-injected#20 :=
            |   +-GetProtoField
            |     +-type=INT32
            |     +-expr=
            |     | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#19)
            |     +-field_descriptor=int32_val1
            |     +-default_value=0
            +-input_scan=
              +-ArrayScan
                +-column_list=[ArrayTypes.ProtoArray#15, $flatten.injected#19]
                +-input_scan=
                | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
                +-array_expr=
                | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
                +-element_column=$flatten.injected#19
==

select str_value
from ArrayTypes t, unnest(t.ProtoArray.str_value) str_value
--
QueryStmt
+-output_column_list=
| +-$array.str_value#18 AS str_value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.str_value#18]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.str_value#18]
        +-input_scan=
        | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<STRING>
        |   +-expr=
        |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   +-get_field_list=
        |     +-GetProtoField
        |       +-type=ARRAY<STRING>
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |       +-field_descriptor=str_value
        |       +-default_value=[]
        +-element_column=$array.str_value#18

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.str_value#18 AS str_value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.str_value#18]
    +-input_scan=
      +-ProjectScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.str_value#18]
        +-expr_list=
        | +-str_value#18 := ColumnRef(type=STRING, column=$flatten.injected#20)
        +-input_scan=
          +-ArrayScan
            +-column_list=[ArrayTypes.ProtoArray#15, $flatten.injected#19, $flatten.injected#20]
            +-input_scan=
            | +-ArrayScan
            |   +-column_list=[ArrayTypes.ProtoArray#15, $flatten.injected#19]
            |   +-input_scan=
            |   | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
            |   +-array_expr=
            |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
            |   +-element_column=$flatten.injected#19
            +-array_expr=
            | +-GetProtoField
            |   +-type=ARRAY<STRING>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#19)
            |   +-field_descriptor=str_value
            |   +-default_value=[]
            +-element_column=$flatten.injected#20
==

select t.key, value
from TestTable t, unnest(t.KitchenSink.nested_repeated_value.nested_int64) value
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-$array.value#4 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, $array.value#4]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.KitchenSink#3, $array.value#4]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, KitchenSink#3], table=TestTable, column_index_list=[0, 2], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=nested_repeated_value
        |   |   +-default_value=[]
        |   +-get_field_list=
        |     +-GetProtoField
        |       +-type=INT64
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>)
        |       +-field_descriptor=nested_int64
        |       +-default_value=88
        +-element_column=$array.value#4

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-$array.value#4 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, $array.value#4]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.key#1, TestTable.KitchenSink#3, $array.value#4]
        +-expr_list=
        | +-value#4 := ColumnRef(type=INT64, column=$flatten.injected#6)
        +-input_scan=
          +-ProjectScan
            +-column_list=[TestTable.key#1, TestTable.KitchenSink#3, $flatten.injected#5, $flatten.injected#6]
            +-expr_list=
            | +-injected#6 :=
            |   +-GetProtoField
            |     +-type=INT64
            |     +-expr=
            |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$flatten.injected#5)
            |     +-field_descriptor=nested_int64
            |     +-default_value=88
            +-input_scan=
              +-ArrayScan
                +-column_list=[TestTable.key#1, TestTable.KitchenSink#3, $flatten.injected#5]
                +-input_scan=
                | +-TableScan(column_list=TestTable.[key#1, KitchenSink#3], table=TestTable, column_index_list=[0, 2], alias='t')
                +-array_expr=
                | +-GetProtoField
                |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
                |   +-expr=
                |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                |   +-field_descriptor=nested_repeated_value
                |   +-default_value=[]
                +-element_column=$flatten.injected#5
==

select value
from TestTable t, unnest(t.KitchenSink.nested_repeated_value.nested_repeated_int64) value
--
QueryStmt
+-output_column_list=
| +-$array.value#4 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#4]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.KitchenSink#3, $array.value#4]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=nested_repeated_value
        |   |   +-default_value=[]
        |   +-get_field_list=
        |     +-GetProtoField
        |       +-type=ARRAY<INT64>
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>)
        |       +-field_descriptor=nested_repeated_int64
        |       +-default_value=[]
        +-element_column=$array.value#4

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#4 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#4]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.KitchenSink#3, $array.value#4]
        +-expr_list=
        | +-value#4 := ColumnRef(type=INT64, column=$flatten.injected#6)
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.KitchenSink#3, $flatten.injected#5, $flatten.injected#6]
            +-input_scan=
            | +-ArrayScan
            |   +-column_list=[TestTable.KitchenSink#3, $flatten.injected#5]
            |   +-input_scan=
            |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias='t')
            |   +-array_expr=
            |   | +-GetProtoField
            |   |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
            |   |   +-expr=
            |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |   +-field_descriptor=nested_repeated_value
            |   |   +-default_value=[]
            |   +-element_column=$flatten.injected#5
            +-array_expr=
            | +-GetProtoField
            |   +-type=ARRAY<INT64>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$flatten.injected#5)
            |   +-field_descriptor=nested_repeated_int64
            |   +-default_value=[]
            +-element_column=$flatten.injected#6
==

select value
from TestTable t, unnest(t.KitchenSink.repeated_holder.repeated_field.int32_val1) value
--
QueryStmt
+-output_column_list=
| +-$array.value#4 AS value [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#4]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.KitchenSink#3, $array.value#4]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<INT32>
        |   +-expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<PROTO<zetasql_test__.RepeatedHolderPB>>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=repeated_holder
        |   |   +-default_value=[]
        |   +-get_field_list=
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RepeatedHolderPB>)
        |     | +-field_descriptor=repeated_field
        |     | +-default_value=[]
        |     +-GetProtoField
        |       +-type=INT32
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |       +-field_descriptor=int32_val1
        |       +-default_value=0
        +-element_column=$array.value#4

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#4 AS value [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#4]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.KitchenSink#3, $array.value#4]
        +-expr_list=
        | +-value#4 := ColumnRef(type=INT32, column=$flatten.injected#7)
        +-input_scan=
          +-ProjectScan
            +-column_list=[TestTable.KitchenSink#3, $flatten.injected#5, $flatten.injected#6, $flatten.injected#7]
            +-expr_list=
            | +-injected#7 :=
            |   +-GetProtoField
            |     +-type=INT32
            |     +-expr=
            |     | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#6)
            |     +-field_descriptor=int32_val1
            |     +-default_value=0
            +-input_scan=
              +-ArrayScan
                +-column_list=[TestTable.KitchenSink#3, $flatten.injected#5, $flatten.injected#6]
                +-input_scan=
                | +-ArrayScan
                |   +-column_list=[TestTable.KitchenSink#3, $flatten.injected#5]
                |   +-input_scan=
                |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias='t')
                |   +-array_expr=
                |   | +-GetProtoField
                |   |   +-type=ARRAY<PROTO<zetasql_test__.RepeatedHolderPB>>
                |   |   +-expr=
                |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                |   |   +-field_descriptor=repeated_holder
                |   |   +-default_value=[]
                |   +-element_column=$flatten.injected#5
                +-array_expr=
                | +-GetProtoField
                |   +-type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>
                |   +-expr=
                |   | +-ColumnRef(type=PROTO<zetasql_test__.RepeatedHolderPB>, column=$flatten.injected#5)
                |   +-field_descriptor=repeated_field
                |   +-default_value=[]
                +-element_column=$flatten.injected#6
==

select value
from TestTable t, unnest(t.KitchenSink.repeated_holder.repeated_field.str_value) value
--
QueryStmt
+-output_column_list=
| +-$array.value#4 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#4]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.KitchenSink#3, $array.value#4]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<STRING>
        |   +-expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<PROTO<zetasql_test__.RepeatedHolderPB>>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=repeated_holder
        |   |   +-default_value=[]
        |   +-get_field_list=
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RepeatedHolderPB>)
        |     | +-field_descriptor=repeated_field
        |     | +-default_value=[]
        |     +-GetProtoField
        |       +-type=ARRAY<STRING>
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |       +-field_descriptor=str_value
        |       +-default_value=[]
        +-element_column=$array.value#4

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#4 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#4]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.KitchenSink#3, $array.value#4]
        +-expr_list=
        | +-value#4 := ColumnRef(type=STRING, column=$flatten.injected#7)
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.KitchenSink#3, $flatten.injected#5, $flatten.injected#6, $flatten.injected#7]
            +-input_scan=
            | +-ArrayScan
            |   +-column_list=[TestTable.KitchenSink#3, $flatten.injected#5, $flatten.injected#6]
            |   +-input_scan=
            |   | +-ArrayScan
            |   |   +-column_list=[TestTable.KitchenSink#3, $flatten.injected#5]
            |   |   +-input_scan=
            |   |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias='t')
            |   |   +-array_expr=
            |   |   | +-GetProtoField
            |   |   |   +-type=ARRAY<PROTO<zetasql_test__.RepeatedHolderPB>>
            |   |   |   +-expr=
            |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |   |   +-field_descriptor=repeated_holder
            |   |   |   +-default_value=[]
            |   |   +-element_column=$flatten.injected#5
            |   +-array_expr=
            |   | +-GetProtoField
            |   |   +-type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>
            |   |   +-expr=
            |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RepeatedHolderPB>, column=$flatten.injected#5)
            |   |   +-field_descriptor=repeated_field
            |   |   +-default_value=[]
            |   +-element_column=$flatten.injected#6
            +-array_expr=
            | +-GetProtoField
            |   +-type=ARRAY<STRING>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#6)
            |   +-field_descriptor=str_value
            |   +-default_value=[]
            +-element_column=$flatten.injected#7
==

select value
from RecursivePBTable t, unnest(t.RecursivePB.repeated_recursive_pb.repeated_recursive_pb.repeated_recursive_pb.recursive_pb.repeated_recursive_pb.int64_val) value
--
QueryStmt
+-output_column_list=
| +-$array.value#2 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=[RecursivePBTable.RecursivePB#1, $array.value#2]
        +-input_scan=
        | +-TableScan(column_list=[RecursivePBTable.RecursivePB#1], table=RecursivePBTable, column_index_list=[0], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
        |   |   +-field_descriptor=repeated_recursive_pb
        |   |   +-default_value=[]
        |   +-get_field_list=
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=repeated_recursive_pb
        |     | +-default_value=[]
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=repeated_recursive_pb
        |     | +-default_value=[]
        |     +-GetProtoField
        |     | +-type=PROTO<zetasql_test__.RecursivePB>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=recursive_pb
        |     | +-default_value=NULL
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=repeated_recursive_pb
        |     | +-default_value=[]
        |     +-GetProtoField
        |       +-type=INT64
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |       +-field_descriptor=int64_val
        |       +-default_value=0
        +-element_column=$array.value#2

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#2 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=[RecursivePBTable.RecursivePB#1, $array.value#2]
        +-expr_list=
        | +-value#2 := ColumnRef(type=INT64, column=$flatten.injected#7)
        +-input_scan=
          +-ProjectScan
            +-column_list=[RecursivePBTable.RecursivePB#1, $flatten.injected#3, $flatten.injected#4, $flatten.injected#5, $flatten.injected#6, $flatten.injected#7]
            +-expr_list=
            | +-injected#7 :=
            |   +-GetProtoField
            |     +-type=INT64
            |     +-expr=
            |     | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#6)
            |     +-field_descriptor=int64_val
            |     +-default_value=0
            +-input_scan=
              +-ArrayScan
                +-column_list=[RecursivePBTable.RecursivePB#1, $flatten.injected#3, $flatten.injected#4, $flatten.injected#5, $flatten.injected#6]
                +-input_scan=
                | +-ArrayScan
                |   +-column_list=[RecursivePBTable.RecursivePB#1, $flatten.injected#3, $flatten.injected#4, $flatten.injected#5]
                |   +-input_scan=
                |   | +-ArrayScan
                |   |   +-column_list=[RecursivePBTable.RecursivePB#1, $flatten.injected#3, $flatten.injected#4]
                |   |   +-input_scan=
                |   |   | +-ArrayScan
                |   |   |   +-column_list=[RecursivePBTable.RecursivePB#1, $flatten.injected#3]
                |   |   |   +-input_scan=
                |   |   |   | +-TableScan(column_list=[RecursivePBTable.RecursivePB#1], table=RecursivePBTable, column_index_list=[0], alias='t')
                |   |   |   +-array_expr=
                |   |   |   | +-GetProtoField
                |   |   |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   |   |   |   +-expr=
                |   |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
                |   |   |   |   +-field_descriptor=repeated_recursive_pb
                |   |   |   |   +-default_value=[]
                |   |   |   +-element_column=$flatten.injected#3
                |   |   +-array_expr=
                |   |   | +-GetProtoField
                |   |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   |   |   +-expr=
                |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#3)
                |   |   |   +-field_descriptor=repeated_recursive_pb
                |   |   |   +-default_value=[]
                |   |   +-element_column=$flatten.injected#4
                |   +-array_expr=
                |   | +-GetProtoField
                |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   |   +-expr=
                |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#4)
                |   |   +-field_descriptor=repeated_recursive_pb
                |   |   +-default_value=[]
                |   +-element_column=$flatten.injected#5
                +-array_expr=
                | +-GetProtoField
                |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   +-expr=
                |   | +-GetProtoField
                |   |   +-type=PROTO<zetasql_test__.RecursivePB>
                |   |   +-expr=
                |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#5)
                |   |   +-field_descriptor=recursive_pb
                |   |   +-default_value=NULL
                |   +-field_descriptor=repeated_recursive_pb
                |   +-default_value=[]
                +-element_column=$flatten.injected#6
==

select value
from RecursivePBTable t, unnest(t.RecursivePB.repeated_recursive_pb.repeated_recursive_pb.repeated_recursive_pb[DEFAULT_OFFSET(0)].repeated_recursive_pb.int64_val) value
--
QueryStmt
+-output_column_list=
| +-$array.value#2 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=[RecursivePBTable.RecursivePB#1, $array.value#2]
        +-input_scan=
        | +-TableScan(column_list=[RecursivePBTable.RecursivePB#1], table=RecursivePBTable, column_index_list=[0], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
        |   |   +-field_descriptor=repeated_recursive_pb
        |   |   +-default_value=[]
        |   +-get_field_list=
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=repeated_recursive_pb
        |     | +-default_value=[]
        |     +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<PROTO<zetasql_test__.RecursivePB>>, INT64) -> PROTO<zetasql_test__.RecursivePB>)
        |     | +-GetProtoField
        |     | | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | | +-expr=
        |     | | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | | +-field_descriptor=repeated_recursive_pb
        |     | | +-default_value=[]
        |     | +-Literal(type=INT64, value=0)
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=repeated_recursive_pb
        |     | +-default_value=[]
        |     +-GetProtoField
        |       +-type=INT64
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |       +-field_descriptor=int64_val
        |       +-default_value=0
        +-element_column=$array.value#2

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#2 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=[RecursivePBTable.RecursivePB#1, $array.value#2]
        +-expr_list=
        | +-value#2 := ColumnRef(type=INT64, column=$flatten.injected#6)
        +-input_scan=
          +-ProjectScan
            +-column_list=[RecursivePBTable.RecursivePB#1, $flatten.injected#3, $flatten.injected#4, $flatten.injected#5, $flatten.injected#6]
            +-expr_list=
            | +-injected#6 :=
            |   +-GetProtoField
            |     +-type=INT64
            |     +-expr=
            |     | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#5)
            |     +-field_descriptor=int64_val
            |     +-default_value=0
            +-input_scan=
              +-ArrayScan
                +-column_list=[RecursivePBTable.RecursivePB#1, $flatten.injected#3, $flatten.injected#4, $flatten.injected#5]
                +-input_scan=
                | +-ArrayScan
                |   +-column_list=[RecursivePBTable.RecursivePB#1, $flatten.injected#3, $flatten.injected#4]
                |   +-input_scan=
                |   | +-ArrayScan
                |   |   +-column_list=[RecursivePBTable.RecursivePB#1, $flatten.injected#3]
                |   |   +-input_scan=
                |   |   | +-TableScan(column_list=[RecursivePBTable.RecursivePB#1], table=RecursivePBTable, column_index_list=[0], alias='t')
                |   |   +-array_expr=
                |   |   | +-GetProtoField
                |   |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   |   |   +-expr=
                |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
                |   |   |   +-field_descriptor=repeated_recursive_pb
                |   |   |   +-default_value=[]
                |   |   +-element_column=$flatten.injected#3
                |   +-array_expr=
                |   | +-GetProtoField
                |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   |   +-expr=
                |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#3)
                |   |   +-field_descriptor=repeated_recursive_pb
                |   |   +-default_value=[]
                |   +-element_column=$flatten.injected#4
                +-array_expr=
                | +-GetProtoField
                |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   +-expr=
                |   | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<PROTO<zetasql_test__.RecursivePB>>, INT64) -> PROTO<zetasql_test__.RecursivePB>)
                |   |   +-GetProtoField
                |   |   | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   |   | +-expr=
                |   |   | | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#4)
                |   |   | +-field_descriptor=repeated_recursive_pb
                |   |   | +-default_value=[]
                |   |   +-Literal(type=INT64, value=0)
                |   +-field_descriptor=repeated_recursive_pb
                |   +-default_value=[]
                +-element_column=$flatten.injected#5

==

select value
from unnest(new zetasql_test__.RecursivePB().recursive_pb.repeated_recursive_pb.repeated_recursive_pb.recursive_pb.repeated_recursive_pb.int64_val) value
--
QueryStmt
+-output_column_list=
| +-$array.value#1 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#1]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.value#1]
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |   |   +-expr=
        |   |   | +-GetProtoField
        |   |   |   +-type=PROTO<zetasql_test__.RecursivePB>
        |   |   |   +-expr=
        |   |   |   | +-MakeProto(type=PROTO<zetasql_test__.RecursivePB>)
        |   |   |   +-field_descriptor=recursive_pb
        |   |   |   +-default_value=NULL
        |   |   +-field_descriptor=repeated_recursive_pb
        |   |   +-default_value=[]
        |   +-get_field_list=
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=repeated_recursive_pb
        |     | +-default_value=[]
        |     +-GetProtoField
        |     | +-type=PROTO<zetasql_test__.RecursivePB>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=recursive_pb
        |     | +-default_value=NULL
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=repeated_recursive_pb
        |     | +-default_value=[]
        |     +-GetProtoField
        |       +-type=INT64
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |       +-field_descriptor=int64_val
        |       +-default_value=0
        +-element_column=$array.value#1

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#1 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$array.value#1]
        +-expr_list=
        | +-value#1 := ColumnRef(type=INT64, column=$flatten.injected#5)
        +-input_scan=
          +-ProjectScan
            +-column_list=$flatten.[injected#2, injected#3, injected#4, injected#5]
            +-expr_list=
            | +-injected#5 :=
            |   +-GetProtoField
            |     +-type=INT64
            |     +-expr=
            |     | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#4)
            |     +-field_descriptor=int64_val
            |     +-default_value=0
            +-input_scan=
              +-ArrayScan
                +-column_list=$flatten.[injected#2, injected#3, injected#4]
                +-input_scan=
                | +-ArrayScan
                |   +-column_list=$flatten.[injected#2, injected#3]
                |   +-input_scan=
                |   | +-ArrayScan
                |   |   +-column_list=[$flatten.injected#2]
                |   |   +-array_expr=
                |   |   | +-GetProtoField
                |   |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   |   |   +-expr=
                |   |   |   | +-GetProtoField
                |   |   |   |   +-type=PROTO<zetasql_test__.RecursivePB>
                |   |   |   |   +-expr=
                |   |   |   |   | +-MakeProto(type=PROTO<zetasql_test__.RecursivePB>)
                |   |   |   |   +-field_descriptor=recursive_pb
                |   |   |   |   +-default_value=NULL
                |   |   |   +-field_descriptor=repeated_recursive_pb
                |   |   |   +-default_value=[]
                |   |   +-element_column=$flatten.injected#2
                |   +-array_expr=
                |   | +-GetProtoField
                |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   |   +-expr=
                |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#2)
                |   |   +-field_descriptor=repeated_recursive_pb
                |   |   +-default_value=[]
                |   +-element_column=$flatten.injected#3
                +-array_expr=
                | +-GetProtoField
                |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   +-expr=
                |   | +-GetProtoField
                |   |   +-type=PROTO<zetasql_test__.RecursivePB>
                |   |   +-expr=
                |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#3)
                |   |   +-field_descriptor=recursive_pb
                |   |   +-default_value=NULL
                |   +-field_descriptor=repeated_recursive_pb
                |   +-default_value=[]
                +-element_column=$flatten.injected#4
==

select value
from unnest(new zetasql_test__.RecursivePB().repeated_recursive_pb.repeated_recursive_pb.repeated_recursive_pb.recursive_pb.repeated_recursive_pb.int64_val) value
--
QueryStmt
+-output_column_list=
| +-$array.value#1 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#1]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.value#1]
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |   |   +-expr=
        |   |   | +-MakeProto(type=PROTO<zetasql_test__.RecursivePB>)
        |   |   +-field_descriptor=repeated_recursive_pb
        |   |   +-default_value=[]
        |   +-get_field_list=
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=repeated_recursive_pb
        |     | +-default_value=[]
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=repeated_recursive_pb
        |     | +-default_value=[]
        |     +-GetProtoField
        |     | +-type=PROTO<zetasql_test__.RecursivePB>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=recursive_pb
        |     | +-default_value=NULL
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=repeated_recursive_pb
        |     | +-default_value=[]
        |     +-GetProtoField
        |       +-type=INT64
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |       +-field_descriptor=int64_val
        |       +-default_value=0
        +-element_column=$array.value#1

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#1 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$array.value#1]
        +-expr_list=
        | +-value#1 := ColumnRef(type=INT64, column=$flatten.injected#6)
        +-input_scan=
          +-ProjectScan
            +-column_list=$flatten.[injected#2, injected#3, injected#4, injected#5, injected#6]
            +-expr_list=
            | +-injected#6 :=
            |   +-GetProtoField
            |     +-type=INT64
            |     +-expr=
            |     | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#5)
            |     +-field_descriptor=int64_val
            |     +-default_value=0
            +-input_scan=
              +-ArrayScan
                +-column_list=$flatten.[injected#2, injected#3, injected#4, injected#5]
                +-input_scan=
                | +-ArrayScan
                |   +-column_list=$flatten.[injected#2, injected#3, injected#4]
                |   +-input_scan=
                |   | +-ArrayScan
                |   |   +-column_list=$flatten.[injected#2, injected#3]
                |   |   +-input_scan=
                |   |   | +-ArrayScan
                |   |   |   +-column_list=[$flatten.injected#2]
                |   |   |   +-array_expr=
                |   |   |   | +-GetProtoField
                |   |   |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   |   |   |   +-expr=
                |   |   |   |   | +-MakeProto(type=PROTO<zetasql_test__.RecursivePB>)
                |   |   |   |   +-field_descriptor=repeated_recursive_pb
                |   |   |   |   +-default_value=[]
                |   |   |   +-element_column=$flatten.injected#2
                |   |   +-array_expr=
                |   |   | +-GetProtoField
                |   |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   |   |   +-expr=
                |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#2)
                |   |   |   +-field_descriptor=repeated_recursive_pb
                |   |   |   +-default_value=[]
                |   |   +-element_column=$flatten.injected#3
                |   +-array_expr=
                |   | +-GetProtoField
                |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   |   +-expr=
                |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#3)
                |   |   +-field_descriptor=repeated_recursive_pb
                |   |   +-default_value=[]
                |   +-element_column=$flatten.injected#4
                +-array_expr=
                | +-GetProtoField
                |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   +-expr=
                |   | +-GetProtoField
                |   |   +-type=PROTO<zetasql_test__.RecursivePB>
                |   |   +-expr=
                |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#4)
                |   |   +-field_descriptor=recursive_pb
                |   |   +-default_value=NULL
                |   +-field_descriptor=repeated_recursive_pb
                |   +-default_value=[]
                +-element_column=$flatten.injected#5
==

select value
from ArrayTypes t, unnest(t.ProtoArray.(zetasql_test__.TestExtraPBExtensionHolder.test_extra_proto_extension).ext_value) value
--
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#18]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18]
        +-input_scan=
        | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<INT32>
        |   +-expr=
        |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   +-get_field_list=
        |     +-GetProtoField
        |     | +-type=PROTO<zetasql_test__.TestExtraPBExtensionHolder>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |     | +-field_descriptor=[zetasql_test__.TestExtraPBExtensionHolder.test_extra_proto_extension]
        |     | +-default_value=NULL
        |     +-GetProtoField
        |       +-type=ARRAY<INT32>
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPBExtensionHolder>)
        |       +-field_descriptor=ext_value
        |       +-default_value=[]
        +-element_column=$array.value#18

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#18]
    +-input_scan=
      +-ProjectScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18]
        +-expr_list=
        | +-value#18 := ColumnRef(type=INT32, column=$flatten.injected#20)
        +-input_scan=
          +-ArrayScan
            +-column_list=[ArrayTypes.ProtoArray#15, $flatten.injected#19, $flatten.injected#20]
            +-input_scan=
            | +-ArrayScan
            |   +-column_list=[ArrayTypes.ProtoArray#15, $flatten.injected#19]
            |   +-input_scan=
            |   | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
            |   +-array_expr=
            |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
            |   +-element_column=$flatten.injected#19
            +-array_expr=
            | +-GetProtoField
            |   +-type=ARRAY<INT32>
            |   +-expr=
            |   | +-GetProtoField
            |   |   +-type=PROTO<zetasql_test__.TestExtraPBExtensionHolder>
            |   |   +-expr=
            |   |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#19)
            |   |   +-field_descriptor=[zetasql_test__.TestExtraPBExtensionHolder.test_extra_proto_extension]
            |   |   +-default_value=NULL
            |   +-field_descriptor=ext_value
            |   +-default_value=[]
            +-element_column=$flatten.injected#20
==

select value
from TestTable t, unnest(t.KitchenSink.(zetasql_test__.KitchenSinkExtension.repeated_extension).repeated_value) value
--

QueryStmt
+-output_column_list=
| +-$array.value#4 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#4]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.KitchenSink#3, $array.value#4]
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<STRING>
        |   +-expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkExtension>>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=[zetasql_test__.KitchenSinkExtension.repeated_extension]
        |   |   +-default_value=[]
        |   +-get_field_list=
        |     +-GetProtoField
        |       +-type=ARRAY<STRING>
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.KitchenSinkExtension>)
        |       +-field_descriptor=repeated_value
        |       +-default_value=[]
        +-element_column=$array.value#4

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#4 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#4]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.KitchenSink#3, $array.value#4]
        +-expr_list=
        | +-value#4 := ColumnRef(type=STRING, column=$flatten.injected#6)
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.KitchenSink#3, $flatten.injected#5, $flatten.injected#6]
            +-input_scan=
            | +-ArrayScan
            |   +-column_list=[TestTable.KitchenSink#3, $flatten.injected#5]
            |   +-input_scan=
            |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias='t')
            |   +-array_expr=
            |   | +-GetProtoField
            |   |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkExtension>>
            |   |   +-expr=
            |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |   +-field_descriptor=[zetasql_test__.KitchenSinkExtension.repeated_extension]
            |   |   +-default_value=[]
            |   +-element_column=$flatten.injected#5
            +-array_expr=
            | +-GetProtoField
            |   +-type=ARRAY<STRING>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkExtension>, column=$flatten.injected#5)
            |   +-field_descriptor=repeated_value
            |   +-default_value=[]
            +-element_column=$flatten.injected#6
==

select value
from unnest([STRUCT([STRUCT(new zetasql_test__.RecursivePB() AS y)] AS x)].x.y.repeated_recursive_pb.int64_val) value
--
QueryStmt
+-output_column_list=
| +-$array.value#1 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#1]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.value#1]
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRUCT<x ARRAY<STRUCT<y PROTO<zetasql_test__.RecursivePB>>>>) -> ARRAY<STRUCT<x ARRAY<STRUCT<y PROTO<zetasql_test__.RecursivePB>>>>>)
        |   |   +-MakeStruct
        |   |     +-type=STRUCT<x ARRAY<STRUCT<y PROTO<zetasql_test__.RecursivePB>>>>
        |   |     +-field_list=
        |   |       +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRUCT<y PROTO<zetasql_test__.RecursivePB>>) -> ARRAY<STRUCT<y PROTO<zetasql_test__.RecursivePB>>>)
        |   |         +-MakeStruct
        |   |           +-type=STRUCT<y PROTO<zetasql_test__.RecursivePB>>
        |   |           +-field_list=
        |   |             +-MakeProto(type=PROTO<zetasql_test__.RecursivePB>)
        |   +-get_field_list=
        |     +-GetStructField
        |     | +-type=ARRAY<STRUCT<y PROTO<zetasql_test__.RecursivePB>>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=STRUCT<x ARRAY<STRUCT<y PROTO<zetasql_test__.RecursivePB>>>>)
        |     | +-field_idx=0
        |     +-GetStructField
        |     | +-type=PROTO<zetasql_test__.RecursivePB>
        |     | +-expr=
        |     | | +-FlattenedArg(type=STRUCT<y PROTO<zetasql_test__.RecursivePB>>)
        |     | +-field_idx=0
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=repeated_recursive_pb
        |     | +-default_value=[]
        |     +-GetProtoField
        |       +-type=INT64
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |       +-field_descriptor=int64_val
        |       +-default_value=0
        +-element_column=$array.value#1

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#1 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$array.value#1]
        +-expr_list=
        | +-value#1 := ColumnRef(type=INT64, column=$flatten.injected#5)
        +-input_scan=
          +-ProjectScan
            +-column_list=$flatten.[injected#2, injected#3, injected#4, injected#5]
            +-expr_list=
            | +-injected#5 :=
            |   +-GetProtoField
            |     +-type=INT64
            |     +-expr=
            |     | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#4)
            |     +-field_descriptor=int64_val
            |     +-default_value=0
            +-input_scan=
              +-ArrayScan
                +-column_list=$flatten.[injected#2, injected#3, injected#4]
                +-input_scan=
                | +-ArrayScan
                |   +-column_list=$flatten.[injected#2, injected#3]
                |   +-input_scan=
                |   | +-ArrayScan
                |   |   +-column_list=[$flatten.injected#2]
                |   |   +-array_expr=
                |   |   | +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRUCT<x ARRAY<STRUCT<y PROTO<zetasql_test__.RecursivePB>>>>) -> ARRAY<STRUCT<x ARRAY<STRUCT<y PROTO<zetasql_test__.RecursivePB>>>>>)
                |   |   |   +-MakeStruct
                |   |   |     +-type=STRUCT<x ARRAY<STRUCT<y PROTO<zetasql_test__.RecursivePB>>>>
                |   |   |     +-field_list=
                |   |   |       +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRUCT<y PROTO<zetasql_test__.RecursivePB>>) -> ARRAY<STRUCT<y PROTO<zetasql_test__.RecursivePB>>>)
                |   |   |         +-MakeStruct
                |   |   |           +-type=STRUCT<y PROTO<zetasql_test__.RecursivePB>>
                |   |   |           +-field_list=
                |   |   |             +-MakeProto(type=PROTO<zetasql_test__.RecursivePB>)
                |   |   +-element_column=$flatten.injected#2
                |   +-array_expr=
                |   | +-GetStructField
                |   |   +-type=ARRAY<STRUCT<y PROTO<zetasql_test__.RecursivePB>>>
                |   |   +-expr=
                |   |   | +-ColumnRef(type=STRUCT<x ARRAY<STRUCT<y PROTO<zetasql_test__.RecursivePB>>>>, column=$flatten.injected#2)
                |   |   +-field_idx=0
                |   +-element_column=$flatten.injected#3
                +-array_expr=
                | +-GetProtoField
                |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
                |   +-expr=
                |   | +-GetStructField
                |   |   +-type=PROTO<zetasql_test__.RecursivePB>
                |   |   +-expr=
                |   |   | +-ColumnRef(type=STRUCT<y PROTO<zetasql_test__.RecursivePB>>, column=$flatten.injected#3)
                |   |   +-field_idx=0
                |   +-field_descriptor=repeated_recursive_pb
                |   +-default_value=[]
                +-element_column=$flatten.injected#4
==

select value
from ArrayTypes t, unnest(PROTO_DEFAULT_IF_NULL(t.ProtoArray.int32_val1)) value
--
ERROR: Cannot access field int32_val1 on a value with type ARRAY<zetasql_test__.TestExtraPB>. You may need an explicit call to FLATTEN, and the flattened argument may only contain 'dot' after the first array [at 2:62]
from ArrayTypes t, unnest(PROTO_DEFAULT_IF_NULL(t.ProtoArray.int32_val1)) value
                                                             ^
==

select value
from ArrayTypes t, unnest(array_concat(t.ProtoArray, []).str_value) value
--
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#18]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18]
        +-input_scan=
        | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<STRING>
        |   +-expr=
        |   | +-FunctionCall(ZetaSQL:array_concat(ARRAY<PROTO<zetasql_test__.TestExtraPB>>, repeated(1) ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> ARRAY<PROTO<zetasql_test__.TestExtraPB>>)
        |   |   +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   |   +-Literal(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, value=[])
        |   +-get_field_list=
        |     +-GetProtoField
        |       +-type=ARRAY<STRING>
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |       +-field_descriptor=str_value
        |       +-default_value=[]
        +-element_column=$array.value#18

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#18]
    +-input_scan=
      +-ProjectScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18]
        +-expr_list=
        | +-value#18 := ColumnRef(type=STRING, column=$flatten.injected#20)
        +-input_scan=
          +-ArrayScan
            +-column_list=[ArrayTypes.ProtoArray#15, $flatten.injected#19, $flatten.injected#20]
            +-input_scan=
            | +-ArrayScan
            |   +-column_list=[ArrayTypes.ProtoArray#15, $flatten.injected#19]
            |   +-input_scan=
            |   | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
            |   +-array_expr=
            |   | +-FunctionCall(ZetaSQL:array_concat(ARRAY<PROTO<zetasql_test__.TestExtraPB>>, repeated(1) ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> ARRAY<PROTO<zetasql_test__.TestExtraPB>>)
            |   |   +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
            |   |   +-Literal(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, value=[])
            |   +-element_column=$flatten.injected#19
            +-array_expr=
            | +-GetProtoField
            |   +-type=ARRAY<STRING>
            |   +-expr=
            |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#19)
            |   +-field_descriptor=str_value
            |   +-default_value=[]
            +-element_column=$flatten.injected#20
==

select value
from ArrayTypes t, unnest(array_concat(t.ProtoArray.str_value, ['foo'])) value
--
ERROR: Cannot access field str_value on a value with type ARRAY<zetasql_test__.TestExtraPB>. You may need an explicit call to FLATTEN, and the flattened argument may only contain 'dot' after the first array [at 2:53]
from ArrayTypes t, unnest(array_concat(t.ProtoArray.str_value, ['foo'])) value
                                                    ^
==

[enabled_ast_rewrites=DEFAULTS,-WITH_EXPR|DEFAULTS]
select value
from ArrayTypes t, unnest(array_concat(flatten(t.ProtoArray.str_value), ['foo'])) value
--
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#18]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18]
        +-input_scan=
        | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-array_expr=
        | +-FunctionCall(ZetaSQL:array_concat(ARRAY<STRING>, repeated(1) ARRAY<STRING>) -> ARRAY<STRING>)
        |   +-Flatten
        |   | +-type=ARRAY<STRING>
        |   | +-expr=
        |   | | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   | +-get_field_list=
        |   |   +-GetProtoField
        |   |     +-type=ARRAY<STRING>
        |   |     +-expr=
        |   |     | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |   |     +-field_descriptor=str_value
        |   |     +-default_value=[]
        |   +-Literal(type=ARRAY<STRING>, value=['foo'])
        +-element_column=$array.value#18

[[ REWRITER ARTIFACTS FOR RULE GROUPS 'DEFAULTS,-WITH_EXPR' ]]
[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#18]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18]
        +-input_scan=
        | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-array_expr=
        | +-FunctionCall(ZetaSQL:array_concat(ARRAY<STRING>, repeated(1) ARRAY<STRING>) -> ARRAY<STRING>)
        |   +-WithExpr
        |   | +-type=ARRAY<STRING>
        |   | +-assignment_list=
        |   | | +-injected#19 := ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   | +-expr=
        |   |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        |   |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> BOOL)
        |   |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19)
        |   |     +-Literal(type=ARRAY<STRING>, value=NULL)
        |   |     +-SubqueryExpr
        |   |       +-type=ARRAY<STRING>
        |   |       +-subquery_type=ARRAY
        |   |       +-parameter_list=
        |   |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19)
        |   |       +-subquery=
        |   |         +-OrderByScan
        |   |           +-column_list=[$flatten.injected#22]
        |   |           +-is_ordered=TRUE
        |   |           +-input_scan=
        |   |           | +-ArrayScan
        |   |           |   +-column_list=[$flatten.injected#20, $offset.injected#21, $flatten.injected#22, $offset.injected#23]
        |   |           |   +-input_scan=
        |   |           |   | +-ArrayScan
        |   |           |   |   +-column_list=[$flatten.injected#20, $offset.injected#21]
        |   |           |   |   +-array_expr=
        |   |           |   |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19, is_correlated=TRUE)
        |   |           |   |   +-element_column=$flatten.injected#20
        |   |           |   |   +-array_offset_column=
        |   |           |   |     +-ColumnHolder(column=$offset.injected#21)
        |   |           |   +-array_expr=
        |   |           |   | +-GetProtoField
        |   |           |   |   +-type=ARRAY<STRING>
        |   |           |   |   +-expr=
        |   |           |   |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#20)
        |   |           |   |   +-field_descriptor=str_value
        |   |           |   |   +-default_value=[]
        |   |           |   +-element_column=$flatten.injected#22
        |   |           |   +-array_offset_column=
        |   |           |     +-ColumnHolder(column=$offset.injected#23)
        |   |           +-order_by_item_list=
        |   |             +-OrderByItem
        |   |             | +-column_ref=
        |   |             |   +-ColumnRef(type=INT64, column=$offset.injected#21)
        |   |             +-OrderByItem
        |   |               +-column_ref=
        |   |                 +-ColumnRef(type=INT64, column=$offset.injected#23)
        |   +-Literal(type=ARRAY<STRING>, value=['foo'])
        +-element_column=$array.value#18

[[ REWRITER ARTIFACTS FOR RULE GROUPS 'DEFAULTS' ]]
[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#18]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18]
        +-input_scan=
        | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-array_expr=
        | +-FunctionCall(ZetaSQL:array_concat(ARRAY<STRING>, repeated(1) ARRAY<STRING>) -> ARRAY<STRING>)
        |   +-SubqueryExpr
        |   | +-type=ARRAY<STRING>
        |   | +-subquery_type=SCALAR
        |   | +-parameter_list=
        |   | | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   | +-subquery=
        |   |   +-ProjectScan
        |   |     +-column_list=[$with_expr.injected#24]
        |   |     +-expr_list=
        |   |     | +-injected#24 :=
        |   |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        |   |     |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> BOOL)
        |   |     |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19)
        |   |     |     +-Literal(type=ARRAY<STRING>, value=NULL)
        |   |     |     +-SubqueryExpr
        |   |     |       +-type=ARRAY<STRING>
        |   |     |       +-subquery_type=ARRAY
        |   |     |       +-parameter_list=
        |   |     |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19)
        |   |     |       +-subquery=
        |   |     |         +-OrderByScan
        |   |     |           +-column_list=[$flatten.injected#22]
        |   |     |           +-is_ordered=TRUE
        |   |     |           +-input_scan=
        |   |     |           | +-ArrayScan
        |   |     |           |   +-column_list=[$flatten.injected#20, $offset.injected#21, $flatten.injected#22, $offset.injected#23]
        |   |     |           |   +-input_scan=
        |   |     |           |   | +-ArrayScan
        |   |     |           |   |   +-column_list=[$flatten.injected#20, $offset.injected#21]
        |   |     |           |   |   +-array_expr=
        |   |     |           |   |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19, is_correlated=TRUE)
        |   |     |           |   |   +-element_column=$flatten.injected#20
        |   |     |           |   |   +-array_offset_column=
        |   |     |           |   |     +-ColumnHolder(column=$offset.injected#21)
        |   |     |           |   +-array_expr=
        |   |     |           |   | +-GetProtoField
        |   |     |           |   |   +-type=ARRAY<STRING>
        |   |     |           |   |   +-expr=
        |   |     |           |   |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#20)
        |   |     |           |   |   +-field_descriptor=str_value
        |   |     |           |   |   +-default_value=[]
        |   |     |           |   +-element_column=$flatten.injected#22
        |   |     |           |   +-array_offset_column=
        |   |     |           |     +-ColumnHolder(column=$offset.injected#23)
        |   |     |           +-order_by_item_list=
        |   |     |             +-OrderByItem
        |   |     |             | +-column_ref=
        |   |     |             |   +-ColumnRef(type=INT64, column=$offset.injected#21)
        |   |     |             +-OrderByItem
        |   |     |               +-column_ref=
        |   |     |                 +-ColumnRef(type=INT64, column=$offset.injected#23)
        |   |     +-input_scan=
        |   |       +-ProjectScan
        |   |         +-column_list=[$flatten_input.injected#19]
        |   |         +-expr_list=
        |   |         | +-injected#19 := ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
        |   |         +-input_scan=
        |   |           +-SingleRowScan
        |   +-Literal(type=ARRAY<STRING>, value=['foo'])
        +-element_column=$array.value#18
==

select flatten([
  CAST('repeated_recursive_pb { int64_val: 1 }' AS zetasql_test__.RecursivePB),
  CAST('repeated_recursive_pb { int64_val: 2 } repeated_recursive_pb { int64_val: 3 }' AS zetasql_test__.RecursivePB)
].repeated_recursive_pb.int64_val) AS v
--
QueryStmt
+-output_column_list=
| +-$query.v#1 AS v [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.v#1]
    +-expr_list=
    | +-v#1 :=
    |   +-Flatten
    |     +-type=ARRAY<INT64>
    |     +-expr=
    |     | +-FunctionCall(ZetaSQL:$make_array(repeated(2) PROTO<zetasql_test__.RecursivePB>) -> ARRAY<PROTO<zetasql_test__.RecursivePB>>)
    |     |   +-Cast(STRING -> PROTO<zetasql_test__.RecursivePB>)
    |     |   | +-Literal(type=STRING, value='repeated_recursive_pb { int64_val: 1 }')
    |     |   +-Cast(STRING -> PROTO<zetasql_test__.RecursivePB>)
    |     |     +-Literal(type=STRING, value='repeated_recursive_pb { int64_val: 2 } repeated_recursive_pb { int64_val: 3 }')
    |     +-get_field_list=
    |       +-GetProtoField
    |       | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |       | +-expr=
    |       | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
    |       | +-field_descriptor=repeated_recursive_pb
    |       | +-default_value=[]
    |       +-GetProtoField
    |         +-type=INT64
    |         +-expr=
    |         | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
    |         +-field_descriptor=int64_val
    |         +-default_value=0
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.v#1 AS v [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.v#1]
    +-expr_list=
    | +-v#1 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#8]
    |         +-expr_list=
    |         | +-injected#8 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.RecursivePB>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.RecursivePB>>, column=$flatten_input.injected#2)
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<INT64>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.RecursivePB>>, column=$flatten_input.injected#2)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#7]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#3, $offset.injected#4, $flatten.injected#5, $offset.injected#6, $flatten.injected#7]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#7 :=
    |         |           |   |   +-GetProtoField
    |         |           |   |     +-type=INT64
    |         |           |   |     +-expr=
    |         |           |   |     | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#5)
    |         |           |   |     +-field_descriptor=int64_val
    |         |           |   |     +-default_value=0
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#3, $offset.injected#4, $flatten.injected#5, $offset.injected#6]
    |         |           |       +-input_scan=
    |         |           |       | +-ArrayScan
    |         |           |       |   +-column_list=[$flatten.injected#3, $offset.injected#4]
    |         |           |       |   +-array_expr=
    |         |           |       |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.RecursivePB>>, column=$flatten_input.injected#2, is_correlated=TRUE)
    |         |           |       |   +-element_column=$flatten.injected#3
    |         |           |       |   +-array_offset_column=
    |         |           |       |     +-ColumnHolder(column=$offset.injected#4)
    |         |           |       +-array_expr=
    |         |           |       | +-GetProtoField
    |         |           |       |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |         |           |       |   +-expr=
    |         |           |       |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#3)
    |         |           |       |   +-field_descriptor=repeated_recursive_pb
    |         |           |       |   +-default_value=[]
    |         |           |       +-element_column=$flatten.injected#5
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#6)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |             | +-column_ref=
    |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#4)
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#6)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#2]
    |             +-expr_list=
    |             | +-injected#2 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) PROTO<zetasql_test__.RecursivePB>) -> ARRAY<PROTO<zetasql_test__.RecursivePB>>)
    |             |     +-Cast(STRING -> PROTO<zetasql_test__.RecursivePB>)
    |             |     | +-Literal(type=STRING, value='repeated_recursive_pb { int64_val: 1 }')
    |             |     +-Cast(STRING -> PROTO<zetasql_test__.RecursivePB>)
    |             |       +-Literal(type=STRING, value='repeated_recursive_pb { int64_val: 2 } repeated_recursive_pb { int64_val: 3 }')
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

select flatten(t.KitchenSink.repeated_int32_val)
from TestTable t
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS "$col1" [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-GetProtoField
    |     +-type=ARRAY<INT32>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=repeated_int32_val
    |     +-default_value=[]
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias='t')
==

select flatten(t.ProtoArray.str_value) as value
from ArrayTypes t
--
QueryStmt
+-output_column_list=
| +-$query.value#18 AS value [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.value#18]
    +-expr_list=
    | +-value#18 :=
    |   +-Flatten
    |     +-type=ARRAY<STRING>
    |     +-expr=
    |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |     +-get_field_list=
    |       +-GetProtoField
    |         +-type=ARRAY<STRING>
    |         +-expr=
    |         | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
    |         +-field_descriptor=str_value
    |         +-default_value=[]
    +-input_scan=
      +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.value#18 AS value [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.value#18]
    +-expr_list=
    | +-value#18 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<STRING>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#24]
    |         +-expr_list=
    |         | +-injected#24 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19)
    |         |     +-Literal(type=ARRAY<STRING>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<STRING>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#22]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ArrayScan
    |         |           |   +-column_list=[$flatten.injected#20, $offset.injected#21, $flatten.injected#22, $offset.injected#23]
    |         |           |   +-input_scan=
    |         |           |   | +-ArrayScan
    |         |           |   |   +-column_list=[$flatten.injected#20, $offset.injected#21]
    |         |           |   |   +-array_expr=
    |         |           |   |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19, is_correlated=TRUE)
    |         |           |   |   +-element_column=$flatten.injected#20
    |         |           |   |   +-array_offset_column=
    |         |           |   |     +-ColumnHolder(column=$offset.injected#21)
    |         |           |   +-array_expr=
    |         |           |   | +-GetProtoField
    |         |           |   |   +-type=ARRAY<STRING>
    |         |           |   |   +-expr=
    |         |           |   |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#20)
    |         |           |   |   +-field_descriptor=str_value
    |         |           |   |   +-default_value=[]
    |         |           |   +-element_column=$flatten.injected#22
    |         |           |   +-array_offset_column=
    |         |           |     +-ColumnHolder(column=$offset.injected#23)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |             | +-column_ref=
    |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#21)
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#23)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#19]
    |             +-expr_list=
    |             | +-injected#19 := ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
==

select flatten(flatten(t.ProtoArray.str_value)) as value
from ArrayTypes t
--
QueryStmt
+-output_column_list=
| +-$query.value#18 AS value [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.value#18]
    +-expr_list=
    | +-value#18 :=
    |   +-Flatten
    |     +-type=ARRAY<STRING>
    |     +-expr=
    |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |     +-get_field_list=
    |       +-GetProtoField
    |         +-type=ARRAY<STRING>
    |         +-expr=
    |         | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
    |         +-field_descriptor=str_value
    |         +-default_value=[]
    +-input_scan=
      +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.value#18 AS value [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.value#18]
    +-expr_list=
    | +-value#18 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<STRING>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#24]
    |         +-expr_list=
    |         | +-injected#24 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19)
    |         |     +-Literal(type=ARRAY<STRING>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<STRING>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#22]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ArrayScan
    |         |           |   +-column_list=[$flatten.injected#20, $offset.injected#21, $flatten.injected#22, $offset.injected#23]
    |         |           |   +-input_scan=
    |         |           |   | +-ArrayScan
    |         |           |   |   +-column_list=[$flatten.injected#20, $offset.injected#21]
    |         |           |   |   +-array_expr=
    |         |           |   |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19, is_correlated=TRUE)
    |         |           |   |   +-element_column=$flatten.injected#20
    |         |           |   |   +-array_offset_column=
    |         |           |   |     +-ColumnHolder(column=$offset.injected#21)
    |         |           |   +-array_expr=
    |         |           |   | +-GetProtoField
    |         |           |   |   +-type=ARRAY<STRING>
    |         |           |   |   +-expr=
    |         |           |   |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#20)
    |         |           |   |   +-field_descriptor=str_value
    |         |           |   |   +-default_value=[]
    |         |           |   +-element_column=$flatten.injected#22
    |         |           |   +-array_offset_column=
    |         |           |     +-ColumnHolder(column=$offset.injected#23)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |             | +-column_ref=
    |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#21)
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#23)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#19]
    |             +-expr_list=
    |             | +-injected#19 := ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
==

select flatten(
    array_concat(flatten([struct([struct(1 as b)] as a)].a),
                 flatten([struct([struct(2 as b)] as a)].a)).b)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Flatten
    |     +-type=ARRAY<INT64>
    |     +-expr=
    |     | +-FunctionCall(ZetaSQL:array_concat(ARRAY<STRUCT<b INT64>>, repeated(1) ARRAY<STRUCT<b INT64>>) -> ARRAY<STRUCT<b INT64>>)
    |     |   +-Flatten
    |     |   | +-type=ARRAY<STRUCT<b INT64>>
    |     |   | +-expr=
    |     |   | | +-Literal(type=ARRAY<STRUCT<a ARRAY<STRUCT<b INT64>>>>, value=[{a:[{b:1}]}])
    |     |   | +-get_field_list=
    |     |   |   +-GetStructField
    |     |   |     +-type=ARRAY<STRUCT<b INT64>>
    |     |   |     +-expr=
    |     |   |     | +-FlattenedArg(type=STRUCT<a ARRAY<STRUCT<b INT64>>>)
    |     |   |     +-field_idx=0
    |     |   +-Flatten
    |     |     +-type=ARRAY<STRUCT<b INT64>>
    |     |     +-expr=
    |     |     | +-Literal(type=ARRAY<STRUCT<a ARRAY<STRUCT<b INT64>>>>, value=[{a:[{b:2}]}])
    |     |     +-get_field_list=
    |     |       +-GetStructField
    |     |         +-type=ARRAY<STRUCT<b INT64>>
    |     |         +-expr=
    |     |         | +-FlattenedArg(type=STRUCT<a ARRAY<STRUCT<b INT64>>>)
    |     |         +-field_idx=0
    |     +-get_field_list=
    |       +-GetStructField
    |         +-type=INT64
    |         +-expr=
    |         | +-FlattenedArg(type=STRUCT<b INT64>)
    |         +-field_idx=0
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#18]
    |         +-expr_list=
    |         | +-injected#18 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<b INT64>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRUCT<b INT64>>, column=$flatten_input.injected#2)
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<INT64>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<STRUCT<b INT64>>, column=$flatten_input.injected#2)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#5]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#3, $offset.injected#4, $flatten.injected#5]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#5 :=
    |         |           |   |   +-GetStructField
    |         |           |   |     +-type=INT64
    |         |           |   |     +-expr=
    |         |           |   |     | +-ColumnRef(type=STRUCT<b INT64>, column=$flatten.injected#3)
    |         |           |   |     +-field_idx=0
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#3, $offset.injected#4]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<STRUCT<b INT64>>, column=$flatten_input.injected#2, is_correlated=TRUE)
    |         |           |       +-element_column=$flatten.injected#3
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#4)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#4)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#2]
    |             +-expr_list=
    |             | +-injected#2 :=
    |             |   +-FunctionCall(ZetaSQL:array_concat(ARRAY<STRUCT<b INT64>>, repeated(1) ARRAY<STRUCT<b INT64>>) -> ARRAY<STRUCT<b INT64>>)
    |             |     +-SubqueryExpr
    |             |     | +-type=ARRAY<STRUCT<b INT64>>
    |             |     | +-subquery_type=SCALAR
    |             |     | +-subquery=
    |             |     |   +-ProjectScan
    |             |     |     +-column_list=[$with_expr.injected#16]
    |             |     |     +-expr_list=
    |             |     |     | +-injected#16 :=
    |             |     |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<b INT64>>, ARRAY<STRUCT<b INT64>>) -> ARRAY<STRUCT<b INT64>>)
    |             |     |     |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<a ARRAY<STRUCT<b INT64>>>>) -> BOOL)
    |             |     |     |     | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b INT64>>>>, column=$flatten_input.injected#6)
    |             |     |     |     +-Literal(type=ARRAY<STRUCT<b INT64>>, value=NULL)
    |             |     |     |     +-SubqueryExpr
    |             |     |     |       +-type=ARRAY<STRUCT<b INT64>>
    |             |     |     |       +-subquery_type=ARRAY
    |             |     |     |       +-parameter_list=
    |             |     |     |       | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b INT64>>>>, column=$flatten_input.injected#6)
    |             |     |     |       +-subquery=
    |             |     |     |         +-OrderByScan
    |             |     |     |           +-column_list=[$flatten.injected#9]
    |             |     |     |           +-is_ordered=TRUE
    |             |     |     |           +-input_scan=
    |             |     |     |           | +-ArrayScan
    |             |     |     |           |   +-column_list=[$flatten.injected#7, $offset.injected#8, $flatten.injected#9, $offset.injected#10]
    |             |     |     |           |   +-input_scan=
    |             |     |     |           |   | +-ArrayScan
    |             |     |     |           |   |   +-column_list=[$flatten.injected#7, $offset.injected#8]
    |             |     |     |           |   |   +-array_expr=
    |             |     |     |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b INT64>>>>, column=$flatten_input.injected#6, is_correlated=TRUE)
    |             |     |     |           |   |   +-element_column=$flatten.injected#7
    |             |     |     |           |   |   +-array_offset_column=
    |             |     |     |           |   |     +-ColumnHolder(column=$offset.injected#8)
    |             |     |     |           |   +-array_expr=
    |             |     |     |           |   | +-GetStructField
    |             |     |     |           |   |   +-type=ARRAY<STRUCT<b INT64>>
    |             |     |     |           |   |   +-expr=
    |             |     |     |           |   |   | +-ColumnRef(type=STRUCT<a ARRAY<STRUCT<b INT64>>>, column=$flatten.injected#7)
    |             |     |     |           |   |   +-field_idx=0
    |             |     |     |           |   +-element_column=$flatten.injected#9
    |             |     |     |           |   +-array_offset_column=
    |             |     |     |           |     +-ColumnHolder(column=$offset.injected#10)
    |             |     |     |           +-order_by_item_list=
    |             |     |     |             +-OrderByItem
    |             |     |     |             | +-column_ref=
    |             |     |     |             |   +-ColumnRef(type=INT64, column=$offset.injected#8)
    |             |     |     |             +-OrderByItem
    |             |     |     |               +-column_ref=
    |             |     |     |                 +-ColumnRef(type=INT64, column=$offset.injected#10)
    |             |     |     +-input_scan=
    |             |     |       +-ProjectScan
    |             |     |         +-column_list=[$flatten_input.injected#6]
    |             |     |         +-expr_list=
    |             |     |         | +-injected#6 := Literal(type=ARRAY<STRUCT<a ARRAY<STRUCT<b INT64>>>>, value=[{a:[{b:1}]}])
    |             |     |         +-input_scan=
    |             |     |           +-SingleRowScan
    |             |     +-SubqueryExpr
    |             |       +-type=ARRAY<STRUCT<b INT64>>
    |             |       +-subquery_type=SCALAR
    |             |       +-subquery=
    |             |         +-ProjectScan
    |             |           +-column_list=[$with_expr.injected#17]
    |             |           +-expr_list=
    |             |           | +-injected#17 :=
    |             |           |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<b INT64>>, ARRAY<STRUCT<b INT64>>) -> ARRAY<STRUCT<b INT64>>)
    |             |           |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<a ARRAY<STRUCT<b INT64>>>>) -> BOOL)
    |             |           |     | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b INT64>>>>, column=$flatten_input.injected#11)
    |             |           |     +-Literal(type=ARRAY<STRUCT<b INT64>>, value=NULL)
    |             |           |     +-SubqueryExpr
    |             |           |       +-type=ARRAY<STRUCT<b INT64>>
    |             |           |       +-subquery_type=ARRAY
    |             |           |       +-parameter_list=
    |             |           |       | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b INT64>>>>, column=$flatten_input.injected#11)
    |             |           |       +-subquery=
    |             |           |         +-OrderByScan
    |             |           |           +-column_list=[$flatten.injected#14]
    |             |           |           +-is_ordered=TRUE
    |             |           |           +-input_scan=
    |             |           |           | +-ArrayScan
    |             |           |           |   +-column_list=[$flatten.injected#12, $offset.injected#13, $flatten.injected#14, $offset.injected#15]
    |             |           |           |   +-input_scan=
    |             |           |           |   | +-ArrayScan
    |             |           |           |   |   +-column_list=[$flatten.injected#12, $offset.injected#13]
    |             |           |           |   |   +-array_expr=
    |             |           |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b INT64>>>>, column=$flatten_input.injected#11, is_correlated=TRUE)
    |             |           |           |   |   +-element_column=$flatten.injected#12
    |             |           |           |   |   +-array_offset_column=
    |             |           |           |   |     +-ColumnHolder(column=$offset.injected#13)
    |             |           |           |   +-array_expr=
    |             |           |           |   | +-GetStructField
    |             |           |           |   |   +-type=ARRAY<STRUCT<b INT64>>
    |             |           |           |   |   +-expr=
    |             |           |           |   |   | +-ColumnRef(type=STRUCT<a ARRAY<STRUCT<b INT64>>>, column=$flatten.injected#12)
    |             |           |           |   |   +-field_idx=0
    |             |           |           |   +-element_column=$flatten.injected#14
    |             |           |           |   +-array_offset_column=
    |             |           |           |     +-ColumnHolder(column=$offset.injected#15)
    |             |           |           +-order_by_item_list=
    |             |           |             +-OrderByItem
    |             |           |             | +-column_ref=
    |             |           |             |   +-ColumnRef(type=INT64, column=$offset.injected#13)
    |             |           |             +-OrderByItem
    |             |           |               +-column_ref=
    |             |           |                 +-ColumnRef(type=INT64, column=$offset.injected#15)
    |             |           +-input_scan=
    |             |             +-ProjectScan
    |             |               +-column_list=[$flatten_input.injected#11]
    |             |               +-expr_list=
    |             |               | +-injected#11 := Literal(type=ARRAY<STRUCT<a ARRAY<STRUCT<b INT64>>>>, value=[{a:[{b:2}]}])
    |             |               +-input_scan=
    |             |                 +-SingleRowScan
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

select flatten(t.ProtoArray.str_value, ['a', 'b']) as value
from ArrayTypes t
--
ERROR: Number of arguments does not match for function FLATTEN. Supported signature: FLATTEN(ARRAY) [at 1:8]
select flatten(t.ProtoArray.str_value, ['a', 'b']) as value
       ^
==

select flatten() as value
from ArrayTypes t
--
ERROR: Number of arguments does not match for function FLATTEN. Supported signature: FLATTEN(ARRAY) [at 1:8]
select flatten() as value
       ^
==

select flatten(struct(3 as x, 4 as y)) as value
from ArrayTypes t
--
ERROR: No matching signature for function FLATTEN for argument types: STRUCT<x INT64, y INT64>. Supported signature: FLATTEN(ARRAY) [at 1:8]
select flatten(struct(3 as x, 4 as y)) as value
       ^
==

select *
from TestTable t
where t.key in UNNEST((SELECT flatten(t.KitchenSink.nested_repeated_value.nested_int64)));
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2], alias='t')
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$in_array(INT64, ARRAY<INT64>) -> BOOL)
            +-Cast(INT32 -> INT64)
            | +-ColumnRef(type=INT32, column=TestTable.key#1)
            +-SubqueryExpr
              +-type=ARRAY<INT64>
              +-subquery_type=SCALAR
              +-parameter_list=
              | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
              +-subquery=
                +-ProjectScan
                  +-column_list=[$expr_subquery.$col1#4]
                  +-expr_list=
                  | +-$col1#4 :=
                  |   +-Flatten
                  |     +-type=ARRAY<INT64>
                  |     +-expr=
                  |     | +-GetProtoField
                  |     |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
                  |     |   +-expr=
                  |     |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                  |     |   +-field_descriptor=nested_repeated_value
                  |     |   +-default_value=[]
                  |     +-get_field_list=
                  |       +-GetProtoField
                  |         +-type=INT64
                  |         +-expr=
                  |         | +-FlattenedArg(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>)
                  |         +-field_descriptor=nested_int64
                  |         +-default_value=88
                  +-input_scan=
                    +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2], alias='t')
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$in_array(INT64, ARRAY<INT64>) -> BOOL)
            +-Cast(INT32 -> INT64)
            | +-ColumnRef(type=INT32, column=TestTable.key#1)
            +-SubqueryExpr
              +-type=ARRAY<INT64>
              +-subquery_type=SCALAR
              +-parameter_list=
              | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
              +-subquery=
                +-ProjectScan
                  +-column_list=[$expr_subquery.$col1#4]
                  +-expr_list=
                  | +-$col1#4 :=
                  |   +-SubqueryExpr
                  |     +-type=ARRAY<INT64>
                  |     +-subquery_type=SCALAR
                  |     +-parameter_list=
                  |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                  |     +-subquery=
                  |       +-ProjectScan
                  |         +-column_list=[$with_expr.injected#9]
                  |         +-expr_list=
                  |         | +-injected#9 :=
                  |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
                  |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>) -> BOOL)
                  |         |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$flatten_input.injected#5)
                  |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
                  |         |     +-SubqueryExpr
                  |         |       +-type=ARRAY<INT64>
                  |         |       +-subquery_type=ARRAY
                  |         |       +-parameter_list=
                  |         |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$flatten_input.injected#5)
                  |         |       +-subquery=
                  |         |         +-OrderByScan
                  |         |           +-column_list=[$flatten.injected#8]
                  |         |           +-is_ordered=TRUE
                  |         |           +-input_scan=
                  |         |           | +-ProjectScan
                  |         |           |   +-column_list=[$flatten.injected#6, $offset.injected#7, $flatten.injected#8]
                  |         |           |   +-expr_list=
                  |         |           |   | +-injected#8 :=
                  |         |           |   |   +-GetProtoField
                  |         |           |   |     +-type=INT64
                  |         |           |   |     +-expr=
                  |         |           |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$flatten.injected#6)
                  |         |           |   |     +-field_descriptor=nested_int64
                  |         |           |   |     +-default_value=88
                  |         |           |   +-input_scan=
                  |         |           |     +-ArrayScan
                  |         |           |       +-column_list=[$flatten.injected#6, $offset.injected#7]
                  |         |           |       +-array_expr=
                  |         |           |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$flatten_input.injected#5, is_correlated=TRUE)
                  |         |           |       +-element_column=$flatten.injected#6
                  |         |           |       +-array_offset_column=
                  |         |           |         +-ColumnHolder(column=$offset.injected#7)
                  |         |           +-order_by_item_list=
                  |         |             +-OrderByItem
                  |         |               +-column_ref=
                  |         |                 +-ColumnRef(type=INT64, column=$offset.injected#7)
                  |         +-input_scan=
                  |           +-ProjectScan
                  |             +-column_list=[$flatten_input.injected#5]
                  |             +-expr_list=
                  |             | +-injected#5 :=
                  |             |   +-GetProtoField
                  |             |     +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
                  |             |     +-expr=
                  |             |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                  |             |     +-field_descriptor=nested_repeated_value
                  |             |     +-default_value=[]
                  |             +-input_scan=
                  |               +-SingleRowScan
                  +-input_scan=
                    +-SingleRowScan
==

select value
from ArrayTypes t, unnest(t.ProtoArray.int32_val1) value with offset o
order by o
--
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [INT32]
+-query=
  +-OrderByScan
    +-column_list=[$array.value#18]
    +-is_ordered=TRUE
    +-input_scan=
    | +-ArrayScan
    |   +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18, $array_offset.o#19]
    |   +-input_scan=
    |   | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
    |   +-array_expr=
    |   | +-Flatten
    |   |   +-type=ARRAY<INT32>
    |   |   +-expr=
    |   |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |   |   +-get_field_list=
    |   |     +-GetProtoField
    |   |       +-type=INT32
    |   |       +-expr=
    |   |       | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
    |   |       +-field_descriptor=int32_val1
    |   |       +-default_value=0
    |   +-element_column=$array.value#18
    |   +-array_offset_column=
    |     +-ColumnHolder(column=$array_offset.o#19)
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=INT64, column=$array_offset.o#19)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#18 AS value [INT32]
+-query=
  +-OrderByScan
    +-column_list=[$array.value#18]
    +-is_ordered=TRUE
    +-input_scan=
    | +-ArrayScan
    |   +-column_list=[ArrayTypes.ProtoArray#15, $array.value#18, $array_offset.o#19]
    |   +-input_scan=
    |   | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
    |   +-array_expr=
    |   | +-SubqueryExpr
    |   |   +-type=ARRAY<INT32>
    |   |   +-subquery_type=ARRAY
    |   |   +-parameter_list=
    |   |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |   |   +-subquery=
    |   |     +-OrderByScan
    |   |       +-column_list=[$flatten.injected#22]
    |   |       +-is_ordered=TRUE
    |   |       +-input_scan=
    |   |       | +-ProjectScan
    |   |       |   +-column_list=[$flatten.injected#20, $offset.injected#21, $flatten.injected#22]
    |   |       |   +-expr_list=
    |   |       |   | +-injected#22 :=
    |   |       |   |   +-GetProtoField
    |   |       |   |     +-type=INT32
    |   |       |   |     +-expr=
    |   |       |   |     | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#20)
    |   |       |   |     +-field_descriptor=int32_val1
    |   |       |   |     +-default_value=0
    |   |       |   +-input_scan=
    |   |       |     +-ArrayScan
    |   |       |       +-column_list=[$flatten.injected#20, $offset.injected#21]
    |   |       |       +-input_scan=
    |   |       |       | +-SingleRowScan
    |   |       |       +-array_expr=
    |   |       |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
    |   |       |       +-element_column=$flatten.injected#20
    |   |       |       +-array_offset_column=
    |   |       |         +-ColumnHolder(column=$offset.injected#21)
    |   |       +-order_by_item_list=
    |   |         +-OrderByItem
    |   |           +-column_ref=
    |   |             +-ColumnRef(type=INT64, column=$offset.injected#21)
    |   +-element_column=$array.value#18
    |   +-array_offset_column=
    |     +-ColumnHolder(column=$array_offset.o#19)
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=INT64, column=$array_offset.o#19)
==

select value, o
from RecursivePBTable t, unnest(t.RecursivePB.repeated_recursive_pb.repeated_recursive_pb.repeated_recursive_pb.recursive_pb.repeated_recursive_pb.int64_val) value with offset o
--
QueryStmt
+-output_column_list=
| +-$array.value#2 AS value [INT64]
| +-$array_offset.o#3 AS o [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#2, $array_offset.o#3]
    +-input_scan=
      +-ArrayScan
        +-column_list=[RecursivePBTable.RecursivePB#1, $array.value#2, $array_offset.o#3]
        +-input_scan=
        | +-TableScan(column_list=[RecursivePBTable.RecursivePB#1], table=RecursivePBTable, column_index_list=[0], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
        |   |   +-field_descriptor=repeated_recursive_pb
        |   |   +-default_value=[]
        |   +-get_field_list=
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=repeated_recursive_pb
        |     | +-default_value=[]
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=repeated_recursive_pb
        |     | +-default_value=[]
        |     +-GetProtoField
        |     | +-type=PROTO<zetasql_test__.RecursivePB>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=recursive_pb
        |     | +-default_value=NULL
        |     +-GetProtoField
        |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |     | +-expr=
        |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |     | +-field_descriptor=repeated_recursive_pb
        |     | +-default_value=[]
        |     +-GetProtoField
        |       +-type=INT64
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
        |       +-field_descriptor=int64_val
        |       +-default_value=0
        +-element_column=$array.value#2
        +-array_offset_column=
          +-ColumnHolder(column=$array_offset.o#3)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#2 AS value [INT64]
| +-$array_offset.o#3 AS o [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.value#2, $array_offset.o#3]
    +-input_scan=
      +-ArrayScan
        +-column_list=[RecursivePBTable.RecursivePB#1, $array.value#2, $array_offset.o#3]
        +-input_scan=
        | +-TableScan(column_list=[RecursivePBTable.RecursivePB#1], table=RecursivePBTable, column_index_list=[0], alias='t')
        +-array_expr=
        | +-SubqueryExpr
        |   +-type=ARRAY<INT64>
        |   +-subquery_type=ARRAY
        |   +-parameter_list=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
        |   +-subquery=
        |     +-OrderByScan
        |       +-column_list=[$flatten.injected#12]
        |       +-is_ordered=TRUE
        |       +-input_scan=
        |       | +-ProjectScan
        |       |   +-column_list=[$flatten.injected#4, $offset.injected#5, $flatten.injected#6, $offset.injected#7, $flatten.injected#8, $offset.injected#9, $flatten.injected#10, $offset.injected#11, $flatten.injected#12]
        |       |   +-expr_list=
        |       |   | +-injected#12 :=
        |       |   |   +-GetProtoField
        |       |   |     +-type=INT64
        |       |   |     +-expr=
        |       |   |     | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#10)
        |       |   |     +-field_descriptor=int64_val
        |       |   |     +-default_value=0
        |       |   +-input_scan=
        |       |     +-ArrayScan
        |       |       +-column_list=[$flatten.injected#4, $offset.injected#5, $flatten.injected#6, $offset.injected#7, $flatten.injected#8, $offset.injected#9, $flatten.injected#10, $offset.injected#11]
        |       |       +-input_scan=
        |       |       | +-ArrayScan
        |       |       |   +-column_list=[$flatten.injected#4, $offset.injected#5, $flatten.injected#6, $offset.injected#7, $flatten.injected#8, $offset.injected#9]
        |       |       |   +-input_scan=
        |       |       |   | +-ArrayScan
        |       |       |   |   +-column_list=[$flatten.injected#4, $offset.injected#5, $flatten.injected#6, $offset.injected#7]
        |       |       |   |   +-input_scan=
        |       |       |   |   | +-ArrayScan
        |       |       |   |   |   +-column_list=[$flatten.injected#4, $offset.injected#5]
        |       |       |   |   |   +-input_scan=
        |       |       |   |   |   | +-SingleRowScan
        |       |       |   |   |   +-array_expr=
        |       |       |   |   |   | +-GetProtoField
        |       |       |   |   |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |       |       |   |   |   |   +-expr=
        |       |       |   |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1, is_correlated=TRUE)
        |       |       |   |   |   |   +-field_descriptor=repeated_recursive_pb
        |       |       |   |   |   |   +-default_value=[]
        |       |       |   |   |   +-element_column=$flatten.injected#4
        |       |       |   |   |   +-array_offset_column=
        |       |       |   |   |     +-ColumnHolder(column=$offset.injected#5)
        |       |       |   |   +-array_expr=
        |       |       |   |   | +-GetProtoField
        |       |       |   |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |       |       |   |   |   +-expr=
        |       |       |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#4)
        |       |       |   |   |   +-field_descriptor=repeated_recursive_pb
        |       |       |   |   |   +-default_value=[]
        |       |       |   |   +-element_column=$flatten.injected#6
        |       |       |   |   +-array_offset_column=
        |       |       |   |     +-ColumnHolder(column=$offset.injected#7)
        |       |       |   +-array_expr=
        |       |       |   | +-GetProtoField
        |       |       |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |       |       |   |   +-expr=
        |       |       |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#6)
        |       |       |   |   +-field_descriptor=repeated_recursive_pb
        |       |       |   |   +-default_value=[]
        |       |       |   +-element_column=$flatten.injected#8
        |       |       |   +-array_offset_column=
        |       |       |     +-ColumnHolder(column=$offset.injected#9)
        |       |       +-array_expr=
        |       |       | +-GetProtoField
        |       |       |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
        |       |       |   +-expr=
        |       |       |   | +-GetProtoField
        |       |       |   |   +-type=PROTO<zetasql_test__.RecursivePB>
        |       |       |   |   +-expr=
        |       |       |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#8)
        |       |       |   |   +-field_descriptor=recursive_pb
        |       |       |   |   +-default_value=NULL
        |       |       |   +-field_descriptor=repeated_recursive_pb
        |       |       |   +-default_value=[]
        |       |       +-element_column=$flatten.injected#10
        |       |       +-array_offset_column=
        |       |         +-ColumnHolder(column=$offset.injected#11)
        |       +-order_by_item_list=
        |         +-OrderByItem
        |         | +-column_ref=
        |         |   +-ColumnRef(type=INT64, column=$offset.injected#5)
        |         +-OrderByItem
        |         | +-column_ref=
        |         |   +-ColumnRef(type=INT64, column=$offset.injected#7)
        |         +-OrderByItem
        |         | +-column_ref=
        |         |   +-ColumnRef(type=INT64, column=$offset.injected#9)
        |         +-OrderByItem
        |           +-column_ref=
        |             +-ColumnRef(type=INT64, column=$offset.injected#11)
        +-element_column=$array.value#2
        +-array_offset_column=
          +-ColumnHolder(column=$array_offset.o#3)

==

select value, o
from RecursivePBTable t, unnest(t.RecursivePB.repeated_recursive_pb.repeated_recursive_pb.repeated_recursive_pb.recursive_pb.repeated_recursive_pb.int64_val) value with offset o
order by o
--
QueryStmt
+-output_column_list=
| +-$array.value#2 AS value [INT64]
| +-$array_offset.o#3 AS o [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$array.value#2, $array_offset.o#3]
    +-is_ordered=TRUE
    +-input_scan=
    | +-ArrayScan
    |   +-column_list=[RecursivePBTable.RecursivePB#1, $array.value#2, $array_offset.o#3]
    |   +-input_scan=
    |   | +-TableScan(column_list=[RecursivePBTable.RecursivePB#1], table=RecursivePBTable, column_index_list=[0], alias='t')
    |   +-array_expr=
    |   | +-Flatten
    |   |   +-type=ARRAY<INT64>
    |   |   +-expr=
    |   |   | +-GetProtoField
    |   |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |   |   |   +-expr=
    |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
    |   |   |   +-field_descriptor=repeated_recursive_pb
    |   |   |   +-default_value=[]
    |   |   +-get_field_list=
    |   |     +-GetProtoField
    |   |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |   |     | +-expr=
    |   |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
    |   |     | +-field_descriptor=repeated_recursive_pb
    |   |     | +-default_value=[]
    |   |     +-GetProtoField
    |   |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |   |     | +-expr=
    |   |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
    |   |     | +-field_descriptor=repeated_recursive_pb
    |   |     | +-default_value=[]
    |   |     +-GetProtoField
    |   |     | +-type=PROTO<zetasql_test__.RecursivePB>
    |   |     | +-expr=
    |   |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
    |   |     | +-field_descriptor=recursive_pb
    |   |     | +-default_value=NULL
    |   |     +-GetProtoField
    |   |     | +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |   |     | +-expr=
    |   |     | | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
    |   |     | +-field_descriptor=repeated_recursive_pb
    |   |     | +-default_value=[]
    |   |     +-GetProtoField
    |   |       +-type=INT64
    |   |       +-expr=
    |   |       | +-FlattenedArg(type=PROTO<zetasql_test__.RecursivePB>)
    |   |       +-field_descriptor=int64_val
    |   |       +-default_value=0
    |   +-element_column=$array.value#2
    |   +-array_offset_column=
    |     +-ColumnHolder(column=$array_offset.o#3)
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=INT64, column=$array_offset.o#3)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.value#2 AS value [INT64]
| +-$array_offset.o#3 AS o [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$array.value#2, $array_offset.o#3]
    +-is_ordered=TRUE
    +-input_scan=
    | +-ArrayScan
    |   +-column_list=[RecursivePBTable.RecursivePB#1, $array.value#2, $array_offset.o#3]
    |   +-input_scan=
    |   | +-TableScan(column_list=[RecursivePBTable.RecursivePB#1], table=RecursivePBTable, column_index_list=[0], alias='t')
    |   +-array_expr=
    |   | +-SubqueryExpr
    |   |   +-type=ARRAY<INT64>
    |   |   +-subquery_type=ARRAY
    |   |   +-parameter_list=
    |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1)
    |   |   +-subquery=
    |   |     +-OrderByScan
    |   |       +-column_list=[$flatten.injected#12]
    |   |       +-is_ordered=TRUE
    |   |       +-input_scan=
    |   |       | +-ProjectScan
    |   |       |   +-column_list=[$flatten.injected#4, $offset.injected#5, $flatten.injected#6, $offset.injected#7, $flatten.injected#8, $offset.injected#9, $flatten.injected#10, $offset.injected#11, $flatten.injected#12]
    |   |       |   +-expr_list=
    |   |       |   | +-injected#12 :=
    |   |       |   |   +-GetProtoField
    |   |       |   |     +-type=INT64
    |   |       |   |     +-expr=
    |   |       |   |     | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#10)
    |   |       |   |     +-field_descriptor=int64_val
    |   |       |   |     +-default_value=0
    |   |       |   +-input_scan=
    |   |       |     +-ArrayScan
    |   |       |       +-column_list=[$flatten.injected#4, $offset.injected#5, $flatten.injected#6, $offset.injected#7, $flatten.injected#8, $offset.injected#9, $flatten.injected#10, $offset.injected#11]
    |   |       |       +-input_scan=
    |   |       |       | +-ArrayScan
    |   |       |       |   +-column_list=[$flatten.injected#4, $offset.injected#5, $flatten.injected#6, $offset.injected#7, $flatten.injected#8, $offset.injected#9]
    |   |       |       |   +-input_scan=
    |   |       |       |   | +-ArrayScan
    |   |       |       |   |   +-column_list=[$flatten.injected#4, $offset.injected#5, $flatten.injected#6, $offset.injected#7]
    |   |       |       |   |   +-input_scan=
    |   |       |       |   |   | +-ArrayScan
    |   |       |       |   |   |   +-column_list=[$flatten.injected#4, $offset.injected#5]
    |   |       |       |   |   |   +-input_scan=
    |   |       |       |   |   |   | +-SingleRowScan
    |   |       |       |   |   |   +-array_expr=
    |   |       |       |   |   |   | +-GetProtoField
    |   |       |       |   |   |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |   |       |       |   |   |   |   +-expr=
    |   |       |       |   |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=RecursivePBTable.RecursivePB#1, is_correlated=TRUE)
    |   |       |       |   |   |   |   +-field_descriptor=repeated_recursive_pb
    |   |       |       |   |   |   |   +-default_value=[]
    |   |       |       |   |   |   +-element_column=$flatten.injected#4
    |   |       |       |   |   |   +-array_offset_column=
    |   |       |       |   |   |     +-ColumnHolder(column=$offset.injected#5)
    |   |       |       |   |   +-array_expr=
    |   |       |       |   |   | +-GetProtoField
    |   |       |       |   |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |   |       |       |   |   |   +-expr=
    |   |       |       |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#4)
    |   |       |       |   |   |   +-field_descriptor=repeated_recursive_pb
    |   |       |       |   |   |   +-default_value=[]
    |   |       |       |   |   +-element_column=$flatten.injected#6
    |   |       |       |   |   +-array_offset_column=
    |   |       |       |   |     +-ColumnHolder(column=$offset.injected#7)
    |   |       |       |   +-array_expr=
    |   |       |       |   | +-GetProtoField
    |   |       |       |   |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |   |       |       |   |   +-expr=
    |   |       |       |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#6)
    |   |       |       |   |   +-field_descriptor=repeated_recursive_pb
    |   |       |       |   |   +-default_value=[]
    |   |       |       |   +-element_column=$flatten.injected#8
    |   |       |       |   +-array_offset_column=
    |   |       |       |     +-ColumnHolder(column=$offset.injected#9)
    |   |       |       +-array_expr=
    |   |       |       | +-GetProtoField
    |   |       |       |   +-type=ARRAY<PROTO<zetasql_test__.RecursivePB>>
    |   |       |       |   +-expr=
    |   |       |       |   | +-GetProtoField
    |   |       |       |   |   +-type=PROTO<zetasql_test__.RecursivePB>
    |   |       |       |   |   +-expr=
    |   |       |       |   |   | +-ColumnRef(type=PROTO<zetasql_test__.RecursivePB>, column=$flatten.injected#8)
    |   |       |       |   |   +-field_descriptor=recursive_pb
    |   |       |       |   |   +-default_value=NULL
    |   |       |       |   +-field_descriptor=repeated_recursive_pb
    |   |       |       |   +-default_value=[]
    |   |       |       +-element_column=$flatten.injected#10
    |   |       |       +-array_offset_column=
    |   |       |         +-ColumnHolder(column=$offset.injected#11)
    |   |       +-order_by_item_list=
    |   |         +-OrderByItem
    |   |         | +-column_ref=
    |   |         |   +-ColumnRef(type=INT64, column=$offset.injected#5)
    |   |         +-OrderByItem
    |   |         | +-column_ref=
    |   |         |   +-ColumnRef(type=INT64, column=$offset.injected#7)
    |   |         +-OrderByItem
    |   |         | +-column_ref=
    |   |         |   +-ColumnRef(type=INT64, column=$offset.injected#9)
    |   |         +-OrderByItem
    |   |           +-column_ref=
    |   |             +-ColumnRef(type=INT64, column=$offset.injected#11)
    |   +-element_column=$array.value#2
    |   +-array_offset_column=
    |     +-ColumnHolder(column=$array_offset.o#3)
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=INT64, column=$array_offset.o#3)
==

SELECT FLATTEN([
    STRUCT([1, 2, 3] AS a),
    STRUCT([4, 5] AS a)
  ].a[DEFAULT_OFFSET(1)]
)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Flatten
    |     +-type=ARRAY<INT64>
    |     +-expr=
    |     | +-Literal(type=ARRAY<STRUCT<a ARRAY<INT64>>>, value=[{a:[1, 2, 3]}, {a:[4, 5]}])
    |     +-get_field_list=
    |       +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |         +-GetStructField
    |         | +-type=ARRAY<INT64>
    |         | +-expr=
    |         | | +-FlattenedArg(type=STRUCT<a ARRAY<INT64>>)
    |         | +-field_idx=0
    |         +-Literal(type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#6]
    |         +-expr_list=
    |         | +-injected#6 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<a ARRAY<INT64>>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<INT64>>>, column=$flatten_input.injected#2)
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<INT64>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<INT64>>>, column=$flatten_input.injected#2)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#5]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#3, $offset.injected#4, $flatten.injected#5]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#5 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |         |           |   |     +-GetStructField
    |         |           |   |     | +-type=ARRAY<INT64>
    |         |           |   |     | +-expr=
    |         |           |   |     | | +-ColumnRef(type=STRUCT<a ARRAY<INT64>>, column=$flatten.injected#3)
    |         |           |   |     | +-field_idx=0
    |         |           |   |     +-Literal(type=INT64, value=1)
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#3, $offset.injected#4]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<INT64>>>, column=$flatten_input.injected#2, is_correlated=TRUE)
    |         |           |       +-element_column=$flatten.injected#3
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#4)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#4)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#2]
    |             +-expr_list=
    |             | +-injected#2 := Literal(type=ARRAY<STRUCT<a ARRAY<INT64>>>, value=[{a:[1, 2, 3]}, {a:[4, 5]}])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan

==

SELECT FLATTEN([
    STRUCT([1, 2, 3] AS a),
    STRUCT([4, 5] AS a)
  ].a
)[DEFAULT_OFFSET(1)]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |     +-Flatten
    |     | +-type=ARRAY<INT64>
    |     | +-expr=
    |     | | +-Literal(type=ARRAY<STRUCT<a ARRAY<INT64>>>, value=[{a:[1, 2, 3]}, {a:[4, 5]}])
    |     | +-get_field_list=
    |     |   +-GetStructField
    |     |     +-type=ARRAY<INT64>
    |     |     +-expr=
    |     |     | +-FlattenedArg(type=STRUCT<a ARRAY<INT64>>)
    |     |     +-field_idx=0
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |     +-SubqueryExpr
    |     | +-type=ARRAY<INT64>
    |     | +-subquery_type=SCALAR
    |     | +-subquery=
    |     |   +-ProjectScan
    |     |     +-column_list=[$with_expr.injected#7]
    |     |     +-expr_list=
    |     |     | +-injected#7 :=
    |     |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |     |     |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<a ARRAY<INT64>>>) -> BOOL)
    |     |     |     | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<INT64>>>, column=$flatten_input.injected#2)
    |     |     |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |     |     |     +-SubqueryExpr
    |     |     |       +-type=ARRAY<INT64>
    |     |     |       +-subquery_type=ARRAY
    |     |     |       +-parameter_list=
    |     |     |       | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<INT64>>>, column=$flatten_input.injected#2)
    |     |     |       +-subquery=
    |     |     |         +-OrderByScan
    |     |     |           +-column_list=[$flatten.injected#5]
    |     |     |           +-is_ordered=TRUE
    |     |     |           +-input_scan=
    |     |     |           | +-ArrayScan
    |     |     |           |   +-column_list=[$flatten.injected#3, $offset.injected#4, $flatten.injected#5, $offset.injected#6]
    |     |     |           |   +-input_scan=
    |     |     |           |   | +-ArrayScan
    |     |     |           |   |   +-column_list=[$flatten.injected#3, $offset.injected#4]
    |     |     |           |   |   +-array_expr=
    |     |     |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<INT64>>>, column=$flatten_input.injected#2, is_correlated=TRUE)
    |     |     |           |   |   +-element_column=$flatten.injected#3
    |     |     |           |   |   +-array_offset_column=
    |     |     |           |   |     +-ColumnHolder(column=$offset.injected#4)
    |     |     |           |   +-array_expr=
    |     |     |           |   | +-GetStructField
    |     |     |           |   |   +-type=ARRAY<INT64>
    |     |     |           |   |   +-expr=
    |     |     |           |   |   | +-ColumnRef(type=STRUCT<a ARRAY<INT64>>, column=$flatten.injected#3)
    |     |     |           |   |   +-field_idx=0
    |     |     |           |   +-element_column=$flatten.injected#5
    |     |     |           |   +-array_offset_column=
    |     |     |           |     +-ColumnHolder(column=$offset.injected#6)
    |     |     |           +-order_by_item_list=
    |     |     |             +-OrderByItem
    |     |     |             | +-column_ref=
    |     |     |             |   +-ColumnRef(type=INT64, column=$offset.injected#4)
    |     |     |             +-OrderByItem
    |     |     |               +-column_ref=
    |     |     |                 +-ColumnRef(type=INT64, column=$offset.injected#6)
    |     |     +-input_scan=
    |     |       +-ProjectScan
    |     |         +-column_list=[$flatten_input.injected#2]
    |     |         +-expr_list=
    |     |         | +-injected#2 := Literal(type=ARRAY<STRUCT<a ARRAY<INT64>>>, value=[{a:[1, 2, 3]}, {a:[4, 5]}])
    |     |         +-input_scan=
    |     |           +-SingleRowScan
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan
==

SELECT FLATTEN([
    STRUCT([1, 2, 3] AS a),
    STRUCT([4, 5] AS a)
  ].a[DEFAULT_OFFSET(1)]
)[DEFAULT_OFFSET(0)]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |     +-Flatten
    |     | +-type=ARRAY<INT64>
    |     | +-expr=
    |     | | +-Literal(type=ARRAY<STRUCT<a ARRAY<INT64>>>, value=[{a:[1, 2, 3]}, {a:[4, 5]}])
    |     | +-get_field_list=
    |     |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |     |     +-GetStructField
    |     |     | +-type=ARRAY<INT64>
    |     |     | +-expr=
    |     |     | | +-FlattenedArg(type=STRUCT<a ARRAY<INT64>>)
    |     |     | +-field_idx=0
    |     |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=INT64, value=0)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |     +-SubqueryExpr
    |     | +-type=ARRAY<INT64>
    |     | +-subquery_type=SCALAR
    |     | +-subquery=
    |     |   +-ProjectScan
    |     |     +-column_list=[$with_expr.injected#6]
    |     |     +-expr_list=
    |     |     | +-injected#6 :=
    |     |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |     |     |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<a ARRAY<INT64>>>) -> BOOL)
    |     |     |     | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<INT64>>>, column=$flatten_input.injected#2)
    |     |     |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |     |     |     +-SubqueryExpr
    |     |     |       +-type=ARRAY<INT64>
    |     |     |       +-subquery_type=ARRAY
    |     |     |       +-parameter_list=
    |     |     |       | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<INT64>>>, column=$flatten_input.injected#2)
    |     |     |       +-subquery=
    |     |     |         +-OrderByScan
    |     |     |           +-column_list=[$flatten.injected#5]
    |     |     |           +-is_ordered=TRUE
    |     |     |           +-input_scan=
    |     |     |           | +-ProjectScan
    |     |     |           |   +-column_list=[$flatten.injected#3, $offset.injected#4, $flatten.injected#5]
    |     |     |           |   +-expr_list=
    |     |     |           |   | +-injected#5 :=
    |     |     |           |   |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |     |     |           |   |     +-GetStructField
    |     |     |           |   |     | +-type=ARRAY<INT64>
    |     |     |           |   |     | +-expr=
    |     |     |           |   |     | | +-ColumnRef(type=STRUCT<a ARRAY<INT64>>, column=$flatten.injected#3)
    |     |     |           |   |     | +-field_idx=0
    |     |     |           |   |     +-Literal(type=INT64, value=1)
    |     |     |           |   +-input_scan=
    |     |     |           |     +-ArrayScan
    |     |     |           |       +-column_list=[$flatten.injected#3, $offset.injected#4]
    |     |     |           |       +-array_expr=
    |     |     |           |       | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<INT64>>>, column=$flatten_input.injected#2, is_correlated=TRUE)
    |     |     |           |       +-element_column=$flatten.injected#3
    |     |     |           |       +-array_offset_column=
    |     |     |           |         +-ColumnHolder(column=$offset.injected#4)
    |     |     |           +-order_by_item_list=
    |     |     |             +-OrderByItem
    |     |     |               +-column_ref=
    |     |     |                 +-ColumnRef(type=INT64, column=$offset.injected#4)
    |     |     +-input_scan=
    |     |       +-ProjectScan
    |     |         +-column_list=[$flatten_input.injected#2]
    |     |         +-expr_list=
    |     |         | +-injected#2 := Literal(type=ARRAY<STRUCT<a ARRAY<INT64>>>, value=[{a:[1, 2, 3]}, {a:[4, 5]}])
    |     |         +-input_scan=
    |     |           +-SingleRowScan
    |     +-Literal(type=INT64, value=0)
    +-input_scan=
      +-SingleRowScan
==

SELECT FLATTEN([
    STRUCT([1, 2, 3] AS a),
    STRUCT([4, 5] AS a)
  ].a[DEFAULT_OFFSET(1)][DEFAULT_OFFSET(0)]
)
--
ERROR: No matching signature for operator ARRAY[DEFAULT_OFFSET()] for argument types: INT64, INT64. Supported signature: ARRAY[DEFAULT_OFFSET(INT64)] [at 4:26]
  ].a[DEFAULT_OFFSET(1)][DEFAULT_OFFSET(0)]
                         ^
==

SELECT FLATTEN([
    STRUCT([1, 2, 3] AS a),
    STRUCT([4, 5] AS a)
  ].a
)[DEFAULT_OFFSET(1)][DEFAULT_OFFSET(0)]
--
ERROR: Subscript access using [DEFAULT_OFFSET(INT64)] is not supported on values of type INT64 [at 5:22]
)[DEFAULT_OFFSET(1)][DEFAULT_OFFSET(0)]
                     ^
==

SELECT FLATTEN([
    STRUCT([STRUCT(STRUCT([1, 2] AS c) AS b)] AS a),
    STRUCT([STRUCT(STRUCT([3] AS c) AS b)] AS a)
  ].a.b[DEFAULT_OFFSET(0)].c
)
--
ERROR: No matching signature for operator ARRAY[DEFAULT_OFFSET()] for argument types: STRUCT<c ARRAY<INT64>>, INT64. Supported signature: ARRAY[DEFAULT_OFFSET(INT64)] [at 4:9]
  ].a.b[DEFAULT_OFFSET(0)].c
        ^
==

SELECT FLATTEN(
  FLATTEN([
      STRUCT([STRUCT([STRUCT([1, 2] AS c)] AS b)] AS a),
      STRUCT([STRUCT([STRUCT([3] AS c)] AS b)] AS a)
    ].a[DEFAULT_OFFSET(0)]
  )[DEFAULT_OFFSET(0)].b.c
)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Flatten
    |     +-type=ARRAY<INT64>
    |     +-expr=
    |     | +-GetStructField
    |     |   +-type=ARRAY<STRUCT<c ARRAY<INT64>>>
    |     |   +-expr=
    |     |   | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, INT64) -> STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>)
    |     |   |   +-Flatten
    |     |   |   | +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |     |   |   | +-expr=
    |     |   |   | | +-Literal(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, value=[{a:[{b:[{c:[1, 2]}]}]}, {a:[{b:[{c:[3]}]}]}])
    |     |   |   | +-get_field_list=
    |     |   |   |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, INT64) -> STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>)
    |     |   |   |     +-GetStructField
    |     |   |   |     | +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |     |   |   |     | +-expr=
    |     |   |   |     | | +-FlattenedArg(type=STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>)
    |     |   |   |     | +-field_idx=0
    |     |   |   |     +-Literal(type=INT64, value=0)
    |     |   |   +-Literal(type=INT64, value=0)
    |     |   +-field_idx=0
    |     +-get_field_list=
    |       +-GetStructField
    |         +-type=ARRAY<INT64>
    |         +-expr=
    |         | +-FlattenedArg(type=STRUCT<c ARRAY<INT64>>)
    |         +-field_idx=0
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#12]
    |         +-expr_list=
    |         | +-injected#12 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<c ARRAY<INT64>>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRUCT<c ARRAY<INT64>>>, column=$flatten_input.injected#2)
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<INT64>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<STRUCT<c ARRAY<INT64>>>, column=$flatten_input.injected#2)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#5]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ArrayScan
    |         |           |   +-column_list=[$flatten.injected#3, $offset.injected#4, $flatten.injected#5, $offset.injected#6]
    |         |           |   +-input_scan=
    |         |           |   | +-ArrayScan
    |         |           |   |   +-column_list=[$flatten.injected#3, $offset.injected#4]
    |         |           |   |   +-array_expr=
    |         |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<c ARRAY<INT64>>>, column=$flatten_input.injected#2, is_correlated=TRUE)
    |         |           |   |   +-element_column=$flatten.injected#3
    |         |           |   |   +-array_offset_column=
    |         |           |   |     +-ColumnHolder(column=$offset.injected#4)
    |         |           |   +-array_expr=
    |         |           |   | +-GetStructField
    |         |           |   |   +-type=ARRAY<INT64>
    |         |           |   |   +-expr=
    |         |           |   |   | +-ColumnRef(type=STRUCT<c ARRAY<INT64>>, column=$flatten.injected#3)
    |         |           |   |   +-field_idx=0
    |         |           |   +-element_column=$flatten.injected#5
    |         |           |   +-array_offset_column=
    |         |           |     +-ColumnHolder(column=$offset.injected#6)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |             | +-column_ref=
    |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#4)
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#6)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#2]
    |             +-expr_list=
    |             | +-injected#2 :=
    |             |   +-GetStructField
    |             |     +-type=ARRAY<STRUCT<c ARRAY<INT64>>>
    |             |     +-expr=
    |             |     | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, INT64) -> STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>)
    |             |     |   +-SubqueryExpr
    |             |     |   | +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |             |     |   | +-subquery_type=SCALAR
    |             |     |   | +-subquery=
    |             |     |   |   +-ProjectScan
    |             |     |   |     +-column_list=[$with_expr.injected#11]
    |             |     |   |     +-expr_list=
    |             |     |   |     | +-injected#11 :=
    |             |     |   |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>) -> ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>)
    |             |     |   |     |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>) -> BOOL)
    |             |     |   |     |     | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, column=$flatten_input.injected#7)
    |             |     |   |     |     +-Literal(type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, value=NULL)
    |             |     |   |     |     +-SubqueryExpr
    |             |     |   |     |       +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |             |     |   |     |       +-subquery_type=ARRAY
    |             |     |   |     |       +-parameter_list=
    |             |     |   |     |       | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, column=$flatten_input.injected#7)
    |             |     |   |     |       +-subquery=
    |             |     |   |     |         +-OrderByScan
    |             |     |   |     |           +-column_list=[$flatten.injected#10]
    |             |     |   |     |           +-is_ordered=TRUE
    |             |     |   |     |           +-input_scan=
    |             |     |   |     |           | +-ProjectScan
    |             |     |   |     |           |   +-column_list=[$flatten.injected#8, $offset.injected#9, $flatten.injected#10]
    |             |     |   |     |           |   +-expr_list=
    |             |     |   |     |           |   | +-injected#10 :=
    |             |     |   |     |           |   |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, INT64) -> STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>)
    |             |     |   |     |           |   |     +-GetStructField
    |             |     |   |     |           |   |     | +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |             |     |   |     |           |   |     | +-expr=
    |             |     |   |     |           |   |     | | +-ColumnRef(type=STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>, column=$flatten.injected#8)
    |             |     |   |     |           |   |     | +-field_idx=0
    |             |     |   |     |           |   |     +-Literal(type=INT64, value=0)
    |             |     |   |     |           |   +-input_scan=
    |             |     |   |     |           |     +-ArrayScan
    |             |     |   |     |           |       +-column_list=[$flatten.injected#8, $offset.injected#9]
    |             |     |   |     |           |       +-array_expr=
    |             |     |   |     |           |       | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, column=$flatten_input.injected#7, is_correlated=TRUE)
    |             |     |   |     |           |       +-element_column=$flatten.injected#8
    |             |     |   |     |           |       +-array_offset_column=
    |             |     |   |     |           |         +-ColumnHolder(column=$offset.injected#9)
    |             |     |   |     |           +-order_by_item_list=
    |             |     |   |     |             +-OrderByItem
    |             |     |   |     |               +-column_ref=
    |             |     |   |     |                 +-ColumnRef(type=INT64, column=$offset.injected#9)
    |             |     |   |     +-input_scan=
    |             |     |   |       +-ProjectScan
    |             |     |   |         +-column_list=[$flatten_input.injected#7]
    |             |     |   |         +-expr_list=
    |             |     |   |         | +-injected#7 := Literal(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, value=[{a:[{b:[{c:[1, 2]}]}]}, {a:[{b:[{c:[3]}]}]}])
    |             |     |   |         +-input_scan=
    |             |     |   |           +-SingleRowScan
    |             |     |   +-Literal(type=INT64, value=0)
    |             |     +-field_idx=0
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

SELECT FLATTEN(
  FLATTEN([
      STRUCT([STRUCT([STRUCT([1, 2] AS c)] AS b)] AS a),
      STRUCT([STRUCT([STRUCT([3] AS c)] AS b)] AS a)
    ].a
  )[DEFAULT_OFFSET(0)].b.c
)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Flatten
    |     +-type=ARRAY<INT64>
    |     +-expr=
    |     | +-GetStructField
    |     |   +-type=ARRAY<STRUCT<c ARRAY<INT64>>>
    |     |   +-expr=
    |     |   | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, INT64) -> STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>)
    |     |   |   +-Flatten
    |     |   |   | +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |     |   |   | +-expr=
    |     |   |   | | +-Literal(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, value=[{a:[{b:[{c:[1, 2]}]}]}, {a:[{b:[{c:[3]}]}]}])
    |     |   |   | +-get_field_list=
    |     |   |   |   +-GetStructField
    |     |   |   |     +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |     |   |   |     +-expr=
    |     |   |   |     | +-FlattenedArg(type=STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>)
    |     |   |   |     +-field_idx=0
    |     |   |   +-Literal(type=INT64, value=0)
    |     |   +-field_idx=0
    |     +-get_field_list=
    |       +-GetStructField
    |         +-type=ARRAY<INT64>
    |         +-expr=
    |         | +-FlattenedArg(type=STRUCT<c ARRAY<INT64>>)
    |         +-field_idx=0
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#13]
    |         +-expr_list=
    |         | +-injected#13 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<c ARRAY<INT64>>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRUCT<c ARRAY<INT64>>>, column=$flatten_input.injected#2)
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<INT64>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<STRUCT<c ARRAY<INT64>>>, column=$flatten_input.injected#2)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#5]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ArrayScan
    |         |           |   +-column_list=[$flatten.injected#3, $offset.injected#4, $flatten.injected#5, $offset.injected#6]
    |         |           |   +-input_scan=
    |         |           |   | +-ArrayScan
    |         |           |   |   +-column_list=[$flatten.injected#3, $offset.injected#4]
    |         |           |   |   +-array_expr=
    |         |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<c ARRAY<INT64>>>, column=$flatten_input.injected#2, is_correlated=TRUE)
    |         |           |   |   +-element_column=$flatten.injected#3
    |         |           |   |   +-array_offset_column=
    |         |           |   |     +-ColumnHolder(column=$offset.injected#4)
    |         |           |   +-array_expr=
    |         |           |   | +-GetStructField
    |         |           |   |   +-type=ARRAY<INT64>
    |         |           |   |   +-expr=
    |         |           |   |   | +-ColumnRef(type=STRUCT<c ARRAY<INT64>>, column=$flatten.injected#3)
    |         |           |   |   +-field_idx=0
    |         |           |   +-element_column=$flatten.injected#5
    |         |           |   +-array_offset_column=
    |         |           |     +-ColumnHolder(column=$offset.injected#6)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |             | +-column_ref=
    |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#4)
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#6)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#2]
    |             +-expr_list=
    |             | +-injected#2 :=
    |             |   +-GetStructField
    |             |     +-type=ARRAY<STRUCT<c ARRAY<INT64>>>
    |             |     +-expr=
    |             |     | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, INT64) -> STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>)
    |             |     |   +-SubqueryExpr
    |             |     |   | +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |             |     |   | +-subquery_type=SCALAR
    |             |     |   | +-subquery=
    |             |     |   |   +-ProjectScan
    |             |     |   |     +-column_list=[$with_expr.injected#12]
    |             |     |   |     +-expr_list=
    |             |     |   |     | +-injected#12 :=
    |             |     |   |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>) -> ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>)
    |             |     |   |     |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>) -> BOOL)
    |             |     |   |     |     | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, column=$flatten_input.injected#7)
    |             |     |   |     |     +-Literal(type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, value=NULL)
    |             |     |   |     |     +-SubqueryExpr
    |             |     |   |     |       +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |             |     |   |     |       +-subquery_type=ARRAY
    |             |     |   |     |       +-parameter_list=
    |             |     |   |     |       | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, column=$flatten_input.injected#7)
    |             |     |   |     |       +-subquery=
    |             |     |   |     |         +-OrderByScan
    |             |     |   |     |           +-column_list=[$flatten.injected#10]
    |             |     |   |     |           +-is_ordered=TRUE
    |             |     |   |     |           +-input_scan=
    |             |     |   |     |           | +-ArrayScan
    |             |     |   |     |           |   +-column_list=[$flatten.injected#8, $offset.injected#9, $flatten.injected#10, $offset.injected#11]
    |             |     |   |     |           |   +-input_scan=
    |             |     |   |     |           |   | +-ArrayScan
    |             |     |   |     |           |   |   +-column_list=[$flatten.injected#8, $offset.injected#9]
    |             |     |   |     |           |   |   +-array_expr=
    |             |     |   |     |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, column=$flatten_input.injected#7, is_correlated=TRUE)
    |             |     |   |     |           |   |   +-element_column=$flatten.injected#8
    |             |     |   |     |           |   |   +-array_offset_column=
    |             |     |   |     |           |   |     +-ColumnHolder(column=$offset.injected#9)
    |             |     |   |     |           |   +-array_expr=
    |             |     |   |     |           |   | +-GetStructField
    |             |     |   |     |           |   |   +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |             |     |   |     |           |   |   +-expr=
    |             |     |   |     |           |   |   | +-ColumnRef(type=STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>, column=$flatten.injected#8)
    |             |     |   |     |           |   |   +-field_idx=0
    |             |     |   |     |           |   +-element_column=$flatten.injected#10
    |             |     |   |     |           |   +-array_offset_column=
    |             |     |   |     |           |     +-ColumnHolder(column=$offset.injected#11)
    |             |     |   |     |           +-order_by_item_list=
    |             |     |   |     |             +-OrderByItem
    |             |     |   |     |             | +-column_ref=
    |             |     |   |     |             |   +-ColumnRef(type=INT64, column=$offset.injected#9)
    |             |     |   |     |             +-OrderByItem
    |             |     |   |     |               +-column_ref=
    |             |     |   |     |                 +-ColumnRef(type=INT64, column=$offset.injected#11)
    |             |     |   |     +-input_scan=
    |             |     |   |       +-ProjectScan
    |             |     |   |         +-column_list=[$flatten_input.injected#7]
    |             |     |   |         +-expr_list=
    |             |     |   |         | +-injected#7 := Literal(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, value=[{a:[{b:[{c:[1, 2]}]}]}, {a:[{b:[{c:[3]}]}]}])
    |             |     |   |         +-input_scan=
    |             |     |   |           +-SingleRowScan
    |             |     |   +-Literal(type=INT64, value=0)
    |             |     +-field_idx=0
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

SELECT FLATTEN(
  FLATTEN([
      STRUCT([STRUCT([STRUCT([1, 2] AS c)] AS b)] AS a),
      STRUCT([STRUCT([STRUCT([3] AS c)] AS b)] AS a)
    ].a
  ).b[DEFAULT_OFFSET(0)].c
)[DEFAULT_OFFSET(0)]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |     +-Flatten
    |     | +-type=ARRAY<INT64>
    |     | +-expr=
    |     | | +-Flatten
    |     | |   +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |     | |   +-expr=
    |     | |   | +-Literal(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, value=[{a:[{b:[{c:[1, 2]}]}]}, {a:[{b:[{c:[3]}]}]}])
    |     | |   +-get_field_list=
    |     | |     +-GetStructField
    |     | |       +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |     | |       +-expr=
    |     | |       | +-FlattenedArg(type=STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>)
    |     | |       +-field_idx=0
    |     | +-get_field_list=
    |     |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRUCT<c ARRAY<INT64>>>, INT64) -> STRUCT<c ARRAY<INT64>>)
    |     |   | +-GetStructField
    |     |   | | +-type=ARRAY<STRUCT<c ARRAY<INT64>>>
    |     |   | | +-expr=
    |     |   | | | +-FlattenedArg(type=STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>)
    |     |   | | +-field_idx=0
    |     |   | +-Literal(type=INT64, value=0)
    |     |   +-GetStructField
    |     |     +-type=ARRAY<INT64>
    |     |     +-expr=
    |     |     | +-FlattenedArg(type=STRUCT<c ARRAY<INT64>>)
    |     |     +-field_idx=0
    |     +-Literal(type=INT64, value=0)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |     +-SubqueryExpr
    |     | +-type=ARRAY<INT64>
    |     | +-subquery_type=SCALAR
    |     | +-subquery=
    |     |   +-ProjectScan
    |     |     +-column_list=[$with_expr.injected#13]
    |     |     +-expr_list=
    |     |     | +-injected#13 :=
    |     |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |     |     |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>) -> BOOL)
    |     |     |     | +-ColumnRef(type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, column=$flatten_input.injected#2)
    |     |     |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |     |     |     +-SubqueryExpr
    |     |     |       +-type=ARRAY<INT64>
    |     |     |       +-subquery_type=ARRAY
    |     |     |       +-parameter_list=
    |     |     |       | +-ColumnRef(type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, column=$flatten_input.injected#2)
    |     |     |       +-subquery=
    |     |     |         +-OrderByScan
    |     |     |           +-column_list=[$flatten.injected#5]
    |     |     |           +-is_ordered=TRUE
    |     |     |           +-input_scan=
    |     |     |           | +-ArrayScan
    |     |     |           |   +-column_list=[$flatten.injected#3, $offset.injected#4, $flatten.injected#5, $offset.injected#6]
    |     |     |           |   +-input_scan=
    |     |     |           |   | +-ArrayScan
    |     |     |           |   |   +-column_list=[$flatten.injected#3, $offset.injected#4]
    |     |     |           |   |   +-array_expr=
    |     |     |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, column=$flatten_input.injected#2, is_correlated=TRUE)
    |     |     |           |   |   +-element_column=$flatten.injected#3
    |     |     |           |   |   +-array_offset_column=
    |     |     |           |   |     +-ColumnHolder(column=$offset.injected#4)
    |     |     |           |   +-array_expr=
    |     |     |           |   | +-GetStructField
    |     |     |           |   |   +-type=ARRAY<INT64>
    |     |     |           |   |   +-expr=
    |     |     |           |   |   | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRUCT<c ARRAY<INT64>>>, INT64) -> STRUCT<c ARRAY<INT64>>)
    |     |     |           |   |   |   +-GetStructField
    |     |     |           |   |   |   | +-type=ARRAY<STRUCT<c ARRAY<INT64>>>
    |     |     |           |   |   |   | +-expr=
    |     |     |           |   |   |   | | +-ColumnRef(type=STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>, column=$flatten.injected#3)
    |     |     |           |   |   |   | +-field_idx=0
    |     |     |           |   |   |   +-Literal(type=INT64, value=0)
    |     |     |           |   |   +-field_idx=0
    |     |     |           |   +-element_column=$flatten.injected#5
    |     |     |           |   +-array_offset_column=
    |     |     |           |     +-ColumnHolder(column=$offset.injected#6)
    |     |     |           +-order_by_item_list=
    |     |     |             +-OrderByItem
    |     |     |             | +-column_ref=
    |     |     |             |   +-ColumnRef(type=INT64, column=$offset.injected#4)
    |     |     |             +-OrderByItem
    |     |     |               +-column_ref=
    |     |     |                 +-ColumnRef(type=INT64, column=$offset.injected#6)
    |     |     +-input_scan=
    |     |       +-ProjectScan
    |     |         +-column_list=[$flatten_input.injected#2]
    |     |         +-expr_list=
    |     |         | +-injected#2 :=
    |     |         |   +-SubqueryExpr
    |     |         |     +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |     |         |     +-subquery_type=SCALAR
    |     |         |     +-subquery=
    |     |         |       +-ProjectScan
    |     |         |         +-column_list=[$with_expr.injected#12]
    |     |         |         +-expr_list=
    |     |         |         | +-injected#12 :=
    |     |         |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>) -> ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>)
    |     |         |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>) -> BOOL)
    |     |         |         |     | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, column=$flatten_input.injected#7)
    |     |         |         |     +-Literal(type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>, value=NULL)
    |     |         |         |     +-SubqueryExpr
    |     |         |         |       +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |     |         |         |       +-subquery_type=ARRAY
    |     |         |         |       +-parameter_list=
    |     |         |         |       | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, column=$flatten_input.injected#7)
    |     |         |         |       +-subquery=
    |     |         |         |         +-OrderByScan
    |     |         |         |           +-column_list=[$flatten.injected#10]
    |     |         |         |           +-is_ordered=TRUE
    |     |         |         |           +-input_scan=
    |     |         |         |           | +-ArrayScan
    |     |         |         |           |   +-column_list=[$flatten.injected#8, $offset.injected#9, $flatten.injected#10, $offset.injected#11]
    |     |         |         |           |   +-input_scan=
    |     |         |         |           |   | +-ArrayScan
    |     |         |         |           |   |   +-column_list=[$flatten.injected#8, $offset.injected#9]
    |     |         |         |           |   |   +-array_expr=
    |     |         |         |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, column=$flatten_input.injected#7, is_correlated=TRUE)
    |     |         |         |           |   |   +-element_column=$flatten.injected#8
    |     |         |         |           |   |   +-array_offset_column=
    |     |         |         |           |   |     +-ColumnHolder(column=$offset.injected#9)
    |     |         |         |           |   +-array_expr=
    |     |         |         |           |   | +-GetStructField
    |     |         |         |           |   |   +-type=ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>
    |     |         |         |           |   |   +-expr=
    |     |         |         |           |   |   | +-ColumnRef(type=STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>, column=$flatten.injected#8)
    |     |         |         |           |   |   +-field_idx=0
    |     |         |         |           |   +-element_column=$flatten.injected#10
    |     |         |         |           |   +-array_offset_column=
    |     |         |         |           |     +-ColumnHolder(column=$offset.injected#11)
    |     |         |         |           +-order_by_item_list=
    |     |         |         |             +-OrderByItem
    |     |         |         |             | +-column_ref=
    |     |         |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#9)
    |     |         |         |             +-OrderByItem
    |     |         |         |               +-column_ref=
    |     |         |         |                 +-ColumnRef(type=INT64, column=$offset.injected#11)
    |     |         |         +-input_scan=
    |     |         |           +-ProjectScan
    |     |         |             +-column_list=[$flatten_input.injected#7]
    |     |         |             +-expr_list=
    |     |         |             | +-injected#7 := Literal(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<STRUCT<c ARRAY<INT64>>>>>>>, value=[{a:[{b:[{c:[1, 2]}]}]}, {a:[{b:[{c:[3]}]}]}])
    |     |         |             +-input_scan=
    |     |         |               +-SingleRowScan
    |     |         +-input_scan=
    |     |           +-SingleRowScan
    |     +-Literal(type=INT64, value=0)
    +-input_scan=
      +-SingleRowScan
==

SELECT FLATTEN(FLATTEN([
    STRUCT([STRUCT([1,2] AS b)] AS a),
    STRUCT([STRUCT([3] AS b)] AS a)
  ].a).b[DEFAULT_OFFSET(0)])
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Flatten
    |     +-type=ARRAY<INT64>
    |     +-expr=
    |     | +-Flatten
    |     |   +-type=ARRAY<STRUCT<b ARRAY<INT64>>>
    |     |   +-expr=
    |     |   | +-Literal(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<INT64>>>>>, value=[{a:[{b:[1, 2]}]}, {a:[{b:[3]}]}])
    |     |   +-get_field_list=
    |     |     +-GetStructField
    |     |       +-type=ARRAY<STRUCT<b ARRAY<INT64>>>
    |     |       +-expr=
    |     |       | +-FlattenedArg(type=STRUCT<a ARRAY<STRUCT<b ARRAY<INT64>>>>)
    |     |       +-field_idx=0
    |     +-get_field_list=
    |       +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |         +-GetStructField
    |         | +-type=ARRAY<INT64>
    |         | +-expr=
    |         | | +-FlattenedArg(type=STRUCT<b ARRAY<INT64>>)
    |         | +-field_idx=0
    |         +-Literal(type=INT64, value=0)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#12]
    |         +-expr_list=
    |         | +-injected#12 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<b ARRAY<INT64>>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRUCT<b ARRAY<INT64>>>, column=$flatten_input.injected#2)
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<INT64>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<STRUCT<b ARRAY<INT64>>>, column=$flatten_input.injected#2)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#5]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#3, $offset.injected#4, $flatten.injected#5]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#5 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |         |           |   |     +-GetStructField
    |         |           |   |     | +-type=ARRAY<INT64>
    |         |           |   |     | +-expr=
    |         |           |   |     | | +-ColumnRef(type=STRUCT<b ARRAY<INT64>>, column=$flatten.injected#3)
    |         |           |   |     | +-field_idx=0
    |         |           |   |     +-Literal(type=INT64, value=0)
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#3, $offset.injected#4]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<STRUCT<b ARRAY<INT64>>>, column=$flatten_input.injected#2, is_correlated=TRUE)
    |         |           |       +-element_column=$flatten.injected#3
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#4)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#4)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#2]
    |             +-expr_list=
    |             | +-injected#2 :=
    |             |   +-SubqueryExpr
    |             |     +-type=ARRAY<STRUCT<b ARRAY<INT64>>>
    |             |     +-subquery_type=SCALAR
    |             |     +-subquery=
    |             |       +-ProjectScan
    |             |         +-column_list=[$with_expr.injected#11]
    |             |         +-expr_list=
    |             |         | +-injected#11 :=
    |             |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<b ARRAY<INT64>>>, ARRAY<STRUCT<b ARRAY<INT64>>>) -> ARRAY<STRUCT<b ARRAY<INT64>>>)
    |             |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<INT64>>>>>) -> BOOL)
    |             |         |     | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<INT64>>>>>, column=$flatten_input.injected#6)
    |             |         |     +-Literal(type=ARRAY<STRUCT<b ARRAY<INT64>>>, value=NULL)
    |             |         |     +-SubqueryExpr
    |             |         |       +-type=ARRAY<STRUCT<b ARRAY<INT64>>>
    |             |         |       +-subquery_type=ARRAY
    |             |         |       +-parameter_list=
    |             |         |       | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<INT64>>>>>, column=$flatten_input.injected#6)
    |             |         |       +-subquery=
    |             |         |         +-OrderByScan
    |             |         |           +-column_list=[$flatten.injected#9]
    |             |         |           +-is_ordered=TRUE
    |             |         |           +-input_scan=
    |             |         |           | +-ArrayScan
    |             |         |           |   +-column_list=[$flatten.injected#7, $offset.injected#8, $flatten.injected#9, $offset.injected#10]
    |             |         |           |   +-input_scan=
    |             |         |           |   | +-ArrayScan
    |             |         |           |   |   +-column_list=[$flatten.injected#7, $offset.injected#8]
    |             |         |           |   |   +-array_expr=
    |             |         |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<INT64>>>>>, column=$flatten_input.injected#6, is_correlated=TRUE)
    |             |         |           |   |   +-element_column=$flatten.injected#7
    |             |         |           |   |   +-array_offset_column=
    |             |         |           |   |     +-ColumnHolder(column=$offset.injected#8)
    |             |         |           |   +-array_expr=
    |             |         |           |   | +-GetStructField
    |             |         |           |   |   +-type=ARRAY<STRUCT<b ARRAY<INT64>>>
    |             |         |           |   |   +-expr=
    |             |         |           |   |   | +-ColumnRef(type=STRUCT<a ARRAY<STRUCT<b ARRAY<INT64>>>>, column=$flatten.injected#7)
    |             |         |           |   |   +-field_idx=0
    |             |         |           |   +-element_column=$flatten.injected#9
    |             |         |           |   +-array_offset_column=
    |             |         |           |     +-ColumnHolder(column=$offset.injected#10)
    |             |         |           +-order_by_item_list=
    |             |         |             +-OrderByItem
    |             |         |             | +-column_ref=
    |             |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#8)
    |             |         |             +-OrderByItem
    |             |         |               +-column_ref=
    |             |         |                 +-ColumnRef(type=INT64, column=$offset.injected#10)
    |             |         +-input_scan=
    |             |           +-ProjectScan
    |             |             +-column_list=[$flatten_input.injected#6]
    |             |             +-expr_list=
    |             |             | +-injected#6 := Literal(type=ARRAY<STRUCT<a ARRAY<STRUCT<b ARRAY<INT64>>>>>, value=[{a:[{b:[1, 2]}]}, {a:[{b:[3]}]}])
    |             |             +-input_scan=
    |             |               +-SingleRowScan
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan

==

[mode=expression]
FLATTEN([STRUCT([1, 2, 3] AS a),
         STRUCT([4, 5] AS a)].a)
--
Flatten
+-type=ARRAY<INT64>
+-expr=
| +-Literal(type=ARRAY<STRUCT<a ARRAY<INT64>>>, value=[{a:[1, 2, 3]}, {a:[4, 5]}])
+-get_field_list=
  +-GetStructField
    +-type=ARRAY<INT64>
    +-expr=
    | +-FlattenedArg(type=STRUCT<a ARRAY<INT64>>)
    +-field_idx=0

[REWRITTEN AST]
SubqueryExpr
+-type=ARRAY<INT64>
+-subquery_type=SCALAR
+-subquery=
  +-ProjectScan
    +-column_list=[$with_expr.injected#6]
    +-expr_list=
    | +-injected#6 :=
    |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<a ARRAY<INT64>>>) -> BOOL)
    |     | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<INT64>>>, column=$flatten_input.injected#1)
    |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |     +-SubqueryExpr
    |       +-type=ARRAY<INT64>
    |       +-subquery_type=ARRAY
    |       +-parameter_list=
    |       | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<INT64>>>, column=$flatten_input.injected#1)
    |       +-subquery=
    |         +-OrderByScan
    |           +-column_list=[$flatten.injected#4]
    |           +-is_ordered=TRUE
    |           +-input_scan=
    |           | +-ArrayScan
    |           |   +-column_list=[$flatten.injected#2, $offset.injected#3, $flatten.injected#4, $offset.injected#5]
    |           |   +-input_scan=
    |           |   | +-ArrayScan
    |           |   |   +-column_list=[$flatten.injected#2, $offset.injected#3]
    |           |   |   +-array_expr=
    |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<a ARRAY<INT64>>>, column=$flatten_input.injected#1, is_correlated=TRUE)
    |           |   |   +-element_column=$flatten.injected#2
    |           |   |   +-array_offset_column=
    |           |   |     +-ColumnHolder(column=$offset.injected#3)
    |           |   +-array_expr=
    |           |   | +-GetStructField
    |           |   |   +-type=ARRAY<INT64>
    |           |   |   +-expr=
    |           |   |   | +-ColumnRef(type=STRUCT<a ARRAY<INT64>>, column=$flatten.injected#2)
    |           |   |   +-field_idx=0
    |           |   +-element_column=$flatten.injected#4
    |           |   +-array_offset_column=
    |           |     +-ColumnHolder(column=$offset.injected#5)
    |           +-order_by_item_list=
    |             +-OrderByItem
    |             | +-column_ref=
    |             |   +-ColumnRef(type=INT64, column=$offset.injected#3)
    |             +-OrderByItem
    |               +-column_ref=
    |                 +-ColumnRef(type=INT64, column=$offset.injected#5)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$flatten_input.injected#1]
        +-expr_list=
        | +-injected#1 := Literal(type=ARRAY<STRUCT<a ARRAY<INT64>>>, value=[{a:[1, 2, 3]}, {a:[4, 5]}])
        +-input_scan=
          +-SingleRowScan
==

SELECT FLATTEN(JsonArray.field) FROM ArrayTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#18 AS "$col1" [ARRAY<JSON>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#18]
    +-expr_list=
    | +-$col1#18 :=
    |   +-Flatten
    |     +-type=ARRAY<JSON>
    |     +-expr=
    |     | +-ColumnRef(type=ARRAY<JSON>, column=ArrayTypes.JsonArray#17)
    |     +-get_field_list=
    |       +-GetJsonField
    |         +-type=JSON
    |         +-expr=
    |         | +-FlattenedArg(type=JSON)
    |         +-field_name='field'
    +-input_scan=
      +-TableScan(column_list=[ArrayTypes.JsonArray#17], table=ArrayTypes, column_index_list=[16])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#18 AS "$col1" [ARRAY<JSON>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#18]
    +-expr_list=
    | +-$col1#18 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<JSON>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=ARRAY<JSON>, column=ArrayTypes.JsonArray#17)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#23]
    |         +-expr_list=
    |         | +-injected#23 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<JSON>, ARRAY<JSON>) -> ARRAY<JSON>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<JSON>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<JSON>, column=$flatten_input.injected#19)
    |         |     +-Literal(type=ARRAY<JSON>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<JSON>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<JSON>, column=$flatten_input.injected#19)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#22]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#20, $offset.injected#21, $flatten.injected#22]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#22 :=
    |         |           |   |   +-GetJsonField
    |         |           |   |     +-type=JSON
    |         |           |   |     +-expr=
    |         |           |   |     | +-ColumnRef(type=JSON, column=$flatten.injected#20)
    |         |           |   |     +-field_name='field'
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#20, $offset.injected#21]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<JSON>, column=$flatten_input.injected#19, is_correlated=TRUE)
    |         |           |       +-element_column=$flatten.injected#20
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#21)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#21)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#19]
    |             +-expr_list=
    |             | +-injected#19 := ColumnRef(type=ARRAY<JSON>, column=ArrayTypes.JsonArray#17, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[ArrayTypes.JsonArray#17], table=ArrayTypes, column_index_list=[16])
==

SELECT FLATTEN([STRUCT(JSON '1' AS x, 2 AS y), (JSON '11', 22)].x.field)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<JSON>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-Flatten
    |     +-type=ARRAY<JSON>
    |     +-expr=
    |     | +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<x JSON, y INT64>) -> ARRAY<STRUCT<x JSON, y INT64>>)
    |     |   +-MakeStruct
    |     |   | +-type=STRUCT<x JSON, y INT64>
    |     |   | +-field_list=
    |     |   |   +-Literal(type=JSON, value=1, has_explicit_type=TRUE)
    |     |   |   +-Literal(type=INT64, value=2)
    |     |   +-MakeStruct
    |     |     +-type=STRUCT<x JSON, y INT64>
    |     |     +-field_list=
    |     |       +-Literal(type=JSON, value=11, has_explicit_type=TRUE)
    |     |       +-Literal(type=INT64, value=22)
    |     +-get_field_list=
    |       +-GetStructField
    |       | +-type=JSON
    |       | +-expr=
    |       | | +-FlattenedArg(type=STRUCT<x JSON, y INT64>)
    |       | +-field_idx=0
    |       +-GetJsonField
    |         +-type=JSON
    |         +-expr=
    |         | +-FlattenedArg(type=JSON)
    |         +-field_name='field'
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [ARRAY<JSON>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<JSON>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#6]
    |         +-expr_list=
    |         | +-injected#6 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<JSON>, ARRAY<JSON>) -> ARRAY<JSON>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<x JSON, y INT64>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRUCT<x JSON, y INT64>>, column=$flatten_input.injected#2)
    |         |     +-Literal(type=ARRAY<JSON>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<JSON>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<STRUCT<x JSON, y INT64>>, column=$flatten_input.injected#2)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#5]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#3, $offset.injected#4, $flatten.injected#5]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#5 :=
    |         |           |   |   +-GetJsonField
    |         |           |   |     +-type=JSON
    |         |           |   |     +-expr=
    |         |           |   |     | +-GetStructField
    |         |           |   |     |   +-type=JSON
    |         |           |   |     |   +-expr=
    |         |           |   |     |   | +-ColumnRef(type=STRUCT<x JSON, y INT64>, column=$flatten.injected#3)
    |         |           |   |     |   +-field_idx=0
    |         |           |   |     +-field_name='field'
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#3, $offset.injected#4]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<STRUCT<x JSON, y INT64>>, column=$flatten_input.injected#2, is_correlated=TRUE)
    |         |           |       +-element_column=$flatten.injected#3
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#4)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#4)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#2]
    |             +-expr_list=
    |             | +-injected#2 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<x JSON, y INT64>) -> ARRAY<STRUCT<x JSON, y INT64>>)
    |             |     +-MakeStruct
    |             |     | +-type=STRUCT<x JSON, y INT64>
    |             |     | +-field_list=
    |             |     |   +-Literal(type=JSON, value=1, has_explicit_type=TRUE)
    |             |     |   +-Literal(type=INT64, value=2)
    |             |     +-MakeStruct
    |             |       +-type=STRUCT<x JSON, y INT64>
    |             |       +-field_list=
    |             |         +-Literal(type=JSON, value=11, has_explicit_type=TRUE)
    |             |         +-Literal(type=INT64, value=22)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan

==

SELECT FLATTEN([
  STRUCT([STRUCT((select Key+1 from KeyValue limit 1) AS y), STRUCT(6)] AS x ),
  STRUCT([STRUCT(7 AS y), STRUCT(8)] AS x )
].x.y) AS my_array
--
QueryStmt
+-output_column_list=
| +-$query.my_array#4 AS my_array [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.my_array#4]
    +-expr_list=
    | +-my_array#4 :=
    |   +-Flatten
    |     +-type=ARRAY<INT64>
    |     +-expr=
    |     | +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<x ARRAY<STRUCT<y INT64>>>) -> ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>)
    |     |   +-MakeStruct
    |     |   | +-type=STRUCT<x ARRAY<STRUCT<y INT64>>>
    |     |   | +-field_list=
    |     |   |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<y INT64>) -> ARRAY<STRUCT<y INT64>>)
    |     |   |     +-MakeStruct
    |     |   |     | +-type=STRUCT<y INT64>
    |     |   |     | +-field_list=
    |     |   |     |   +-SubqueryExpr
    |     |   |     |     +-type=INT64
    |     |   |     |     +-subquery_type=SCALAR
    |     |   |     |     +-subquery=
    |     |   |     |       +-LimitOffsetScan
    |     |   |     |         +-column_list=[$expr_subquery.$col1#3]
    |     |   |     |         +-input_scan=
    |     |   |     |         | +-ProjectScan
    |     |   |     |         |   +-column_list=[$expr_subquery.$col1#3]
    |     |   |     |         |   +-expr_list=
    |     |   |     |         |   | +-$col1#3 :=
    |     |   |     |         |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     |   |     |         |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     |   |     |         |   |     +-Literal(type=INT64, value=1)
    |     |   |     |         |   +-input_scan=
    |     |   |     |         |     +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    |     |   |     |         +-limit=
    |     |   |     |           +-Literal(type=INT64, value=1)
    |     |   |     +-Literal(type=STRUCT<y INT64>, value={y:6})
    |     |   +-Literal(type=STRUCT<x ARRAY<STRUCT<y INT64>>>, value={x:[{y:7}, {y:8}]})
    |     +-get_field_list=
    |       +-GetStructField
    |       | +-type=ARRAY<STRUCT<y INT64>>
    |       | +-expr=
    |       | | +-FlattenedArg(type=STRUCT<x ARRAY<STRUCT<y INT64>>>)
    |       | +-field_idx=0
    |       +-GetStructField
    |         +-type=INT64
    |         +-expr=
    |         | +-FlattenedArg(type=STRUCT<y INT64>)
    |         +-field_idx=0
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.my_array#4 AS my_array [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.my_array#4]
    +-expr_list=
    | +-my_array#4 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#11]
    |         +-expr_list=
    |         | +-injected#11 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>, column=$flatten_input.injected#5)
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<INT64>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>, column=$flatten_input.injected#5)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#10]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#6, $offset.injected#7, $flatten.injected#8, $offset.injected#9, $flatten.injected#10]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#10 :=
    |         |           |   |   +-GetStructField
    |         |           |   |     +-type=INT64
    |         |           |   |     +-expr=
    |         |           |   |     | +-ColumnRef(type=STRUCT<y INT64>, column=$flatten.injected#8)
    |         |           |   |     +-field_idx=0
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#6, $offset.injected#7, $flatten.injected#8, $offset.injected#9]
    |         |           |       +-input_scan=
    |         |           |       | +-ArrayScan
    |         |           |       |   +-column_list=[$flatten.injected#6, $offset.injected#7]
    |         |           |       |   +-array_expr=
    |         |           |       |   | +-ColumnRef(type=ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>, column=$flatten_input.injected#5, is_correlated=TRUE)
    |         |           |       |   +-element_column=$flatten.injected#6
    |         |           |       |   +-array_offset_column=
    |         |           |       |     +-ColumnHolder(column=$offset.injected#7)
    |         |           |       +-array_expr=
    |         |           |       | +-GetStructField
    |         |           |       |   +-type=ARRAY<STRUCT<y INT64>>
    |         |           |       |   +-expr=
    |         |           |       |   | +-ColumnRef(type=STRUCT<x ARRAY<STRUCT<y INT64>>>, column=$flatten.injected#6)
    |         |           |       |   +-field_idx=0
    |         |           |       +-element_column=$flatten.injected#8
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#9)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |             | +-column_ref=
    |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#7)
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#9)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#5]
    |             +-expr_list=
    |             | +-injected#5 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<x ARRAY<STRUCT<y INT64>>>) -> ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>)
    |             |     +-MakeStruct
    |             |     | +-type=STRUCT<x ARRAY<STRUCT<y INT64>>>
    |             |     | +-field_list=
    |             |     |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<y INT64>) -> ARRAY<STRUCT<y INT64>>)
    |             |     |     +-MakeStruct
    |             |     |     | +-type=STRUCT<y INT64>
    |             |     |     | +-field_list=
    |             |     |     |   +-SubqueryExpr
    |             |     |     |     +-type=INT64
    |             |     |     |     +-subquery_type=SCALAR
    |             |     |     |     +-subquery=
    |             |     |     |       +-LimitOffsetScan
    |             |     |     |         +-column_list=[$expr_subquery.$col1#3]
    |             |     |     |         +-input_scan=
    |             |     |     |         | +-ProjectScan
    |             |     |     |         |   +-column_list=[$expr_subquery.$col1#3]
    |             |     |     |         |   +-expr_list=
    |             |     |     |         |   | +-$col1#3 :=
    |             |     |     |         |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |             |     |     |         |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |             |     |     |         |   |     +-Literal(type=INT64, value=1)
    |             |     |     |         |   +-input_scan=
    |             |     |     |         |     +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    |             |     |     |         +-limit=
    |             |     |     |           +-Literal(type=INT64, value=1)
    |             |     |     +-Literal(type=STRUCT<y INT64>, value={y:6})
    |             |     +-Literal(type=STRUCT<x ARRAY<STRUCT<y INT64>>>, value={x:[{y:7}, {y:8}]})
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

SELECT FLATTEN([
  STRUCT([STRUCT(ARRAY_FILTER([1,2,3], e->e>Key)[DEFAULT_OFFSET(0)] AS y), STRUCT(6)] AS x ),
  STRUCT([STRUCT(7 AS y), STRUCT(8)] AS x )
].x.y) AS my_array FROM KeyValue;
--
QueryStmt
+-output_column_list=
| +-$query.my_array#4 AS my_array [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.my_array#4]
    +-expr_list=
    | +-my_array#4 :=
    |   +-Flatten
    |     +-type=ARRAY<INT64>
    |     +-expr=
    |     | +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<x ARRAY<STRUCT<y INT64>>>) -> ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>)
    |     |   +-MakeStruct
    |     |   | +-type=STRUCT<x ARRAY<STRUCT<y INT64>>>
    |     |   | +-field_list=
    |     |   |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<y INT64>) -> ARRAY<STRUCT<y INT64>>)
    |     |   |     +-MakeStruct
    |     |   |     | +-type=STRUCT<y INT64>
    |     |   |     | +-field_list=
    |     |   |     |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |     |   |     |     +-FunctionCall(ZetaSQL:array_filter(ARRAY<INT64> array_to_filter, FUNCTION<INT64->BOOL> condition) -> ARRAY<INT64>)
    |     |   |     |     | +-FunctionArgument
    |     |   |     |     | | +-expr=
    |     |   |     |     | |   +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |     |   |     |     | +-FunctionArgument
    |     |   |     |     |   +-inline_lambda=
    |     |   |     |     |     +-InlineLambda
    |     |   |     |     |       +-argument_list=[$lambda_arg.e#3]
    |     |   |     |     |       +-parameter_list=
    |     |   |     |     |       | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     |   |     |     |       +-body=
    |     |   |     |     |         +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |     |   |     |     |           +-ColumnRef(type=INT64, column=$lambda_arg.e#3)
    |     |   |     |     |           +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |     |   |     |     +-Literal(type=INT64, value=0)
    |     |   |     +-Literal(type=STRUCT<y INT64>, value={y:6})
    |     |   +-Literal(type=STRUCT<x ARRAY<STRUCT<y INT64>>>, value={x:[{y:7}, {y:8}]})
    |     +-get_field_list=
    |       +-GetStructField
    |       | +-type=ARRAY<STRUCT<y INT64>>
    |       | +-expr=
    |       | | +-FlattenedArg(type=STRUCT<x ARRAY<STRUCT<y INT64>>>)
    |       | +-field_idx=0
    |       +-GetStructField
    |         +-type=INT64
    |         +-expr=
    |         | +-FlattenedArg(type=STRUCT<y INT64>)
    |         +-field_idx=0
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.my_array#4 AS my_array [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.my_array#4]
    +-expr_list=
    | +-my_array#4 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#15]
    |         +-expr_list=
    |         | +-injected#15 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>, column=$flatten_input.injected#5)
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<INT64>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>, column=$flatten_input.injected#5)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#10]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#6, $offset.injected#7, $flatten.injected#8, $offset.injected#9, $flatten.injected#10]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#10 :=
    |         |           |   |   +-GetStructField
    |         |           |   |     +-type=INT64
    |         |           |   |     +-expr=
    |         |           |   |     | +-ColumnRef(type=STRUCT<y INT64>, column=$flatten.injected#8)
    |         |           |   |     +-field_idx=0
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#6, $offset.injected#7, $flatten.injected#8, $offset.injected#9]
    |         |           |       +-input_scan=
    |         |           |       | +-ArrayScan
    |         |           |       |   +-column_list=[$flatten.injected#6, $offset.injected#7]
    |         |           |       |   +-array_expr=
    |         |           |       |   | +-ColumnRef(type=ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>, column=$flatten_input.injected#5, is_correlated=TRUE)
    |         |           |       |   +-element_column=$flatten.injected#6
    |         |           |       |   +-array_offset_column=
    |         |           |       |     +-ColumnHolder(column=$offset.injected#7)
    |         |           |       +-array_expr=
    |         |           |       | +-GetStructField
    |         |           |       |   +-type=ARRAY<STRUCT<y INT64>>
    |         |           |       |   +-expr=
    |         |           |       |   | +-ColumnRef(type=STRUCT<x ARRAY<STRUCT<y INT64>>>, column=$flatten.injected#6)
    |         |           |       |   +-field_idx=0
    |         |           |       +-element_column=$flatten.injected#8
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#9)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |             | +-column_ref=
    |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#7)
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#9)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#5]
    |             +-expr_list=
    |             | +-injected#5 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<x ARRAY<STRUCT<y INT64>>>) -> ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>)
    |             |     +-MakeStruct
    |             |     | +-type=STRUCT<x ARRAY<STRUCT<y INT64>>>
    |             |     | +-field_list=
    |             |     |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<y INT64>) -> ARRAY<STRUCT<y INT64>>)
    |             |     |     +-MakeStruct
    |             |     |     | +-type=STRUCT<y INT64>
    |             |     |     | +-field_list=
    |             |     |     |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |             |     |     |     +-SubqueryExpr
    |             |     |     |     | +-type=ARRAY<INT64>
    |             |     |     |     | +-subquery_type=SCALAR
    |             |     |     |     | +-parameter_list=
    |             |     |     |     | | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |             |     |     |     | +-subquery=
    |             |     |     |     |   +-ProjectScan
    |             |     |     |     |     +-column_list=[$expr_subquery.$col1#14]
    |             |     |     |     |     +-expr_list=
    |             |     |     |     |     | +-$col1#14 :=
    |             |     |     |     |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |             |     |     |     |     |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |             |     |     |     |     |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_filter#11)
    |             |     |     |     |     |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |             |     |     |     |     |     +-SubqueryExpr
    |             |     |     |     |     |       +-type=ARRAY<INT64>
    |             |     |     |     |     |       +-subquery_type=ARRAY
    |             |     |     |     |     |       +-parameter_list=
    |             |     |     |     |     |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_filter#11)
    |             |     |     |     |     |       | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |             |     |     |     |     |       +-subquery=
    |             |     |     |     |     |         +-OrderByScan
    |             |     |     |     |     |           +-column_list=[$array.element#12]
    |             |     |     |     |     |           +-is_ordered=TRUE
    |             |     |     |     |     |           +-input_scan=
    |             |     |     |     |     |           | +-FilterScan
    |             |     |     |     |     |           |   +-column_list=[$array.element#12, $array_offset.off#13]
    |             |     |     |     |     |           |   +-input_scan=
    |             |     |     |     |     |           |   | +-ArrayScan
    |             |     |     |     |     |           |   |   +-column_list=[$array.element#12, $array_offset.off#13]
    |             |     |     |     |     |           |   |   +-array_expr=
    |             |     |     |     |     |           |   |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_filter#11, is_correlated=TRUE)
    |             |     |     |     |     |           |   |   +-element_column=$array.element#12
    |             |     |     |     |     |           |   |   +-array_offset_column=
    |             |     |     |     |     |           |   |     +-ColumnHolder(column=$array_offset.off#13)
    |             |     |     |     |     |           |   +-filter_expr=
    |             |     |     |     |     |           |     +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |             |     |     |     |     |           |       +-ColumnRef(type=INT64, column=$array.element#12)
    |             |     |     |     |     |           |       +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |             |     |     |     |     |           +-order_by_item_list=
    |             |     |     |     |     |             +-OrderByItem
    |             |     |     |     |     |               +-column_ref=
    |             |     |     |     |     |                 +-ColumnRef(type=INT64, column=$array_offset.off#13)
    |             |     |     |     |     +-input_scan=
    |             |     |     |     |       +-ProjectScan
    |             |     |     |     |         +-column_list=[$subquery1.array_to_filter#11]
    |             |     |     |     |         +-expr_list=
    |             |     |     |     |         | +-array_to_filter#11 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |             |     |     |     |         +-input_scan=
    |             |     |     |     |           +-SingleRowScan
    |             |     |     |     +-Literal(type=INT64, value=0)
    |             |     |     +-Literal(type=STRUCT<y INT64>, value={y:6})
    |             |     +-Literal(type=STRUCT<x ARRAY<STRUCT<y INT64>>>, value={x:[{y:7}, {y:8}]})
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
==

SELECT FLATTEN([
  STRUCT([STRUCT((select (select (select Key+t.key from KeyValue limit 1) + 1) + 1) AS y), STRUCT(6)] AS x ),
  STRUCT([STRUCT(7 AS y), STRUCT(8)] AS x )
].x.y) AS my_array
FROM TestTable t
--
QueryStmt
+-output_column_list=
| +-$query.my_array#9 AS my_array [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.my_array#9]
    +-expr_list=
    | +-my_array#9 :=
    |   +-Flatten
    |     +-type=ARRAY<INT64>
    |     +-expr=
    |     | +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<x ARRAY<STRUCT<y INT64>>>) -> ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>)
    |     |   +-MakeStruct
    |     |   | +-type=STRUCT<x ARRAY<STRUCT<y INT64>>>
    |     |   | +-field_list=
    |     |   |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<y INT64>) -> ARRAY<STRUCT<y INT64>>)
    |     |   |     +-MakeStruct
    |     |   |     | +-type=STRUCT<y INT64>
    |     |   |     | +-field_list=
    |     |   |     |   +-SubqueryExpr
    |     |   |     |     +-type=INT64
    |     |   |     |     +-subquery_type=SCALAR
    |     |   |     |     +-parameter_list=
    |     |   |     |     | +-ColumnRef(type=INT32, column=TestTable.key#1)
    |     |   |     |     +-subquery=
    |     |   |     |       +-ProjectScan
    |     |   |     |         +-column_list=[$expr_subquery.$col1#8]
    |     |   |     |         +-expr_list=
    |     |   |     |         | +-$col1#8 :=
    |     |   |     |         |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     |   |     |         |     +-SubqueryExpr
    |     |   |     |         |     | +-type=INT64
    |     |   |     |         |     | +-subquery_type=SCALAR
    |     |   |     |         |     | +-parameter_list=
    |     |   |     |         |     | | +-ColumnRef(type=INT32, column=TestTable.key#1, is_correlated=TRUE)
    |     |   |     |         |     | +-subquery=
    |     |   |     |         |     |   +-ProjectScan
    |     |   |     |         |     |     +-column_list=[$expr_subquery.$col1#7]
    |     |   |     |         |     |     +-expr_list=
    |     |   |     |         |     |     | +-$col1#7 :=
    |     |   |     |         |     |     |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     |   |     |         |     |     |     +-SubqueryExpr
    |     |   |     |         |     |     |     | +-type=INT64
    |     |   |     |         |     |     |     | +-subquery_type=SCALAR
    |     |   |     |         |     |     |     | +-parameter_list=
    |     |   |     |         |     |     |     | | +-ColumnRef(type=INT32, column=TestTable.key#1, is_correlated=TRUE)
    |     |   |     |         |     |     |     | +-subquery=
    |     |   |     |         |     |     |     |   +-LimitOffsetScan
    |     |   |     |         |     |     |     |     +-column_list=[$expr_subquery.$col1#6]
    |     |   |     |         |     |     |     |     +-input_scan=
    |     |   |     |         |     |     |     |     | +-ProjectScan
    |     |   |     |         |     |     |     |     |   +-column_list=[$expr_subquery.$col1#6]
    |     |   |     |         |     |     |     |     |   +-expr_list=
    |     |   |     |         |     |     |     |     |   | +-$col1#6 :=
    |     |   |     |         |     |     |     |     |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     |   |     |         |     |     |     |     |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#4)
    |     |   |     |         |     |     |     |     |   |     +-Cast(INT32 -> INT64)
    |     |   |     |         |     |     |     |     |   |       +-ColumnRef(type=INT32, column=TestTable.key#1, is_correlated=TRUE)
    |     |   |     |         |     |     |     |     |   +-input_scan=
    |     |   |     |         |     |     |     |     |     +-TableScan(column_list=[KeyValue.Key#4], table=KeyValue, column_index_list=[0])
    |     |   |     |         |     |     |     |     +-limit=
    |     |   |     |         |     |     |     |       +-Literal(type=INT64, value=1)
    |     |   |     |         |     |     |     +-Literal(type=INT64, value=1)
    |     |   |     |         |     |     +-input_scan=
    |     |   |     |         |     |       +-SingleRowScan
    |     |   |     |         |     +-Literal(type=INT64, value=1)
    |     |   |     |         +-input_scan=
    |     |   |     |           +-SingleRowScan
    |     |   |     +-Literal(type=STRUCT<y INT64>, value={y:6})
    |     |   +-Literal(type=STRUCT<x ARRAY<STRUCT<y INT64>>>, value={x:[{y:7}, {y:8}]})
    |     +-get_field_list=
    |       +-GetStructField
    |       | +-type=ARRAY<STRUCT<y INT64>>
    |       | +-expr=
    |       | | +-FlattenedArg(type=STRUCT<x ARRAY<STRUCT<y INT64>>>)
    |       | +-field_idx=0
    |       +-GetStructField
    |         +-type=INT64
    |         +-expr=
    |         | +-FlattenedArg(type=STRUCT<y INT64>)
    |         +-field_idx=0
    +-input_scan=
      +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0], alias='t')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.my_array#9 AS my_array [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.my_array#9]
    +-expr_list=
    | +-my_array#9 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT32, column=TestTable.key#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#16]
    |         +-expr_list=
    |         | +-injected#16 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>, column=$flatten_input.injected#10)
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<INT64>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>, column=$flatten_input.injected#10)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#15]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#11, $offset.injected#12, $flatten.injected#13, $offset.injected#14, $flatten.injected#15]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#15 :=
    |         |           |   |   +-GetStructField
    |         |           |   |     +-type=INT64
    |         |           |   |     +-expr=
    |         |           |   |     | +-ColumnRef(type=STRUCT<y INT64>, column=$flatten.injected#13)
    |         |           |   |     +-field_idx=0
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#11, $offset.injected#12, $flatten.injected#13, $offset.injected#14]
    |         |           |       +-input_scan=
    |         |           |       | +-ArrayScan
    |         |           |       |   +-column_list=[$flatten.injected#11, $offset.injected#12]
    |         |           |       |   +-array_expr=
    |         |           |       |   | +-ColumnRef(type=ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>, column=$flatten_input.injected#10, is_correlated=TRUE)
    |         |           |       |   +-element_column=$flatten.injected#11
    |         |           |       |   +-array_offset_column=
    |         |           |       |     +-ColumnHolder(column=$offset.injected#12)
    |         |           |       +-array_expr=
    |         |           |       | +-GetStructField
    |         |           |       |   +-type=ARRAY<STRUCT<y INT64>>
    |         |           |       |   +-expr=
    |         |           |       |   | +-ColumnRef(type=STRUCT<x ARRAY<STRUCT<y INT64>>>, column=$flatten.injected#11)
    |         |           |       |   +-field_idx=0
    |         |           |       +-element_column=$flatten.injected#13
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#14)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |             | +-column_ref=
    |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#12)
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#14)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#10]
    |             +-expr_list=
    |             | +-injected#10 :=
    |             |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<x ARRAY<STRUCT<y INT64>>>) -> ARRAY<STRUCT<x ARRAY<STRUCT<y INT64>>>>)
    |             |     +-MakeStruct
    |             |     | +-type=STRUCT<x ARRAY<STRUCT<y INT64>>>
    |             |     | +-field_list=
    |             |     |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) STRUCT<y INT64>) -> ARRAY<STRUCT<y INT64>>)
    |             |     |     +-MakeStruct
    |             |     |     | +-type=STRUCT<y INT64>
    |             |     |     | +-field_list=
    |             |     |     |   +-SubqueryExpr
    |             |     |     |     +-type=INT64
    |             |     |     |     +-subquery_type=SCALAR
    |             |     |     |     +-parameter_list=
    |             |     |     |     | +-ColumnRef(type=INT32, column=TestTable.key#1, is_correlated=TRUE)
    |             |     |     |     +-subquery=
    |             |     |     |       +-ProjectScan
    |             |     |     |         +-column_list=[$expr_subquery.$col1#8]
    |             |     |     |         +-expr_list=
    |             |     |     |         | +-$col1#8 :=
    |             |     |     |         |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |             |     |     |         |     +-SubqueryExpr
    |             |     |     |         |     | +-type=INT64
    |             |     |     |         |     | +-subquery_type=SCALAR
    |             |     |     |         |     | +-parameter_list=
    |             |     |     |         |     | | +-ColumnRef(type=INT32, column=TestTable.key#1, is_correlated=TRUE)
    |             |     |     |         |     | +-subquery=
    |             |     |     |         |     |   +-ProjectScan
    |             |     |     |         |     |     +-column_list=[$expr_subquery.$col1#7]
    |             |     |     |         |     |     +-expr_list=
    |             |     |     |         |     |     | +-$col1#7 :=
    |             |     |     |         |     |     |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |             |     |     |         |     |     |     +-SubqueryExpr
    |             |     |     |         |     |     |     | +-type=INT64
    |             |     |     |         |     |     |     | +-subquery_type=SCALAR
    |             |     |     |         |     |     |     | +-parameter_list=
    |             |     |     |         |     |     |     | | +-ColumnRef(type=INT32, column=TestTable.key#1, is_correlated=TRUE)
    |             |     |     |         |     |     |     | +-subquery=
    |             |     |     |         |     |     |     |   +-LimitOffsetScan
    |             |     |     |         |     |     |     |     +-column_list=[$expr_subquery.$col1#6]
    |             |     |     |         |     |     |     |     +-input_scan=
    |             |     |     |         |     |     |     |     | +-ProjectScan
    |             |     |     |         |     |     |     |     |   +-column_list=[$expr_subquery.$col1#6]
    |             |     |     |         |     |     |     |     |   +-expr_list=
    |             |     |     |         |     |     |     |     |   | +-$col1#6 :=
    |             |     |     |         |     |     |     |     |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |             |     |     |         |     |     |     |     |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#4)
    |             |     |     |         |     |     |     |     |   |     +-Cast(INT32 -> INT64)
    |             |     |     |         |     |     |     |     |   |       +-ColumnRef(type=INT32, column=TestTable.key#1, is_correlated=TRUE)
    |             |     |     |         |     |     |     |     |   +-input_scan=
    |             |     |     |         |     |     |     |     |     +-TableScan(column_list=[KeyValue.Key#4], table=KeyValue, column_index_list=[0])
    |             |     |     |         |     |     |     |     +-limit=
    |             |     |     |         |     |     |     |       +-Literal(type=INT64, value=1)
    |             |     |     |         |     |     |     +-Literal(type=INT64, value=1)
    |             |     |     |         |     |     +-input_scan=
    |             |     |     |         |     |       +-SingleRowScan
    |             |     |     |         |     +-Literal(type=INT64, value=1)
    |             |     |     |         +-input_scan=
    |             |     |     |           +-SingleRowScan
    |             |     |     +-Literal(type=STRUCT<y INT64>, value={y:6})
    |             |     +-Literal(type=STRUCT<x ARRAY<STRUCT<y INT64>>>, value={x:[{y:7}, {y:8}]})
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0], alias='t')
==

SELECT FLATTEN(
  (IF(types.int32 IN (SELECT int64 FROM SimpleTypes), [struct(1 as b)], [struct(2 as b)]).b)
)
FROM SimpleTypes types
--
QueryStmt
+-output_column_list=
| +-$query.$col1#37 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#37]
    +-expr_list=
    | +-$col1#37 :=
    |   +-Flatten
    |     +-type=ARRAY<INT64>
    |     +-expr=
    |     | +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<b INT64>>, ARRAY<STRUCT<b INT64>>) -> ARRAY<STRUCT<b INT64>>)
    |     |   +-SubqueryExpr
    |     |   | +-type=BOOL
    |     |   | +-subquery_type=IN
    |     |   | +-in_expr=
    |     |   | | +-Cast(INT32 -> INT64)
    |     |   | |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     |   | +-subquery=
    |     |   |   +-ProjectScan
    |     |   |     +-column_list=[SimpleTypes.int64#20]
    |     |   |     +-input_scan=
    |     |   |       +-TableScan(column_list=[SimpleTypes.int64#20], table=SimpleTypes, column_index_list=[1])
    |     |   +-Literal(type=ARRAY<STRUCT<b INT64>>, value=[{b:1}])
    |     |   +-Literal(type=ARRAY<STRUCT<b INT64>>, value=[{b:2}])
    |     +-get_field_list=
    |       +-GetStructField
    |         +-type=INT64
    |         +-expr=
    |         | +-FlattenedArg(type=STRUCT<b INT64>)
    |         +-field_idx=0
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0], alias='types')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#37 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#37]
    +-expr_list=
    | +-$col1#37 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#42]
    |         +-expr_list=
    |         | +-injected#42 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<b INT64>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRUCT<b INT64>>, column=$flatten_input.injected#38)
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<INT64>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<STRUCT<b INT64>>, column=$flatten_input.injected#38)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#41]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#39, $offset.injected#40, $flatten.injected#41]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#41 :=
    |         |           |   |   +-GetStructField
    |         |           |   |     +-type=INT64
    |         |           |   |     +-expr=
    |         |           |   |     | +-ColumnRef(type=STRUCT<b INT64>, column=$flatten.injected#39)
    |         |           |   |     +-field_idx=0
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#39, $offset.injected#40]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<STRUCT<b INT64>>, column=$flatten_input.injected#38, is_correlated=TRUE)
    |         |           |       +-element_column=$flatten.injected#39
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#40)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#40)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#38]
    |             +-expr_list=
    |             | +-injected#38 :=
    |             |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<b INT64>>, ARRAY<STRUCT<b INT64>>) -> ARRAY<STRUCT<b INT64>>)
    |             |     +-SubqueryExpr
    |             |     | +-type=BOOL
    |             |     | +-subquery_type=IN
    |             |     | +-in_expr=
    |             |     | | +-Cast(INT32 -> INT64)
    |             |     | |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#1, is_correlated=TRUE)
    |             |     | +-subquery=
    |             |     |   +-ProjectScan
    |             |     |     +-column_list=[SimpleTypes.int64#20]
    |             |     |     +-input_scan=
    |             |     |       +-TableScan(column_list=[SimpleTypes.int64#20], table=SimpleTypes, column_index_list=[1])
    |             |     +-Literal(type=ARRAY<STRUCT<b INT64>>, value=[{b:1}])
    |             |     +-Literal(type=ARRAY<STRUCT<b INT64>>, value=[{b:2}])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0], alias='types')
==

SELECT *
FROM (SELECT FLATTEN(t.ProtoArray.str_value) AS elements FROM ArrayTypes t)
JOIN UNNEST(FLATTEN([STRUCT('hello' AS a)].a)) AS key
ON key IN UNNEST(elements)
--
QueryStmt
+-output_column_list=
| +-$subquery1.elements#18 AS elements [ARRAY<STRING>]
| +-$array.key#19 AS key [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$subquery1.elements#18, $array.key#19]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$subquery1.elements#18, $array.key#19]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.elements#18]
        |   +-expr_list=
        |   | +-elements#18 :=
        |   |   +-Flatten
        |   |     +-type=ARRAY<STRING>
        |   |     +-expr=
        |   |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   |     +-get_field_list=
        |   |       +-GetProtoField
        |   |         +-type=ARRAY<STRING>
        |   |         +-expr=
        |   |         | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |   |         +-field_descriptor=str_value
        |   |         +-default_value=[]
        |   +-input_scan=
        |     +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<STRING>
        |   +-expr=
        |   | +-Literal(type=ARRAY<STRUCT<a STRING>>, value=[{a:'hello'}])
        |   +-get_field_list=
        |     +-GetStructField
        |       +-type=STRING
        |       +-expr=
        |       | +-FlattenedArg(type=STRUCT<a STRING>)
        |       +-field_idx=0
        +-element_column=$array.key#19
        +-join_expr=
          +-FunctionCall(ZetaSQL:$in_array(STRING, ARRAY<STRING>) -> BOOL)
            +-ColumnRef(type=STRING, column=$array.key#19)
            +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.elements#18)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$subquery1.elements#18 AS elements [ARRAY<STRING>]
| +-$array.key#19 AS key [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$subquery1.elements#18, $array.key#19]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$subquery1.elements#18, $array.key#19]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.elements#18]
        |   +-expr_list=
        |   | +-elements#18 :=
        |   |   +-SubqueryExpr
        |   |     +-type=ARRAY<STRING>
        |   |     +-subquery_type=SCALAR
        |   |     +-parameter_list=
        |   |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   |     +-subquery=
        |   |       +-ProjectScan
        |   |         +-column_list=[$with_expr.injected#27]
        |   |         +-expr_list=
        |   |         | +-injected#27 :=
        |   |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        |   |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> BOOL)
        |   |         |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#20)
        |   |         |     +-Literal(type=ARRAY<STRING>, value=NULL)
        |   |         |     +-SubqueryExpr
        |   |         |       +-type=ARRAY<STRING>
        |   |         |       +-subquery_type=ARRAY
        |   |         |       +-parameter_list=
        |   |         |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#20)
        |   |         |       +-subquery=
        |   |         |         +-OrderByScan
        |   |         |           +-column_list=[$flatten.injected#23]
        |   |         |           +-is_ordered=TRUE
        |   |         |           +-input_scan=
        |   |         |           | +-ArrayScan
        |   |         |           |   +-column_list=[$flatten.injected#21, $offset.injected#22, $flatten.injected#23, $offset.injected#24]
        |   |         |           |   +-input_scan=
        |   |         |           |   | +-ArrayScan
        |   |         |           |   |   +-column_list=[$flatten.injected#21, $offset.injected#22]
        |   |         |           |   |   +-array_expr=
        |   |         |           |   |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#20, is_correlated=TRUE)
        |   |         |           |   |   +-element_column=$flatten.injected#21
        |   |         |           |   |   +-array_offset_column=
        |   |         |           |   |     +-ColumnHolder(column=$offset.injected#22)
        |   |         |           |   +-array_expr=
        |   |         |           |   | +-GetProtoField
        |   |         |           |   |   +-type=ARRAY<STRING>
        |   |         |           |   |   +-expr=
        |   |         |           |   |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#21)
        |   |         |           |   |   +-field_descriptor=str_value
        |   |         |           |   |   +-default_value=[]
        |   |         |           |   +-element_column=$flatten.injected#23
        |   |         |           |   +-array_offset_column=
        |   |         |           |     +-ColumnHolder(column=$offset.injected#24)
        |   |         |           +-order_by_item_list=
        |   |         |             +-OrderByItem
        |   |         |             | +-column_ref=
        |   |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#22)
        |   |         |             +-OrderByItem
        |   |         |               +-column_ref=
        |   |         |                 +-ColumnRef(type=INT64, column=$offset.injected#24)
        |   |         +-input_scan=
        |   |           +-ProjectScan
        |   |             +-column_list=[$flatten_input.injected#20]
        |   |             +-expr_list=
        |   |             | +-injected#20 := ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
        |   |             +-input_scan=
        |   |               +-SingleRowScan
        |   +-input_scan=
        |     +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-array_expr=
        | +-SubqueryExpr
        |   +-type=ARRAY<STRING>
        |   +-subquery_type=ARRAY
        |   +-subquery=
        |     +-ProjectScan
        |       +-column_list=[$flatten.injected#26]
        |       +-expr_list=
        |       | +-injected#26 :=
        |       |   +-GetStructField
        |       |     +-type=STRING
        |       |     +-expr=
        |       |     | +-ColumnRef(type=STRUCT<a STRING>, column=$flatten.injected#25)
        |       |     +-field_idx=0
        |       +-input_scan=
        |         +-ArrayScan
        |           +-column_list=[$flatten.injected#25]
        |           +-input_scan=
        |           | +-SingleRowScan
        |           +-array_expr=
        |           | +-Literal(type=ARRAY<STRUCT<a STRING>>, value=[{a:'hello'}])
        |           +-element_column=$flatten.injected#25
        +-element_column=$array.key#19
        +-join_expr=
          +-FunctionCall(ZetaSQL:$in_array(STRING, ARRAY<STRING>) -> BOOL)
            +-ColumnRef(type=STRING, column=$array.key#19)
            +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.elements#18)
==

select count(*) from ArrayTypes t where 3 in unnest(t.ProtoArray.int32_val1);
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#18 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#18]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#18]
        +-input_scan=
        | +-FilterScan
        |   +-column_list=[ArrayTypes.ProtoArray#15]
        |   +-input_scan=
        |   | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        |   +-filter_expr=
        |     +-FunctionCall(ZetaSQL:$in_array(INT32, ARRAY<INT32>) -> BOOL)
        |       +-Literal(type=INT32, value=3)
        |       +-Flatten
        |         +-type=ARRAY<INT32>
        |         +-expr=
        |         | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |         +-get_field_list=
        |           +-GetProtoField
        |             +-type=INT32
        |             +-expr=
        |             | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |             +-field_descriptor=int32_val1
        |             +-default_value=0
        +-aggregate_list=
          +-$agg1#18 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#18 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#18]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#18]
        +-input_scan=
        | +-FilterScan
        |   +-column_list=[ArrayTypes.ProtoArray#15]
        |   +-input_scan=
        |   | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        |   +-filter_expr=
        |     +-FunctionCall(ZetaSQL:$in_array(INT32, ARRAY<INT32>) -> BOOL)
        |       +-Literal(type=INT32, value=3)
        |       +-SubqueryExpr
        |         +-type=ARRAY<INT32>
        |         +-subquery_type=SCALAR
        |         +-parameter_list=
        |         | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |         +-subquery=
        |           +-ProjectScan
        |             +-column_list=[$with_expr.injected#23]
        |             +-expr_list=
        |             | +-injected#23 :=
        |             |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT32>, ARRAY<INT32>) -> ARRAY<INT32>)
        |             |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> BOOL)
        |             |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19)
        |             |     +-Literal(type=ARRAY<INT32>, value=NULL)
        |             |     +-SubqueryExpr
        |             |       +-type=ARRAY<INT32>
        |             |       +-subquery_type=ARRAY
        |             |       +-parameter_list=
        |             |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19)
        |             |       +-subquery=
        |             |         +-OrderByScan
        |             |           +-column_list=[$flatten.injected#22]
        |             |           +-is_ordered=TRUE
        |             |           +-input_scan=
        |             |           | +-ProjectScan
        |             |           |   +-column_list=[$flatten.injected#20, $offset.injected#21, $flatten.injected#22]
        |             |           |   +-expr_list=
        |             |           |   | +-injected#22 :=
        |             |           |   |   +-GetProtoField
        |             |           |   |     +-type=INT32
        |             |           |   |     +-expr=
        |             |           |   |     | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#20)
        |             |           |   |     +-field_descriptor=int32_val1
        |             |           |   |     +-default_value=0
        |             |           |   +-input_scan=
        |             |           |     +-ArrayScan
        |             |           |       +-column_list=[$flatten.injected#20, $offset.injected#21]
        |             |           |       +-array_expr=
        |             |           |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19, is_correlated=TRUE)
        |             |           |       +-element_column=$flatten.injected#20
        |             |           |       +-array_offset_column=
        |             |           |         +-ColumnHolder(column=$offset.injected#21)
        |             |           +-order_by_item_list=
        |             |             +-OrderByItem
        |             |               +-column_ref=
        |             |                 +-ColumnRef(type=INT64, column=$offset.injected#21)
        |             +-input_scan=
        |               +-ProjectScan
        |                 +-column_list=[$flatten_input.injected#19]
        |                 +-expr_list=
        |                 | +-injected#19 := ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
        |                 +-input_scan=
        |                   +-SingleRowScan
        +-aggregate_list=
          +-$agg1#18 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
==

select FLATTEN(t.ProtoArray.str_value[DEFAULT_OFFSET((SELECT COUNT(*) FROM TestTable))])
from ArrayTypes t;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#22 AS "$col1" [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#22]
    +-expr_list=
    | +-$col1#22 :=
    |   +-Flatten
    |     +-type=ARRAY<STRING>
    |     +-expr=
    |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |     +-get_field_list=
    |       +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
    |         +-GetProtoField
    |         | +-type=ARRAY<STRING>
    |         | +-expr=
    |         | | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
    |         | +-field_descriptor=str_value
    |         | +-default_value=[]
    |         +-SubqueryExpr
    |           +-type=INT64
    |           +-subquery_type=SCALAR
    |           +-subquery=
    |             +-ProjectScan
    |               +-column_list=[$aggregate.$agg1#21]
    |               +-input_scan=
    |                 +-AggregateScan
    |                   +-column_list=[$aggregate.$agg1#21]
    |                   +-input_scan=
    |                   | +-TableScan(table=TestTable)
    |                   +-aggregate_list=
    |                     +-$agg1#21 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-input_scan=
      +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#22 AS "$col1" [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#22]
    +-expr_list=
    | +-$col1#22 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<STRING>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#27]
    |         +-expr_list=
    |         | +-injected#27 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#23)
    |         |     +-Literal(type=ARRAY<STRING>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<STRING>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#23)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#26]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#24, $offset.injected#25, $flatten.injected#26]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#26 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
    |         |           |   |     +-GetProtoField
    |         |           |   |     | +-type=ARRAY<STRING>
    |         |           |   |     | +-expr=
    |         |           |   |     | | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#24)
    |         |           |   |     | +-field_descriptor=str_value
    |         |           |   |     | +-default_value=[]
    |         |           |   |     +-SubqueryExpr
    |         |           |   |       +-type=INT64
    |         |           |   |       +-subquery_type=SCALAR
    |         |           |   |       +-subquery=
    |         |           |   |         +-ProjectScan
    |         |           |   |           +-column_list=[$aggregate.$agg1#21]
    |         |           |   |           +-input_scan=
    |         |           |   |             +-AggregateScan
    |         |           |   |               +-column_list=[$aggregate.$agg1#21]
    |         |           |   |               +-input_scan=
    |         |           |   |               | +-TableScan(table=TestTable)
    |         |           |   |               +-aggregate_list=
    |         |           |   |                 +-$agg1#21 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#24, $offset.injected#25]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#23, is_correlated=TRUE)
    |         |           |       +-element_column=$flatten.injected#24
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#25)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#25)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#23]
    |             +-expr_list=
    |             | +-injected#23 := ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')

==

select v
from ArrayTypes t, unnest(t.ProtoArray.str_value[DEFAULT_OFFSET(ARRAY_LENGTH(t.ProtoArray))]) v
--
QueryStmt
+-output_column_list=
| +-$array.v#18 AS v [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.v#18]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.v#18]
        +-input_scan=
        | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<STRING>
        |   +-expr=
        |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   +-get_field_list=
        |     +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
        |       +-GetProtoField
        |       | +-type=ARRAY<STRING>
        |       | +-expr=
        |       | | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |       | +-field_descriptor=str_value
        |       | +-default_value=[]
        |       +-FunctionCall(ZetaSQL:array_length(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> INT64)
        |         +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        +-element_column=$array.v#18

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.v#18 AS v [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.v#18]
    +-input_scan=
      +-ProjectScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.v#18]
        +-expr_list=
        | +-v#18 := ColumnRef(type=STRING, column=$flatten.injected#20)
        +-input_scan=
          +-ProjectScan
            +-column_list=[ArrayTypes.ProtoArray#15, $flatten.injected#19, $flatten.injected#20]
            +-expr_list=
            | +-injected#20 :=
            |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
            |     +-GetProtoField
            |     | +-type=ARRAY<STRING>
            |     | +-expr=
            |     | | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#19)
            |     | +-field_descriptor=str_value
            |     | +-default_value=[]
            |     +-FunctionCall(ZetaSQL:array_length(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> INT64)
            |       +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
            +-input_scan=
              +-ArrayScan
                +-column_list=[ArrayTypes.ProtoArray#15, $flatten.injected#19]
                +-input_scan=
                | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
                +-array_expr=
                | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
                +-element_column=$flatten.injected#19
==

select v, o
from ArrayTypes t, unnest(t.ProtoArray.str_value[DEFAULT_OFFSET(ARRAY_LENGTH(t.ProtoArray))]) v WITH OFFSET o
--
QueryStmt
+-output_column_list=
| +-$array.v#18 AS v [STRING]
| +-$array_offset.o#19 AS o [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.v#18, $array_offset.o#19]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.v#18, $array_offset.o#19]
        +-input_scan=
        | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<STRING>
        |   +-expr=
        |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   +-get_field_list=
        |     +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
        |       +-GetProtoField
        |       | +-type=ARRAY<STRING>
        |       | +-expr=
        |       | | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |       | +-field_descriptor=str_value
        |       | +-default_value=[]
        |       +-FunctionCall(ZetaSQL:array_length(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> INT64)
        |         +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        +-element_column=$array.v#18
        +-array_offset_column=
          +-ColumnHolder(column=$array_offset.o#19)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.v#18 AS v [STRING]
| +-$array_offset.o#19 AS o [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.v#18, $array_offset.o#19]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.ProtoArray#15, $array.v#18, $array_offset.o#19]
        +-input_scan=
        | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-array_expr=
        | +-SubqueryExpr
        |   +-type=ARRAY<STRING>
        |   +-subquery_type=ARRAY
        |   +-parameter_list=
        |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   +-subquery=
        |     +-OrderByScan
        |       +-column_list=[$flatten.injected#22]
        |       +-is_ordered=TRUE
        |       +-input_scan=
        |       | +-ProjectScan
        |       |   +-column_list=[$flatten.injected#20, $offset.injected#21, $flatten.injected#22]
        |       |   +-expr_list=
        |       |   | +-injected#22 :=
        |       |   |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
        |       |   |     +-GetProtoField
        |       |   |     | +-type=ARRAY<STRING>
        |       |   |     | +-expr=
        |       |   |     | | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#20)
        |       |   |     | +-field_descriptor=str_value
        |       |   |     | +-default_value=[]
        |       |   |     +-FunctionCall(ZetaSQL:array_length(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> INT64)
        |       |   |       +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
        |       |   +-input_scan=
        |       |     +-ArrayScan
        |       |       +-column_list=[$flatten.injected#20, $offset.injected#21]
        |       |       +-input_scan=
        |       |       | +-SingleRowScan
        |       |       +-array_expr=
        |       |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
        |       |       +-element_column=$flatten.injected#20
        |       |       +-array_offset_column=
        |       |         +-ColumnHolder(column=$offset.injected#21)
        |       +-order_by_item_list=
        |         +-OrderByItem
        |           +-column_ref=
        |             +-ColumnRef(type=INT64, column=$offset.injected#21)
        +-element_column=$array.v#18
        +-array_offset_column=
          +-ColumnHolder(column=$array_offset.o#19)
==

select FLATTEN(t.ProtoArray.str_value[DEFAULT_OFFSET(ARRAY_LENGTH(t.ProtoArray))])
from ArrayTypes t;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#18 AS "$col1" [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#18]
    +-expr_list=
    | +-$col1#18 :=
    |   +-Flatten
    |     +-type=ARRAY<STRING>
    |     +-expr=
    |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |     +-get_field_list=
    |       +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
    |         +-GetProtoField
    |         | +-type=ARRAY<STRING>
    |         | +-expr=
    |         | | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
    |         | +-field_descriptor=str_value
    |         | +-default_value=[]
    |         +-FunctionCall(ZetaSQL:array_length(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> INT64)
    |           +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    +-input_scan=
      +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#18 AS "$col1" [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#18]
    +-expr_list=
    | +-$col1#18 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<STRING>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#23]
    |         +-expr_list=
    |         | +-injected#23 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19)
    |         |     +-Literal(type=ARRAY<STRING>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<STRING>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
    |         |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#22]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#20, $offset.injected#21, $flatten.injected#22]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#22 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
    |         |           |   |     +-GetProtoField
    |         |           |   |     | +-type=ARRAY<STRING>
    |         |           |   |     | +-expr=
    |         |           |   |     | | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#20)
    |         |           |   |     | +-field_descriptor=str_value
    |         |           |   |     | +-default_value=[]
    |         |           |   |     +-FunctionCall(ZetaSQL:array_length(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> INT64)
    |         |           |   |       +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#20, $offset.injected#21]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19, is_correlated=TRUE)
    |         |           |       +-element_column=$flatten.injected#20
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#21)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#21)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#19]
    |             +-expr_list=
    |             | +-injected#19 := ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')

==

select FLATTEN(t.ProtoArray.str_value[DEFAULT_OFFSET(ARRAY_LENGTH(t.Int32Array))])
from ArrayTypes t;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#18 AS "$col1" [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#18]
    +-expr_list=
    | +-$col1#18 :=
    |   +-Flatten
    |     +-type=ARRAY<STRING>
    |     +-expr=
    |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |     +-get_field_list=
    |       +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
    |         +-GetProtoField
    |         | +-type=ARRAY<STRING>
    |         | +-expr=
    |         | | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
    |         | +-field_descriptor=str_value
    |         | +-default_value=[]
    |         +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
    |           +-ColumnRef(type=ARRAY<INT32>, column=ArrayTypes.Int32Array#1)
    +-input_scan=
      +-TableScan(column_list=ArrayTypes.[Int32Array#1, ProtoArray#15], table=ArrayTypes, column_index_list=[0, 14], alias='t')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#18 AS "$col1" [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#18]
    +-expr_list=
    | +-$col1#18 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<STRING>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=ARRAY<INT32>, column=ArrayTypes.Int32Array#1)
    |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#23]
    |         +-expr_list=
    |         | +-injected#23 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19)
    |         |     +-Literal(type=ARRAY<STRING>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<STRING>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<INT32>, column=ArrayTypes.Int32Array#1, is_correlated=TRUE)
    |         |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#22]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#20, $offset.injected#21, $flatten.injected#22]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#22 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
    |         |           |   |     +-GetProtoField
    |         |           |   |     | +-type=ARRAY<STRING>
    |         |           |   |     | +-expr=
    |         |           |   |     | | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#20)
    |         |           |   |     | +-field_descriptor=str_value
    |         |           |   |     | +-default_value=[]
    |         |           |   |     +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
    |         |           |   |       +-ColumnRef(type=ARRAY<INT32>, column=ArrayTypes.Int32Array#1, is_correlated=TRUE)
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#20, $offset.injected#21]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#19, is_correlated=TRUE)
    |         |           |       +-element_column=$flatten.injected#20
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#21)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#21)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#19]
    |             +-expr_list=
    |             | +-injected#19 := ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=ArrayTypes.[Int32Array#1, ProtoArray#15], table=ArrayTypes, column_index_list=[0, 14], alias='t')

==

select v
from ArrayTypes t, UNNEST(t.ProtoArray.str_value[DEFAULT_OFFSET(ARRAY_LENGTH(t.Int32Array))]) v;
--
QueryStmt
+-output_column_list=
| +-$array.v#18 AS v [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.v#18]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.Int32Array#1, ArrayTypes.ProtoArray#15, $array.v#18]
        +-input_scan=
        | +-TableScan(column_list=ArrayTypes.[Int32Array#1, ProtoArray#15], table=ArrayTypes, column_index_list=[0, 14], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<STRING>
        |   +-expr=
        |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   +-get_field_list=
        |     +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
        |       +-GetProtoField
        |       | +-type=ARRAY<STRING>
        |       | +-expr=
        |       | | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |       | +-field_descriptor=str_value
        |       | +-default_value=[]
        |       +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
        |         +-ColumnRef(type=ARRAY<INT32>, column=ArrayTypes.Int32Array#1)
        +-element_column=$array.v#18

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.v#18 AS v [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$array.v#18]
    +-input_scan=
      +-ProjectScan
        +-column_list=[ArrayTypes.Int32Array#1, ArrayTypes.ProtoArray#15, $array.v#18]
        +-expr_list=
        | +-v#18 := ColumnRef(type=STRING, column=$flatten.injected#20)
        +-input_scan=
          +-ProjectScan
            +-column_list=[ArrayTypes.Int32Array#1, ArrayTypes.ProtoArray#15, $flatten.injected#19, $flatten.injected#20]
            +-expr_list=
            | +-injected#20 :=
            |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
            |     +-GetProtoField
            |     | +-type=ARRAY<STRING>
            |     | +-expr=
            |     | | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#19)
            |     | +-field_descriptor=str_value
            |     | +-default_value=[]
            |     +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
            |       +-ColumnRef(type=ARRAY<INT32>, column=ArrayTypes.Int32Array#1)
            +-input_scan=
              +-ArrayScan
                +-column_list=[ArrayTypes.Int32Array#1, ArrayTypes.ProtoArray#15, $flatten.injected#19]
                +-input_scan=
                | +-TableScan(column_list=ArrayTypes.[Int32Array#1, ProtoArray#15], table=ArrayTypes, column_index_list=[0, 14], alias='t')
                +-array_expr=
                | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
                +-element_column=$flatten.injected#19
==

select v, o
from ArrayTypes t, UNNEST(t.ProtoArray.str_value[DEFAULT_OFFSET(ARRAY_LENGTH(t.Int32Array))]) v WITH OFFSET o;
--
QueryStmt
+-output_column_list=
| +-$array.v#18 AS v [STRING]
| +-$array_offset.o#19 AS o [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.v#18, $array_offset.o#19]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.Int32Array#1, ArrayTypes.ProtoArray#15, $array.v#18, $array_offset.o#19]
        +-input_scan=
        | +-TableScan(column_list=ArrayTypes.[Int32Array#1, ProtoArray#15], table=ArrayTypes, column_index_list=[0, 14], alias='t')
        +-array_expr=
        | +-Flatten
        |   +-type=ARRAY<STRING>
        |   +-expr=
        |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   +-get_field_list=
        |     +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
        |       +-GetProtoField
        |       | +-type=ARRAY<STRING>
        |       | +-expr=
        |       | | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
        |       | +-field_descriptor=str_value
        |       | +-default_value=[]
        |       +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
        |         +-ColumnRef(type=ARRAY<INT32>, column=ArrayTypes.Int32Array#1)
        +-element_column=$array.v#18
        +-array_offset_column=
          +-ColumnHolder(column=$array_offset.o#19)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.v#18 AS v [STRING]
| +-$array_offset.o#19 AS o [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.v#18, $array_offset.o#19]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.Int32Array#1, ArrayTypes.ProtoArray#15, $array.v#18, $array_offset.o#19]
        +-input_scan=
        | +-TableScan(column_list=ArrayTypes.[Int32Array#1, ProtoArray#15], table=ArrayTypes, column_index_list=[0, 14], alias='t')
        +-array_expr=
        | +-SubqueryExpr
        |   +-type=ARRAY<STRING>
        |   +-subquery_type=ARRAY
        |   +-parameter_list=
        |   | +-ColumnRef(type=ARRAY<INT32>, column=ArrayTypes.Int32Array#1)
        |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
        |   +-subquery=
        |     +-OrderByScan
        |       +-column_list=[$flatten.injected#22]
        |       +-is_ordered=TRUE
        |       +-input_scan=
        |       | +-ProjectScan
        |       |   +-column_list=[$flatten.injected#20, $offset.injected#21, $flatten.injected#22]
        |       |   +-expr_list=
        |       |   | +-injected#22 :=
        |       |   |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
        |       |   |     +-GetProtoField
        |       |   |     | +-type=ARRAY<STRING>
        |       |   |     | +-expr=
        |       |   |     | | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#20)
        |       |   |     | +-field_descriptor=str_value
        |       |   |     | +-default_value=[]
        |       |   |     +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
        |       |   |       +-ColumnRef(type=ARRAY<INT32>, column=ArrayTypes.Int32Array#1, is_correlated=TRUE)
        |       |   +-input_scan=
        |       |     +-ArrayScan
        |       |       +-column_list=[$flatten.injected#20, $offset.injected#21]
        |       |       +-input_scan=
        |       |       | +-SingleRowScan
        |       |       +-array_expr=
        |       |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
        |       |       +-element_column=$flatten.injected#20
        |       |       +-array_offset_column=
        |       |         +-ColumnHolder(column=$offset.injected#21)
        |       +-order_by_item_list=
        |         +-OrderByItem
        |           +-column_ref=
        |             +-ColumnRef(type=INT64, column=$offset.injected#21)
        +-element_column=$array.v#18
        +-array_offset_column=
          +-ColumnHolder(column=$array_offset.o#19)
==

select FLATTEN(t.ProtoArray.str_value[DEFAULT_OFFSET(ARRAY_LENGTH(test.KitchenSink.nested_repeated_value))])
from ArrayTypes t, TestTable test;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#21 AS "$col1" [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#21]
    +-expr_list=
    | +-$col1#21 :=
    |   +-Flatten
    |     +-type=ARRAY<STRING>
    |     +-expr=
    |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |     +-get_field_list=
    |       +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
    |         +-GetProtoField
    |         | +-type=ARRAY<STRING>
    |         | +-expr=
    |         | | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
    |         | +-field_descriptor=str_value
    |         | +-default_value=[]
    |         +-FunctionCall(ZetaSQL:array_length(ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>) -> INT64)
    |           +-GetProtoField
    |             +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
    |             +-expr=
    |             | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#20)
    |             +-field_descriptor=nested_repeated_value
    |             +-default_value=[]
    +-input_scan=
      +-JoinScan
        +-column_list=[ArrayTypes.ProtoArray#15, TestTable.KitchenSink#20]
        +-left_scan=
        | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-right_scan=
          +-TableScan(column_list=[TestTable.KitchenSink#20], table=TestTable, column_index_list=[2], alias='test')

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#21 AS "$col1" [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#21]
    +-expr_list=
    | +-$col1#21 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<STRING>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#20)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#26]
    |         +-expr_list=
    |         | +-injected#26 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.TestExtraPB>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#22)
    |         |     +-Literal(type=ARRAY<STRING>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<STRING>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#20, is_correlated=TRUE)
    |         |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#22)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#25]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#23, $offset.injected#24, $flatten.injected#25]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#25 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
    |         |           |   |     +-GetProtoField
    |         |           |   |     | +-type=ARRAY<STRING>
    |         |           |   |     | +-expr=
    |         |           |   |     | | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=$flatten.injected#23)
    |         |           |   |     | +-field_descriptor=str_value
    |         |           |   |     | +-default_value=[]
    |         |           |   |     +-FunctionCall(ZetaSQL:array_length(ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>) -> INT64)
    |         |           |   |       +-GetProtoField
    |         |           |   |         +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
    |         |           |   |         +-expr=
    |         |           |   |         | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#20, is_correlated=TRUE)
    |         |           |   |         +-field_descriptor=nested_repeated_value
    |         |           |   |         +-default_value=[]
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#23, $offset.injected#24]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=$flatten_input.injected#22, is_correlated=TRUE)
    |         |           |       +-element_column=$flatten.injected#23
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#24)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#24)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#22]
    |             +-expr_list=
    |             | +-injected#22 := ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-JoinScan
        +-column_list=[ArrayTypes.ProtoArray#15, TestTable.KitchenSink#20]
        +-left_scan=
        | +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias='t')
        +-right_scan=
          +-TableScan(column_list=[TestTable.KitchenSink#20], table=TestTable, column_index_list=[2], alias='test')
==

select t.KitchenSink.nested_repeated_value.nested_int64 in unnest(t.KitchenSink.nested_repeated_value.nested_int64)
from TestTable t;
--
ERROR: Cannot access field nested_int64 on a value with type ARRAY<zetasql_test__.KitchenSinkPB.Nested>. You may need an explicit call to FLATTEN, and the flattened argument may only contain 'dot' after the first array [at 1:44]
select t.KitchenSink.nested_repeated_value.nested_int64 in unnest(t.KitchenSi...
                                           ^

==

SELECT FLATTEN(t.KitchenSink.nested_repeated_value.value, t.KitchenSink.nested_repeated_value.nested_int64)
FROM TestTable t;
--
ERROR: Number of arguments does not match for function FLATTEN. Supported signature: FLATTEN(ARRAY) [at 1:8]
SELECT FLATTEN(t.KitchenSink.nested_repeated_value.value, t.KitchenSink.neste...
       ^

==

SELECT
  FLATTEN((SELECT [STRUCT(['A'] AS f11)])
    .f11[ORDINAL(FLATTEN([STRUCT([0] AS f21)].f21)
      [DEFAULT_OFFSET(0)])]) AS col
--
QueryStmt
+-output_column_list=
| +-$query.col#2 AS col [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.col#2]
    +-expr_list=
    | +-col#2 :=
    |   +-Flatten
    |     +-type=ARRAY<STRING>
    |     +-expr=
    |     | +-SubqueryExpr
    |     |   +-type=ARRAY<STRUCT<f11 ARRAY<STRING>>>
    |     |   +-subquery_type=SCALAR
    |     |   +-subquery=
    |     |     +-ProjectScan
    |     |       +-column_list=[$expr_subquery.$col1#1]
    |     |       +-expr_list=
    |     |       | +-$col1#1 := Literal(type=ARRAY<STRUCT<f11 ARRAY<STRING>>>, value=[{f11:['A']}])
    |     |       +-input_scan=
    |     |         +-SingleRowScan
    |     +-get_field_list=
    |       +-FunctionCall(ZetaSQL:$array_at_ordinal(ARRAY<STRING>, INT64) -> STRING)
    |         +-GetStructField
    |         | +-type=ARRAY<STRING>
    |         | +-expr=
    |         | | +-FlattenedArg(type=STRUCT<f11 ARRAY<STRING>>)
    |         | +-field_idx=0
    |         +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |           +-Flatten
    |           | +-type=ARRAY<INT64>
    |           | +-expr=
    |           | | +-Literal(type=ARRAY<STRUCT<f21 ARRAY<INT64>>>, value=[{f21:[0]}])
    |           | +-get_field_list=
    |           |   +-GetStructField
    |           |     +-type=ARRAY<INT64>
    |           |     +-expr=
    |           |     | +-FlattenedArg(type=STRUCT<f21 ARRAY<INT64>>)
    |           |     +-field_idx=0
    |           +-Literal(type=INT64, value=0)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.col#2 AS col [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.col#2]
    +-expr_list=
    | +-col#2 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<STRING>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#12]
    |         +-expr_list=
    |         | +-injected#12 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<f11 ARRAY<STRING>>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRUCT<f11 ARRAY<STRING>>>, column=$flatten_input.injected#3)
    |         |     +-Literal(type=ARRAY<STRING>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<STRING>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<STRUCT<f11 ARRAY<STRING>>>, column=$flatten_input.injected#3)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#11]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#4, $offset.injected#5, $flatten.injected#11]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#11 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$array_at_ordinal(ARRAY<STRING>, INT64) -> STRING)
    |         |           |   |     +-GetStructField
    |         |           |   |     | +-type=ARRAY<STRING>
    |         |           |   |     | +-expr=
    |         |           |   |     | | +-ColumnRef(type=STRUCT<f11 ARRAY<STRING>>, column=$flatten.injected#4)
    |         |           |   |     | +-field_idx=0
    |         |           |   |     +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |         |           |   |       +-SubqueryExpr
    |         |           |   |       | +-type=ARRAY<INT64>
    |         |           |   |       | +-subquery_type=SCALAR
    |         |           |   |       | +-subquery=
    |         |           |   |       |   +-ProjectScan
    |         |           |   |       |     +-column_list=[$with_expr.injected#13]
    |         |           |   |       |     +-expr_list=
    |         |           |   |       |     | +-injected#13 :=
    |         |           |   |       |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |           |   |       |     |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<f21 ARRAY<INT64>>>) -> BOOL)
    |         |           |   |       |     |     | +-ColumnRef(type=ARRAY<STRUCT<f21 ARRAY<INT64>>>, column=$flatten_input.injected#6)
    |         |           |   |       |     |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |           |   |       |     |     +-SubqueryExpr
    |         |           |   |       |     |       +-type=ARRAY<INT64>
    |         |           |   |       |     |       +-subquery_type=ARRAY
    |         |           |   |       |     |       +-parameter_list=
    |         |           |   |       |     |       | +-ColumnRef(type=ARRAY<STRUCT<f21 ARRAY<INT64>>>, column=$flatten_input.injected#6)
    |         |           |   |       |     |       +-subquery=
    |         |           |   |       |     |         +-OrderByScan
    |         |           |   |       |     |           +-column_list=[$flatten.injected#9]
    |         |           |   |       |     |           +-is_ordered=TRUE
    |         |           |   |       |     |           +-input_scan=
    |         |           |   |       |     |           | +-ArrayScan
    |         |           |   |       |     |           |   +-column_list=[$flatten.injected#7, $offset.injected#8, $flatten.injected#9, $offset.injected#10]
    |         |           |   |       |     |           |   +-input_scan=
    |         |           |   |       |     |           |   | +-ArrayScan
    |         |           |   |       |     |           |   |   +-column_list=[$flatten.injected#7, $offset.injected#8]
    |         |           |   |       |     |           |   |   +-array_expr=
    |         |           |   |       |     |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<f21 ARRAY<INT64>>>, column=$flatten_input.injected#6, is_correlated=TRUE)
    |         |           |   |       |     |           |   |   +-element_column=$flatten.injected#7
    |         |           |   |       |     |           |   |   +-array_offset_column=
    |         |           |   |       |     |           |   |     +-ColumnHolder(column=$offset.injected#8)
    |         |           |   |       |     |           |   +-array_expr=
    |         |           |   |       |     |           |   | +-GetStructField
    |         |           |   |       |     |           |   |   +-type=ARRAY<INT64>
    |         |           |   |       |     |           |   |   +-expr=
    |         |           |   |       |     |           |   |   | +-ColumnRef(type=STRUCT<f21 ARRAY<INT64>>, column=$flatten.injected#7)
    |         |           |   |       |     |           |   |   +-field_idx=0
    |         |           |   |       |     |           |   +-element_column=$flatten.injected#9
    |         |           |   |       |     |           |   +-array_offset_column=
    |         |           |   |       |     |           |     +-ColumnHolder(column=$offset.injected#10)
    |         |           |   |       |     |           +-order_by_item_list=
    |         |           |   |       |     |             +-OrderByItem
    |         |           |   |       |     |             | +-column_ref=
    |         |           |   |       |     |             |   +-ColumnRef(type=INT64, column=$offset.injected#8)
    |         |           |   |       |     |             +-OrderByItem
    |         |           |   |       |     |               +-column_ref=
    |         |           |   |       |     |                 +-ColumnRef(type=INT64, column=$offset.injected#10)
    |         |           |   |       |     +-input_scan=
    |         |           |   |       |       +-ProjectScan
    |         |           |   |       |         +-column_list=[$flatten_input.injected#6]
    |         |           |   |       |         +-expr_list=
    |         |           |   |       |         | +-injected#6 := Literal(type=ARRAY<STRUCT<f21 ARRAY<INT64>>>, value=[{f21:[0]}])
    |         |           |   |       |         +-input_scan=
    |         |           |   |       |           +-SingleRowScan
    |         |           |   |       +-Literal(type=INT64, value=0)
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#4, $offset.injected#5]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<STRUCT<f11 ARRAY<STRING>>>, column=$flatten_input.injected#3, is_correlated=TRUE)
    |         |           |       +-element_column=$flatten.injected#4
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#5)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#5)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#3]
    |             +-expr_list=
    |             | +-injected#3 :=
    |             |   +-SubqueryExpr
    |             |     +-type=ARRAY<STRUCT<f11 ARRAY<STRING>>>
    |             |     +-subquery_type=SCALAR
    |             |     +-subquery=
    |             |       +-ProjectScan
    |             |         +-column_list=[$expr_subquery.$col1#1]
    |             |         +-expr_list=
    |             |         | +-$col1#1 := Literal(type=ARRAY<STRUCT<f11 ARRAY<STRING>>>, value=[{f11:['A']}])
    |             |         +-input_scan=
    |             |           +-SingleRowScan
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

# Repros b/237592896
SELECT FLATTEN(ARRAY<STRUCT<f ARRAY<INT64>>>[].f[DEFAULT_OFFSET(c+c)])
FROM ( SELECT 1 AS c ) AS s;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-Flatten
    |     +-type=ARRAY<INT64>
    |     +-expr=
    |     | +-Literal(type=ARRAY<STRUCT<f ARRAY<INT64>>>, value=[], has_explicit_type=TRUE)
    |     +-get_field_list=
    |       +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |         +-GetStructField
    |         | +-type=ARRAY<INT64>
    |         | +-expr=
    |         | | +-FlattenedArg(type=STRUCT<f ARRAY<INT64>>)
    |         | +-field_idx=0
    |         +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |           +-ColumnRef(type=INT64, column=s.c#1)
    |           +-ColumnRef(type=INT64, column=s.c#1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[s.c#1]
        +-expr_list=
        | +-c#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=s.c#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$with_expr.injected#7]
    |         +-expr_list=
    |         | +-injected#7 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<f ARRAY<INT64>>>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<STRUCT<f ARRAY<INT64>>>, column=$flatten_input.injected#3)
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<INT64>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=INT64, column=s.c#1, is_correlated=TRUE)
    |         |       | +-ColumnRef(type=ARRAY<STRUCT<f ARRAY<INT64>>>, column=$flatten_input.injected#3)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$flatten.injected#6]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-ProjectScan
    |         |           |   +-column_list=[$flatten.injected#4, $offset.injected#5, $flatten.injected#6]
    |         |           |   +-expr_list=
    |         |           |   | +-injected#6 :=
    |         |           |   |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
    |         |           |   |     +-GetStructField
    |         |           |   |     | +-type=ARRAY<INT64>
    |         |           |   |     | +-expr=
    |         |           |   |     | | +-ColumnRef(type=STRUCT<f ARRAY<INT64>>, column=$flatten.injected#4)
    |         |           |   |     | +-field_idx=0
    |         |           |   |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |           |   |       +-ColumnRef(type=INT64, column=s.c#1, is_correlated=TRUE)
    |         |           |   |       +-ColumnRef(type=INT64, column=s.c#1, is_correlated=TRUE)
    |         |           |   +-input_scan=
    |         |           |     +-ArrayScan
    |         |           |       +-column_list=[$flatten.injected#4, $offset.injected#5]
    |         |           |       +-array_expr=
    |         |           |       | +-ColumnRef(type=ARRAY<STRUCT<f ARRAY<INT64>>>, column=$flatten_input.injected#3, is_correlated=TRUE)
    |         |           |       +-element_column=$flatten.injected#4
    |         |           |       +-array_offset_column=
    |         |           |         +-ColumnHolder(column=$offset.injected#5)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$offset.injected#5)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$flatten_input.injected#3]
    |             +-expr_list=
    |             | +-injected#3 := Literal(type=ARRAY<STRUCT<f ARRAY<INT64>>>, value=[], has_explicit_type=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-ProjectScan
        +-column_list=[s.c#1]
        +-expr_list=
        | +-c#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan

