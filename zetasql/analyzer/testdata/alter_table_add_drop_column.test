ALTER TABLE KeyValue ADD COLUMN bar STRING;
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-AddColumnAction
    +-is_if_not_exists=FALSE
    +-column_definition=
      +-ColumnDefinition(name="bar", type=STRING, column=KeyValue.bar#1)
==

# Test case with only legacy (b/118721301) ALTER_TABLE_SET_OPTIONS support,
# but not generic ALTER_TABLE - so ADD COLUMN is not supported.
[supported_statement_kinds=ALTER_TABLE_SET_OPTIONS]
ALTER TABLE KeyValue ADD COLUMN bar STRING;
--
ERROR: ALTER TABLE supports only the SET OPTIONS action [at 1:1]
ALTER TABLE KeyValue ADD COLUMN bar STRING;
^
==

# Test when both legacy and ALTER_TABLE are supported.
[supported_statement_kinds=ALTER_TABLE_SET_OPTIONS,ALTER_TABLE]
ALTER TABLE KeyValue ADD COLUMN bar STRING;
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-AddColumnAction
    +-is_if_not_exists=FALSE
    +-column_definition=
      +-ColumnDefinition(name="bar", type=STRING, column=KeyValue.bar#1)
==

# Add two columns
ALTER TABLE KeyValue ADD COLUMN bar STRING, ADD COLUMN baz INT64;
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-AddColumnAction
  | +-is_if_not_exists=FALSE
  | +-column_definition=
  |   +-ColumnDefinition(name="bar", type=STRING, column=KeyValue.bar#1)
  +-AddColumnAction
    +-is_if_not_exists=FALSE
    +-column_definition=
      +-ColumnDefinition(name="baz", type=INT64, column=KeyValue.baz#2)
==

# Add columns with empty name
ALTER TABLE KeyValue ADD COLUMN "" STRING;
--
ERROR: Syntax error: Invalid empty identifier [at 1:33]
ALTER TABLE KeyValue ADD COLUMN "" STRING;
                                ^
==

# Add existing column.
ALTER TABLE KeyValue ADD COLUMN Key STRING;
--
ERROR: Column already exists: Key [at 1:33]
ALTER TABLE KeyValue ADD COLUMN Key STRING;
                                ^
==

# Add existing column, mix case.
ALTER TABLE KeyValue ADD COLUMN kEy STRING;
--
ERROR: Column already exists: kEy [at 1:33]
ALTER TABLE KeyValue ADD COLUMN kEy STRING;
                                ^
==

# Drop column
ALTER TABLE KeyValue DROP COLUMN key;
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-DropColumnAction(is_if_exists=FALSE, name="key")
==

# Drop pseudo-column
ALTER TABLE EnumTable DROP COLUMN filename;
--
ERROR: ALTER TABLE DROP COLUMN cannot drop pseudo-column filename [at 1:35]
ALTER TABLE EnumTable DROP COLUMN filename;
                                  ^
==

# Alter table IF EXISTS, existing table
ALTER TABLE IF EXISTS KeyValue DROP COLUMN Key;
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
| +-DropColumnAction(is_if_exists=FALSE, name="Key")
+-is_if_exists=TRUE
==

# Alter table IF EXISTS, non-existing table
ALTER TABLE IF EXISTS Foo DROP COLUMN Bar;
--
AlterTableStmt
+-name_path=Foo
+-alter_action_list=
| +-DropColumnAction(is_if_exists=FALSE, name="Bar")
+-is_if_exists=TRUE
==

# Alter table, non-existing table
ALTER TABLE Foo DROP COLUMN Bar;
--
ERROR: Table not found: Foo [at 1:13]
ALTER TABLE Foo DROP COLUMN Bar;
            ^
==

# Cannot add column to view.
ALTER VIEW v ADD COLUMN bar INT64;
--
ERROR: ALTER VIEW does not support ADD COLUMN [at 1:14]
ALTER VIEW v ADD COLUMN bar INT64;
             ^
==

# Views don't allow DROP COLUMN.
ALTER VIEW v DROP COLUMN bar;
--
ERROR: ALTER VIEW does not support DROP COLUMN [at 1:14]
ALTER VIEW v DROP COLUMN bar;
             ^
==

# Add IF NOT EXISTS, existing column.
ALTER TABLE KeyValue ADD COLUMN IF NOT EXISTS key STRING;
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-AddColumnAction
    +-is_if_not_exists=TRUE
    +-column_definition=
      +-ColumnDefinition(name="key", type=STRING, column=KeyValue.key#1)
==

# Add IF NOT EXISTS, new column.
ALTER TABLE KeyValue ADD COLUMN IF NOT EXISTS bar STRING;
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-AddColumnAction
    +-is_if_not_exists=TRUE
    +-column_definition=
      +-ColumnDefinition(name="bar", type=STRING, column=KeyValue.bar#1)
==

# Drop column with IF EXISTS.
alter table KeyValue drop column IF EXISTS a;
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-DropColumnAction(is_if_exists=TRUE, name="a")
==

# Add with FILL USING
ALTER TABLE KeyValue ADD COLUMN bar STRING FILL USING a + b;
--
ERROR: ALTER TABLE ADD COLUMN with FILL USING is not supported yet [at 1:55]
ALTER TABLE KeyValue ADD COLUMN bar STRING FILL USING a + b;
                                                      ^
==

# Add with invalid type
ALTER TABLE KeyValue ADD COLUMN bar FOO;
--
ERROR: Type not found: FOO [at 1:37]
ALTER TABLE KeyValue ADD COLUMN bar FOO;
                                    ^
==

# Add with column attributes
[language_features={{|CREATE_TABLE_NOT_NULL}}]
ALTER TABLE KeyValue ADD COLUMN bar STRING NOT NULL;
--
ALTERNATION GROUP: <empty>
--
ERROR: NOT NULL constraint is unsupported [at 1:44]
ALTER TABLE KeyValue ADD COLUMN bar STRING NOT NULL;
                                           ^
--
ALTERNATION GROUP: CREATE_TABLE_NOT_NULL
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-AddColumnAction
    +-is_if_not_exists=FALSE
    +-column_definition=
      +-ColumnDefinition
        +-name="bar"
        +-type=STRING
        +-annotations=
        | +-ColumnAnnotations(not_null=TRUE)
        +-column=KeyValue.bar#1
==

# Add column twice
ALTER TABLE KeyValue ADD COLUMN bar INT64, ADD COLUMN bar INT64;
--
ERROR: Duplicate column name bar in ALTER TABLE ADD COLUMN [at 1:55]
ALTER TABLE KeyValue ADD COLUMN bar INT64, ADD COLUMN bar INT64;
                                                      ^
==

# Drop column twice.
alter table KeyValue drop column Key, drop column Key;
--
ERROR: ALTER TABLE DROP COLUMN cannot drop column Key multiple times [at 1:51]
alter table KeyValue drop column Key, drop column Key;
                                                  ^
==

# Add column after removing old column.
ALTER TABLE KeyValue DROP COLUMN key, ADD COLUMN key STRING;
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-DropColumnAction(is_if_exists=FALSE, name="key")
  +-AddColumnAction
    +-is_if_not_exists=FALSE
    +-column_definition=
      +-ColumnDefinition(name="key", type=STRING, column=KeyValue.key#1)
==

# Drop column after just adding it.
ALTER TABLE KeyValue ADD COLUMN a STRING, DROP COLUMN a;
--
ERROR: Column a cannot be added and dropped by the same ALTER TABLE statement [at 1:55]
ALTER TABLE KeyValue ADD COLUMN a STRING, DROP COLUMN a;
                                                      ^
==

# Add/drop/add column with same name.
ALTER TABLE KeyValue ADD COLUMN bar STRING, DROP COLUMN bar, ADD COLUMN bar STRING;
--
ERROR: Column bar cannot be added and dropped by the same ALTER TABLE statement [at 1:57]
...TABLE KeyValue ADD COLUMN bar STRING, DROP COLUMN bar, ADD COLUMN bar STRING;
                                                     ^
==

# drop/add/drop column with same name.
ALTER TABLE KeyValue DROP COLUMN key, ADD COLUMN key STRING, DROP COLUMN key;
--
ERROR: ALTER TABLE DROP COLUMN cannot drop column key multiple times [at 1:74]
ALTER TABLE KeyValue DROP COLUMN key, ADD COLUMN key STRING, DROP COLUMN key;
                                                                         ^
==

# Multiple add / drop columns.
ALTER TABLE KeyValue DROP COLUMN key, ADD COLUMN foo STRING, ADD COLUMN key INT64, DROP COLUMN value;
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-DropColumnAction(is_if_exists=FALSE, name="key")
  +-AddColumnAction
  | +-is_if_not_exists=FALSE
  | +-column_definition=
  |   +-ColumnDefinition(name="foo", type=STRING, column=KeyValue.foo#1)
  +-AddColumnAction
  | +-is_if_not_exists=FALSE
  | +-column_definition=
  |   +-ColumnDefinition(name="key", type=INT64, column=KeyValue.key#2)
  +-DropColumnAction(is_if_exists=FALSE, name="value")
==

# add column with HIDDEN attribute.
ALTER TABLE KeyValue ADD COLUMN foo STRING HIDDEN;
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-AddColumnAction
    +-is_if_not_exists=FALSE
    +-column_definition=
      +-ColumnDefinition(name="foo", type=STRING, is_hidden=TRUE, column=KeyValue.foo#1)

==

# add column with PRIMARY KEY attribute.
ALTER TABLE KeyValue ADD COLUMN key STRING PRIMARY KEY;
--
ERROR: ALTER TABLE ADD COLUMN does not support primary key attribute (column: key) [at 1:33]
ALTER TABLE KeyValue ADD COLUMN key STRING PRIMARY KEY;
                                ^
==

# add column with foreign key attribute.
ALTER TABLE KeyValue ADD COLUMN key STRING REFERENCES t (b);
--
ERROR: ALTER TABLE ADD COLUMN does not support foreign key attribute (column: key) [at 1:33]
ALTER TABLE KeyValue ADD COLUMN key STRING REFERENCES t (b);
                                ^
==

# drop column - non existent column.
ALTER TABLE KeyValue DROP COLUMN key, DROP COLUMN foo;
--
ERROR: Column not found: foo [at 1:51]
ALTER TABLE KeyValue DROP COLUMN key, DROP COLUMN foo;
                                                  ^
==

# Add column with default value
[language_features=V_1_3_COLUMN_DEFAULT_VALUE]
[no_enable_literal_replacement]
ALTER TABLE KeyValue ADD COLUMN foo STRING DEFAULT 'abc';
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-AddColumnAction
    +-is_if_not_exists=FALSE
    +-column_definition=
      +-ColumnDefinition
        +-name="foo"
        +-type=STRING
        +-column=KeyValue.foo#1
        +-default_value=
          +-ColumnDefaultValue
            +-expression=
            | +-Literal(type=STRING, value='abc')
            +-sql="'abc'"
==

# Add column with default value, column type is date, default value is string
# (disallowed).
[language_features=V_1_3_COLUMN_DEFAULT_VALUE]
[no_enable_literal_replacement]
ALTER TABLE KeyValue ADD COLUMN foo DATE DEFAULT 'random string';
--
ERROR: Could not cast literal "random string" to type DATE [at 1:50]
ALTER TABLE KeyValue ADD COLUMN foo DATE DEFAULT 'random string';
                                                 ^
==

# Add column with default value expression that reference existing column
# (disallowed).
[language_features=V_1_3_COLUMN_DEFAULT_VALUE]
[no_enable_literal_replacement]
ALTER TABLE KeyValue ADD COLUMN foo INT64 DEFAULT value + 100;
--
ERROR: Default value expressions cannot reference columns [at 1:51]
ALTER TABLE KeyValue ADD COLUMN foo INT64 DEFAULT value + 100;
                                                  ^
==

# Add column with default value expression that reference a new column
# (disallowed).
[language_features=V_1_3_COLUMN_DEFAULT_VALUE]
[no_enable_literal_replacement]
ALTER TABLE KeyValue
  ADD COLUMN foo INT64,
  ADD COLUMN bar INT64 DEFAULT foo + 100;
--
ERROR: Default value expressions cannot reference columns [at 3:32]
  ADD COLUMN bar INT64 DEFAULT foo + 100;
                               ^
==

# Add column with default value expression that reference itself (disallowed)
[language_features=V_1_3_COLUMN_DEFAULT_VALUE]
[no_enable_literal_replacement]
ALTER TABLE KeyValue ADD COLUMN foo STRING DEFAULT foo;
--
ERROR: Default value expressions cannot reference columns [at 1:52]
ALTER TABLE KeyValue ADD COLUMN foo STRING DEFAULT foo;
                                                   ^
==

# Add column with default value expression that reference a existing column in
# different case.
[language_features=V_1_3_COLUMN_DEFAULT_VALUE]
[no_enable_literal_replacement]
ALTER TABLE KeyValue ADD COLUMN foo STRING DEFAULT VALUE;
--
ERROR: Default value expressions cannot reference columns [at 1:52]
ALTER TABLE KeyValue ADD COLUMN foo STRING DEFAULT VALUE;
                                                   ^
==

# Add column with default value expression that reference a dropped column.
[language_features=V_1_3_COLUMN_DEFAULT_VALUE]
[no_enable_literal_replacement]
ALTER TABLE KeyValue DROP COLUMN key, ADD COLUMN foo STRING DEFAULT Key;
--
ERROR: Unrecognized name: Key [at 1:69]
ALTER TABLE KeyValue DROP COLUMN key, ADD COLUMN foo STRING DEFAULT Key;
                                                                    ^

==

# Add column with default value expression that reference a random identifier
[language_features=V_1_3_COLUMN_DEFAULT_VALUE]
[no_enable_literal_replacement]
ALTER TABLE KeyValue ADD COLUMN foo STRING DEFAULT random_identifier;
--
ERROR: Unrecognized name: random_identifier [at 1:52]
ALTER TABLE KeyValue ADD COLUMN foo STRING DEFAULT random_identifier;
                                                   ^
==

# Add column with default value, column type is date, default value is string
# (disallowed).
[language_features=V_1_3_COLUMN_DEFAULT_VALUE]
[no_enable_literal_replacement]
ALTER TABLE KeyValue ADD COLUMN foo DATE DEFAULT 'random string';
--
ERROR: Could not cast literal "random string" to type DATE [at 1:50]
ALTER TABLE KeyValue ADD COLUMN foo DATE DEFAULT 'random string';
                                                 ^
==

# Add column with default value which has scalar subquery (disallowed).
[language_features=V_1_3_COLUMN_DEFAULT_VALUE]
[no_enable_literal_replacement]
ALTER TABLE KeyValue ADD COLUMN foo INT64 DEFAULT (select 1);
--
ERROR: A column default expression must not include a subquery [at 1:51]
ALTER TABLE KeyValue ADD COLUMN foo INT64 DEFAULT (select 1);
                                                  ^
==

# Add column with default value which contains lambda function.
[language_features=V_1_3_COLUMN_DEFAULT_VALUE,V_1_3_INLINE_LAMBDA_ARGUMENT]
[no_enable_literal_replacement]
ALTER TABLE KeyValue ADD COLUMN e ARRAY<STRING> DEFAULT ARRAY_FILTER(['a'], e -> e = 'a');
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-AddColumnAction
    +-is_if_not_exists=FALSE
    +-column_definition=
      +-ColumnDefinition
        +-name="e"
        +-type=ARRAY<STRING>
        +-column=KeyValue.e#2
        +-default_value=
          +-ColumnDefaultValue
            +-expression=
            | +-FunctionCall(ZetaSQL:array_filter(ARRAY<STRING> array_to_filter, FUNCTION<STRING->BOOL> condition) -> ARRAY<STRING>)
            |   +-FunctionArgument
            |   | +-expr=
            |   |   +-Literal(type=ARRAY<STRING>, value=["a"])
            |   +-FunctionArgument
            |     +-inline_lambda=
            |       +-InlineLambda
            |         +-argument_list=[$lambda_arg.e#1]
            |         +-body=
            |           +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |             +-ColumnRef(type=STRING, column=$lambda_arg.e#1)
            |             +-Literal(type=STRING, value='a')
            +-sql="ARRAY_FILTER(['a'], e -> e = 'a')"

==

# Add column if not exists with default value existing column.
[language_features=V_1_3_COLUMN_DEFAULT_VALUE]
[no_enable_literal_replacement]
ALTER TABLE KeyValue ADD COLUMN IF NOT EXISTS key STRING DEFAULT 'abc';
--
AlterTableStmt
+-name_path=KeyValue
+-alter_action_list=
  +-AddColumnAction
    +-is_if_not_exists=TRUE
    +-column_definition=
      +-ColumnDefinition
        +-name="key"
        +-type=STRING
        +-column=KeyValue.key#1
        +-default_value=
          +-ColumnDefaultValue
            +-expression=
            | +-Literal(type=STRING, value='abc')
            +-sql="'abc'"
==

# Add column with default value existing column.
[language_features=V_1_3_COLUMN_DEFAULT_VALUE]
[no_enable_literal_replacement]
ALTER TABLE KeyValue ADD COLUMN key STRING DEFAULT 'abc';
--
ERROR: Column already exists: key [at 1:33]
ALTER TABLE KeyValue ADD COLUMN key STRING DEFAULT 'abc';
                                ^
