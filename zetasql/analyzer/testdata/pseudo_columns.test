# Schema:
#   EnumTable and TestExtraValueTable both have two pseudo-columns,
#   Filename and RowId.  TestExtraValueTable is a value table.

# SELECT * doesn't show the pseudo-columns.
# They are also pruned from TableScan.
select * from EnumTable
--
QueryStmt
+-output_column_list=
| +-EnumTable.key#1 AS key [INT32]
| +-EnumTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-EnumTable.AnotherTestEnum#3 AS AnotherTestEnum [ENUM<zetasql_test__.AnotherTestEnum>]
+-query=
  +-ProjectScan
    +-column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3]
    +-input_scan=
      +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3], table=EnumTable, column_index_list=[0, 1, 2])
==

select EnumTable.* from EnumTable
--
[SAME AS PREVIOUS]
==

# The constructed struct for a table excludes pseudo-columns.
select EnumTable from EnumTable
--
QueryStmt
+-output_column_list=
| +-$query.EnumTable#7 AS EnumTable [STRUCT<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, AnotherTestEnum ENUM<zetasql_test__.AnotherTestEnum>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.EnumTable#7]
    +-expr_list=
    | +-EnumTable#7 :=
    |   +-MakeStruct
    |     +-type=STRUCT<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, AnotherTestEnum ENUM<zetasql_test__.AnotherTestEnum>>
    |     +-field_list=
    |       +-ColumnRef(type=INT32, column=EnumTable.key#1)
    |       +-ColumnRef(type=ENUM<zetasql_test__.TestEnum>, column=EnumTable.TestEnum#2)
    |       +-ColumnRef(type=ENUM<zetasql_test__.AnotherTestEnum>, column=EnumTable.AnotherTestEnum#3)
    +-input_scan=
      +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3], table=EnumTable, column_index_list=[0, 1, 2])
==

# Pseudo-columns are explicitly selectable.
select key, Filename, RowID from EnumTable
--
QueryStmt
+-output_column_list=
| +-EnumTable.key#1 AS key [INT32]
| +-EnumTable.Filename#4 AS Filename [STRING]
| +-EnumTable.RowId#5 AS RowID [BYTES]
+-query=
  +-ProjectScan
    +-column_list=EnumTable.[key#1, Filename#4, RowId#5]
    +-input_scan=
      +-TableScan(column_list=EnumTable.[key#1, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 3, 4])
==

select *, '--', Filename, RowID from EnumTable
--
QueryStmt
+-output_column_list=
| +-EnumTable.key#1 AS key [INT32]
| +-EnumTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-EnumTable.AnotherTestEnum#3 AS AnotherTestEnum [ENUM<zetasql_test__.AnotherTestEnum>]
| +-$query.$col2#6 AS "$col2" [STRING]
| +-EnumTable.Filename#4 AS Filename [STRING]
| +-EnumTable.RowId#5 AS RowID [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[EnumTable.key#1, EnumTable.TestEnum#2, EnumTable.AnotherTestEnum#3, $query.$col2#6, EnumTable.Filename#4, EnumTable.RowId#5]
    +-expr_list=
    | +-$col2#6 := Literal(type=STRING, value="--")
    +-input_scan=
      +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4])
==

select Filename from (select * from EnumTable)
--
ERROR: Unrecognized name: Filename [at 1:8]
select Filename from (select * from EnumTable)
       ^
==

# With a value table, pseudo-columns don't show up in the value or in *.
select v, * from TestExtraValueTable v
--
QueryStmt
+-output_column_list=
| +-TestExtraValueTable.value#1 AS v [PROTO<zetasql_test__.TestExtraPB>]
| +-$query.int32_val1#4 AS int32_val1 [INT32]
| +-$query.int32_val2#5 AS int32_val2 [INT32]
| +-$query.str_value#6 AS str_value [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[TestExtraValueTable.value#1, $query.int32_val1#4, $query.int32_val2#5, $query.str_value#6]
    +-expr_list=
    | +-int32_val1#4 :=
    | | +-GetProtoField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    | |   +-field_descriptor=int32_val1
    | |   +-default_value=0
    | +-int32_val2#5 :=
    | | +-GetProtoField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    | |   +-field_descriptor=int32_val2
    | |   +-default_value=0
    | +-str_value#6 :=
    |   +-GetProtoField
    |     +-type=ARRAY<STRING>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    |     +-field_descriptor=str_value
    |     +-default_value=[]
    +-input_scan=
      +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0], alias='v')
==

# Value table pseudo-columns can be selected unqualified or qualified.
select int32_val1, filename, v.rowid from TestExtraValueTable v
--
QueryStmt
+-output_column_list=
| +-$query.int32_val1#4 AS int32_val1 [INT32]
| +-TestExtraValueTable.Filename#2 AS filename [STRING]
| +-TestExtraValueTable.RowId#3 AS rowid [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.int32_val1#4, TestExtraValueTable.Filename#2, TestExtraValueTable.RowId#3]
    +-expr_list=
    | +-int32_val1#4 :=
    |   +-GetProtoField
    |     +-type=INT32
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    |     +-field_descriptor=int32_val1
    |     +-default_value=0
    +-input_scan=
      +-TableScan(column_list=TestExtraValueTable.[value#1, Filename#2, RowId#3], table=TestExtraValueTable, column_index_list=[0, 1, 2], alias='v')
==

# .* doesn't show the pseudo-columns.
select v.*, '--', filename, rowid from TestExtraValueTable v
--
QueryStmt
+-output_column_list=
| +-$query.int32_val1#4 AS int32_val1 [INT32]
| +-$query.int32_val2#5 AS int32_val2 [INT32]
| +-$query.str_value#6 AS str_value [ARRAY<STRING>]
| +-$query.$col2#7 AS "$col2" [STRING]
| +-TestExtraValueTable.Filename#2 AS filename [STRING]
| +-TestExtraValueTable.RowId#3 AS rowid [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.int32_val1#4, $query.int32_val2#5, $query.str_value#6, $query.$col2#7, TestExtraValueTable.Filename#2, TestExtraValueTable.RowId#3]
    +-expr_list=
    | +-int32_val1#4 :=
    | | +-GetProtoField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    | |   +-field_descriptor=int32_val1
    | |   +-default_value=0
    | +-int32_val2#5 :=
    | | +-GetProtoField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    | |   +-field_descriptor=int32_val2
    | |   +-default_value=0
    | +-str_value#6 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<STRING>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    | |   +-field_descriptor=str_value
    | |   +-default_value=[]
    | +-$col2#7 := Literal(type=STRING, value="--")
    +-input_scan=
      +-TableScan(column_list=TestExtraValueTable.[value#1, Filename#2, RowId#3], table=TestExtraValueTable, column_index_list=[0, 1, 2], alias='v')
==

# In strict mode, value table pseudo-columns are only reachable qualified.
[show_strict_mode]
select v.rowid, rowid from TestExtraValueTable v
--
STRICT MODE ERROR: Alias rowid cannot be used without a qualifier in strict name resolution mode [at 1:17]
select v.rowid, rowid from TestExtraValueTable v
                ^
--
QueryStmt
+-output_column_list=
| +-TestExtraValueTable.RowId#3 AS rowid [BYTES]
| +-TestExtraValueTable.RowId#3 AS rowid [BYTES]
+-query=
  +-ProjectScan
    +-column_list=TestExtraValueTable.[RowId#3, RowId#3]
    +-input_scan=
      +-TableScan(column_list=[TestExtraValueTable.RowId#3], table=TestExtraValueTable, column_index_list=[2], alias='v')
==

# This table only has pseudo-columns.  * cannot expand to zero columns.
select * from AllPseudoColumns
--
ERROR: SELECT * would expand to zero columns [at 1:8]
select * from AllPseudoColumns
       ^
==

select t.* from AllPseudoColumns t
--
ERROR: Dot-star would expand to zero columns [at 1:8]
select t.* from AllPseudoColumns t
       ^
==

# We'll get an empty struct for the row.
select t from AllPseudoColumns t
--
QueryStmt
+-output_column_list=
| +-$query.t#4 AS t [STRUCT<>]
+-query=
  +-ProjectScan
    +-column_list=[$query.t#4]
    +-expr_list=
    | +-t#4 := MakeStruct(type=STRUCT<>)
    +-input_scan=
      +-TableScan(table=AllPseudoColumns, alias='t')
==

select Key from (select * from AllPseudoColumns)
--
ERROR: SELECT * would expand to zero columns [at 1:25]
select Key from (select * from AllPseudoColumns)
                        ^
==

select key, t.value from AllPseudoColumns t
--
QueryStmt
+-output_column_list=
| +-AllPseudoColumns.Key#1 AS key [INT32]
| +-AllPseudoColumns.Value#2 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=AllPseudoColumns.[Key#1, Value#2]
    +-input_scan=
      +-TableScan(column_list=AllPseudoColumns.[Key#1, Value#2], table=AllPseudoColumns, column_index_list=[0, 1], alias='t')
==

select count(*) from AllPseudoColumns
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-TableScan(table=AllPseudoColumns)
        +-aggregate_list=
          +-$agg1#3 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
==

# A pseudo-column can be ambiguous with a regular column.
select key from EnumTable, AllPseudoColumns
--
ERROR: Column name key is ambiguous [at 1:8]
select key from EnumTable, AllPseudoColumns
       ^
==

# The pseudo-column name can be ambiguous with a real column in another table.
select key from (select 1 key), AllPseudoColumns
--
ERROR: Column name key is ambiguous [at 1:8]
select key from (select 1 key), AllPseudoColumns
       ^
==

# If we have two tables with the same pseudocolumn, the name will be ambiguous
# unless qualified.
select {{rowid|t1.rowid, t2.rowid}} from EnumTable t1, EnumTable t2
--
ALTERNATION GROUP: rowid
--
ERROR: Column name rowid is ambiguous [at 1:8]
select rowid from EnumTable t1, EnumTable t2
       ^
--
ALTERNATION GROUP: t1.rowid, t2.rowid
--
QueryStmt
+-output_column_list=
| +-EnumTable.RowId#5 AS rowid [BYTES]
| +-EnumTable.RowId#10 AS rowid [BYTES]
+-query=
  +-ProjectScan
    +-column_list=EnumTable.[RowId#5, RowId#10]
    +-input_scan=
      +-JoinScan
        +-column_list=EnumTable.[RowId#5, RowId#10]
        +-left_scan=
        | +-TableScan(column_list=[EnumTable.RowId#5], table=EnumTable, column_index_list=[4], alias='t1')
        +-right_scan=
          +-TableScan(column_list=[EnumTable.RowId#10], table=EnumTable, column_index_list=[4], alias='t2')
==

# JOIN USING on a pseudo-column.
# SELECT * is now allowed because key became an explicit column
# coming out of the join.
select * from AllPseudoColumns t1 join AllPseudoCOlumns t2 USING (key)
--
QueryStmt
+-output_column_list=
| +-AllPseudoColumns.Key#1 AS key [INT32]
+-query=
  +-ProjectScan
    +-column_list=[AllPseudoColumns.Key#1]
    +-input_scan=
      +-JoinScan
        +-column_list=AllPseudoColumns.[Key#1, Key#3]
        +-left_scan=
        | +-TableScan(column_list=[AllPseudoColumns.Key#1], table=AllPseudoColumns, column_index_list=[0], alias='t1')
        +-right_scan=
        | +-TableScan(column_list=[AllPseudoColumns.Key#3], table=AllPseudoColumns, column_index_list=[0], alias='t2')
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
            +-ColumnRef(type=INT32, column=AllPseudoColumns.Key#1)
            +-ColumnRef(type=INT32, column=AllPseudoColumns.Key#3)
==

# Pseudo-columns don't show up in GROUP BY ordinals.
# The table has three real columns, and we select one of two pseudo-columns.
select *, filename from EnumTable
group by 4, 5
--
ERROR: GROUP BY is out of SELECT column number range: 5 [at 2:13]
group by 4, 5
            ^
==

# Pseudo-columns don't show up in set operations.
# The table has three real columns, and we select one of two pseudo-columns.
select *, filename from EnumTable
union all
select null, null, null, null
--
QueryStmt
+-output_column_list=
| +-$union_all.key#10 AS key [INT32]
| +-$union_all.TestEnum#11 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-$union_all.AnotherTestEnum#12 AS AnotherTestEnum [ENUM<zetasql_test__.AnotherTestEnum>]
| +-$union_all.filename#13 AS filename [STRING]
+-query=
  +-SetOperationScan
    +-column_list=$union_all.[key#10, TestEnum#11, AnotherTestEnum#12, filename#13]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4]
      | |   +-input_scan=
      | |     +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4], table=EnumTable, column_index_list=[0, 1, 2, 3])
      | +-output_column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=$union_all2_cast.[$col1#14, $col2#15, $col3#16, $col4#17]
        |   +-expr_list=
        |   | +-$col1#14 := Literal(type=INT32, value=NULL)
        |   | +-$col2#15 := Literal(type=ENUM<zetasql_test__.TestEnum>, value=NULL)
        |   | +-$col3#16 := Literal(type=ENUM<zetasql_test__.AnotherTestEnum>, value=NULL)
        |   | +-$col4#17 := Literal(type=STRING, value=NULL)
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=$union_all2.[$col1#6, $col2#7, $col3#8, $col4#9]
        |       +-expr_list=
        |       | +-$col1#6 := Literal(type=INT64, value=NULL)
        |       | +-$col2#7 := Literal(type=INT64, value=NULL)
        |       | +-$col3#8 := Literal(type=INT64, value=NULL)
        |       | +-$col4#9 := Literal(type=INT64, value=NULL)
        |       +-input_scan=
        |         +-SingleRowScan
        +-output_column_list=$union_all2_cast.[$col1#14, $col2#15, $col3#16, $col4#17]
==

# Access pseudo-columns from inside a correlated subquery.
select (select AS STRUCT key, t.key, rowid, t.filename)
from EnumTable t
--
QueryStmt
+-output_column_list=
| +-$query.$col1#11 AS "$col1" [STRUCT<key INT32, key INT32, rowid BYTES, filename STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#11]
    +-expr_list=
    | +-$col1#11 :=
    |   +-SubqueryExpr
    |     +-type=STRUCT<key INT32, key INT32, rowid BYTES, filename STRING>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT32, column=EnumTable.key#1)
    |     | +-ColumnRef(type=STRING, column=EnumTable.Filename#4)
    |     | +-ColumnRef(type=BYTES, column=EnumTable.RowId#5)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$make_struct.$struct#10]
    |         +-expr_list=
    |         | +-$struct#10 :=
    |         |   +-MakeStruct
    |         |     +-type=STRUCT<key INT32, key INT32, rowid BYTES, filename STRING>
    |         |     +-field_list=
    |         |       +-ColumnRef(type=INT32, column=$expr_subquery.key#6)
    |         |       +-ColumnRef(type=INT32, column=$expr_subquery.key#7)
    |         |       +-ColumnRef(type=BYTES, column=$expr_subquery.rowid#8)
    |         |       +-ColumnRef(type=STRING, column=$expr_subquery.filename#9)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$expr_subquery.[key#6, key#7, rowid#8, filename#9]
    |             +-expr_list=
    |             | +-key#6 := ColumnRef(type=INT32, column=EnumTable.key#1, is_correlated=TRUE)
    |             | +-key#7 := ColumnRef(type=INT32, column=EnumTable.key#1, is_correlated=TRUE)
    |             | +-rowid#8 := ColumnRef(type=BYTES, column=EnumTable.RowId#5, is_correlated=TRUE)
    |             | +-filename#9 := ColumnRef(type=STRING, column=EnumTable.Filename#4, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=EnumTable.[key#1, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 3, 4], alias='t')

==

# Access value table pseudo-columns from inside a correlated subquery.
select (select AS STRUCT int32_val1, t.int32_val2, rowid, t.filename)
from TestExtraValueTable t
--
QueryStmt
+-output_column_list=
| +-$query.$col1#9 AS "$col1" [STRUCT<int32_val1 INT32, int32_val2 INT32, rowid BYTES, filename STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#9]
    +-expr_list=
    | +-$col1#9 :=
    |   +-SubqueryExpr
    |     +-type=STRUCT<int32_val1 INT32, int32_val2 INT32, rowid BYTES, filename STRING>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    |     | +-ColumnRef(type=STRING, column=TestExtraValueTable.Filename#2)
    |     | +-ColumnRef(type=BYTES, column=TestExtraValueTable.RowId#3)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$make_struct.$struct#8]
    |         +-expr_list=
    |         | +-$struct#8 :=
    |         |   +-MakeStruct
    |         |     +-type=STRUCT<int32_val1 INT32, int32_val2 INT32, rowid BYTES, filename STRING>
    |         |     +-field_list=
    |         |       +-ColumnRef(type=INT32, column=$expr_subquery.int32_val1#4)
    |         |       +-ColumnRef(type=INT32, column=$expr_subquery.int32_val2#5)
    |         |       +-ColumnRef(type=BYTES, column=$expr_subquery.rowid#6)
    |         |       +-ColumnRef(type=STRING, column=$expr_subquery.filename#7)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$expr_subquery.[int32_val1#4, int32_val2#5, rowid#6, filename#7]
    |             +-expr_list=
    |             | +-int32_val1#4 :=
    |             | | +-GetProtoField
    |             | |   +-type=INT32
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1, is_correlated=TRUE)
    |             | |   +-field_descriptor=int32_val1
    |             | |   +-default_value=0
    |             | +-int32_val2#5 :=
    |             | | +-GetProtoField
    |             | |   +-type=INT32
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1, is_correlated=TRUE)
    |             | |   +-field_descriptor=int32_val2
    |             | |   +-default_value=0
    |             | +-rowid#6 := ColumnRef(type=BYTES, column=TestExtraValueTable.RowId#3, is_correlated=TRUE)
    |             | +-filename#7 := ColumnRef(type=STRING, column=TestExtraValueTable.Filename#2, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=TestExtraValueTable.[value#1, Filename#2, RowId#3], table=TestExtraValueTable, column_index_list=[0, 1, 2], alias='t')
==

# This table has int32_val1 as both a field and a pseudo-column.
# We'd recommend systems avoid this case in their schemas.
select int32_val2, int32_val1
from AmbiguousFieldValueTable
--
ERROR: Column name int32_val1 is ambiguous [at 1:20]
select int32_val2, int32_val1
                   ^
==

select int32_val2, t.int32_val1
from AmbiguousFieldValueTable t
--
ERROR: Name int32_val1 is ambiguous inside t [at 1:22]
select int32_val2, t.int32_val1
                     ^
==

select key from AnonymousPseudoColumn
--
QueryStmt
+-output_column_list=
| +-AnonymousPseudoColumn.key#1 AS key [INT32]
+-query=
  +-ProjectScan
    +-column_list=[AnonymousPseudoColumn.key#1]
    +-input_scan=
      +-TableScan(column_list=[AnonymousPseudoColumn.key#1], table=AnonymousPseudoColumn, column_index_list=[0])
