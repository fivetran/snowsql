[default language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS]
[default enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
INSERT INTO SimpleTypesWithAnonymizationUid (int64)
SELECT WITH DIFFERENTIAL_PRIVACY count(*) AS count
FROM SimpleTypesWithAnonymizationUid;
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
+-insert_column_list=[SimpleTypesWithAnonymizationUid.int64#2]
+-query=
| +-ProjectScan
|   +-column_list=[$aggregate.count#25]
|   +-input_scan=
|     +-DifferentialPrivacyAggregateScan
|       +-column_list=[$aggregate.count#25]
|       +-input_scan=
|       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
|       +-aggregate_list=
|         +-count#25 :=
|           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
|             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
+-query_output_column_list=[$aggregate.count#25]
+-column_access_list=WRITE

[REWRITTEN AST]
InsertStmt
+-table_scan=
| +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
+-insert_column_list=[SimpleTypesWithAnonymizationUid.int64#2]
+-query=
| +-ProjectScan
|   +-column_list=[$aggregate.count#25]
|   +-input_scan=
|     +-DifferentialPrivacyAggregateScan
|       +-column_list=[$aggregate.count#25]
|       +-input_scan=
|       | +-AggregateScan
|       |   +-column_list=[$aggregate.count_partial#28, $group_by.$uid#29]
|       |   +-input_scan=
|       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#26], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
|       |   +-group_by_list=
|       |   | +-$uid#29 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#26)
|       |   +-aggregate_list=
|       |     +-count_partial#28 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
|       +-aggregate_list=
|       | +-count#25 :=
|       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
|       | |   +-ColumnRef(type=INT64, column=$aggregate.count_partial#28)
|       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
|       | +-$group_selection_threshold_col#32 :=
|       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
|       |     +-Literal(type=INT64, value=1)
|       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
|       +-group_selection_threshold_expr=
|         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#32)
+-query_output_column_list=[$aggregate.count#25]
+-column_access_list=WRITE
==

INSERT INTO SimpleTypesWithAnonymizationUid (int64)
SELECT WITH DIFFERENTIAL_PRIVACY count(*) AS count
FROM SimpleTypesWithAnonymizationUid;
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
+-insert_column_list=[SimpleTypesWithAnonymizationUid.int64#2]
+-query=
| +-ProjectScan
|   +-column_list=[$aggregate.count#25]
|   +-input_scan=
|     +-DifferentialPrivacyAggregateScan
|       +-column_list=[$aggregate.count#25]
|       +-input_scan=
|       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
|       +-aggregate_list=
|         +-count#25 :=
|           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
|             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
+-query_output_column_list=[$aggregate.count#25]
+-column_access_list=WRITE

[REWRITTEN AST]
InsertStmt
+-table_scan=
| +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
+-insert_column_list=[SimpleTypesWithAnonymizationUid.int64#2]
+-query=
| +-ProjectScan
|   +-column_list=[$aggregate.count#25]
|   +-input_scan=
|     +-DifferentialPrivacyAggregateScan
|       +-column_list=[$aggregate.count#25]
|       +-input_scan=
|       | +-AggregateScan
|       |   +-column_list=[$aggregate.count_partial#28, $group_by.$uid#29]
|       |   +-input_scan=
|       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#26], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
|       |   +-group_by_list=
|       |   | +-$uid#29 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#26)
|       |   +-aggregate_list=
|       |     +-count_partial#28 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
|       +-aggregate_list=
|       | +-count#25 :=
|       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
|       | |   +-ColumnRef(type=INT64, column=$aggregate.count_partial#28)
|       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
|       | +-$group_selection_threshold_col#32 :=
|       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
|       |     +-Literal(type=INT64, value=1)
|       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
|       +-group_selection_threshold_expr=
|         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#32)
+-query_output_column_list=[$aggregate.count#25]
+-column_access_list=WRITE
==

UPDATE SimpleTypesWithAnonymizationUid
  SET int64 = (SELECT WITH DIFFERENTIAL_PRIVACY count(*) AS int64
               FROM SimpleTypesWithAnonymizationUid)
WHERE 0 < (SELECT WITH DIFFERENTIAL_PRIVACY count(*) AS int64
           FROM SimpleTypesWithAnonymizationUid);
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
+-column_access_list=WRITE
+-where_expr=
| +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
|   +-Literal(type=INT64, value=0)
|   +-SubqueryExpr
|     +-type=INT64
|     +-subquery_type=SCALAR
|     +-subquery=
|       +-ProjectScan
|         +-column_list=[$aggregate.int64#25]
|         +-input_scan=
|           +-DifferentialPrivacyAggregateScan
|             +-column_list=[$aggregate.int64#25]
|             +-input_scan=
|             | +-TableScan(table=SimpleTypesWithAnonymizationUid)
|             +-aggregate_list=
|               +-int64#25 :=
|                 +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
|                   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
    +-set_value=
      +-DMLValue
        +-value=
          +-SubqueryExpr
            +-type=INT64
            +-subquery_type=SCALAR
            +-subquery=
              +-ProjectScan
                +-column_list=[$aggregate.int64#38]
                +-input_scan=
                  +-DifferentialPrivacyAggregateScan
                    +-column_list=[$aggregate.int64#38]
                    +-input_scan=
                    | +-TableScan(table=SimpleTypesWithAnonymizationUid)
                    +-aggregate_list=
                      +-int64#38 :=
                        +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                          +-Literal(type=STRUCT<INT64, INT64>, value=NULL)

[REWRITTEN AST]
UpdateStmt
+-table_scan=
| +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
+-column_access_list=WRITE
+-where_expr=
| +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
|   +-Literal(type=INT64, value=0)
|   +-SubqueryExpr
|     +-type=INT64
|     +-subquery_type=SCALAR
|     +-subquery=
|       +-ProjectScan
|         +-column_list=[$aggregate.int64#25]
|         +-input_scan=
|           +-DifferentialPrivacyAggregateScan
|             +-column_list=[$aggregate.int64#25]
|             +-input_scan=
|             | +-AggregateScan
|             |   +-column_list=[$aggregate.int64_partial#41, $group_by.$uid#42]
|             |   +-input_scan=
|             |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#39], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
|             |   +-group_by_list=
|             |   | +-$uid#42 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#39)
|             |   +-aggregate_list=
|             |     +-int64_partial#41 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
|             +-aggregate_list=
|             | +-int64#25 :=
|             | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
|             | |   +-ColumnRef(type=INT64, column=$aggregate.int64_partial#41)
|             | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
|             | +-$group_selection_threshold_col#45 :=
|             |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
|             |     +-Literal(type=INT64, value=1)
|             |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
|             +-group_selection_threshold_expr=
|               +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#45)
+-update_item_list=
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
    +-set_value=
      +-DMLValue
        +-value=
          +-SubqueryExpr
            +-type=INT64
            +-subquery_type=SCALAR
            +-subquery=
              +-ProjectScan
                +-column_list=[$aggregate.int64#38]
                +-input_scan=
                  +-DifferentialPrivacyAggregateScan
                    +-column_list=[$aggregate.int64#38]
                    +-input_scan=
                    | +-AggregateScan
                    |   +-column_list=[$aggregate.int64_partial#48, $group_by.$uid#49]
                    |   +-input_scan=
                    |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#46], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
                    |   +-group_by_list=
                    |   | +-$uid#49 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#46)
                    |   +-aggregate_list=
                    |     +-int64_partial#48 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                    +-aggregate_list=
                    | +-int64#38 :=
                    | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                    | |   +-ColumnRef(type=INT64, column=$aggregate.int64_partial#48)
                    | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
                    | +-$group_selection_threshold_col#52 :=
                    |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                    |     +-Literal(type=INT64, value=1)
                    |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
                    +-group_selection_threshold_expr=
                      +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#52)
==

DELETE FROM SimpleTypesWithAnonymizationUid
  WHERE int64 < (SELECT WITH DIFFERENTIAL_PRIVACY count(*) AS int64
                 FROM SimpleTypesWithAnonymizationUid);
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
+-column_access_list=READ
+-where_expr=
  +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
    +-SubqueryExpr
      +-type=INT64
      +-subquery_type=SCALAR
      +-subquery=
        +-ProjectScan
          +-column_list=[$aggregate.int64#25]
          +-input_scan=
            +-DifferentialPrivacyAggregateScan
              +-column_list=[$aggregate.int64#25]
              +-input_scan=
              | +-TableScan(table=SimpleTypesWithAnonymizationUid)
              +-aggregate_list=
                +-int64#25 :=
                  +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                    +-Literal(type=STRUCT<INT64, INT64>, value=NULL)

[REWRITTEN AST]
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
+-column_access_list=READ
+-where_expr=
  +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
    +-SubqueryExpr
      +-type=INT64
      +-subquery_type=SCALAR
      +-subquery=
        +-ProjectScan
          +-column_list=[$aggregate.int64#25]
          +-input_scan=
            +-DifferentialPrivacyAggregateScan
              +-column_list=[$aggregate.int64#25]
              +-input_scan=
              | +-AggregateScan
              |   +-column_list=[$aggregate.int64_partial#28, $group_by.$uid#29]
              |   +-input_scan=
              |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#26], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
              |   +-group_by_list=
              |   | +-$uid#29 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#26)
              |   +-aggregate_list=
              |     +-int64_partial#28 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
              +-aggregate_list=
              | +-int64#25 :=
              | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              | |   +-ColumnRef(type=INT64, column=$aggregate.int64_partial#28)
              | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
              | +-$group_selection_threshold_col#32 :=
              |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              |     +-Literal(type=INT64, value=1)
              |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
              +-group_selection_threshold_expr=
                +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#32)
==

# Anonymization in the USING clause of MERGE
MERGE INTO SimpleTypesWithAnonymizationUid AS t1
USING (SELECT WITH DIFFERENTIAL_PRIVACY count(*) AS int64
       FROM SimpleTypesWithAnonymizationUid) t2
   ON t1.int64 = t2.int64
WHEN MATCHED THEN UPDATE SET int64 = (SELECT WITH DIFFERENTIAL_PRIVACY count(*) AS int64
                                      FROM SimpleTypesWithAnonymizationUid);
--
MergeStmt
+-table_scan=
| +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1], alias='t1')
+-column_access_list=READ_WRITE
+-from_scan=
| +-ProjectScan
|   +-column_list=[$aggregate.int64#25]
|   +-input_scan=
|     +-DifferentialPrivacyAggregateScan
|       +-column_list=[$aggregate.int64#25]
|       +-input_scan=
|       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
|       +-aggregate_list=
|         +-int64#25 :=
|           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
|             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
+-merge_expr=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
|   +-ColumnRef(type=INT64, column=$aggregate.int64#25)
+-when_clause_list=
  +-MergeWhen
    +-match_type=MATCHED
    +-action_type=UPDATE
    +-update_item_list=
      +-UpdateItem
        +-target=
        | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-set_value=
          +-DMLValue
            +-value=
              +-SubqueryExpr
                +-type=INT64
                +-subquery_type=SCALAR
                +-subquery=
                  +-ProjectScan
                    +-column_list=[$aggregate.int64#38]
                    +-input_scan=
                      +-DifferentialPrivacyAggregateScan
                        +-column_list=[$aggregate.int64#38]
                        +-input_scan=
                        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
                        +-aggregate_list=
                          +-int64#38 :=
                            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                              +-Literal(type=STRUCT<INT64, INT64>, value=NULL)

[REWRITTEN AST]
MergeStmt
+-table_scan=
| +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1], alias='t1')
+-column_access_list=READ_WRITE
+-from_scan=
| +-ProjectScan
|   +-column_list=[$aggregate.int64#25]
|   +-input_scan=
|     +-DifferentialPrivacyAggregateScan
|       +-column_list=[$aggregate.int64#25]
|       +-input_scan=
|       | +-AggregateScan
|       |   +-column_list=[$aggregate.int64_partial#41, $group_by.$uid#42]
|       |   +-input_scan=
|       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#39], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
|       |   +-group_by_list=
|       |   | +-$uid#42 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#39)
|       |   +-aggregate_list=
|       |     +-int64_partial#41 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
|       +-aggregate_list=
|       | +-int64#25 :=
|       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
|       | |   +-ColumnRef(type=INT64, column=$aggregate.int64_partial#41)
|       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
|       | +-$group_selection_threshold_col#45 :=
|       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
|       |     +-Literal(type=INT64, value=1)
|       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
|       +-group_selection_threshold_expr=
|         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#45)
+-merge_expr=
| +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
|   +-ColumnRef(type=INT64, column=$aggregate.int64#25)
+-when_clause_list=
  +-MergeWhen
    +-match_type=MATCHED
    +-action_type=UPDATE
    +-update_item_list=
      +-UpdateItem
        +-target=
        | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-set_value=
          +-DMLValue
            +-value=
              +-SubqueryExpr
                +-type=INT64
                +-subquery_type=SCALAR
                +-subquery=
                  +-ProjectScan
                    +-column_list=[$aggregate.int64#38]
                    +-input_scan=
                      +-DifferentialPrivacyAggregateScan
                        +-column_list=[$aggregate.int64#38]
                        +-input_scan=
                        | +-AggregateScan
                        |   +-column_list=[$aggregate.int64_partial#48, $group_by.$uid#49]
                        |   +-input_scan=
                        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#46], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
                        |   +-group_by_list=
                        |   | +-$uid#49 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#46)
                        |   +-aggregate_list=
                        |     +-int64_partial#48 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                        +-aggregate_list=
                        | +-int64#38 :=
                        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                        | |   +-ColumnRef(type=INT64, column=$aggregate.int64_partial#48)
                        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
                        | +-$group_selection_threshold_col#52 :=
                        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                        |     +-Literal(type=INT64, value=1)
                        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
                        +-group_selection_threshold_expr=
                          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#52)
==

# Count (*) counting unique users.
# DIFFERENTIAL_PRIVACY_THRESHOLDING feature is enabled, therefore we should use this
# count for k_threshold.
[language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS,TABLE_VALUED_FUNCTIONS,TEMPLATE_FUNCTIONS,CREATE_TABLE_FUNCTION,DIFFERENTIAL_PRIVACY_THRESHOLDING]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
INSERT INTO SimpleTypesWithAnonymizationUid (int64)
SELECT WITH differential_privacy count(*, contribution_bounds_per_group => (0, 1)) AS dp_count
FROM SimpleTypesWithAnonymizationUid;
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
+-insert_column_list=[SimpleTypesWithAnonymizationUid.int64#2]
+-query=
| +-ProjectScan
|   +-column_list=[$aggregate.dp_count#25]
|   +-input_scan=
|     +-DifferentialPrivacyAggregateScan
|       +-column_list=[$aggregate.dp_count#25]
|       +-input_scan=
|       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
|       +-aggregate_list=
|         +-dp_count#25 :=
|           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
|             +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
+-query_output_column_list=[$aggregate.dp_count#25]
+-column_access_list=WRITE

[REWRITTEN AST]
InsertStmt
+-table_scan=
| +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
+-insert_column_list=[SimpleTypesWithAnonymizationUid.int64#2]
+-query=
| +-ProjectScan
|   +-column_list=[$aggregate.dp_count#25]
|   +-input_scan=
|     +-DifferentialPrivacyAggregateScan
|       +-column_list=[$aggregate.dp_count#25]
|       +-input_scan=
|       | +-AggregateScan
|       |   +-column_list=[$aggregate.dp_count_partial#28, $group_by.$uid#29]
|       |   +-input_scan=
|       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#26], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
|       |   +-group_by_list=
|       |   | +-$uid#29 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#26)
|       |   +-aggregate_list=
|       |     +-dp_count_partial#28 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
|       +-aggregate_list=
|       | +-dp_count#25 :=
|       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
|       |     +-ColumnRef(type=INT64, column=$aggregate.dp_count_partial#28)
|       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
|       +-group_selection_threshold_expr=
|         +-ColumnRef(type=INT64, column=$aggregate.dp_count#25)
+-query_output_column_list=[$aggregate.dp_count#25]
+-column_access_list=WRITE
