with T as (select 1,2)
select * from T
--
QueryStmt
+-output_column_list=
| +-T.$col1#3 AS "$col1" [INT64]
| +-T.$col2#4 AS "$col2" [INT64]
+-query=
  +-WithScan
    +-column_list=T.[$col1#3, $col2#4]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='T'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=T.[$col1#1, $col2#2]
    |       +-expr_list=
    |       | +-$col1#1 := Literal(type=INT64, value=1)
    |       | +-$col2#2 := Literal(type=INT64, value=2)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=T.[$col1#3, $col2#4]
        +-input_scan=
          +-WithRefScan(column_list=T.[$col1#3, $col2#4], with_query_name='T')
==

# Select a subset of columns from the with subquery.
# Note that the column_list is not pruned on the WithRefScan because the
# column_list must match 1:1 with the subquery.
with Q as (select key, value from KeyValue)
select key from Q
--
QueryStmt
+-output_column_list=
| +-Q.key#3 AS key [INT64]
+-query=
  +-WithScan
    +-column_list=[Q.key#3]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='Q'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=KeyValue.[Key#1, Value#2]
    |       +-input_scan=
    |         +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-query=
      +-ProjectScan
        +-column_list=[Q.key#3]
        +-input_scan=
          +-WithRefScan(column_list=Q.[key#3, value#4], with_query_name='Q')
==

with suBQ1 as (select * from KeyValue),
     suBQ2 as (select * from SUbq1),
     suBQ3 as (select *, 5 from Subq2),
     suBQ4 as (select * from subq3)
select * from subQ3
union all
select * from subQ4
--
QueryStmt
+-output_column_list=
| +-$union_all.Key#17 AS Key [INT64]
| +-$union_all.Value#18 AS Value [STRING]
| +-$union_all.$col2#19 AS "$col2" [INT64]
+-query=
  +-WithScan
    +-column_list=$union_all.[Key#17, Value#18, $col2#19]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name='suBQ1'
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=KeyValue.[Key#1, Value#2]
    | |     +-input_scan=
    | |       +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    | +-WithEntry
    | | +-with_query_name='suBQ2'
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=suBQ1.[Key#3, Value#4]
    | |     +-input_scan=
    | |       +-WithRefScan(column_list=suBQ1.[Key#3, Value#4], with_query_name='suBQ1')
    | +-WithEntry
    | | +-with_query_name='suBQ3'
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[suBQ2.Key#5, suBQ2.Value#6, suBQ3.$col2#7]
    | |     +-expr_list=
    | |     | +-$col2#7 := Literal(type=INT64, value=5)
    | |     +-input_scan=
    | |       +-WithRefScan(column_list=suBQ2.[Key#5, Value#6], with_query_name='suBQ2')
    | +-WithEntry
    |   +-with_query_name='suBQ4'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=suBQ3.[Key#8, Value#9, $col2#10]
    |       +-input_scan=
    |         +-WithRefScan(column_list=suBQ3.[Key#8, Value#9, $col2#10], with_query_name='suBQ3')
    +-query=
      +-SetOperationScan
        +-column_list=$union_all.[Key#17, Value#18, $col2#19]
        +-op_type=UNION_ALL
        +-input_item_list=
          +-SetOperationItem
          | +-scan=
          | | +-ProjectScan
          | |   +-column_list=suBQ3.[Key#11, Value#12, $col2#13]
          | |   +-input_scan=
          | |     +-WithRefScan(column_list=suBQ3.[Key#11, Value#12, $col2#13], with_query_name='suBQ3')
          | +-output_column_list=suBQ3.[Key#11, Value#12, $col2#13]
          +-SetOperationItem
            +-scan=
            | +-ProjectScan
            |   +-column_list=suBQ4.[Key#14, Value#15, $col2#16]
            |   +-input_scan=
            |     +-WithRefScan(column_list=suBQ4.[Key#14, Value#15, $col2#16], with_query_name='suBQ4')
            +-output_column_list=suBQ4.[Key#14, Value#15, $col2#16]
==

# Names visible coming out of a WITH are the aliases, not the underlying columns.
with T1 as (select Key kk, Value vv from KeyValue),
     T2 as (select kk xx, vv from T1)
select xx, vv, '--', *
from T2
--
QueryStmt
+-output_column_list=
| +-T2.xx#5 AS xx [INT64]
| +-T2.vv#6 AS vv [STRING]
| +-$query.$col3#7 AS "$col3" [STRING]
| +-T2.xx#5 AS xx [INT64]
| +-T2.vv#6 AS vv [STRING]
+-query=
  +-WithScan
    +-column_list=[T2.xx#5, T2.vv#6, $query.$col3#7, T2.xx#5, T2.vv#6]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name='T1'
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=KeyValue.[Key#1, Value#2]
    | |     +-input_scan=
    | |       +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    | +-WithEntry
    |   +-with_query_name='T2'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=T1.[kk#3, vv#4]
    |       +-input_scan=
    |         +-WithRefScan(column_list=T1.[kk#3, vv#4], with_query_name='T1')
    +-query=
      +-ProjectScan
        +-column_list=[T2.xx#5, T2.vv#6, $query.$col3#7, T2.xx#5, T2.vv#6]
        +-expr_list=
        | +-$col3#7 := Literal(type=STRING, value="--")
        +-input_scan=
          +-WithRefScan(column_list=T2.[xx#5, vv#6], with_query_name='T2')
==

# Alias inside the with hides the underlying column name.
with T1 as (select Key kk from KeyValue)
select Key from T1
--
ERROR: Unrecognized name: Key [at 2:8]
select Key from T1
       ^
==

with T1 as (select Key kk from KeyValue)
select Value from T1
--
ERROR: Unrecognized name: Value [at 2:8]
select Value from T1
       ^
==

# When referencing a WITH subquery multiple times, it gets unique column
# names on each scan.
# This also tests using a with subquery as the rhs of a JOIN.
with subq as (select * from TestTable)
select * from subq a join subq b using (key)
--
QueryStmt
+-output_column_list=
| +-subq.key#4 AS key [INT32]
| +-subq.TestEnum#5 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-subq.KitchenSink#6 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-subq.TestEnum#8 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-subq.KitchenSink#9 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-WithScan
    +-column_list=subq.[key#4, TestEnum#5, KitchenSink#6, TestEnum#8, KitchenSink#9]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='subq'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    |       +-input_scan=
    |         +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
    +-query=
      +-ProjectScan
        +-column_list=subq.[key#4, TestEnum#5, KitchenSink#6, TestEnum#8, KitchenSink#9]
        +-input_scan=
          +-JoinScan
            +-column_list=subq.[key#4, TestEnum#5, KitchenSink#6, key#7, TestEnum#8, KitchenSink#9]
            +-left_scan=
            | +-WithRefScan(column_list=subq.[key#4, TestEnum#5, KitchenSink#6], with_query_name='subq')
            +-right_scan=
            | +-WithRefScan(column_list=subq.[key#7, TestEnum#8, KitchenSink#9], with_query_name='subq')
            +-join_expr=
              +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
                +-ColumnRef(type=INT32, column=subq.key#4)
                +-ColumnRef(type=INT32, column=subq.key#7)
==

# Error in a with subquery that is never referenced.
with T as (select 1 from BadTable)
select * from KeyValue
--
ERROR: Table not found: BadTable; Did you mean abTable? [at 1:26]
with T as (select 1 from BadTable)
                         ^
==

with NaMe as (select 1),
     other as (select 2),
     nAmE as (select 3)
select 4
--
ERROR: Duplicate alias nAmE for WITH subquery [at 3:6]
     nAmE as (select 3)
     ^
==

with "" as (select 1)
select 2
--
ERROR: Syntax error: Invalid empty identifier [at 1:6]
with "" as (select 1)
     ^
==

# Alias of the current WITH subquery is not visible inside the subquery.
with r1 as (select 1),
     r2 as (select * from r1),
     r3 as (select * from r2),
     r4 as (select * from r4)
select 1
--
ERROR: Table not found: r4 [at 4:27]
     r4 as (select * from r4)
                          ^
==

# Name of later WITH subqueries not visible.
with r1 as (select * from r2),
     r2 as (select 1)
select 2
--
ERROR: Table not found: r2 [at 1:27]
with r1 as (select * from r2),
                          ^
==

# WITH RECURSIVE not supported.
with recursive r1 as (select 1)
select 2
--
ERROR: RECURSIVE is not supported in the WITH clause [at 1:1]
with recursive r1 as (select 1)
^
==

# WITH RECURSIVE support works if language option is enabled (detailed coverage in with_recursive.test)
[language_features=V_1_3_WITH_RECURSIVE]
with recursive r1 as (select 1)
select 2
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS "$col1" [INT64]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#2]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='r1'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[r1.$col1#1]
    |       +-expr_list=
    |       | +-$col1#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#2]
    |   +-expr_list=
    |   | +-$col1#2 := Literal(type=INT64, value=2)
    |   +-input_scan=
    |     +-SingleRowScan
    +-recursive=TRUE
==

# WITH subquery does not show up in scope for expressions.
with r1 as (select 1 a)
select r1
--
ERROR: Unrecognized name: r1 [at 2:8]
select r1
       ^
==

# WITH subquery does not show up in scope for expressions.
with r1 as (select 1 a)
select r1.a
--
ERROR: Unrecognized name: r1 [at 2:8]
select r1.a
       ^
==

with r1 as (select 1 a)
select * from r1.a
--
ERROR: Table not found: r1.a; Table name r1.a starts with a WITH clause alias and references a column from that table, which is invalid in the FROM clause [at 2:15]
select * from r1.a
              ^
==

# With clauses that are never actually referenced still show up.
with T as (select key from KeyValue),
     T2 as (select 123 from KeyValue)
select value from KeyValue
--
QueryStmt
+-output_column_list=
| +-KeyValue.Value#7 AS value [STRING]
+-query=
  +-WithScan
    +-column_list=[KeyValue.Value#7]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name='T'
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[KeyValue.Key#1]
    | |     +-input_scan=
    | |       +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    | +-WithEntry
    |   +-with_query_name='T2'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[T2.$col1#5]
    |       +-expr_list=
    |       | +-$col1#5 := Literal(type=INT64, value=123)
    |       +-input_scan=
    |         +-TableScan(table=KeyValue)
    +-query=
      +-ProjectScan
        +-column_list=[KeyValue.Value#7]
        +-input_scan=
          +-TableScan(column_list=[KeyValue.Value#7], table=KeyValue, column_index_list=[1])
==

# Combination of WITH and UNION ALL, to make sure we're using the general
# ResolveQueryStmt productions where necessary, and propagating name visibility.
with q1 as (select 1 union all select 2),
     q2 as (select 3 union all select * from q1)
select * from q1
union all
select * from q2
--
QueryStmt
+-output_column_list=
| +-$union_all.$col1#9 AS "$col1" [INT64]
+-query=
  +-WithScan
    +-column_list=[$union_all.$col1#9]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name='q1'
    | | +-with_subquery=
    | |   +-SetOperationScan
    | |     +-column_list=[$union_all.$col1#3]
    | |     +-op_type=UNION_ALL
    | |     +-input_item_list=
    | |       +-SetOperationItem
    | |       | +-scan=
    | |       | | +-ProjectScan
    | |       | |   +-column_list=[$union_all1.$col1#1]
    | |       | |   +-expr_list=
    | |       | |   | +-$col1#1 := Literal(type=INT64, value=1)
    | |       | |   +-input_scan=
    | |       | |     +-SingleRowScan
    | |       | +-output_column_list=[$union_all1.$col1#1]
    | |       +-SetOperationItem
    | |         +-scan=
    | |         | +-ProjectScan
    | |         |   +-column_list=[$union_all2.$col1#2]
    | |         |   +-expr_list=
    | |         |   | +-$col1#2 := Literal(type=INT64, value=2)
    | |         |   +-input_scan=
    | |         |     +-SingleRowScan
    | |         +-output_column_list=[$union_all2.$col1#2]
    | +-WithEntry
    |   +-with_query_name='q2'
    |   +-with_subquery=
    |     +-SetOperationScan
    |       +-column_list=[$union_all.$col1#6]
    |       +-op_type=UNION_ALL
    |       +-input_item_list=
    |         +-SetOperationItem
    |         | +-scan=
    |         | | +-ProjectScan
    |         | |   +-column_list=[$union_all1.$col1#4]
    |         | |   +-expr_list=
    |         | |   | +-$col1#4 := Literal(type=INT64, value=3)
    |         | |   +-input_scan=
    |         | |     +-SingleRowScan
    |         | +-output_column_list=[$union_all1.$col1#4]
    |         +-SetOperationItem
    |           +-scan=
    |           | +-ProjectScan
    |           |   +-column_list=[q1.$col1#5]
    |           |   +-input_scan=
    |           |     +-WithRefScan(column_list=[q1.$col1#5], with_query_name='q1')
    |           +-output_column_list=[q1.$col1#5]
    +-query=
      +-SetOperationScan
        +-column_list=[$union_all.$col1#9]
        +-op_type=UNION_ALL
        +-input_item_list=
          +-SetOperationItem
          | +-scan=
          | | +-ProjectScan
          | |   +-column_list=[q1.$col1#7]
          | |   +-input_scan=
          | |     +-WithRefScan(column_list=[q1.$col1#7], with_query_name='q1')
          | +-output_column_list=[q1.$col1#7]
          +-SetOperationItem
            +-scan=
            | +-ProjectScan
            |   +-column_list=[q2.$col1#8]
            |   +-input_scan=
            |     +-WithRefScan(column_list=[q2.$col1#8], with_query_name='q2')
            +-output_column_list=[q2.$col1#8]
==

# Name scoping - aliases can hide the WITH subquery alias.
with Q1 as (select KitchenSink.repeated_int32_val REP from TestTable)
select Q1 from (select REP Q1 from Q1)
--
QueryStmt
+-output_column_list=
| +-Q1.REP#5 AS Q1 [ARRAY<INT32>]
+-query=
  +-WithScan
    +-column_list=[Q1.REP#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='Q1'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[Q1.REP#4]
    |       +-expr_list=
    |       | +-REP#4 :=
    |       |   +-GetProtoField
    |       |     +-type=ARRAY<INT32>
    |       |     +-expr=
    |       |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |       |     +-field_descriptor=repeated_int32_val
    |       |     +-default_value=[]
    |       +-input_scan=
    |         +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
    +-query=
      +-ProjectScan
        +-column_list=[Q1.REP#5]
        +-input_scan=
          +-ProjectScan
            +-column_list=[Q1.REP#5]
            +-input_scan=
              +-WithRefScan(column_list=[Q1.REP#5], with_query_name='Q1')
==

# More name scoping, with aliases hiding the WITH subqueries.
with Q1 as (select 1),
     Q2 as (select 2),
     Q3 as (select 3)
select Q1, Q2.Q1, Q3
from (select array_agg(5) Q1 from TestTable) Q2, Q2.Q1 Q3
--
QueryStmt
+-output_column_list=
| +-$aggregate.Q1#7 AS Q1 [ARRAY<INT64>]
| +-$aggregate.Q1#7 AS Q1 [ARRAY<INT64>]
| +-$array.Q3#8 AS Q3 [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.Q1#7, $aggregate.Q1#7, $array.Q3#8]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name='Q1'
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[Q1.$col1#1]
    | |     +-expr_list=
    | |     | +-$col1#1 := Literal(type=INT64, value=1)
    | |     +-input_scan=
    | |       +-SingleRowScan
    | +-WithEntry
    | | +-with_query_name='Q2'
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[Q2.$col1#2]
    | |     +-expr_list=
    | |     | +-$col1#2 := Literal(type=INT64, value=2)
    | |     +-input_scan=
    | |       +-SingleRowScan
    | +-WithEntry
    |   +-with_query_name='Q3'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[Q3.$col1#3]
    |       +-expr_list=
    |       | +-$col1#3 := Literal(type=INT64, value=3)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.Q1#7, $aggregate.Q1#7, $array.Q3#8]
        +-input_scan=
          +-ArrayScan
            +-column_list=[$aggregate.Q1#7, $array.Q3#8]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[$aggregate.Q1#7]
            |   +-input_scan=
            |     +-AggregateScan
            |       +-column_list=[$aggregate.Q1#7]
            |       +-input_scan=
            |       | +-TableScan(table=TestTable)
            |       +-aggregate_list=
            |         +-Q1#7 :=
            |           +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
            |             +-Literal(type=INT64, value=5)
            +-array_expr=
            | +-ColumnRef(type=ARRAY<INT64>, column=$aggregate.Q1#7)
            +-element_column=$array.Q3#8
==

# With subquery alias hiding a table name.
with KeyValue as (select 1 a from KeyValue),
     T2 as (select a+1 b from KeyValue)
select * from KeyValue
union all
select * from T2
--
QueryStmt
+-output_column_list=
| +-$union_all.a#8 AS a [INT64]
+-query=
  +-WithScan
    +-column_list=[$union_all.a#8]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name='KeyValue'
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[KeyValue.a#3]
    | |     +-expr_list=
    | |     | +-a#3 := Literal(type=INT64, value=1)
    | |     +-input_scan=
    | |       +-TableScan(table=KeyValue)
    | +-WithEntry
    |   +-with_query_name='T2'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[T2.b#5]
    |       +-expr_list=
    |       | +-b#5 :=
    |       |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |       |     +-ColumnRef(type=INT64, column=KeyValue.a#4)
    |       |     +-Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-WithRefScan(column_list=[KeyValue.a#4], with_query_name='KeyValue')
    +-query=
      +-SetOperationScan
        +-column_list=[$union_all.a#8]
        +-op_type=UNION_ALL
        +-input_item_list=
          +-SetOperationItem
          | +-scan=
          | | +-ProjectScan
          | |   +-column_list=[KeyValue.a#6]
          | |   +-input_scan=
          | |     +-WithRefScan(column_list=[KeyValue.a#6], with_query_name='KeyValue')
          | +-output_column_list=[KeyValue.a#6]
          +-SetOperationItem
            +-scan=
            | +-ProjectScan
            |   +-column_list=[T2.b#7]
            |   +-input_scan=
            |     +-WithRefScan(column_list=[T2.b#7], with_query_name='T2')
            +-output_column_list=[T2.b#7]
==

with "a.b" as (select * from KeyValue)
select * from "a.b"
--
QueryStmt
+-output_column_list=
| +-a.b.Key#3 AS Key [INT64]
| +-a.b.Value#4 AS Value [STRING]
+-query=
  +-WithScan
    +-column_list=a.b.[Key#3, Value#4]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='a.b'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=KeyValue.[Key#1, Value#2]
    |       +-input_scan=
    |         +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-query=
      +-ProjectScan
        +-column_list=a.b.[Key#3, Value#4]
        +-input_scan=
          +-WithRefScan(column_list=a.b.[Key#3, Value#4], with_query_name='a.b')
==

# Struct value tables in with subqueries.
with sq as (select as struct 1 s, 2 t from TestTable)
select s, sq.t, sq, sq.* from sq
--
QueryStmt
+-output_column_list=
| +-$query.s#8 AS s [INT64]
| +-$query.t#9 AS t [INT64]
| +-sq.$struct#7 AS sq [STRUCT<s INT64, t INT64>]
| +-$query.s#10 AS s [INT64]
| +-$query.t#11 AS t [INT64]
+-query=
  +-WithScan
    +-column_list=[$query.s#8, $query.t#9, sq.$struct#7, $query.s#10, $query.t#11]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='sq'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[$make_struct.$struct#6]
    |       +-expr_list=
    |       | +-$struct#6 :=
    |       |   +-MakeStruct
    |       |     +-type=STRUCT<s INT64, t INT64>
    |       |     +-field_list=
    |       |       +-ColumnRef(type=INT64, column=sq.s#4)
    |       |       +-ColumnRef(type=INT64, column=sq.t#5)
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=sq.[s#4, t#5]
    |           +-expr_list=
    |           | +-s#4 := Literal(type=INT64, value=1)
    |           | +-t#5 := Literal(type=INT64, value=2)
    |           +-input_scan=
    |             +-TableScan(table=TestTable)
    +-query=
      +-ProjectScan
        +-column_list=[$query.s#8, $query.t#9, sq.$struct#7, $query.s#10, $query.t#11]
        +-expr_list=
        | +-s#8 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<s INT64, t INT64>, column=sq.$struct#7)
        | |   +-field_idx=0
        | +-t#9 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<s INT64, t INT64>, column=sq.$struct#7)
        | |   +-field_idx=1
        | +-s#10 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<s INT64, t INT64>, column=sq.$struct#7)
        | |   +-field_idx=0
        | +-t#11 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<s INT64, t INT64>, column=sq.$struct#7)
        |     +-field_idx=1
        +-input_scan=
          +-WithRefScan(column_list=[sq.$struct#7], with_query_name='sq')
==

# Proto value tables in with subqueries.
with sq as (select as "zetasql_test__.KeyValueStruct" 55 key from TestTable)
select key, sq.value, sq, sq.* from sq
where value!=0
--
QueryStmt
+-output_column_list=
| +-$query.key#7 AS key [STRING]
| +-$query.value#8 AS value [INT64]
| +-sq.$proto#6 AS sq [PROTO<zetasql_test__.KeyValueStruct>]
| +-$query.key#9 AS key [STRING]
| +-$query.value#10 AS value [INT64]
+-query=
  +-WithScan
    +-column_list=[$query.key#7, $query.value#8, sq.$proto#6, $query.key#9, $query.value#10]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='sq'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[$make_proto.$proto#5]
    |       +-expr_list=
    |       | +-$proto#5 :=
    |       |   +-MakeProto
    |       |     +-type=PROTO<zetasql_test__.KeyValueStruct>
    |       |     +-field_list=
    |       |       +-key := Literal(type=STRING, value="55")
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=[sq.key#4]
    |           +-expr_list=
    |           | +-key#4 := Literal(type=INT64, value=55)
    |           +-input_scan=
    |             +-TableScan(table=TestTable)
    +-query=
      +-ProjectScan
        +-column_list=[$query.key#7, $query.value#8, sq.$proto#6, $query.key#9, $query.value#10]
        +-expr_list=
        | +-key#7 :=
        | | +-GetProtoField
        | |   +-type=STRING
        | |   +-expr=
        | |   | +-ColumnRef(type=PROTO<zetasql_test__.KeyValueStruct>, column=sq.$proto#6)
        | |   +-field_descriptor=key
        | |   +-default_value=NULL
        | +-value#8 :=
        | | +-GetProtoField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=PROTO<zetasql_test__.KeyValueStruct>, column=sq.$proto#6)
        | |   +-field_descriptor=value
        | |   +-default_value=NULL
        | +-key#9 :=
        | | +-GetProtoField
        | |   +-type=STRING
        | |   +-expr=
        | |   | +-ColumnRef(type=PROTO<zetasql_test__.KeyValueStruct>, column=sq.$proto#6)
        | |   +-field_descriptor=key
        | |   +-default_value=NULL
        | +-value#10 :=
        |   +-GetProtoField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=PROTO<zetasql_test__.KeyValueStruct>, column=sq.$proto#6)
        |     +-field_descriptor=value
        |     +-default_value=NULL
        +-input_scan=
          +-FilterScan
            +-column_list=[sq.$proto#6]
            +-input_scan=
            | +-WithRefScan(column_list=[sq.$proto#6], with_query_name='sq')
            +-filter_expr=
              +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
                +-GetProtoField
                | +-type=INT64
                | +-expr=
                | | +-ColumnRef(type=PROTO<zetasql_test__.KeyValueStruct>, column=sq.$proto#6)
                | +-field_descriptor=value
                | +-default_value=NULL
                +-Literal(type=INT64, value=0)
==

# This has duplicate columns in the subquery, which could get uniquified in
# its column_list.
with Q as (select key, key, value from TwoIntegers)
select * from Q;
--
QueryStmt
+-output_column_list=
| +-Q.key#4 AS key [INT64]
| +-Q.key#4 AS key [INT64]
| +-Q.value#5 AS value [INT64]
+-query=
  +-WithScan
    +-column_list=Q.[key#4, key#4, value#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='Q'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=TwoIntegers.[key#1, key#1, value#2]
    |       +-input_scan=
    |         +-TableScan(column_list=TwoIntegers.[key#1, value#2], table=TwoIntegers, column_index_list=[0, 1])
    +-query=
      +-ProjectScan
        +-column_list=Q.[key#4, key#4, value#5]
        +-input_scan=
          +-WithRefScan(column_list=Q.[key#3, key#4, value#5], with_query_name='Q')
==

# Test the code that assigns column names in the WithRefScan.
# e.g The created columns should be called Q.k1, not Q.key.
with Q as (select key k1, key k2, value v, 123 xxx, 456 yyy, 789 from KeyValue)
select * from Q
--
QueryStmt
+-output_column_list=
| +-Q.k1#7 AS k1 [INT64]
| +-Q.k1#7 AS k2 [INT64]
| +-Q.v#8 AS v [STRING]
| +-Q.xxx#9 AS xxx [INT64]
| +-Q.yyy#10 AS yyy [INT64]
| +-Q.$col6#11 AS "$col6" [INT64]
+-query=
  +-WithScan
    +-column_list=Q.[k1#7, k1#7, v#8, xxx#9, yyy#10, $col6#11]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='Q'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[KeyValue.Key#1, KeyValue.Key#1, KeyValue.Value#2, Q.xxx#3, Q.yyy#4, Q.$col6#5]
    |       +-expr_list=
    |       | +-xxx#3 := Literal(type=INT64, value=123)
    |       | +-yyy#4 := Literal(type=INT64, value=456)
    |       | +-$col6#5 := Literal(type=INT64, value=789)
    |       +-input_scan=
    |         +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-query=
      +-ProjectScan
        +-column_list=Q.[k1#7, k1#7, v#8, xxx#9, yyy#10, $col6#11]
        +-input_scan=
          +-WithRefScan(column_list=Q.[k1#6, k1#7, v#8, xxx#9, yyy#10, $col6#11], with_query_name='Q')
==

with Q as (select key k1, key k2, value v, 123 xxx, 456 yyy, 789 from KeyValue)
select k2, xxx from Q
--
QueryStmt
+-output_column_list=
| +-Q.k1#7 AS k2 [INT64]
| +-Q.xxx#9 AS xxx [INT64]
+-query=
  +-WithScan
    +-column_list=Q.[k1#7, xxx#9]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='Q'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[KeyValue.Key#1, KeyValue.Key#1, KeyValue.Value#2, Q.xxx#3, Q.yyy#4, Q.$col6#5]
    |       +-expr_list=
    |       | +-xxx#3 := Literal(type=INT64, value=123)
    |       | +-yyy#4 := Literal(type=INT64, value=456)
    |       | +-$col6#5 := Literal(type=INT64, value=789)
    |       +-input_scan=
    |         +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-query=
      +-ProjectScan
        +-column_list=Q.[k1#7, xxx#9]
        +-input_scan=
          +-WithRefScan(column_list=Q.[k1#6, k1#7, v#8, xxx#9, yyy#10, $col6#11], with_query_name='Q')
==

with Q as (select distinct k.key k1, * from KeyValue k)
select k1 from Q
--
QueryStmt
+-output_column_list=
| +-Q.k1#5 AS k1 [INT64]
+-query=
  +-WithScan
    +-column_list=[Q.k1#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='Q'
    |   +-with_subquery=
    |     +-AggregateScan
    |       +-column_list=$distinct.[Key#3, Value#4]
    |       +-input_scan=
    |       | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias='k')
    |       +-group_by_list=
    |         +-Key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
    |         +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-query=
      +-ProjectScan
        +-column_list=[Q.k1#5]
        +-input_scan=
          +-WithRefScan(column_list=Q.[k1#5, Value#6], with_query_name='Q')
==

# Note that 'nested_catalog.KeyValue' resolves to the Catalog table,
# not the WITH table.
WITH nested_catalog AS (select 1 a)
SELECT * from nested_catalog.KeyValue;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#2 AS Key [INT64]
| +-KeyValue.Value#3 AS Value [STRING]
+-query=
  +-WithScan
    +-column_list=KeyValue.[Key#2, Value#3]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='nested_catalog'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[nested_catalog.a#1]
    |       +-expr_list=
    |       | +-a#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=KeyValue.[Key#2, Value#3]
        +-input_scan=
          +-TableScan(column_list=KeyValue.[Key#2, Value#3], table=KeyValue, column_index_list=[0, 1])
==

# Note that 'nested_catalog' resolves to the WITH table, not to the
# existing Catalog with the same name.
WITH nested_catalog AS (select 1 a)
SELECT *
FROM nested_catalog;
--
QueryStmt
+-output_column_list=
| +-nested_catalog.a#2 AS a [INT64]
+-query=
  +-WithScan
    +-column_list=[nested_catalog.a#2]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='nested_catalog'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[nested_catalog.a#1]
    |       +-expr_list=
    |       | +-a#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[nested_catalog.a#2]
        +-input_scan=
          +-WithRefScan(column_list=[nested_catalog.a#2], with_query_name='nested_catalog')
==

# 'nested_catalog' resolves to the WITH table, and 'nested_catalog.KeyValue'
# resolves to table 'KeyValue' in Catalog 'nested_catalog'.
WITH nested_catalog AS (select 1 a)
SELECT *
FROM nested_catalog.KeyValue
CROSS JOIN nested_catalog
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#2 AS Key [INT64]
| +-KeyValue.Value#3 AS Value [STRING]
| +-nested_catalog.a#4 AS a [INT64]
+-query=
  +-WithScan
    +-column_list=[KeyValue.Key#2, KeyValue.Value#3, nested_catalog.a#4]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name='nested_catalog'
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[nested_catalog.a#1]
    |       +-expr_list=
    |       | +-a#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[KeyValue.Key#2, KeyValue.Value#3, nested_catalog.a#4]
        +-input_scan=
          +-JoinScan
            +-column_list=[KeyValue.Key#2, KeyValue.Value#3, nested_catalog.a#4]
            +-left_scan=
            | +-TableScan(column_list=KeyValue.[Key#2, Value#3], table=KeyValue, column_index_list=[0, 1])
            +-right_scan=
              +-WithRefScan(column_list=[nested_catalog.a#4], with_query_name='nested_catalog')
