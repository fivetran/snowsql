# This file contains specific tests for window PARTITION BY and window ORDER BY,
# including the type validations for partitioning/ordering expressions and
# alias/ordinal references. The test analytic functions afn_agg, afn_agg_order
# and afn_agg_no_order_no_frame are described in analytic_functions.test.

# All the types that support grouping are allowed in PARTITION BY,
# except float and double are always disallowed.
[default language_features=ANALYTIC_FUNCTIONS]
Select 1
FROM SimpleTypes cross join ComplexTypes
order by afn_agg() over (partition by "bool",
                                      "int32",
                                      "int64",
                                      "uint32",
                                      "uint64",
                                      "string",
                                      "bytes",
                                      "date",
                                      timestamp,
                                      TestEnum);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#25 AS "$col1" [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$query.$col1#25]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AnalyticScan
    |   +-column_list=[SimpleTypes.int32#1, SimpleTypes.int64#2, SimpleTypes.uint32#3, SimpleTypes.uint64#4, SimpleTypes.string#5, SimpleTypes.bytes#6, SimpleTypes.bool#7, SimpleTypes.date#10, SimpleTypes.timestamp#15, ComplexTypes.TestEnum#20, $query.$col1#25, $analytic.$analytic1#26]
    |   +-input_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[SimpleTypes.int32#1, SimpleTypes.int64#2, SimpleTypes.uint32#3, SimpleTypes.uint64#4, SimpleTypes.string#5, SimpleTypes.bytes#6, SimpleTypes.bool#7, SimpleTypes.date#10, SimpleTypes.timestamp#15, ComplexTypes.TestEnum#20, $query.$col1#25]
    |   |   +-expr_list=
    |   |   | +-$col1#25 := Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-JoinScan
    |   |       +-column_list=[SimpleTypes.int32#1, SimpleTypes.int64#2, SimpleTypes.uint32#3, SimpleTypes.uint64#4, SimpleTypes.string#5, SimpleTypes.bytes#6, SimpleTypes.bool#7, SimpleTypes.date#10, SimpleTypes.timestamp#15, ComplexTypes.TestEnum#20]
    |   |       +-left_scan=
    |   |       | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, date#10, timestamp#15], table=SimpleTypes, column_index_list=[0, 1, 2, 3, 4, 5, 6, 9, 14])
    |   |       +-right_scan=
    |   |         +-TableScan(column_list=[ComplexTypes.TestEnum#20], table=ComplexTypes, column_index_list=[1])
    |   +-function_group_list=
    |     +-AnalyticFunctionGroup
    |       +-partition_by=
    |       | +-WindowPartitioning
    |       |   +-partition_by_list=
    |       |     +-ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
    |       |     +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |       |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |       |     +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |       |     +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |       |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |       |     +-ColumnRef(type=BYTES, column=SimpleTypes.bytes#6)
    |       |     +-ColumnRef(type=DATE, column=SimpleTypes.date#10)
    |       |     +-ColumnRef(type=TIMESTAMP, column=SimpleTypes.timestamp#15)
    |       |     +-ColumnRef(type=ENUM<zetasql_test__.TestEnum>, column=ComplexTypes.TestEnum#20)
    |       +-analytic_function_list=
    |         +-$analytic1#26 :=
    |           +-AnalyticFunctionCall(sample_functions:afn_agg() -> INT64)
    |             +-window_frame=
    |               +-WindowFrame(frame_unit=ROWS)
    |                 +-start_expr=
    |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
    |                 +-end_expr=
    |                   +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=INT64, column=$analytic.$analytic1#26)
==

Select 1
FROM SimpleTypes cross join ComplexTypes
order by afn_agg() over (partition by {{float|double}});
--
ALTERNATION GROUP: float
--
ERROR: Partitioning by expressions of type FLOAT is not allowed [at 3:39]
order by afn_agg() over (partition by float);
                                      ^
--
ALTERNATION GROUP: double
--
ERROR: Partitioning by expressions of type DOUBLE is not allowed [at 3:39]
order by afn_agg() over (partition by double);
                                      ^
==

# Unsupported type of partitioning expression.
select afn_agg() over (partition by KitchenSink) from ComplexTypes
--
ERROR: Partitioning by expressions of type PROTO is not allowed [at 1:37]
select afn_agg() over (partition by KitchenSink) from ComplexTypes
                                    ^
==

select afn_agg() over (partition by Int32Array) from ComplexTypes
--
ERROR: Partitioning by expressions of type ARRAY is not allowed [at 1:37]
select afn_agg() over (partition by Int32Array) from ComplexTypes
                                    ^
==

# Invalid because group by float|double is disallowed.
[language_features={{ANALYTIC_FUNCTIONS|ANALYTIC_FUNCTIONS,V_1_2_GROUP_BY_STRUCT}}]
select 1
from
  (select (select as struct 1, 1.1213) as StructField, 1 as Value) t
order by afn_agg() over (partition by StructField);

--
ALTERNATION GROUP: ANALYTIC_FUNCTIONS
--
ERROR: Partitioning by expressions of type STRUCT is not allowed [at 4:39]
order by afn_agg() over (partition by StructField);
                                      ^
--
ALTERNATION GROUP: ANALYTIC_FUNCTIONS,V_1_2_GROUP_BY_STRUCT
--
ERROR: Partitioning by expressions of type STRUCT containing DOUBLE is not allowed [at 4:39]
order by afn_agg() over (partition by StructField);
                                      ^
==

[language_features={{ANALYTIC_FUNCTIONS|ANALYTIC_FUNCTIONS,V_1_2_GROUP_BY_STRUCT}}]
select afn_agg() over (partition by TestStruct) from ComplexTypes
--
ALTERNATION GROUP: ANALYTIC_FUNCTIONS
--
ERROR: Partitioning by expressions of type STRUCT is not allowed [at 1:37]
select afn_agg() over (partition by TestStruct) from ComplexTypes
                                    ^
--
ALTERNATION GROUP: ANALYTIC_FUNCTIONS,V_1_2_GROUP_BY_STRUCT
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#8 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#8]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[ComplexTypes.TestStruct#5, $analytic.$analytic1#8]
        +-input_scan=
        | +-TableScan(column_list=[ComplexTypes.TestStruct#5], table=ComplexTypes, column_index_list=[4])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-partition_by=
            | +-WindowPartitioning
            |   +-partition_by_list=
            |     +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#5)
            +-analytic_function_list=
              +-$analytic1#8 :=
                +-AnalyticFunctionCall(sample_functions:afn_agg() -> INT64)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

# All the types that support ordering for the query ORDER BY are allowed in the
# window ORDER BY if DISALLOW_GROUP_BY_FLOAT is not enabled.
Select 1
FROM SimpleTypes cross join ComplexTypes
order by afn_agg() over (order by "bool",
                                  "int32",
                                  "int64",
                                  "uint32",
                                  "uint64",
                                  "float",
                                  "double",
                                  "string",
                                  "bytes",
                                  "date",
                                  timestamp,
                                  TestEnum);
--
QueryStmt
+-output_column_list=
| +-$query.$col1#25 AS "$col1" [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$query.$col1#25]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AnalyticScan
    |   +-column_list=[SimpleTypes.int32#1, SimpleTypes.int64#2, SimpleTypes.uint32#3, SimpleTypes.uint64#4, SimpleTypes.string#5, SimpleTypes.bytes#6, SimpleTypes.bool#7, SimpleTypes.float#8, SimpleTypes.double#9, SimpleTypes.date#10, SimpleTypes.timestamp#15, ComplexTypes.TestEnum#20, $query.$col1#25, $analytic.$analytic1#26]
    |   +-input_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[SimpleTypes.int32#1, SimpleTypes.int64#2, SimpleTypes.uint32#3, SimpleTypes.uint64#4, SimpleTypes.string#5, SimpleTypes.bytes#6, SimpleTypes.bool#7, SimpleTypes.float#8, SimpleTypes.double#9, SimpleTypes.date#10, SimpleTypes.timestamp#15, ComplexTypes.TestEnum#20, $query.$col1#25]
    |   |   +-expr_list=
    |   |   | +-$col1#25 := Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-JoinScan
    |   |       +-column_list=[SimpleTypes.int32#1, SimpleTypes.int64#2, SimpleTypes.uint32#3, SimpleTypes.uint64#4, SimpleTypes.string#5, SimpleTypes.bytes#6, SimpleTypes.bool#7, SimpleTypes.float#8, SimpleTypes.double#9, SimpleTypes.date#10, SimpleTypes.timestamp#15, ComplexTypes.TestEnum#20]
    |   |       +-left_scan=
    |   |       | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, timestamp#15], table=SimpleTypes, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14])
    |   |       +-right_scan=
    |   |         +-TableScan(column_list=[ComplexTypes.TestEnum#20], table=ComplexTypes, column_index_list=[1])
    |   +-function_group_list=
    |     +-AnalyticFunctionGroup
    |       +-order_by=
    |       | +-WindowOrdering
    |       |   +-order_by_item_list=
    |       |     +-OrderByItem
    |       |     | +-column_ref=
    |       |     |   +-ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
    |       |     +-OrderByItem
    |       |     | +-column_ref=
    |       |     |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |       |     +-OrderByItem
    |       |     | +-column_ref=
    |       |     |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |       |     +-OrderByItem
    |       |     | +-column_ref=
    |       |     |   +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
    |       |     +-OrderByItem
    |       |     | +-column_ref=
    |       |     |   +-ColumnRef(type=UINT64, column=SimpleTypes.uint64#4)
    |       |     +-OrderByItem
    |       |     | +-column_ref=
    |       |     |   +-ColumnRef(type=FLOAT, column=SimpleTypes.float#8)
    |       |     +-OrderByItem
    |       |     | +-column_ref=
    |       |     |   +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
    |       |     +-OrderByItem
    |       |     | +-column_ref=
    |       |     |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |       |     +-OrderByItem
    |       |     | +-column_ref=
    |       |     |   +-ColumnRef(type=BYTES, column=SimpleTypes.bytes#6)
    |       |     +-OrderByItem
    |       |     | +-column_ref=
    |       |     |   +-ColumnRef(type=DATE, column=SimpleTypes.date#10)
    |       |     +-OrderByItem
    |       |     | +-column_ref=
    |       |     |   +-ColumnRef(type=TIMESTAMP, column=SimpleTypes.timestamp#15)
    |       |     +-OrderByItem
    |       |       +-column_ref=
    |       |         +-ColumnRef(type=ENUM<zetasql_test__.TestEnum>, column=ComplexTypes.TestEnum#20)
    |       +-analytic_function_list=
    |         +-$analytic1#26 :=
    |           +-AnalyticFunctionCall(sample_functions:afn_agg() -> INT64)
    |             +-window_frame=
    |               +-WindowFrame(frame_unit=RANGE)
    |                 +-start_expr=
    |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
    |                 +-end_expr=
    |                   +-WindowFrameExpr(boundary_type=CURRENT ROW)
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=INT64, column=$analytic.$analytic1#26)
==

[language_features=ANALYTIC_FUNCTIONS{{|,V_1_3_ARRAY_ORDERING}}]
select afn_agg() over (order by Int32Array)
from ComplexTypes;
--
ALTERNATION GROUP: <empty>
--
ERROR: Ordering by expressions of type ARRAY is not allowed [at 1:33]
select afn_agg() over (order by Int32Array)
                                ^
--
ALTERNATION GROUP: ,V_1_3_ARRAY_ORDERING
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#8 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#8]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[ComplexTypes.Int32Array#4, $analytic.$analytic1#8]
        +-input_scan=
        | +-TableScan(column_list=[ComplexTypes.Int32Array#4], table=ComplexTypes, column_index_list=[3])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-order_by=
            | +-WindowOrdering
            |   +-order_by_item_list=
            |     +-OrderByItem
            |       +-column_ref=
            |         +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#4)
            +-analytic_function_list=
              +-$analytic1#8 :=
                +-AnalyticFunctionCall(sample_functions:afn_agg() -> INT64)
                  +-window_frame=
                    +-WindowFrame(frame_unit=RANGE)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=CURRENT ROW)
==

[language_features=ANALYTIC_FUNCTIONS{{|,V_1_3_ARRAY_ORDERING}}]
select afn_agg() over (order by [KitchenSink])
from ComplexTypes;
--
ALTERNATION GROUP: <empty>
--
ERROR: Ordering by expressions of type ARRAY is not allowed [at 1:33]
select afn_agg() over (order by [KitchenSink])
                                ^
--
ALTERNATION GROUP: ,V_1_3_ARRAY_ORDERING
--
ERROR: Ordering by expressions of type ARRAY containing PROTO is not allowed [at 1:33]
select afn_agg() over (order by [KitchenSink])
                                ^
==

# Implicit range window.
[language_features=ANALYTIC_FUNCTIONS,DISALLOW_GROUP_BY_FLOAT]
select afn_agg() over (order by double)
FROM SimpleTypes
--
ERROR: Ordering by expressions of type DOUBLE is not allowed in a RANGE-based window [at 1:33]
select afn_agg() over (order by double)
                                ^
==

[language_features=ANALYTIC_FUNCTIONS,DISALLOW_GROUP_BY_FLOAT]
select afn_agg() over (order by float range 2.0 preceding)
FROM SimpleTypes
--
ERROR: Ordering by expressions of type FLOAT is not allowed in a RANGE-based window [at 1:33]
select afn_agg() over (order by float range 2.0 preceding)
                                ^
==

[language_features=ANALYTIC_FUNCTIONS,DISALLOW_GROUP_BY_FLOAT]
select
  afn_agg() over (order by double
                  range between unbounded preceding and unbounded following)
FROM SimpleTypes
--
ERROR: Ordering by expressions of type DOUBLE is not allowed in a RANGE-based window [at 2:28]
  afn_agg() over (order by double
                           ^
==

# Unsupported type of ordering expression.
select afn_agg() over (order by KitchenSink) from ComplexTypes
--
ERROR: Ordering by expressions of type PROTO is not allowed [at 1:33]
select afn_agg() over (order by KitchenSink) from ComplexTypes
                                ^
==

select afn_agg() over (order by Int32Array) from ComplexTypes
--
ERROR: Ordering by expressions of type ARRAY is not allowed [at 1:33]
select afn_agg() over (order by Int32Array) from ComplexTypes
                                ^
==

select afn_agg() over (order by TestStruct) from ComplexTypes
--
ERROR: Ordering by expressions of type STRUCT is not allowed [at 1:33]
select afn_agg() over (order by TestStruct) from ComplexTypes
                                ^
==

# Alias references.
select key as a from keyvalue
order by afn_agg() over (partition by key, a order by key, a)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS a [INT64]
+-query=
  +-OrderByScan
    +-column_list=[KeyValue.Key#1]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AnalyticScan
    |   +-column_list=[KeyValue.Key#1, $analytic.$analytic1#3]
    |   +-input_scan=
    |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    |   +-function_group_list=
    |     +-AnalyticFunctionGroup
    |       +-partition_by=
    |       | +-WindowPartitioning
    |       |   +-partition_by_list=
    |       |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       +-order_by=
    |       | +-WindowOrdering
    |       |   +-order_by_item_list=
    |       |     +-OrderByItem
    |       |     | +-column_ref=
    |       |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       |     +-OrderByItem
    |       |       +-column_ref=
    |       |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       +-analytic_function_list=
    |         +-$analytic1#3 :=
    |           +-AnalyticFunctionCall(sample_functions:afn_agg() -> INT64)
    |             +-window_frame=
    |               +-WindowFrame(frame_unit=RANGE)
    |                 +-start_expr=
    |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
    |                 +-end_expr=
    |                   +-WindowFrameExpr(boundary_type=CURRENT ROW)
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=INT64, column=$analytic.$analytic1#3)
==

# Ambiguous partitioning expression.
select key as a, value as a
from keyvalue
order by afn_agg() over (partition by a)
--
ERROR: Name a in PARTITION BY is ambiguous; it may refer to multiple columns in the SELECT-list [at 3:39]
order by afn_agg() over (partition by a)
                                      ^
==

select key as a, key as a
from keyvalue
order by afn_agg() over (partition by a)
--
ERROR: Name a in PARTITION BY is ambiguous; it may refer to multiple columns in the SELECT-list [at 3:39]
order by afn_agg() over (partition by a)
                                      ^
==

# Ambiguous ordering expression.
select key as a, value as a
from keyvalue
order by afn_agg() over (order by a)
--
ERROR: Name a in Window ORDER BY is ambiguous; it may refer to multiple columns in the SELECT-list [at 3:35]
order by afn_agg() over (order by a)
                                  ^
==

select Int32Array as a from ComplexTypes
order by afn_agg() over (order by a)
--
ERROR: Ordering by expressions of type ARRAY is not allowed [at 2:35]
order by afn_agg() over (order by a)
                                  ^
==

select Int32Array as a from ComplexTypes
order by afn_agg() over (partition by a)
--
ERROR: Partitioning by expressions of type ARRAY is not allowed [at 2:39]
order by afn_agg() over (partition by a)
                                      ^
==

# TODO: Eliminate duplicate order by and partition by expressions.
select key+1 as a, key+2 as b
from keyvalue
order by afn_agg() over (partition by a, key+1 order by b, key+1)
--
QueryStmt
+-output_column_list=
| +-$query.a#3 AS a [INT64]
| +-$query.b#4 AS b [INT64]
+-query=
  +-OrderByScan
    +-column_list=$query.[a#3, b#4]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AnalyticScan
    |   +-column_list=[KeyValue.Key#1, $query.a#3, $query.b#4, $analytic.$analytic1#5]
    |   +-input_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[KeyValue.Key#1, $query.a#3, $query.b#4, $partitionby.$partitionbycol2#6, $orderby.$orderbycol2#7]
    |   |   +-expr_list=
    |   |   | +-$partitionbycol2#6 :=
    |   |   | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |   | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |   | |   +-Literal(type=INT64, value=1)
    |   |   | +-$orderbycol2#7 :=
    |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |   |     +-Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-ProjectScan
    |   |       +-column_list=[KeyValue.Key#1, $query.a#3, $query.b#4]
    |   |       +-expr_list=
    |   |       | +-a#3 :=
    |   |       | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |       | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |       | |   +-Literal(type=INT64, value=1)
    |   |       | +-b#4 :=
    |   |       |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |       |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |       |     +-Literal(type=INT64, value=2)
    |   |       +-input_scan=
    |   |         +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    |   +-function_group_list=
    |     +-AnalyticFunctionGroup
    |       +-partition_by=
    |       | +-WindowPartitioning
    |       |   +-partition_by_list=
    |       |     +-ColumnRef(type=INT64, column=$query.a#3)
    |       |     +-ColumnRef(type=INT64, column=$partitionby.$partitionbycol2#6)
    |       +-order_by=
    |       | +-WindowOrdering
    |       |   +-order_by_item_list=
    |       |     +-OrderByItem
    |       |     | +-column_ref=
    |       |     |   +-ColumnRef(type=INT64, column=$query.b#4)
    |       |     +-OrderByItem
    |       |       +-column_ref=
    |       |         +-ColumnRef(type=INT64, column=$orderby.$orderbycol2#7)
    |       +-analytic_function_list=
    |         +-$analytic1#5 :=
    |           +-AnalyticFunctionCall(sample_functions:afn_agg() -> INT64)
    |             +-window_frame=
    |               +-WindowFrame(frame_unit=RANGE)
    |                 +-start_expr=
    |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
    |                 +-end_expr=
    |                   +-WindowFrameExpr(boundary_type=CURRENT ROW)
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=INT64, column=$analytic.$analytic1#5)
