[default language_features=ENCRYPTION]
SELECT KEYS.NEW_KEYSET(NULL)
--
ERROR: First argument (key type) in function KEYS.NEW_KEYSET must be a string literal or query parameter [at 1:8]
SELECT KEYS.NEW_KEYSET(NULL)
       ^
==

SELECT KEYS.NEW_KEYSET(CAST(NULL AS STRING))
--
ERROR: First argument (key type) in function KEYS.NEW_KEYSET must be a string literal or query parameter [at 1:8]
SELECT KEYS.NEW_KEYSET(CAST(NULL AS STRING))
       ^
==

SELECT KEYS.NEW_KEYSET('invalid key type')
--
ERROR: First argument (key type) in function KEYS.NEW_KEYSET must be one of 'AEAD_AES_GCM_256', 'DETERMINISTIC_AEAD_AES_SIV_CMAC_256', but is 'invalid key type' [at 1:8]
SELECT KEYS.NEW_KEYSET('invalid key type')
       ^
==

SELECT KEYS.NEW_KEYSET('AEAD_AES_GCM_256')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:keys.new_keyset(STRING) -> BYTES)
    |     +-Literal(type=STRING, value="AEAD_AES_GCM_256")
    +-input_scan=
      +-SingleRowScan
==

SELECT
  KEYS.NEW_KEYSET('AEAD_AES_GCM_256') != KEYS.NEW_KEYSET('AEAD_AES_GCM_256')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$not_equal(BYTES, BYTES) -> BOOL)
    |     +-FunctionCall(ZetaSQL:keys.new_keyset(STRING) -> BYTES)
    |     | +-Literal(type=STRING, value="AEAD_AES_GCM_256")
    |     +-FunctionCall(ZetaSQL:keys.new_keyset(STRING) -> BYTES)
    |       +-Literal(type=STRING, value="AEAD_AES_GCM_256")
    +-input_scan=
      +-SingleRowScan
==

SELECT KEYS.NEW_KEYSET('DETERMINISTIC_AEAD_AES_SIV_CMAC_256')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:keys.new_keyset(STRING) -> BYTES)
    |     +-Literal(type=STRING, value="DETERMINISTIC_AEAD_AES_SIV_CMAC_256")
    +-input_scan=
      +-SingleRowScan
==

SELECT
  KEYS.NEW_KEYSET('DETERMINISTIC_AEAD_AES_SIV_CMAC_256') != KEYS.NEW_KEYSET('DETERMINISTIC_AEAD_AES_SIV_CMAC_256')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$not_equal(BYTES, BYTES) -> BOOL)
    |     +-FunctionCall(ZetaSQL:keys.new_keyset(STRING) -> BYTES)
    |     | +-Literal(type=STRING, value="DETERMINISTIC_AEAD_AES_SIV_CMAC_256")
    |     +-FunctionCall(ZetaSQL:keys.new_keyset(STRING) -> BYTES)
    |       +-Literal(type=STRING, value="DETERMINISTIC_AEAD_AES_SIV_CMAC_256")
    +-input_scan=
      +-SingleRowScan
==

SELECT KEYS.NEW_KEYSET(@test_param_string)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:keys.new_keyset(STRING) -> BYTES)
    |     +-Parameter(type=STRING, name="test_param_string")
    +-input_scan=
      +-SingleRowScan
==

WITH T AS (
  SELECT KEYS.NEW_KEYSET('AEAD_AES_GCM_256') AS keyset
)
SELECT keyset, keyset
FROM T
--
QueryStmt
+-output_column_list=
| +-T.keyset#2 AS keyset [BYTES]
| +-T.keyset#2 AS keyset [BYTES]
+-query=
  +-WithScan
    +-column_list=T.[keyset#2, keyset#2]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[T.keyset#1]
    |       +-expr_list=
    |       | +-keyset#1 :=
    |       |   +-FunctionCall(ZetaSQL:keys.new_keyset(STRING) -> BYTES)
    |       |     +-Literal(type=STRING, value="AEAD_AES_GCM_256")
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=T.[keyset#2, keyset#2]
        +-input_scan=
          +-WithRefScan(column_list=[T.keyset#2], with_query_name="T")
==

SELECT KEYS.ADD_KEY_FROM_RAW_BYTES(b'', NULL, CAST(value AS BYTES))
FROM KeyValue
--
ERROR: Second argument (key type) in function KEYS.ADD_KEY_FROM_RAW_BYTES must be a string literal or query parameter [at 1:8]
SELECT KEYS.ADD_KEY_FROM_RAW_BYTES(b'', NULL, CAST(value AS BYTES))
       ^
==

SELECT
  KEYS.ADD_KEY_FROM_RAW_BYTES(b'', CAST(NULL AS STRING), CAST(value AS BYTES))
FROM KeyValue
--
ERROR: Second argument (key type) in function KEYS.ADD_KEY_FROM_RAW_BYTES must be a string literal or query parameter [at 2:3]
  KEYS.ADD_KEY_FROM_RAW_BYTES(b'', CAST(NULL AS STRING), CAST(value AS BYTES))
  ^
==

SELECT
  KEYS.ADD_KEY_FROM_RAW_BYTES(b'', 'invalid key type', CAST(value AS BYTES))
FROM KeyValue
--
ERROR: Second argument (key type) in function KEYS.ADD_KEY_FROM_RAW_BYTES must be one of 'AES_CBC_PKCS', 'AES_GCM', but is 'invalid key type' [at 2:3]
  KEYS.ADD_KEY_FROM_RAW_BYTES(b'', 'invalid key type', CAST(value AS BYTES))
  ^
==

SELECT KEYS.ADD_KEY_FROM_RAW_BYTES(b'', 'AES_GCM', b'0123456789abcdef')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:keys.add_key_from_raw_bytes(BYTES, STRING, BYTES) -> BYTES)
    |     +-Literal(type=BYTES, value=b"")
    |     +-Literal(type=STRING, value="AES_GCM")
    |     +-Literal(type=BYTES, value=b"0123456789abcdef")
    +-input_scan=
      +-SingleRowScan
==

SELECT KEYS.ADD_KEY_FROM_RAW_BYTES(b'', 'AES_GCM', @test_param_bytes)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:keys.add_key_from_raw_bytes(BYTES, STRING, BYTES) -> BYTES)
    |     +-Literal(type=BYTES, value=b"")
    |     +-Literal(type=STRING, value="AES_GCM")
    |     +-Parameter(type=BYTES, name="test_param_bytes")
    +-input_scan=
      +-SingleRowScan
==

SELECT KEYS.ADD_KEY_FROM_RAW_BYTES(b'', 'AeS_gCm', NULL)
--
ERROR: Second argument (key type) in function KEYS.ADD_KEY_FROM_RAW_BYTES must be one of 'AES_CBC_PKCS', 'AES_GCM', but is 'AeS_gCm' [at 1:8]
SELECT KEYS.ADD_KEY_FROM_RAW_BYTES(b'', 'AeS_gCm', NULL)
       ^
==

SELECT KEYS.ADD_KEY_FROM_RAW_BYTES(b'', 'AES_GCM', CAST(value AS BYTES))
FROM KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:keys.add_key_from_raw_bytes(BYTES, STRING, BYTES) -> BYTES)
    |     +-Literal(type=BYTES, value=b"")
    |     +-Literal(type=STRING, value="AES_GCM")
    |     +-Cast(STRING -> BYTES)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
==

SELECT
  KEYS.ADD_KEY_FROM_RAW_BYTES(b'', @test_param_string, CAST(value AS BYTES))
FROM KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:keys.add_key_from_raw_bytes(BYTES, STRING, BYTES) -> BYTES)
    |     +-Literal(type=BYTES, value=b"")
    |     +-Parameter(type=STRING, name="test_param_string")
    |     +-Cast(STRING -> BYTES)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
==

SELECT KEYS.ROTATE_KEYSET(b'', NULL)
--
ERROR: Second argument (key type) in function KEYS.ROTATE_KEYSET must be a string literal or query parameter [at 1:8]
SELECT KEYS.ROTATE_KEYSET(b'', NULL)
       ^
==

SELECT KEYS.ROTATE_KEYSET(b'', 'invalid_key_type')
--
ERROR: Second argument (key type) in function KEYS.ROTATE_KEYSET must be one of 'AEAD_AES_GCM_256', 'DETERMINISTIC_AEAD_AES_SIV_CMAC_256', but is 'invalid_key_type' [at 1:8]
SELECT KEYS.ROTATE_KEYSET(b'', 'invalid_key_type')
       ^
==

SELECT KEYS.ROTATE_KEYSET(b'', 'AEAD_AES_GCM_256')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:keys.rotate_keyset(BYTES, STRING) -> BYTES)
    |     +-Literal(type=BYTES, value=b"")
    |     +-Literal(type=STRING, value="AEAD_AES_GCM_256")
    +-input_scan=
      +-SingleRowScan
==

SELECT KEYS.ROTATE_KEYSET(b'', 'DETERMINISTIC_AEAD_AES_SIV_CMAC_256')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:keys.rotate_keyset(BYTES, STRING) -> BYTES)
    |     +-Literal(type=BYTES, value=b"")
    |     +-Literal(type=STRING, value="DETERMINISTIC_AEAD_AES_SIV_CMAC_256")
    +-input_scan=
      +-SingleRowScan
==

SELECT KEYS.KEYSET_CHAIN(@test_param_string, b'0123456789abcdef')
FROM KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [STRUCT<kms_resource_name STRING, first_level_keyset BYTES, second_level_keyset BYTES>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:keys.keyset_chain(STRING, BYTES) -> STRUCT<kms_resource_name STRING, first_level_keyset BYTES, second_level_keyset BYTES>)
    |     +-Parameter(type=STRING, name="test_param_string")
    |     +-Literal(type=BYTES, value=b"0123456789abcdef")
    +-input_scan=
      +-TableScan(table=KeyValue)
==

SELECT KEYS.KEYSET_CHAIN(@test_param_string, b'0123456789abcdef', CAST(value AS BYTES))
FROM KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [STRUCT<kms_resource_name STRING, first_level_keyset BYTES, second_level_keyset BYTES>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:keys.keyset_chain(STRING, BYTES, BYTES) -> STRUCT<kms_resource_name STRING, first_level_keyset BYTES, second_level_keyset BYTES>)
    |     +-Parameter(type=STRING, name="test_param_string")
    |     +-Literal(type=BYTES, value=b"0123456789abcdef")
    |     +-Cast(STRING -> BYTES)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
==

SELECT KEYS.KEYSET_CHAIN(@test_param_string, CAST(@test_param_string AS BYTES), CAST(value AS BYTES))
FROM KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [STRUCT<kms_resource_name STRING, first_level_keyset BYTES, second_level_keyset BYTES>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:keys.keyset_chain(STRING, BYTES, BYTES) -> STRUCT<kms_resource_name STRING, first_level_keyset BYTES, second_level_keyset BYTES>)
    |     +-Parameter(type=STRING, name="test_param_string")
    |     +-Cast(STRING -> BYTES)
    |     | +-Parameter(type=STRING, name="test_param_string")
    |     +-Cast(STRING -> BYTES)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
==

SELECT AEAD.ENCRYPT(KEYS.KEYSET_CHAIN(@test_param_string, b'0123456789abcdef'), @test_param_string, @test_param_string)
FROM KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:aead.encrypt(STRUCT<kms_resource_name STRING, first_level_keyset BYTES, second_level_keyset BYTES>, STRING, STRING) -> BYTES)
    |     +-FunctionCall(ZetaSQL:keys.keyset_chain(STRING, BYTES) -> STRUCT<kms_resource_name STRING, first_level_keyset BYTES, second_level_keyset BYTES>)
    |     | +-Parameter(type=STRING, name="test_param_string")
    |     | +-Literal(type=BYTES, value=b"0123456789abcdef")
    |     +-Parameter(type=STRING, name="test_param_string")
    |     +-Parameter(type=STRING, name="test_param_string")
    +-input_scan=
      +-TableScan(table=KeyValue)
==

SELECT AEAD.ENCRYPT(KEYS.KEYSET_CHAIN(@test_param_string, b'0123456789abcdef'), CAST(@test_param_string AS BYTES), CAST(value AS BYTES))
FROM KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:aead.encrypt(STRUCT<kms_resource_name STRING, first_level_keyset BYTES, second_level_keyset BYTES>, BYTES, BYTES) -> BYTES)
    |     +-FunctionCall(ZetaSQL:keys.keyset_chain(STRING, BYTES) -> STRUCT<kms_resource_name STRING, first_level_keyset BYTES, second_level_keyset BYTES>)
    |     | +-Parameter(type=STRING, name="test_param_string")
    |     | +-Literal(type=BYTES, value=b"0123456789abcdef")
    |     +-Cast(STRING -> BYTES)
    |     | +-Parameter(type=STRING, name="test_param_string")
    |     +-Cast(STRING -> BYTES)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
==

SELECT AEAD.DECRYPT_STRING(KEYS.KEYSET_CHAIN(@test_param_string, b'0123456789abcdef'), CAST(@test_param_string AS BYTES), @test_param_string)
FROM KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:aead.decrypt_string(STRUCT<kms_resource_name STRING, first_level_keyset BYTES, second_level_keyset BYTES>, BYTES, STRING) -> STRING)
    |     +-FunctionCall(ZetaSQL:keys.keyset_chain(STRING, BYTES) -> STRUCT<kms_resource_name STRING, first_level_keyset BYTES, second_level_keyset BYTES>)
    |     | +-Parameter(type=STRING, name="test_param_string")
    |     | +-Literal(type=BYTES, value=b"0123456789abcdef")
    |     +-Cast(STRING -> BYTES)
    |     | +-Parameter(type=STRING, name="test_param_string")
    |     +-Parameter(type=STRING, name="test_param_string")
    +-input_scan=
      +-TableScan(table=KeyValue)
==

SELECT AEAD.DECRYPT_BYTES(KEYS.KEYSET_CHAIN(@test_param_string, b'0123456789abcdef'), CAST(@test_param_string AS BYTES), CAST(@test_param_string as BYTES))
FROM KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS "$col1" [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:aead.decrypt_bytes(STRUCT<kms_resource_name STRING, first_level_keyset BYTES, second_level_keyset BYTES>, BYTES, BYTES) -> BYTES)
    |     +-FunctionCall(ZetaSQL:keys.keyset_chain(STRING, BYTES) -> STRUCT<kms_resource_name STRING, first_level_keyset BYTES, second_level_keyset BYTES>)
    |     | +-Parameter(type=STRING, name="test_param_string")
    |     | +-Literal(type=BYTES, value=b"0123456789abcdef")
    |     +-Cast(STRING -> BYTES)
    |     | +-Parameter(type=STRING, name="test_param_string")
    |     +-Cast(STRING -> BYTES)
    |       +-Parameter(type=STRING, name="test_param_string")
    +-input_scan=
      +-TableScan(table=KeyValue)
==

SELECT KEYS.KEYSET_CHAIN(@test_param_string, CAST(value AS BYTES))
FROM KeyValue
--
ERROR: Argument 2 to KEYS.KEYSET_CHAIN must be a literal or query parameter [at 1:46]
SELECT KEYS.KEYSET_CHAIN(@test_param_string, CAST(value AS BYTES))
                                             ^
==

SELECT KEYS.KEYSET_CHAIN(@test_param_string, CAST(value AS BYTES), CAST(value AS BYTES))
FROM KeyValue
--
ERROR: Argument 2 to KEYS.KEYSET_CHAIN must be a literal or query parameter [at 1:46]
SELECT KEYS.KEYSET_CHAIN(@test_param_string, CAST(value AS BYTES), CAST(value...
                                             ^
==

SELECT KEYS.KEYSET_CHAIN(@test_param_string, NULL, NULL)
FROM KeyValue
--
ERROR: Argument 2 to KEYS.KEYSET_CHAIN must be non-NULL [at 1:46]
SELECT KEYS.KEYSET_CHAIN(@test_param_string, NULL, NULL)
                                             ^
==

SELECT KEYS.KEYSET_CHAIN(CAST(NULL AS BYTES), NULL, NULL)
--
ERROR: No matching signature for function KEYS.KEYSET_CHAIN for argument types: BYTES, NULL, NULL. Supported signatures: KEYS.KEYSET_CHAIN(STRING, BYTES, BYTES); KEYS.KEYSET_CHAIN(STRING, BYTES) [at 1:8]
SELECT KEYS.KEYSET_CHAIN(CAST(NULL AS BYTES), NULL, NULL)
       ^
==

SELECT KEYS.KEYSET_CHAIN(@test_param_string, CAST(NULL AS STRING))
--
ERROR: No matching signature for function KEYS.KEYSET_CHAIN for argument types: STRING, STRING. Supported signatures: KEYS.KEYSET_CHAIN(STRING, BYTES, BYTES); KEYS.KEYSET_CHAIN(STRING, BYTES) [at 1:8]
SELECT KEYS.KEYSET_CHAIN(@test_param_string, CAST(NULL AS STRING))
       ^
==

SELECT KEYS.KEYSET_CHAIN(@test_param_string, CAST(NULL AS STRING), NULL)
--
ERROR: No matching signature for function KEYS.KEYSET_CHAIN for argument types: STRING, STRING, NULL. Supported signatures: KEYS.KEYSET_CHAIN(STRING, BYTES, BYTES); KEYS.KEYSET_CHAIN(STRING, BYTES) [at 1:8]
SELECT KEYS.KEYSET_CHAIN(@test_param_string, CAST(NULL AS STRING), NULL)
       ^
==

SELECT KEYS.KEYSET_CHAIN(@test_param_string, CAST(value AS BYTES))
FROM KeyValue
--
ERROR: Argument 2 to KEYS.KEYSET_CHAIN must be a literal or query parameter [at 1:46]
SELECT KEYS.KEYSET_CHAIN(@test_param_string, CAST(value AS BYTES))
                                             ^
==

SELECT KEYS.KEYSET_CHAIN(@test_param_string, CAST(value AS BYTES), CAST(value AS BYTES))
FROM KeyValue
--
ERROR: Argument 2 to KEYS.KEYSET_CHAIN must be a literal or query parameter [at 1:46]
SELECT KEYS.KEYSET_CHAIN(@test_param_string, CAST(value AS BYTES), CAST(value...
                                             ^
