# max_rows_contributed added to anonymization options
[default language_features=ANONYMIZATION,ANONYMIZATION_CASE_INSENSITIVE_OPTIONS,DIFFERENTIAL_PRIVACY_MAX_ROWS_CONTRIBUTED,TABLESAMPLE,STRATIFIED_RESERVOIR_TABLESAMPLE,JSON_TYPE,JSON_VALUE_EXTRACTION_FUNCTIONS]
[default enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
select with anonymization options(max_rows_contributed = 5)
anon_count(*)
from SimpleTypesWithAnonymizationUid
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        +-anonymization_option_list=
          +-max_rows_contributed := Literal(type=INT64, value=5)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-SampleScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#14]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   +-method='RESERVOIR'
        |   +-size=
        |   | +-Literal(type=INT64, value=5)
        |   +-unit=ROWS
        |   +-partition_by_list=
        |     +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-Literal(type=INT64, value=1)
        | +-$k_threshold_col#17 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
        | +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#17)
        +-anonymization_option_list=
          +-max_rows_contributed := Literal(type=INT64, value=5)
==

# Don't bound contributions when max_rows_contributed is set to NULL
select with anonymization options(max_rows_contributed = NULL) anon_count(*)
from SimpleTypesWithAnonymizationUid
--

QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        +-anonymization_option_list=
          +-max_rows_contributed := Literal(type=INT64, value=NULL)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        | +-$k_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
        | +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#20)
        +-anonymization_option_list=
          +-max_rows_contributed := Literal(type=INT64, value=NULL)
==

# Count aggregation with max_rows_contributed
SELECT WITH ANONYMIZATION OPTIONS(max_rows_contributed = 3)
  ANON_COUNT(int64)
FROM SimpleTypesWithAnonymizationUid
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        |     +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-anonymization_option_list=
          +-max_rows_contributed := Literal(type=INT64, value=3)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-SampleScan
        |   +-column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#14]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   +-method='RESERVOIR'
        |   +-size=
        |   | +-Literal(type=INT64, value=3)
        |   +-unit=ROWS
        |   +-partition_by_list=
        |     +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
        | |     +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
        | |     | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        | |     +-Literal(type=INT64, value=0)
        | |     +-Literal(type=INT64, value=1)
        | +-$k_threshold_col#17 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
        | +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#17)
        +-anonymization_option_list=
          +-max_rows_contributed := Literal(type=INT64, value=3)
==

# COUNT and COUNT(*) aggregations with reports and max_rows_contributed
SELECT WITH ANONYMIZATION OPTIONS(max_rows_contributed = 3)
  ANON_COUNT({{*|int64}} WITH REPORT(format={{JSON|PROTO}}))
FROM SimpleTypesWithAnonymizationUid
--
ALTERNATION GROUP: *,JSON
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star_with_report_json(optional(0) INT64, optional(0) INT64) -> JSON)
        +-anonymization_option_list=
          +-max_rows_contributed := Literal(type=INT64, value=3)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-SampleScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#14]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   +-method='RESERVOIR'
        |   +-size=
        |   | +-Literal(type=INT64, value=3)
        |   +-unit=ROWS
        |   +-partition_by_list=
        |     +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:$anon_sum_with_report_json(INT64, optional(0) INT64, optional(0) INT64) -> JSON)
        | |   +-Literal(type=INT64, value=1)
        | +-$k_threshold_col#17 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
        | +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#17)
        +-anonymization_option_list=
          +-max_rows_contributed := Literal(type=INT64, value=3)
--
ALTERNATION GROUP: *,PROTO
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [PROTO<zetasql.AnonOutputWithReport>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star_with_report_proto(optional(0) INT64, optional(0) INT64) -> PROTO<zetasql.AnonOutputWithReport>)
        +-anonymization_option_list=
          +-max_rows_contributed := Literal(type=INT64, value=3)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [PROTO<zetasql.AnonOutputWithReport>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-SampleScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#14]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   +-method='RESERVOIR'
        |   +-size=
        |   | +-Literal(type=INT64, value=3)
        |   +-unit=ROWS
        |   +-partition_by_list=
        |     +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:$anon_sum_with_report_proto(INT64, optional(0) INT64, optional(0) INT64) -> PROTO<zetasql.AnonOutputWithReport>)
        | |   +-Literal(type=INT64, value=1)
        | +-$k_threshold_col#17 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
        | +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#17)
        +-anonymization_option_list=
          +-max_rows_contributed := Literal(type=INT64, value=3)
--
ALTERNATION GROUP: int64,JSON
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$anon_count_with_report_json(INT64, optional(0) INT64, optional(0) INT64) -> JSON)
        |     +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-anonymization_option_list=
          +-max_rows_contributed := Literal(type=INT64, value=3)

Rewrite ERROR: Unsupported aggregation: ANON_COUNT WITH REPORT while using max_rows_contributed
--
ALTERNATION GROUP: int64,PROTO
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [PROTO<zetasql.AnonOutputWithReport>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$anon_count_with_report_proto(INT64, optional(0) INT64, optional(0) INT64) -> PROTO<zetasql.AnonOutputWithReport>)
        |     +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-anonymization_option_list=
          +-max_rows_contributed := Literal(type=INT64, value=3)

Rewrite ERROR: Unsupported aggregation: ANON_COUNT WITH REPORT while using max_rows_contributed
==

# Invalid max_rows_contributed, specified twice
[language_features=ANONYMIZATION,ANONYMIZATION_CASE_INSENSITIVE_OPTIONS]
[default enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
select with anonymization options(max_rows_contributed = 5, MAX_ROWS_CONTRIBUTED = 5)
anon_count(*)
from SimpleTypesWithAnonymizationUid
--
ERROR: Duplicate anonymization option specified for 'MAX_ROWS_CONTRIBUTED' [at 1:61]
...anonymization options(max_rows_contributed = 5, MAX_ROWS_CONTRIBUTED = 5)
                                                   ^
==

# Invalid max_rows_contributed, because max_groups_contributed is also specified
[default enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
select with anonymization options(max_rows_contributed = 5, max_groups_contributed = 3)
anon_count(*)
from SimpleTypesWithAnonymizationUid
--
ERROR: At most one of the options kappa, max_groups_contributed, and max_rows_contributed may be specified in anonymization options, instead got: max_groups_contributed, max_rows_contributed [at 1:34]
select with anonymization options(max_rows_contributed = 5, max_groups_contri...
                                 ^
==

# Invalid max_rows_contributed, because kappa is also specified
[language_features=ANONYMIZATION,ANONYMIZATION_CASE_INSENSITIVE_OPTIONS]
[default enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
select with anonymization options(MAX_ROWS_CONTRIBUTED = 5, KAPPA = 2)
anon_count(*)
from SimpleTypesWithAnonymizationUid
--
ERROR: At most one of the options kappa, max_groups_contributed, and max_rows_contributed may be specified in anonymization options, instead got: kappa, max_rows_contributed [at 1:34]
select with anonymization options(MAX_ROWS_CONTRIBUTED = 5, KAPPA = 2)
                                 ^
==

# Invalid max_rows_contributed, because max_groups_contributed is also specified, with max_rows_contributed = NULL.
[language_features=ANONYMIZATION,ANONYMIZATION_CASE_INSENSITIVE_OPTIONS]
[default enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
select with anonymization options(max_rows_contributed = NULL, max_groups_contributed = 2)
anon_count(*)
from SimpleTypesWithAnonymizationUid
--
ERROR: At most one of the options kappa, max_groups_contributed, and max_rows_contributed may be specified in anonymization options, instead got: max_groups_contributed, max_rows_contributed [at 1:34]
select with anonymization options(max_rows_contributed = NULL, max_groups_con...
                                 ^
==

# Invalid max_rows_contributed, because max_groups_contributed is also specified, with max_groups_contributed = NULL.
[language_features=ANONYMIZATION,ANONYMIZATION_CASE_INSENSITIVE_OPTIONS]
[default enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
select with anonymization options(max_rows_contributed = 3, max_groups_contributed = NULL)
anon_count(*)
from SimpleTypesWithAnonymizationUid
--
ERROR: At most one of the options kappa, max_groups_contributed, and max_rows_contributed may be specified in anonymization options, instead got: max_groups_contributed, max_rows_contributed [at 1:34]
select with anonymization options(max_rows_contributed = 3, max_groups_contri...
                                 ^
==

# Invalid max_rows_contributed, because max_groups_contributed is also specified, with both options NULL.
[language_features=ANONYMIZATION,ANONYMIZATION_CASE_INSENSITIVE_OPTIONS]
[default enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
select with anonymization options(max_rows_contributed = NULL, max_groups_contributed = NULL)
anon_count(*)
from SimpleTypesWithAnonymizationUid
--
ERROR: At most one of the options kappa, max_groups_contributed, and max_rows_contributed may be specified in anonymization options, instead got: max_groups_contributed, max_rows_contributed [at 1:34]
select with anonymization options(max_rows_contributed = NULL, max_groups_con...
                                 ^
==

# Invalid max_rows_contributed < 1
select with anonymization options(max_rows_contributed = 0) anon_count(*)
from SimpleTypesWithAnonymizationUid
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        +-anonymization_option_list=
          +-max_rows_contributed := Literal(type=INT64, value=0)

Rewrite ERROR: Option MAX_ROWS_CONTRIBUTED must be an INT64 literal between 1 and 2147483647
==

# The privacy libraries only support L0 bounds that are int32s, not int64s.
# Since we derive the L0 bound from max_rows_contributed, we need to ensure that
# max_rows_contributed fits into an int32 too.
select with anonymization options(max_rows_contributed = 2147483648) anon_count(*)
from SimpleTypesWithAnonymizationUid
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        +-anonymization_option_list=
          +-max_rows_contributed := Literal(type=INT64, value=2147483648)

Rewrite ERROR: Option MAX_ROWS_CONTRIBUTED must be an INT64 literal between 1 and 2147483647

==

# Invalid max_rows_contributed type
select with anonymization options(max_rows_contributed = 2.0) anon_count(*)
from SimpleTypesWithAnonymizationUid
--
ERROR: Anonymization option max_rows_contributed value has type DOUBLE which cannot be coerced to expected type INT64 [at 1:58]
select with anonymization options(max_rows_contributed = 2.0) anon_count(*)
                                                         ^
==

# Invalid max_rows_contributed, non-literal
select with anonymization options(max_rows_contributed = 1+2) anon_count(*)
from SimpleTypesWithAnonymizationUid
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        +-anonymization_option_list=
          +-max_rows_contributed :=
            +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              +-Literal(type=INT64, value=1)
              +-Literal(type=INT64, value=2)

Rewrite ERROR: Option MAX_ROWS_CONTRIBUTED must be an INT64 literal between 1 and 2147483647
==

# Invalid max_rows_contributed, parameter
select with anonymization options(max_rows_contributed = @test_param_int64) anon_count(*)
from SimpleTypesWithAnonymizationUid
--

[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        +-anonymization_option_list=
          +-max_rows_contributed := Parameter(type=INT64, name='test_param_int64')

Rewrite ERROR: Option MAX_ROWS_CONTRIBUTED must be an INT64 literal between 1 and 2147483647
==

[language_features=ANONYMIZATION]
# When the DIFFERENTIAL_PRIVACY_MAX_ROWS_CONTRIBUTED feature is not enabled,
# using max_rows_contributed is an error.
select with anonymization options(max_rows_contributed = 5)
anon_count(*)
from SimpleTypesWithAnonymizationUid
--
ERROR: max_rows_contributed is not supported [at 3:34]
select with anonymization options(max_rows_contributed = 5)
                                 ^
