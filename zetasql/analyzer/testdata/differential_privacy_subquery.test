# Specify WITH DIFFERENTIAL_PRIVACY with an EXISTS subquery.
[default language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS,NUMERIC_TYPE]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT uid FROM SimpleTypesWithAnonymizationUid)
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#25 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-161
    +-column_list=[$aggregate.aggregation_count#25]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.aggregation_count#25]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=68-99, table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=113-160
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=113-160
        |           +-column_list=[SimpleTypesWithAnonymizationUid.uid#23]
        |           +-input_scan=
        |             +-TableScan(parse_location=129-160, column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        +-aggregate_list=
          +-aggregation_count#25 :=
            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              +-parse_location=33-38
              +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
[REPLACED_LITERALS]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT uid FROM SimpleTypesWithAnonymizationUid)

Rewrite ERROR: Reading the table SimpleTypesWithAnonymizationUid containing user data in expression subqueries is not allowed [at 3:30]
WHERE EXISTS(SELECT uid FROM SimpleTypesWithAnonymizationUid)
                             ^
==

# Specify WITH DIFFERENTIAL_PRIVACY with an EXISTS subquery.
[language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS,NUMERIC_TYPE,TABLE_VALUED_FUNCTIONS]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT uid FROM tvf_no_args_with_anonymization_uid())
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#25 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-166
    +-column_list=[$aggregate.aggregation_count#25]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.aggregation_count#25]
        +-input_scan=
        | +-FilterScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11]
        |   +-input_scan=
        |   | +-TableScan(parse_location=68-99, column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=113-165
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-parameter_list=
        |       | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=113-165
        |           +-column_list=[$expr_subquery.uid#24]
        |           +-expr_list=
        |           | +-uid#24 := ColumnRef(parse_location=120-123, type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11, is_correlated=TRUE)
        |           +-input_scan=
        |             +-TVFScan(parse_location=129-163, tvf=tvf_no_args_with_anonymization_uid(() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>), signature=() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>)
        +-aggregate_list=
          +-aggregation_count#25 :=
            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              +-parse_location=33-38
              +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
[REPLACED_LITERALS]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT uid FROM tvf_no_args_with_anonymization_uid())

Rewrite ERROR: Reading the TVF tvf_no_args_with_anonymization_uid containing user data in expression subqueries is not allowed [at 3:30]
WHERE EXISTS(SELECT uid FROM tvf_no_args_with_anonymization_uid())
                             ^
==

# Specify WITH DIFFERENTIAL_PRIVACY with an EXISTS subquery.
[language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS,NUMERIC_TYPE,TABLE_VALUED_FUNCTIONS]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT 1
FROM SimpleTypes
WHERE EXISTS(SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*)
             FROM tvf_no_args_with_anonymization_uid())
--
QueryStmt
+-output_column_list=
| +-$query.$col1#31 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-136
    +-column_list=[$query.$col1#31]
    +-expr_list=
    | +-$col1#31 := Literal(parse_location=7-8, type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(parse_location=14-25, table=SimpleTypes)
        +-filter_expr=
          +-SubqueryExpr
            +-parse_location=39-135
            +-type=BOOL
            +-subquery_type=EXISTS
            +-subquery=
              +-ProjectScan
                +-parse_location=39-135
                +-column_list=[$aggregate.$agg1#30]
                +-input_scan=
                  +-DifferentialPrivacyAggregateScan
                    +-column_list=[$aggregate.$agg1#30]
                    +-input_scan=
                    | +-TVFScan(parse_location=99-133, tvf=tvf_no_args_with_anonymization_uid(() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>), signature=() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>)
                    +-aggregate_list=
                      +-$agg1#30 :=
                        +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                          +-parse_location=72-77
                          +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
[REPLACED_LITERALS]
SELECT @_p0_INT64
FROM SimpleTypes
WHERE EXISTS(SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*)
             FROM tvf_no_args_with_anonymization_uid())

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#31 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-136
    +-column_list=[$query.$col1#31]
    +-expr_list=
    | +-$col1#31 := Literal(parse_location=7-8, type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(parse_location=14-25, table=SimpleTypes)
        +-filter_expr=
          +-SubqueryExpr
            +-parse_location=39-135
            +-type=BOOL
            +-subquery_type=EXISTS
            +-subquery=
              +-ProjectScan
                +-parse_location=39-135
                +-column_list=[$aggregate.$agg1#30]
                +-input_scan=
                  +-DifferentialPrivacyAggregateScan
                    +-column_list=[$aggregate.$agg1#30]
                    +-input_scan=
                    | +-AggregateScan
                    |   +-column_list=[$aggregate.$agg1_partial#34, $group_by.$uid#35]
                    |   +-input_scan=
                    |   | +-TVFScan(parse_location=99-133, column_list=[tvf_no_args_with_anonymization_uid.column_int64#32], tvf=tvf_no_args_with_anonymization_uid(() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>), signature=() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>, column_index_list=[6])
                    |   +-group_by_list=
                    |   | +-$uid#35 := ColumnRef(type=INT64, column=tvf_no_args_with_anonymization_uid.column_int64#32)
                    |   +-aggregate_list=
                    |     +-$agg1_partial#34 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                    +-aggregate_list=
                    | +-$agg1#30 :=
                    | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                    | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#34)
                    | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
                    | +-$group_selection_threshold_col#38 :=
                    |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                    |     +-Literal(type=INT64, value=1)
                    |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
                    +-group_selection_threshold_expr=
                      +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#38)
==

# Read from a table containing a 'uid' in an expression subquery, without WITH
# DIFFERENTIAL_PRIVACY.
# This query pattern is out of scope: the rewriter does nothing because there's
# no DP entry point.
[language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS,NUMERIC_TYPE,TABLE_VALUED_FUNCTIONS]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT 1
FROM SimpleTypes
WHERE EXISTS(SELECT * FROM SimpleTypesWithAnonymizationUid)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#31 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-85
    +-column_list=[$query.$col1#31]
    +-expr_list=
    | +-$col1#31 := Literal(parse_location=7-8, type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(parse_location=14-25, table=SimpleTypes)
        +-filter_expr=
          +-SubqueryExpr
            +-parse_location=39-84
            +-type=BOOL
            +-subquery_type=EXISTS
            +-subquery=
              +-ProjectScan
                +-parse_location=39-84
                +-column_list=SimpleTypesWithAnonymizationUid.[int32#19, int64#20, uint32#21, uint64#22, string#23, bytes#24, bool#25, float#26, double#27, date#28, uid#29, numeric#30]
                +-input_scan=
                  +-TableScan(parse_location=53-84, column_list=SimpleTypesWithAnonymizationUid.[int32#19, int64#20, uint32#21, uint64#22, string#23, bytes#24, bool#25, float#26, double#27, date#28, uid#29, numeric#30], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
[REPLACED_LITERALS]
SELECT @_p0_INT64
FROM SimpleTypes
WHERE EXISTS(SELECT * FROM SimpleTypesWithAnonymizationUid)
==

# Read from a TVF containing a 'uid' in an expression subquery, without WITH
# DIFFERENTIAL_PRIVACY.
# This query pattern is out of scope: the rewriter does nothing because there's
# no DP entry point.
[language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS,NUMERIC_TYPE,TABLE_VALUED_FUNCTIONS]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT 1
FROM SimpleTypes
WHERE EXISTS(SELECT * FROM tvf_no_args_with_anonymization_uid())
--
QueryStmt
+-output_column_list=
| +-$query.$col1#30 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-90
    +-column_list=[$query.$col1#30]
    +-expr_list=
    | +-$col1#30 := Literal(parse_location=7-8, type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(parse_location=14-25, table=SimpleTypes)
        +-filter_expr=
          +-SubqueryExpr
            +-parse_location=39-89
            +-type=BOOL
            +-subquery_type=EXISTS
            +-subquery=
              +-ProjectScan
                +-parse_location=39-89
                +-column_list=tvf_no_args_with_anonymization_uid.[column_bool#19, column_bytes#20, column_date#21, column_double#22, column_float#23, column_int32#24, column_int64#25, column_string#26, column_time#27, column_uint32#28, column_uint64#29]
                +-input_scan=
                  +-TVFScan(parse_location=53-87, column_list=tvf_no_args_with_anonymization_uid.[column_bool#19, column_bytes#20, column_date#21, column_double#22, column_float#23, column_int32#24, column_int64#25, column_string#26, column_time#27, column_uint32#28, column_uint64#29], tvf=tvf_no_args_with_anonymization_uid(() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>), signature=() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
[REPLACED_LITERALS]
SELECT @_p0_INT64
FROM SimpleTypes
WHERE EXISTS(SELECT * FROM tvf_no_args_with_anonymization_uid())
==

# Specify WITH DIFFERENTIAL_PRIVACY with an EXISTS subquery, and there is no 'uid' in
# the subquery.
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT int64 FROM SimpleTypes)
--
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#31 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.aggregation_count#31]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.aggregation_count#31]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-column_list=[SimpleTypes.int64#14]
        |           +-input_scan=
        |             +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        +-aggregate_list=
          +-aggregation_count#31 :=
            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              +-Literal(type=STRUCT<INT64, INT64>, value=NULL)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#31 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.aggregation_count#31]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.aggregation_count#31]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.aggregation_count_partial#34, $group_by.$uid#35]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#32]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#32], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   +-filter_expr=
        |   |     +-SubqueryExpr
        |   |       +-type=BOOL
        |   |       +-subquery_type=EXISTS
        |   |       +-subquery=
        |   |         +-ProjectScan
        |   |           +-column_list=[SimpleTypes.int64#14]
        |   |           +-input_scan=
        |   |             +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   +-group_by_list=
        |   | +-$uid#35 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#32)
        |   +-aggregate_list=
        |     +-aggregation_count_partial#34 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-aggregation_count#31 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.aggregation_count_partial#34)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#38 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#38)
==

# Specify WITH DIFFERENTIAL_PRIVACY with an EXISTS subquery, and there is no 'uid' in
# the subquery.
[language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS,NUMERIC_TYPE,TABLE_VALUED_FUNCTIONS]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT * FROM tvf_no_args())
--
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#15 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.aggregation_count#15]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.aggregation_count#15]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-column_list=tvf_no_args.[column_bool#13, column_bytes#14]
        |           +-input_scan=
        |             +-TVFScan(column_list=tvf_no_args.[column_bool#13, column_bytes#14], tvf=tvf_no_args(() -> TABLE<column_bool BOOL, column_bytes BYTES>), signature=() -> TABLE<column_bool BOOL, column_bytes BYTES>, column_index_list=[0, 1])
        +-aggregate_list=
          +-aggregation_count#15 :=
            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              +-Literal(type=STRUCT<INT64, INT64>, value=NULL)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#15 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.aggregation_count#15]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.aggregation_count#15]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.aggregation_count_partial#18, $group_by.$uid#19]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#16]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#16], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   +-filter_expr=
        |   |     +-SubqueryExpr
        |   |       +-type=BOOL
        |   |       +-subquery_type=EXISTS
        |   |       +-subquery=
        |   |         +-ProjectScan
        |   |           +-column_list=tvf_no_args.[column_bool#13, column_bytes#14]
        |   |           +-input_scan=
        |   |             +-TVFScan(column_list=tvf_no_args.[column_bool#13, column_bytes#14], tvf=tvf_no_args(() -> TABLE<column_bool BOOL, column_bytes BYTES>), signature=() -> TABLE<column_bool BOOL, column_bytes BYTES>, column_index_list=[0, 1])
        |   +-group_by_list=
        |   | +-$uid#19 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#16)
        |   +-aggregate_list=
        |     +-aggregation_count_partial#18 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-aggregation_count#15 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.aggregation_count_partial#18)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#22 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#22)
==

# One query pattern encountered by an F1 user is (see b/180509852 for more
# details).
# We can't run the unparser because the rewrite generates TABLESAMPLE and the
# TABLESAMPLE feature is not turned on.
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[no_run_unparser]
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (epsilon=0.02, delta=0.0000002, max_groups_contributed=100)
  t.uid,
  COUNT(*, contribution_bounds_per_group => (0, 1)) weight
FROM ArrayWithAnonymizationUid t
WHERE
  (SELECT
     ANY_VALUE(e)
   FROM UNNEST(ARRAY<INT32>[24, 31]) e
   WHERE e IN UNNEST(t.int64_array)
  ) IS NOT NULL
GROUP BY uid ORDER BY weight DESC;
--
QueryStmt
+-output_column_list=
| +-$groupby.uid#7 AS uid [INT64]
| +-$aggregate.weight#6 AS weight [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$groupby.uid#7, $aggregate.weight#6]
    +-is_ordered=TRUE
    +-input_scan=
    | +-DifferentialPrivacyAggregateScan
    |   +-column_list=[$groupby.uid#7, $aggregate.weight#6]
    |   +-input_scan=
    |   | +-FilterScan
    |   |   +-column_list=ArrayWithAnonymizationUid.[int64_array#1, uid#3]
    |   |   +-input_scan=
    |   |   | +-TableScan(column_list=ArrayWithAnonymizationUid.[int64_array#1, uid#3], table=ArrayWithAnonymizationUid, column_index_list=[0, 2], alias="t")
    |   |   +-filter_expr=
    |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |   |       +-FunctionCall(ZetaSQL:$is_null(INT32) -> BOOL)
    |   |         +-SubqueryExpr
    |   |           +-type=INT32
    |   |           +-subquery_type=SCALAR
    |   |           +-parameter_list=
    |   |           | +-ColumnRef(type=ARRAY<INT64>, column=ArrayWithAnonymizationUid.int64_array#1)
    |   |           +-subquery=
    |   |             +-ProjectScan
    |   |               +-column_list=[$aggregate.$agg1#5]
    |   |               +-input_scan=
    |   |                 +-AggregateScan
    |   |                   +-column_list=[$aggregate.$agg1#5]
    |   |                   +-input_scan=
    |   |                   | +-FilterScan
    |   |                   |   +-column_list=[$array.e#4]
    |   |                   |   +-input_scan=
    |   |                   |   | +-ArrayScan
    |   |                   |   |   +-column_list=[$array.e#4]
    |   |                   |   |   +-array_expr=
    |   |                   |   |   | +-Literal(type=ARRAY<INT32>, value=[24, 31], has_explicit_type=TRUE)
    |   |                   |   |   +-element_column=$array.e#4
    |   |                   |   +-filter_expr=
    |   |                   |     +-FunctionCall(ZetaSQL:$in_array(INT64, ARRAY<INT64>) -> BOOL)
    |   |                   |       +-Cast(INT32 -> INT64)
    |   |                   |       | +-ColumnRef(type=INT32, column=$array.e#4)
    |   |                   |       +-ColumnRef(type=ARRAY<INT64>, column=ArrayWithAnonymizationUid.int64_array#1, is_correlated=TRUE)
    |   |                   +-aggregate_list=
    |   |                     +-$agg1#5 :=
    |   |                       +-AggregateFunctionCall(ZetaSQL:any_value(INT32) -> INT32)
    |   |                         +-ColumnRef(type=INT32, column=$array.e#4)
    |   +-group_by_list=
    |   | +-uid#7 := ColumnRef(type=INT64, column=ArrayWithAnonymizationUid.uid#3)
    |   +-aggregate_list=
    |   | +-weight#6 :=
    |   |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    |   |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
    |   +-option_list=
    |     +-epsilon := Literal(type=DOUBLE, value=0.02, float_literal_id=1)
    |     +-delta := Literal(type=DOUBLE, value=2e-07, float_literal_id=2)
    |     +-max_groups_contributed := Literal(type=INT64, value=100)
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
        | +-ColumnRef(type=INT64, column=$aggregate.weight#6)
        +-is_descending=TRUE


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.uid#7 AS uid [INT64]
| +-$aggregate.weight#6 AS weight [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$groupby.uid#7, $aggregate.weight#6]
    +-is_ordered=TRUE
    +-input_scan=
    | +-DifferentialPrivacyAggregateScan
    |   +-column_list=[$groupby.uid#7, $aggregate.weight#6]
    |   +-input_scan=
    |   | +-SampleScan
    |   |   +-column_list=[$aggregate.weight_partial#9, $groupby.uid_partial#10, $group_by.$uid#11]
    |   |   +-input_scan=
    |   |   | +-AggregateScan
    |   |   |   +-column_list=[$aggregate.weight_partial#9, $groupby.uid_partial#10, $group_by.$uid#11]
    |   |   |   +-input_scan=
    |   |   |   | +-FilterScan
    |   |   |   |   +-column_list=ArrayWithAnonymizationUid.[int64_array#1, uid#3]
    |   |   |   |   +-input_scan=
    |   |   |   |   | +-TableScan(column_list=ArrayWithAnonymizationUid.[int64_array#1, uid#3], table=ArrayWithAnonymizationUid, column_index_list=[0, 2], alias="t")
    |   |   |   |   +-filter_expr=
    |   |   |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |   |   |   |       +-FunctionCall(ZetaSQL:$is_null(INT32) -> BOOL)
    |   |   |   |         +-SubqueryExpr
    |   |   |   |           +-type=INT32
    |   |   |   |           +-subquery_type=SCALAR
    |   |   |   |           +-parameter_list=
    |   |   |   |           | +-ColumnRef(type=ARRAY<INT64>, column=ArrayWithAnonymizationUid.int64_array#1)
    |   |   |   |           +-subquery=
    |   |   |   |             +-ProjectScan
    |   |   |   |               +-column_list=[$aggregate.$agg1#5]
    |   |   |   |               +-input_scan=
    |   |   |   |                 +-AggregateScan
    |   |   |   |                   +-column_list=[$aggregate.$agg1#5]
    |   |   |   |                   +-input_scan=
    |   |   |   |                   | +-FilterScan
    |   |   |   |                   |   +-column_list=[$array.e#4]
    |   |   |   |                   |   +-input_scan=
    |   |   |   |                   |   | +-ArrayScan
    |   |   |   |                   |   |   +-column_list=[$array.e#4]
    |   |   |   |                   |   |   +-array_expr=
    |   |   |   |                   |   |   | +-Literal(type=ARRAY<INT32>, value=[24, 31], has_explicit_type=TRUE)
    |   |   |   |                   |   |   +-element_column=$array.e#4
    |   |   |   |                   |   +-filter_expr=
    |   |   |   |                   |     +-FunctionCall(ZetaSQL:$in_array(INT64, ARRAY<INT64>) -> BOOL)
    |   |   |   |                   |       +-Cast(INT32 -> INT64)
    |   |   |   |                   |       | +-ColumnRef(type=INT32, column=$array.e#4)
    |   |   |   |                   |       +-ColumnRef(type=ARRAY<INT64>, column=ArrayWithAnonymizationUid.int64_array#1, is_correlated=TRUE)
    |   |   |   |                   +-aggregate_list=
    |   |   |   |                     +-$agg1#5 :=
    |   |   |   |                       +-AggregateFunctionCall(ZetaSQL:any_value(INT32) -> INT32)
    |   |   |   |                         +-ColumnRef(type=INT32, column=$array.e#4)
    |   |   |   +-group_by_list=
    |   |   |   | +-uid_partial#10 := ColumnRef(type=INT64, column=ArrayWithAnonymizationUid.uid#3)
    |   |   |   | +-$uid#11 := ColumnRef(type=INT64, column=ArrayWithAnonymizationUid.uid#3)
    |   |   |   +-aggregate_list=
    |   |   |     +-weight_partial#9 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    |   |   +-method="RESERVOIR"
    |   |   +-size=
    |   |   | +-Literal(type=INT64, value=100)
    |   |   +-unit=ROWS
    |   |   +-partition_by_list=
    |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#11)
    |   +-group_by_list=
    |   | +-uid#7 := ColumnRef(type=INT64, column=$groupby.uid_partial#10)
    |   +-aggregate_list=
    |   | +-weight#6 :=
    |   | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    |   | |   +-ColumnRef(type=INT64, column=$aggregate.weight_partial#9)
    |   | |   +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
    |   | +-$group_selection_threshold_col#14 :=
    |   |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    |   |     +-Literal(type=INT64, value=1)
    |   |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
    |   +-group_selection_threshold_expr=
    |   | +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#14)
    |   +-option_list=
    |     +-epsilon := Literal(type=DOUBLE, value=0.02, float_literal_id=1)
    |     +-delta := Literal(type=DOUBLE, value=2e-07, float_literal_id=2)
    |     +-max_groups_contributed := Literal(type=INT64, value=100)
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
        | +-ColumnRef(type=INT64, column=$aggregate.weight#6)
        +-is_descending=TRUE
==

# Specify WITH DIFFERENTIAL_PRIVACY with an EXISTS subquery, and there is no 'uid'
# selected in the subquery.
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT int64 FROM SimpleTypesWithAnonymizationUid)
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#25 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-163
    +-column_list=[$aggregate.aggregation_count#25]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.aggregation_count#25]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=68-99, table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=113-162
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=113-162
        |           +-column_list=[SimpleTypesWithAnonymizationUid.int64#14]
        |           +-input_scan=
        |             +-TableScan(parse_location=131-162, column_list=[SimpleTypesWithAnonymizationUid.int64#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
          +-aggregation_count#25 :=
            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              +-parse_location=33-38
              +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
[REPLACED_LITERALS]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT int64 FROM SimpleTypesWithAnonymizationUid)

Rewrite ERROR: Reading the table SimpleTypesWithAnonymizationUid containing user data in expression subqueries is not allowed [at 3:32]
WHERE EXISTS(SELECT int64 FROM SimpleTypesWithAnonymizationUid)
                               ^
==

# A simple select statement on a table with user id is allowed.
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
SELECT int64 FROM SimpleTypesWithAnonymizationUid
--
QueryStmt
+-output_column_list=
| +-SimpleTypesWithAnonymizationUid.int64#2 AS int64 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[SimpleTypesWithAnonymizationUid.int64#2]
    +-input_scan=
      +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
==

# Nested expression subqueries. uid -> no_uid -> uid
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE 123 IN (
    SELECT int64
    FROM SimpleTypes
    WHERE EXISTS(SELECT int64_array FROM ArrayWithAnonymizationUid))
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#34 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-221
    +-column_list=[$aggregate.aggregation_count#34]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.aggregation_count#34]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=68-99, table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=119-220
        |       +-type=BOOL
        |       +-subquery_type=IN
        |       +-in_expr=
        |       | +-Literal(parse_location=106-109, type=INT64, value=123)
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=119-220
        |           +-column_list=[SimpleTypes.int64#14]
        |           +-input_scan=
        |             +-FilterScan
        |               +-column_list=[SimpleTypes.int64#14]
        |               +-input_scan=
        |               | +-TableScan(parse_location=141-152, column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |               +-filter_expr=
        |                 +-SubqueryExpr
        |                   +-parse_location=170-219
        |                   +-type=BOOL
        |                   +-subquery_type=EXISTS
        |                   +-subquery=
        |                     +-ProjectScan
        |                       +-parse_location=170-219
        |                       +-column_list=[ArrayWithAnonymizationUid.int64_array#31]
        |                       +-input_scan=
        |                         +-TableScan(parse_location=194-219, column_list=[ArrayWithAnonymizationUid.int64_array#31], table=ArrayWithAnonymizationUid, column_index_list=[0])
        +-aggregate_list=
          +-aggregation_count#34 :=
            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              +-parse_location=33-38
              +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
[REPLACED_LITERALS]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE @_p0_INT64 IN (
    SELECT int64
    FROM SimpleTypes
    WHERE EXISTS(SELECT int64_array FROM ArrayWithAnonymizationUid))

Rewrite ERROR: Reading the table ArrayWithAnonymizationUid containing user data in expression subqueries is not allowed [at 6:42]
    WHERE EXISTS(SELECT int64_array FROM ArrayWithAnonymizationUid))
                                         ^
==

# Nested expression subqueries. uid -> uid -> no_uid
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(
    SELECT int64_array
    FROM ArrayWithAnonymizationUid
    WHERE 123 IN (SELECT int64 FROM SimpleTypes))
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#34 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-221
    +-column_list=[$aggregate.aggregation_count#34]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.aggregation_count#34]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=68-99, table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=118-220
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=118-220
        |           +-column_list=[ArrayWithAnonymizationUid.int64_array#13]
        |           +-input_scan=
        |             +-FilterScan
        |               +-column_list=[ArrayWithAnonymizationUid.int64_array#13]
        |               +-input_scan=
        |               | +-TableScan(parse_location=146-171, column_list=[ArrayWithAnonymizationUid.int64_array#13], table=ArrayWithAnonymizationUid, column_index_list=[0])
        |               +-filter_expr=
        |                 +-SubqueryExpr
        |                   +-parse_location=190-219
        |                   +-type=BOOL
        |                   +-subquery_type=IN
        |                   +-in_expr=
        |                   | +-Literal(parse_location=182-185, type=INT64, value=123)
        |                   +-subquery=
        |                     +-ProjectScan
        |                       +-parse_location=190-219
        |                       +-column_list=[SimpleTypes.int64#17]
        |                       +-input_scan=
        |                         +-TableScan(parse_location=208-219, column_list=[SimpleTypes.int64#17], table=SimpleTypes, column_index_list=[1])
        +-aggregate_list=
          +-aggregation_count#34 :=
            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              +-parse_location=33-38
              +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
[REPLACED_LITERALS]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(
    SELECT int64_array
    FROM ArrayWithAnonymizationUid
    WHERE @_p0_INT64 IN (SELECT int64 FROM SimpleTypes))

Rewrite ERROR: Reading the table ArrayWithAnonymizationUid containing user data in expression subqueries is not allowed [at 5:10]
    FROM ArrayWithAnonymizationUid
         ^
==

# Nested expression subqueries. uid -> no_uid -> no_uid
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(
    SELECT int64
    FROM SimpleTypes
    WHERE EXISTS(SELECT int32 FROM SimpleTypes))
--
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#49 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-200
    +-column_list=[$aggregate.aggregation_count#49]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.aggregation_count#49]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=68-99, table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=118-199
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=118-199
        |           +-column_list=[SimpleTypes.int64#14]
        |           +-input_scan=
        |             +-FilterScan
        |               +-column_list=[SimpleTypes.int64#14]
        |               +-input_scan=
        |               | +-TableScan(parse_location=140-151, column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |               +-filter_expr=
        |                 +-SubqueryExpr
        |                   +-parse_location=169-198
        |                   +-type=BOOL
        |                   +-subquery_type=EXISTS
        |                   +-subquery=
        |                     +-ProjectScan
        |                       +-parse_location=169-198
        |                       +-column_list=[SimpleTypes.int32#31]
        |                       +-input_scan=
        |                         +-TableScan(parse_location=187-198, column_list=[SimpleTypes.int32#31], table=SimpleTypes, column_index_list=[0])
        +-aggregate_list=
          +-aggregation_count#49 :=
            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              +-parse_location=33-38
              +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
[REPLACED_LITERALS]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(
    SELECT int64
    FROM SimpleTypes
    WHERE EXISTS(SELECT int32 FROM SimpleTypes))

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#49 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-200
    +-column_list=[$aggregate.aggregation_count#49]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.aggregation_count#49]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.aggregation_count_partial#52, $group_by.$uid#53]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#50]
        |   |   +-input_scan=
        |   |   | +-TableScan(parse_location=68-99, column_list=[SimpleTypesWithAnonymizationUid.uid#50], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   +-filter_expr=
        |   |     +-SubqueryExpr
        |   |       +-parse_location=118-199
        |   |       +-type=BOOL
        |   |       +-subquery_type=EXISTS
        |   |       +-subquery=
        |   |         +-ProjectScan
        |   |           +-parse_location=118-199
        |   |           +-column_list=[SimpleTypes.int64#14]
        |   |           +-input_scan=
        |   |             +-FilterScan
        |   |               +-column_list=[SimpleTypes.int64#14]
        |   |               +-input_scan=
        |   |               | +-TableScan(parse_location=140-151, column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |               +-filter_expr=
        |   |                 +-SubqueryExpr
        |   |                   +-parse_location=169-198
        |   |                   +-type=BOOL
        |   |                   +-subquery_type=EXISTS
        |   |                   +-subquery=
        |   |                     +-ProjectScan
        |   |                       +-parse_location=169-198
        |   |                       +-column_list=[SimpleTypes.int32#31]
        |   |                       +-input_scan=
        |   |                         +-TableScan(parse_location=187-198, column_list=[SimpleTypes.int32#31], table=SimpleTypes, column_index_list=[0])
        |   +-group_by_list=
        |   | +-$uid#53 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#50)
        |   +-aggregate_list=
        |     +-aggregation_count_partial#52 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-aggregation_count#49 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.aggregation_count_partial#52)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#56 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#56)
==

# Nested expression subqueries. uid -> uid -> uid
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE 123 IN (
    SELECT int64
    FROM SimpleTypesWithAnonymizationUid
    WHERE EXISTS(SELECT int64_array FROM ArrayWithAnonymizationUid))
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#28 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-241
    +-column_list=[$aggregate.aggregation_count#28]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.aggregation_count#28]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=68-99, table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=119-240
        |       +-type=BOOL
        |       +-subquery_type=IN
        |       +-in_expr=
        |       | +-Literal(parse_location=106-109, type=INT64, value=123)
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=119-240
        |           +-column_list=[SimpleTypesWithAnonymizationUid.int64#14]
        |           +-input_scan=
        |             +-FilterScan
        |               +-column_list=[SimpleTypesWithAnonymizationUid.int64#14]
        |               +-input_scan=
        |               | +-TableScan(parse_location=141-172, column_list=[SimpleTypesWithAnonymizationUid.int64#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |               +-filter_expr=
        |                 +-SubqueryExpr
        |                   +-parse_location=190-239
        |                   +-type=BOOL
        |                   +-subquery_type=EXISTS
        |                   +-subquery=
        |                     +-ProjectScan
        |                       +-parse_location=190-239
        |                       +-column_list=[ArrayWithAnonymizationUid.int64_array#25]
        |                       +-input_scan=
        |                         +-TableScan(parse_location=214-239, column_list=[ArrayWithAnonymizationUid.int64_array#25], table=ArrayWithAnonymizationUid, column_index_list=[0])
        +-aggregate_list=
          +-aggregation_count#28 :=
            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              +-parse_location=33-38
              +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
[REPLACED_LITERALS]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE @_p0_INT64 IN (
    SELECT int64
    FROM SimpleTypesWithAnonymizationUid
    WHERE EXISTS(SELECT int64_array FROM ArrayWithAnonymizationUid))

Rewrite ERROR: Reading the table SimpleTypesWithAnonymizationUid containing user data in expression subqueries is not allowed [at 5:10]
    FROM SimpleTypesWithAnonymizationUid
         ^
==

# Anonymization node in an expression subquery
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT int64
FROM SimpleTypes
WHERE 123 IN (
    SELECT WITH DIFFERENTIAL_PRIVACY SUM(int64)
    FROM SimpleTypesWithAnonymizationUid)
--
QueryStmt
+-output_column_list=
| +-SimpleTypes.int64#2 AS int64 [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-134
    +-column_list=[SimpleTypes.int64#2]
    +-input_scan=
      +-FilterScan
        +-column_list=[SimpleTypes.int64#2]
        +-input_scan=
        | +-TableScan(parse_location=18-29, column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        +-filter_expr=
          +-SubqueryExpr
            +-parse_location=49-133
            +-type=BOOL
            +-subquery_type=IN
            +-in_expr=
            | +-Literal(parse_location=36-39, type=INT64, value=123)
            +-subquery=
              +-ProjectScan
                +-parse_location=49-133
                +-column_list=[$aggregate.$agg1#31]
                +-input_scan=
                  +-DifferentialPrivacyAggregateScan
                    +-column_list=[$aggregate.$agg1#31]
                    +-input_scan=
                    | +-TableScan(parse_location=102-133, column_list=[SimpleTypesWithAnonymizationUid.int64#20], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
                    +-aggregate_list=
                      +-$agg1#31 :=
                        +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                          +-parse_location=82-85
                          +-ColumnRef(parse_location=86-91, type=INT64, column=SimpleTypesWithAnonymizationUid.int64#20)
                          +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
[REPLACED_LITERALS]
SELECT int64
FROM SimpleTypes
WHERE @_p0_INT64 IN (
    SELECT WITH DIFFERENTIAL_PRIVACY SUM(int64)
    FROM SimpleTypesWithAnonymizationUid)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-SimpleTypes.int64#2 AS int64 [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-134
    +-column_list=[SimpleTypes.int64#2]
    +-input_scan=
      +-FilterScan
        +-column_list=[SimpleTypes.int64#2]
        +-input_scan=
        | +-TableScan(parse_location=18-29, column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        +-filter_expr=
          +-SubqueryExpr
            +-parse_location=49-133
            +-type=BOOL
            +-subquery_type=IN
            +-in_expr=
            | +-Literal(parse_location=36-39, type=INT64, value=123)
            +-subquery=
              +-ProjectScan
                +-parse_location=49-133
                +-column_list=[$aggregate.$agg1#31]
                +-input_scan=
                  +-DifferentialPrivacyAggregateScan
                    +-column_list=[$aggregate.$agg1#31]
                    +-input_scan=
                    | +-AggregateScan
                    |   +-column_list=[$aggregate.$agg1_partial#34, $group_by.$uid#35]
                    |   +-input_scan=
                    |   | +-TableScan(parse_location=102-133, column_list=SimpleTypesWithAnonymizationUid.[int64#20, uid#32], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
                    |   +-group_by_list=
                    |   | +-$uid#35 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#32)
                    |   +-aggregate_list=
                    |     +-$agg1_partial#34 :=
                    |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                    |         +-ColumnRef(parse_location=86-91, type=INT64, column=SimpleTypesWithAnonymizationUid.int64#20)
                    +-aggregate_list=
                    | +-$agg1#31 :=
                    | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                    | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#34)
                    | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
                    | +-$group_selection_threshold_col#38 :=
                    |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                    |     +-Literal(type=INT64, value=1)
                    |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
                    +-group_selection_threshold_expr=
                      +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#38)
==

# Differential privacy node in an expression subquery of another differential
# privacy node
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM ArrayWithAnonymizationUid
WHERE EXISTS(SELECT WITH DIFFERENTIAL_PRIVACY SUM(int64)
             FROM SimpleTypesWithAnonymizationUid)
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#17 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-201
    +-column_list=[$aggregate.aggregation_count#17]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.aggregation_count#17]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=68-93, table=ArrayWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=107-200
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=107-200
        |           +-column_list=[$aggregate.$agg1#16]
        |           +-input_scan=
        |             +-DifferentialPrivacyAggregateScan
        |               +-column_list=[$aggregate.$agg1#16]
        |               +-input_scan=
        |               | +-TableScan(parse_location=169-200, column_list=[SimpleTypesWithAnonymizationUid.int64#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |               +-aggregate_list=
        |                 +-$agg1#16 :=
        |                   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |                     +-parse_location=140-143
        |                     +-ColumnRef(parse_location=144-149, type=INT64, column=SimpleTypesWithAnonymizationUid.int64#5)
        |                     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-aggregate_list=
          +-aggregation_count#17 :=
            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              +-parse_location=33-38
              +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
[REPLACED_LITERALS]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM ArrayWithAnonymizationUid
WHERE EXISTS(SELECT WITH DIFFERENTIAL_PRIVACY SUM(int64)
             FROM SimpleTypesWithAnonymizationUid)

Rewrite ERROR: Reading the table SimpleTypesWithAnonymizationUid containing user data in expression subqueries is not allowed [at 4:19]
             FROM SimpleTypesWithAnonymizationUid)
                  ^
==

# Differential privacy query -> simple query -> differential privacy query
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM ArrayWithAnonymizationUid
WHERE EXISTS(
    SELECT int64
    FROM SimpleTypes
    WHERE 123 IN (
        SELECT WITH DIFFERENTIAL_PRIVACY SUM(int64)
        FROM SimpleTypesWithAnonymizationUid))
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#35 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-263
    +-column_list=[$aggregate.aggregation_count#35]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.aggregation_count#35]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=68-93, table=ArrayWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=112-262
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=112-262
        |           +-column_list=[SimpleTypes.int64#5]
        |           +-input_scan=
        |             +-FilterScan
        |               +-column_list=[SimpleTypes.int64#5]
        |               +-input_scan=
        |               | +-TableScan(parse_location=134-145, column_list=[SimpleTypes.int64#5], table=SimpleTypes, column_index_list=[1])
        |               +-filter_expr=
        |                 +-SubqueryExpr
        |                   +-parse_location=173-261
        |                   +-type=BOOL
        |                   +-subquery_type=IN
        |                   +-in_expr=
        |                   | +-Literal(parse_location=156-159, type=INT64, value=123)
        |                   +-subquery=
        |                     +-ProjectScan
        |                       +-parse_location=173-261
        |                       +-column_list=[$aggregate.$agg1#34]
        |                       +-input_scan=
        |                         +-DifferentialPrivacyAggregateScan
        |                           +-column_list=[$aggregate.$agg1#34]
        |                           +-input_scan=
        |                           | +-TableScan(parse_location=230-261, column_list=[SimpleTypesWithAnonymizationUid.int64#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |                           +-aggregate_list=
        |                             +-$agg1#34 :=
        |                               +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |                                 +-parse_location=206-209
        |                                 +-ColumnRef(parse_location=210-215, type=INT64, column=SimpleTypesWithAnonymizationUid.int64#23)
        |                                 +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-aggregate_list=
          +-aggregation_count#35 :=
            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              +-parse_location=33-38
              +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
[REPLACED_LITERALS]
SELECT WITH DIFFERENTIAL_PRIVACY COUNT(*) as aggregation_count
FROM ArrayWithAnonymizationUid
WHERE EXISTS(
    SELECT int64
    FROM SimpleTypes
    WHERE @_p0_INT64 IN (
        SELECT WITH DIFFERENTIAL_PRIVACY SUM(int64)
        FROM SimpleTypesWithAnonymizationUid))

Rewrite ERROR: Reading the table SimpleTypesWithAnonymizationUid containing user data in expression subqueries is not allowed [at 8:14]
        FROM SimpleTypesWithAnonymizationUid))
             ^
==

# Count star counting unique users.
# We should use this count for k_threshold.
[language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS,TABLE_VALUED_FUNCTIONS,TEMPLATE_FUNCTIONS,CREATE_TABLE_FUNCTION,DIFFERENTIAL_PRIVACY_THRESHOLDING]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
select  1
from SimpleTypesWithAnonymizationUid where (
select with DIFFERENTIAL_PRIVACY
count(*, contribution_bounds_per_group => (0, 1)) as count1
from SimpleTypesWithAnonymizationUid) > 0;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#26 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#26]
    +-expr_list=
    | +-$col1#26 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-SubqueryExpr
            | +-type=INT64
            | +-subquery_type=SCALAR
            | +-subquery=
            |   +-ProjectScan
            |     +-column_list=[$aggregate.count1#25]
            |     +-input_scan=
            |       +-DifferentialPrivacyAggregateScan
            |         +-column_list=[$aggregate.count1#25]
            |         +-input_scan=
            |         | +-TableScan(table=SimpleTypesWithAnonymizationUid)
            |         +-aggregate_list=
            |           +-count1#25 :=
            |             +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |               +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
            +-Literal(type=INT64, value=0)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#26 AS "$col1" [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#26]
    +-expr_list=
    | +-$col1#26 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-SubqueryExpr
            | +-type=INT64
            | +-subquery_type=SCALAR
            | +-subquery=
            |   +-ProjectScan
            |     +-column_list=[$aggregate.count1#25]
            |     +-input_scan=
            |       +-DifferentialPrivacyAggregateScan
            |         +-column_list=[$aggregate.count1#25]
            |         +-input_scan=
            |         | +-AggregateScan
            |         |   +-column_list=[$aggregate.count1_partial#29, $group_by.$uid#30]
            |         |   +-input_scan=
            |         |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#27], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
            |         |   +-group_by_list=
            |         |   | +-$uid#30 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#27)
            |         |   +-aggregate_list=
            |         |     +-count1_partial#29 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |         +-aggregate_list=
            |         | +-count1#25 :=
            |         |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |         |     +-ColumnRef(type=INT64, column=$aggregate.count1_partial#29)
            |         |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
            |         +-group_selection_threshold_expr=
            |           +-ColumnRef(type=INT64, column=$aggregate.count1#25)
            +-Literal(type=INT64, value=0)
